-00:00:01  >> HELLO, EVERYONE, WE'RE LOCATING THE SPEAKER SO
00:28:06   WE'RE A LITTLE BIT BEHIND AT THE MOMENT.
00:28:08   HOPEFULLY IT WON'T BE MORE THAN A FEW MORE
00:28:10   MINUTES.
00:28:11   SORRY ABOUT THAT.
00:28:11   THANKS.
00:28:12   >> HELLO, EVERYONE.
00:30:40   THANK YOU FOR COMING.
00:30:41   I'M ISAAC RICHIE, THE CHAIR FOR TODAY.
00:30:44   OUR FIRST SPEAKER IS KATHERINE SCOTT AND SINCE
00:30:48   WE'RE A LITTLE BIT LATE, WE'LL ASK FOR NO
00:30:50   QUESTIONS AT THE END BUT YOU CAN MEET HER AT THE
00:30:52   BACK.
00:30:53   SHE ALSO HAS TO KIND OF CLEAN EVERYTHING UP, SO
00:30:56   SHE'LL BE AT THE BACK AT THE END OF HER TALK, SO
00:30:59   IF YOU WANT TO ASK ANY QUESTIONS OR CONTINUE THE
00:31:04   DISCUSSION A LITTLE BIT, OKAY?
00:31:05   SO KATHERINE SCOTT.
00:31:07   [ Applause ]
00:31:14   >> HI, GUYS.
00:31:15   OKAY.
00:31:16   SO LET ME JUST SET THIS UP REAL QUICK.
00:31:23   IS EVERYONE HAVING FUN THIS MORNING?
00:31:33   EXCELLENT.
00:31:33   WONDERFUL.
00:31:36   ALL RIGHT.
00:31:39   SO I'M HERE -- FIRST OFF, I'M KATHERINE SCOTT,
00:31:44   HERE TO TALK TO YOU GUYS ABOUT ROBOTS AND
00:31:47   SPECIFICALLY ROS.
00:31:48   SO WHY SHOULD YOU LISTEN TO ME.
00:31:50   SO I'VE BEEN DOING THIS FOR GOING ON 15 YEARS NOW
00:31:58   AND I STARTED OFF WORKING ON THIS ROBOT, A
00:32:01   LEGGED-ROBOT, CALLED REX.
00:32:03   WENT TO A DEFENSE CONTRACTOR WHO DID ROBOTICS
00:32:05   WORK AND AUTOMATION WORK.
00:32:07   OOPS.
00:32:07   YES, KEEP THIS CONFIGURATION.
00:32:24   ALL RIGHT.
00:32:34   AND THEN WENT ON TO BUILD A ROBOTIC CAR AND ALSO
00:32:38   HANG OUT AND DID SOME POST-ROBOTICS WORK.
00:32:40   PRESENTLY, I'M ACTUALLY BUILDING A ROBOT THAT
00:32:43   DOES QUICK TURN PICK AND PLACE FOR PSB ASSEMBLY
00:32:46   SO THIS ROBOT, WHAT IT DOES IS IT BASICALLY HAS
00:32:51   THESE LITTLE TINY, TINY COMPONENTS RIGHT HERE AND
00:32:53   PLACES THEM ON CIRCUIT BOARDS, SO THE ROBOTS DO
00:32:56   THIS ALREADY BUT THEY'RE ALL OPTIMIZED TO BUILD
00:32:59   LIKE A MILLION OF SOMETHING.
00:33:00   SO I'M BUILDING A ROBOT THAT'S SMARTER THAN THOSE
00:33:03   ROBOT AND TAKES, YOU KNOW, ONLY A FEW MINUTES TO
00:33:06   SETS UP VERSUS A FEW DAYS SO YOU CAN DEVELOP
00:33:08   PROTOTYPES A LOT FASTER.
00:33:10   AND SO THE SHAMELESS PLUG HERE IS THAT I BUILD
00:33:12   THESE BOARDS, IF YOU HAVE BOARDS, LET ME KNOW, I
00:33:15   MIGHT BE ABLE TO MAKE THEM FOR YOU AND I'M ALSO
00:33:17   LOOKING FOR ENGINEERS.
00:33:21   SO, BEFORE WE TALK ABOUT ROBOTICS, LET'S TALK
00:33:25   ABOUT THE WEB.
00:33:26   SO MOST OF YOU, WHEN YOU WANT TO GO BUILD A
00:33:28   WEBSITE OR DO SOMETHING LIKE THAT, YOU DON'T GO
00:33:30   AND TRY TO DO EVERYTHING WITH FORCED PRINCIPLES,
00:33:33   YOU DON'T STARTS LOOKING AT SOCKET IO AND HOW DO
00:33:36   I TALK OVER THE INTERNET AND EVERYTHING LIKE
00:33:37   THAT, YOU JUST SORTS OF POP INTO FLASK AND DO
00:33:40   WHAT YOU WANT TO DO.
00:33:41   SO WHEN I TALK TO PEOPLE ABOUT ROBOTICS, I WHAT I
00:33:46   HEAR IS I WROTE THIS FROM SCRATCH OR I WROTE THIS
00:33:48   FROM SCRATCH OR FIGURED THAT OUT FROM PRINCIPLES.
00:33:50   WE SHOULDN'T HAVE TO DO THIS.
00:33:52   WE SHOULDN'T HAVE TO REINVENT THE WHEEL TO DO
00:33:56   ROBOTICS WORK.
00:33:57   TURNS OUT, YOU REALLY DON'T HAVE TO.
00:33:59   THERE IS THIS AWESOME ROBOTICS PACKAGE, CALLED
00:34:02   ROS.
00:34:03   AND WHAT ROS IS BASICALLY ROBOT-OPERATING SYSTEM,
00:34:07   A SET OF PACKAGES PRIMARILY FOR LINUX, WORKS
00:34:10   REALLY WELL ON OPEN-- AND ARM, THAT ALLOWS YOU TO
00:34:15   EASILY AND QUICKLY BUILD ROBOTS FROM SCRATCH.
00:34:17   HAS A HUGE AND WONDERFUL OPEN SOURCE COMMUNITY.
00:34:22   IT IS REASONABLY MATURE AND BATTLE-HARDENED.
00:34:26   BEEN RUNNING ON ROBOTS LIKE BAXTER AND ALL SORTS
00:34:29   OF DIFFERENT RESEARCH ROBOTS BUT ALSO THINGS IN
00:34:32   PRODUCTION AND IT'S REALLY, REALLY LIGHT AND
00:34:34   FLEXIBLE.
00:34:35   SO ALLOWS YOU TO INTERSPEARS C PLUSPLUS, AND ALSO
00:34:43   ALLOWS YOU TO ADD IN SOME JAVA AND JAVASCRIPT
00:34:45   SUPPORT.
00:34:46   SO WHAT IS IT INTERNALLY?
00:34:51   SO INTERNALLY ROS IS BASICALLY A PACKAGE MANAGER,
00:34:53   AND A LOT OF THAT'S APPED, SO I CAN APP IT TO ONE
00:34:57   OF THOUSANDS OF ROBOTICS PACKAGES FOR CAMERAS,
00:35:00   CAMERA DRIVERS, ALL SORTS OF STUFF LIKE THAT.
00:35:03   IT IS ALSO A BUILD SYSTEM CALLED CAT AND THAT
00:35:08   ALLOWS YOU TO DO ALL THE CPLUSPLUS, PYTHON
00:35:13   INTERSPERSION AND ALSO A DEPLOYMENT SYSTEM, SO I
00:35:17   HAVE THIS BIG HUGE ROBOT SYSTEM, ALLOWS ME TO
00:35:21   BRING STUFF UP, BRING IT DOWN, RESTART IT, ALL OF
00:35:23   THAT.
00:35:24   UNDERNEATH ALL THAT, I LIKE TO THINK OF IT AS A
00:35:27   PUBLISH SUBSCRIBE, SYSTEM, BASICALLY A MESSAGING
00:35:33   BOSS.
00:35:34   IT ALLOWS LITTLE INDEPENDENT NODES INSIDE THE
00:35:36   ROBOT TO TALK TO EACH OTHER BY EITHER PUBLISHING
00:35:38   OR SUBSCRIBING TO A MESSAGE.
00:35:40   ON TOP OF ALL THIS, WHAT YOU GETS FOR FREE IS
00:35:42   BASICALLY EVERY UTILITY YOU COULD EVER IMAGINE,
00:35:48   LOGGING, YOU CAN LOG JUST ABOUT EVERYTHING, AND
00:35:51   LOG DATA, LOTS AND LOTS OF DATA, I'VE LOGGED
00:35:54   TERABYTES AND TERABYTES OF DATA IN A SINGLE
00:35:57   EVENING ON ROS.
00:35:59   YOU CAN INTERSECT THAT DATA, YOU CAN -- OH, GEEZ,
00:36:02   GO THROUGH LOG FILES.
00:36:03   IT'S TONS AND TONS OF TOOLS THAT YOU CAN USE
00:36:06   EVERY DAY.
00:36:06   AND FINALLY, THERE'S JUST LOTS OF STANDARD
00:36:08   LIBRARIES ALLOWING TO YOU DO SO MANY THINGS, SO
00:36:11   THERE'S LIBRARIES FOR HANDLING IMAGE PROCESSING,
00:36:13   FOR HANDLING INVERSE KINEMATICS, FOR 3D MODELING,
00:36:18   FOR RUNNING VARIOUS SERVERS.
00:36:26   SO I CAN SIT HERE AND TALK ABOUT EVERYTHING ALL
00:36:28   DAY OR WE CAN DO SOME FUN ROBOTIC STUFF WHICH I
00:36:31   THINK YOU GUYS WOULD RATHER SEE SOME CODE BEING
00:36:34   WRITTEN AND DEPLOYED RATHER THAN ME CHATTING.
00:36:36   SO IF YOU IT IS UP HERE, I HAVE THIS LITTLE GUY.
00:36:39   THIS IS TWITCHEE.
00:36:40   I PICKED HIM UP FOR LIKE A HUNDRED BUCKS ON
00:36:43   AMAZON.
00:36:43   EASY A FOUR-ACTION EX ARM, A PALLETIZING ROBOT.
00:36:48   SO TWITCHEE IS JUST A MINIATURE MODEL OF
00:36:50   SOMETHING LIKE THIS KUKA ARM HERE THAT'S USED IN
00:36:53   MANUFACTURING SETTINGS TO DO PALLETIZATION, SO
00:36:56   PALLETIZATION IS LIKE WHEN YOU GET THIS GIANTS
00:36:59   PALLET OF SERIAL, THIS ROBOT PUTS ALL THE SERIAL
00:37:02   ON THAT PALLET BEFORE IT GETS SHIPPED OUT.
00:37:05   SUPER COOL.
00:37:05   SO WHAT IS RUNNING MY FRIEND TWITCHEE HERE.
00:37:12   SO UNDERNEATH, NOT A WHOLE LOT OF MAGIC HERE,
00:37:15   JUST AN ARDUINA, AND BASICALLY A LITTLE TINY
00:37:20   SHIELD AND ALL THE SHIELD IS DOING IS GIVING ME A
00:37:22   PLACE TO PLUG MY MOTORS INTO AND SHUNTING CURRENT
00:37:24   FROM A HIGHER VOLTAGE SOURCE.
00:37:26   THAT'S IT.
00:37:27   ALSO A KILL SWITCH SWITCH AND IT'S NOT BECAUSE
00:37:38   THE ROBOTS ARE GOING TO TAKE OVER, I DON'T CARE
00:37:41   HOW BIG OR LITTLE THEY ARE, THEY CAN ALWAYS HURT
00:37:43   YOU SO ALWAYS, ALWAYS, ALWAYS PUT A KILL SWITCH
00:37:46   ON YOUR ROBOT.
00:37:46   SO YOU GUYS WANT TO SEE ROS IN ACTION AND SEE HOW
00:37:49   IT PLAYS OUT?
00:37:50   OKAY.
00:37:50   SO, ALL THE PREREQUISITES I DID TO GET THIS
00:37:54   RUNNING, I INSTALLED ROS INDIGO ON DESK TOP, I
00:37:59   INSTEAD SOMETHING CALLED ROS SERIAL, WHICH WILL
00:38:01   ALLOW ME TO TALK TO THIS GUY.
00:38:03   I SET UP A CATKIN WORK SPACE AND THERE ARE
00:38:07   TUTORIALS THAT WILL WALK YOU THROUGH THAT.
00:38:10   I DOWNLOADED THE ARDUINO R.D. AND SET UP FOR ROS
00:38:13   WHICH MEANS RUNNING A PYTHON SCRIPT TO COPY FILES
00:38:16   OVER TO THE ADUINO R.D., AND LOADED SOME SOURCE
00:38:20   CODE.
00:38:21   SO FOR THIS FIRST STEP, WHAT WE'RE GOING TO DO IS
00:38:24   WE'RE GOING TO HAVE THE ARDUINO LEARN TO TALK TO
00:38:28   ROS.
00:38:28   AND SO WHAT THE ARDUINO WILL DO IS PUBLISH A
00:38:32   TOPIC, SO IT WILL PUBLISH A TOPIC CALLED STATE
00:38:34   AND STATE IS JUST FOUR INTEGERS, ONE
00:38:38   CORRESPONDING TO EACH MOTOR'S POSITION ON HERE.
00:38:40   AND THEN IT WILL ALSO LISTEN, LISTEN ON A TOPIC
00:38:44   FOR MESSAGES THAT ARE CALLED ROBOT, AND THAT'S
00:38:47   JUST WHERE WE SAY, ROBOT, I WANT YOU TO GO TO
00:38:49   THESE FOUR POSITIONS.
00:38:50   SO JUST TO MAKE THIS PERFECTLY CLEAR, ROBOT
00:38:54   LISTENS FOR STATE, UPDATES STATE, SENDS OUT A
00:38:59   MESSAGE ECHOING THE SAME THING.
00:39:00   I ADDED A SECOND NODE THAT PUBLISHES A HUMAN
00:39:03   READABLE MESSAGE.
00:39:04   AND SO WHAT'S GREAT ABOUT ALL THIS, ROS WILL
00:39:07   HANDLE ALL THAT MESSAGING PASSING FOR ME, I DON'T
00:39:10   HAVE TO THINK ABOUT IT, JUST DO IT AS A GIVEN.
00:39:13   ALL RIGHT.
00:39:13   SO IF YOU GUYS WILL BEAR WITH ME, ARE WE OKAY
00:39:15   LOOKING AT A LITTLE BIT OF C FOR ONE MINUTE?
00:39:18   I'LL SOMEHOW HOW THIS WORKS, LAST BIT OF C,
00:39:21   EVERYTHING ELSE WILL BE IN PYTHON AND XML.
00:39:23   SO HERE WE GO, BASICALLY IMPORTS FROM ROS
00:39:26   LIBRARIES, IMPORT AN N16 MULTI-ARRAY MESSAGE
00:39:31   WHICH WILL HOLD THE INTEGERS THAT WE MOVE BACK
00:39:33   AND FORTH.
00:39:33   AND THEN ALSO A STREAM MESSAGE WHICH IS A MESSAGE
00:39:38   IN A STREAM.
00:39:40   ALL I DO INSIDE THIS ARDUENO, SAY, ROS, THERE
00:39:44   WILL BE A NODE WHICH WILL WRAP THIS STUFF, THERE
00:39:46   WILL BE MESSAGES OF THAT FOUR IN KIND AND ALSO OF
00:39:50   A STRING AND I SAY, HEY, I'M GOING TO PUBLISH
00:39:52   THIS STATE MESSAGE, PUBLISH THE STATUS MESSAGE,
00:39:57   SO THEN YOU SPIN UP YOUR SERVEOs RIGHTS HERE,
00:40:01   CLIP THE VALUES CONNING IN AND OUT OF THAT AND
00:40:04   THEN SETS UP A CALL-BACK, AAND THIS CALL-BACK IS
00:40:07   BASICALLY WHENEVER YOU GET THIS ROBOT MESSAGE,
00:40:09   YOU GET THIS THING THAT SAYS "GO HERE," YOU MAKE
00:40:11   THE SERVOS GO HERE AND THAT'S WHERE THIS
00:40:16   CALL-BACK SETS GET AND WE DO IT IS STANDARD
00:40:18   ARDUENO THING WHERE YOU SET UP AND ATTACH THE
00:40:22   SERVEOs AND THEN WE INITIALLY EVERYTHING TO 90
00:40:26   DEGREES, MAKE THE SERVEOs GO THERE AND SPIN UP
00:40:29   ALL OF OUR ROS STUFF.
00:40:32   SET THE BAUD RATE, INITIALIZE THE NEED AND
00:40:34   ADVERTISE THAT WE ARE PUBLISHING A STATE AND
00:40:36   STATUS TOPIC.
00:40:37   NOW THEN AND FINALLY IN ARDUENO UPDATE LOOP, WE
00:40:43   GO THROUGH AND STAY, OH, THE STATUS OF THE ROBOT,
00:40:45   MAKE THIS A STRING AND PUBLISH IT OUT.
00:40:47   SO YOU GUYS GOT THAT?
00:40:48   DOES THAT MAKE SENSE?
00:40:49   KIND OF?
00:40:50   ALL RIGHT.
00:40:51   SO WE'LL SPIN THIS UP.
00:40:52   PLUG THIS IN.
00:40:55   IF WE WANTED TO LAUNCH THIS AND HAVE ROS ON MY
00:41:15   DESK TOP CONNECT TO WHAT'S RUNNING ON HERE, WE
00:41:17   HAVE TO RUN ROS ON MY MACHINE.
00:41:19   SO TO DO THAT, WHAT WE USE IS CALLED A LAUNCH
00:41:21   FILE.
00:41:22   SO LAUNCH FILES ARE BASICALLY PILES OF XML THAT
00:41:25   ALLOW TO YOU DEPLOY BITS OF CODE.
00:41:27   IT ALLOWS YOU TO START NODES, CHANGE NODES NAMES,
00:41:31   CHANGE TOPIC NAMES, SET PARAMETERS, ALL THE SORT
00:41:35   OF STUFF THAT YOU WOULD PUT IN A BASH SHELL TO
00:41:37   START UP A PROGRAM.
00:41:39   AND SO YOU CAN ALSO SORT OF BUILD HIERARCHIES OF
00:41:41   THESE SO IF YOU HAVE A WHOLE CAMERA SUBSYSTEM ON
00:41:44   YOUR ROBOT, YOU COULD DEPLOY THE CAMERA SUBSYSTEM
00:41:46   AS A SINGLE FILE IN A LAUNCH FILE.
00:41:50   IN THIS CASE, WHAT WE SEE HERE IS THE LAUNCH FILE
00:41:53   FOR THE SERIAL CONTROLLER, HEY, THERE IS A THING
00:41:56   CALLED ROS SERIAL PYTHON, I WANT YOU TO START THE
00:41:59   SERIAL NODE, ARDUINO SERIAL, IT WILL BE ON THIS
00:42:03   PARTS AND HAVE THIS BOT.
00:42:05   WHAT WE CAN DO IS DO ROS LAUNCH.
00:42:14   SERIAL CONTROLLER, AND SURPRISINGLY, NOTHING WILL
00:42:20   HAPPEN.
00:42:21   BECAUSE WE HAVEN'T TOLD THE ROBOT TO DO ANYTHING
00:42:24   YET.
00:42:24   BUT WHAT WE CAN DO ASK WE CAN WRITE A LITTLE
00:42:27   PROGRAM THAT SAYS, OH, HEY, I KNOW THAT THERE'S
00:42:29   THIS ROBOT CONTROLLER OR NOT SERIAL CONNECTION,
00:42:31   TELL IT TO DO SOMETHING MUCH SO THIS IS PYTHON,
00:42:34   BACK TO PYTHON.
00:42:37   WHAT WE DO HERE IS WE IMPORT THE SORT OF ARRAY
00:42:40   MESSAGE, YOU SEE THE N16 MULTI-ARRAY, SAME THING
00:42:43   WE USED ON THE CPLUSPLUS SIDE, WE CAN IMPORT THAT
00:42:47   AS AN OBJECT AND SPIN UP THIS PYTHON PROGRAM.
00:42:50   SAY I'M GOING TO CALL THIS SIMPLE PUBLISHER.
00:42:53   I'M GOING TO PUBLISH TO THE ROBOT, SO THIS IS ON
00:42:55   THE ROBOT, THIS IS WHAT TAKES IN THOSE FOUR Ns,
00:42:58   I'M GOING TO PUBLISH TWO SO THE ROBOT CAN HEAR
00:43:01   IT.
00:43:01   I'M GOING TO CREATES THIS MESSAGE AND THEN I'M
00:43:03   GOING TO GO BASICALLY STEP THROUGH A COUPLE OF
00:43:05   DIFFERENT JOINT ANGLES AND MAKE THE ROBOT GO TO
00:43:08   THOSE.
00:43:08   SO LET'S GIVE THIS A SHOT.
00:43:15   OOPS.
00:43:22   SO IT'S JUST GOING TO MOVE AROUND A LITTLE BIT.
00:43:29   NOTHING BIG HERE, RIGHT?
00:43:31   YOU'RE NOT -- THIS IS NOT IMPRESSIVE, LIKE, OKAY
00:43:33   THE ROBOT JUST MOVED AROUND.
00:43:35   BIG DEAL, RIGHT?
00:43:37   SO, YES, THIS IS TRUE.
00:43:39   WE CAN ACTUALLY MAKE THIS A LOT MORE INTERESTING
00:43:41   VERY, VERY QUICKLY WITH ROS.
00:43:44   SO LESSON TWO.
00:43:44   LET'S WIRE THIS PUPPY UP, SO INSTEAD OF JUST
00:43:47   SENDING IT MESSAGES TO MOVE AROUND, TO MOVE TO
00:43:49   THESE DIFFERENT JOINT AGE HE IS, WHAT IF WE
00:43:51   ACTUALLY RUN IT OFF OF ONE OF THESE THINGS
00:43:53   ANYTHING YOU'RE ALL FAMILIAR WITH THESE FROM
00:43:55   PLAYING WITH PLAY STATION SO ROS HAS A PACKAGE
00:44:00   THAT WILL ALLOW YOU TO SET UP A JOY PARTICULAR
00:44:02   AND WHAT THIS PACKAGE WILL DO IS YOU SPIN IT UP,
00:44:05   IT WILL PUBLISH JOY STICK MESSAGES TO A TOPIC.
00:44:07   I'M GOING TO WRITE A NODE THAT READS THE JOY
00:44:11   STICK TOPIC AND PUBLISHES TO THE ROBOT TOPIC AND
00:44:14   SAYS WHENEVER YOU HEAR THIS, MOVE THE ROBOT LIKE
00:44:16   THIS.
00:44:16   AND YOU CAN DO THAT REALLY, REALLY QUICKLY IN
00:44:18   ROS.
00:44:18   SO TO GIVE YOU AN EXAMPLE HERE, ALL I'M DOING IS
00:44:21   I'M PULLING IN THAT -- I'M GOING TO CREATE
00:44:23   ANOTHER NODE AND SO THIS NODE IS GOING TO USE THE
00:44:28   SAME MESSAGE AND WILL USE THE NEW MESSAGE CALLED
00:44:30   "JOY."
00:44:31   SO THIS NEW NODE IS ACTUALLY A CLASS VERSUS A
00:44:34   LITTLE TINY SCRIPT BECAUSE IT WILL BE RUNNING
00:44:36   SORT OF INDEFINITELY.
00:44:37   AND SO ALL I DO IS SET UP BASICALLY THIS THING
00:44:40   RUNS INDFL, HERE'S THE SHUTDOWN METHOD.
00:44:43   SO WHEN YOU SHUT DOWN, BRING THE ROBOT TO A NICE
00:44:45   NEUTRAL STATE.
00:44:46   SUBSCRIBE TO BOTH JOY STICK STATE OR THE JOY
00:44:51   STICK MESSAGE TOPIC, AND ALSO TO THE ROBOT STATE
00:44:53   TOPIC, THAT IS TO SAY, WHENEVER THE ROBOT'S
00:44:55   POSITION CHANGED, JUST MAKE SURE YOU CHECK WHAT
00:44:58   IT IS.
00:44:58   AND THEN BASICALLY YOU SEND THIS THING INTO AN
00:45:01   INFINITE LOOP WAITING FOR THE CALLBACKS ON BOTH
00:45:04   THE JOY STATE, RIGHT HERE, AND OF THE ROBOT
00:45:07   STATE.
00:45:07   SO IF WE LOOK DOWN HERE, IN THIS METHOD, THE
00:45:14   ROBOT WILL BASICALLY GET THE UPDATE STATE, AND
00:45:20   OVER HERE, THIS IS WHAT HAPPENS WHEN YOU ACTUALLY
00:45:22   TELL IT TO MOVE VIA COMMAND FROM THE JOY STICK.
00:45:24   BASICALLY, I LOOK AT THE CURRENT STATE OF THE
00:45:27   ROBOT, IF IT'S NOT THERE, I SET IT.
00:45:29   I CREATES THE VARIABLES FOR EACH OF THE MOTORS,
00:45:33   ONE, TWO, THREE AND FOUR, AND EVERY TIME THE
00:45:35   MOTOR GETS AN UPDATE, I BASICALLY INCREMENT THE
00:45:39   POSITION OF THE MOTOR.
00:45:40   SO IF I HIT "UP" OVER HERE, BASICALLY WHAT
00:45:43   HAPPENS IS I GET A LITTLE "UP" SIGNAL OR JUST
00:45:46   MOVE ONE OF THESE SERVEOWES JUST A LITTLE BIT AND
00:45:51   THEN DO SOME BOOK CLEANING TO CLEAN EVERYTHING UP
00:45:55   HERE, CHECK TO SEE FOR CHANGES IN THE ROBOT
00:45:57   STATUS.
00:45:58   ON THE DON'T MOVE THE ROBOT IF THERE'S NO CHANGES
00:46:00   TO BE DONE, DON'T SEND A MESSAGE.
00:46:01   AND IF THERE IS A CHANGE, I BASICALLY PUBLISH
00:46:04   THAT POSITION OUT JUST LIKE THE LAST EXAMPLE I
00:46:06   GAVE YOU.
00:46:06   AND THEN I WRAP UP WITH A LITTLE BOOKKEEPING,
00:46:13   SAY, HEY, IF YOU SHUT DOWN, SEND THE ROBOT TO A
00:46:15   NEUTRAL STATE AND IF THIS IS AN EXECUTED NODE,
00:46:18   SPIN UP THE NODE.
00:46:19   THEN WHAT I HAVE TO DO IS ADD A COUPLE OF LINES
00:46:22   TO THE LAUNCH FILE I SHOWED YOU BEFORE.
00:46:24   HERE I HAD ANOTHER NODE CALLED "JOY," AND RUNS
00:46:30   THE JOY STICK, AND I SET UP THE PARAMETERS TO RUN
00:46:33   THE JOY STICKS WHERE THE DEAD ZONE IS ON THE JOY
00:46:35   STICK AND REPEAT.
00:46:36   THEN I SPIN UP THE NODE WE JUST WROTE.
00:46:39   SAY "START THIS NODE."
00:46:41   SO LET'S GIVE THIS A SHOT.
00:46:44   KILL THIS.
00:46:44   ROS LAUNCH.
00:46:45   ALL RIGHT.
00:47:07   IS NOW WE CAN MOVE IT AROUND WITH THIS THING.
00:47:12   OKAY.
00:47:12   SO THAT WASN'T TOO BAD, RIGHT?
00:47:13   NOT BAD FOR 15 MINUTES OF CODING OR SOMETHING.
00:47:15   BUT THIS IS STILL ONLY KIND OF INTERESTING.
00:47:21   SO LET'S KEEP PUSHING IT A LITTLE BIT AND WE'LL
00:47:24   GET TO SOMETHING INTERESTING BY THE END.
00:47:26   ALL RIGHT.
00:47:26   SO I'M SHOWING YOU PUBLISH AND PRESCRIBE
00:47:32   PRIMITIVES BUT ROS HAS DIFFERENT ONES FOR DOING
00:47:34   DIFFERENT BEHAVIORS.
00:47:35   SO THERE ARE BUILT INTO ROS SORT OF BUILT ON TOP
00:47:38   OF THE PUBLISHED SUBSCRIBE MODEL ARE BASICALLY
00:47:41   SERVICES AND ACTIONS.
00:47:42   SO A SERVICE IS SOMETHING WHERE YOU GO AND SEND A
00:47:44   MESSAGE, SOMETHING HAPPENS, USUALLY FAIRLY
00:47:46   QUICKLY AND THEN A RESPONSE COMES BACK.
00:47:49   THAT'S IT.
00:47:49   YOU ONLY NEED TO DO IT ONCE OR EVERY ONCE IN A
00:47:52   WHILE.
00:47:52   AN ACTION IS A FAIRLY MORE COMPLEX THING SO YOU
00:47:54   CAN THINK OF THIS AS YOUR ROBOT DOING SOME
00:47:57   INTERESTING BEHAVIOR AND IN ACTION, YOU SEND A
00:48:00   GOAL.
00:48:00   YOU SEND, ROBOT, I WANT YOU TO MOVE OVER HERE, I
00:48:02   WANT YOU TO DO THIS THING.
00:48:04   THE ROBOT WILL SEND YOU PERIODIC UPDATES WHILE
00:48:06   IT'S DOING THAT AND THEN SEND YOU BASICALLY THE
00:48:09   END STATE AND YOU'RE ALSO -- YOUR NODE CAN
00:48:12   PREEMPT THAT GOAL BEHAVIOR, SO IF THE ROBOT IS
00:48:14   MOVING TOWARD SOME GOAL AND GOING TO CRASH INTO
00:48:17   SOMEBODY AND FLAIL AND BURN UP, YOU CAN HIT
00:48:19   "CANCEL" AND IT WILL GO AWAY AND STOP DOING WHAT
00:48:22   IT'S DOING.
00:48:23   BOTHER OF THESE USE THE ROS GENERATOR WHICH IS
00:48:26   THIS CODE THAT ALLOWS YOU TO USE CPLUSPLUS AND
00:48:30   PYTHON CODES.
00:48:31   SO FOR THIS EXAMPLE, WHAT I'M GOING TO DO IS
00:48:33   BASICALLY GOING TO TEACH THE ROBOT HOW TO --
00:48:38   WHENEVER I TOUCH A BUTTON ON THE JOY STICK, HOW
00:48:41   TO GO A PARTICULAR POSITION AND RECORD THAT
00:48:44   POSITION AND THEN FOR ANOTHER BUTTON ON THE JOY
00:48:48   STICKS I'LL CREATE AN ACTION.
00:48:50   WHEN I HIT THAT ACTION, IT WILL PLAY ALL THESE
00:48:53   AWAY POINTS THAT I WILL GIVE THE ROBOT AS IT'S
00:48:55   GOING ALONG.
00:48:56   THE BIT TO KNOW HERE IS I HAVE TO DEFINE MY
00:48:58   MESSAGES IN A LITTLE BIT OF YAMMEL.
00:49:01   SO FOR THE SERVICE, ALL I'M SAYING IS TAKE IN A
00:49:04   STRING, THE STRING WILL BE THE FILE THAT YOU WANT
00:49:05   TO SAVE EVERYTHING TO.
00:49:06   AND THEN RETURN RESULT, JUST TELL ME WHAT
00:49:08   HAPPENED, AND FOR THE ANIMATION PLAYER ACTION,
00:49:13   WHAT I'LL TAKE IN IS A FILE NAME AND A STEP SIZE,
00:49:15   WHICH IS BASICALLY HOW LONG TO WAIT BEFORE
00:49:17   PLAYING EACH COMMAND.
00:49:19   IT WILL RETURN A RESULT, RIGHT, WHICH IS JUST THE
00:49:22   STRING, HEY, I DID IT, NO, I DIDN'T DO IT, THIS
00:49:25   THING HAPPENED ALONG THE WAY.
00:49:26   AND THEN DURING THE COURSE OF THE PROCESS OF
00:49:30   PLAYING THE ANIMATION, I'LL BASICALLY GET AN
00:49:32   UPDATE STRING OF WHAT THE ROBOT'S CURRENTLY
00:49:34   DOING.
00:49:35   TO MAKE ALL THIS WORK, I THEY HAD TO DO A LITTLE
00:49:37   BIT OF MODIFICATION TO MAKE SURE CPLUSPLUS KNOWS
00:49:41   ABOUT IT, BASICALLY SETTING UP A COUPLE OF LINES
00:49:43   IN A MG FILE AND I NEED TO RUN CAT SCAN WHICH I
00:49:49   WON'T DO BECAUSE IT TAKES A SECOND BUT FAIRLY
00:49:52   STRAIGHTFORWARD.
00:49:53   LET'S LOOK AT THAT CODES FOR THIS ARM CONTROLLER,
00:49:55   SO THIS IS GOING TO BE EXACTLY LIKE THE THING WE
00:49:57   JUST WROTE.
00:49:58   IT'S GOING TO BE THE PYTHON CLASS THAT'S RUNNING
00:50:00   AND THAT IS HAAS THIS RUNNING PROCESS AND WHAT
00:50:02   YOU DO IS ROS BASICALLY IMPORTS THIS ARM MESSAGE,
00:50:05   THE SERVICE MESSAGE, WHICH IS GOING TO BE THE
00:50:08   SERVICE, THE WAY POINT SERVICE.
00:50:10   AND THEN IT WILL ALSO, FROM THIS OWI ARM MESSAGE
00:50:14   WILL INPUT THE ACTION MESSAGES.
00:50:15   AND SO HERE WE CREATE OUR NODE, ON
00:50:19   INITIALIZATION, WE GET SOME PARAMETERS.
00:50:22   THIS IS ONE OF THE UTILITIES IN ROOST, BASICALLY,
00:50:24   TO GET PA RAMS FROM THE ROS SYSTEM PLUS.
00:50:28   SO ONE OF THE PARAMS I'M SETTING IS WHERE I'M
00:50:32   SAVING IT AND I'M SAVING IT ON MY DESKTOP.
00:50:35   NEXT THING UP IS WHEN YOU GET A WAY POINT, WHEN
00:50:39   IT STARTS, IT WILL BE CALLED A WAY POINT, YOU'LL
00:50:41   GET A WAY POINT MESSAGE AND YOU WILL MAKE A CALL
00:50:43   BACK TO THIS FUNCTION.
00:50:45   YOU WILL ALSO SUBSCRIBE TO THE ROBOT'S STATE AND
00:50:48   POSITION STUFF, JUST LIKE WE DID BEFORE, JUST
00:50:51   LIKE WE DID IN THE LAST NODE, AND FINALLY, YOU'LL
00:50:53   CREATE WHAT'S CALLED AN ACTION SERVER AND THE
00:50:55   ACTION SERVER WILL ACTUALLY REPLAY THE
00:50:57   ANIMATIONS, AND ALL THIS SAYS IS YOU'RE GOING TO
00:50:59   HAVE SOMETHING CALLED PLAY ANIMATION, IT WILL
00:51:01   TAKE A PLAY ANIMATION ACTION OBJECT, IT WILL
00:51:04   EXECUTE THIS CALLBACK.
00:51:06   SO HERE WE GO IN A STATE UPDATE, LIKE WE SAW
00:51:11   BEFORE, COMING FROM THE ROBOT.
00:51:12   A SPIN UTILITY WHICH BASICALLY KEEPS THIS PROCESS
00:51:16   GOING THE ENTIRE PERIOD.
00:51:18   AND FINALLY, A HANDLE SAFE STATE -- THIS IS WHERE
00:51:22   WE ACTUALLY SAVE THE STATE TO THE FILE.
00:51:25   SO ALL THIS IS IS GETTING THE INPUT MESSAGE,
00:51:29   LOOKING FOR THE FILE NAME INSIDE THIS REQUEST
00:51:31   THING WHICH IS PASSED IN.
00:51:32   SAVING THAT FILE OUT, OR CREATING THAT FILE IF WE
00:51:35   NEED TO AND THEN CREATING RETURN MESSAGE.
00:51:37   THE PLAY ANIMATION STATE WILL ALSO JUST BE ALMOST
00:51:43   NEARLY IDENTICAL, RIGHT?
00:51:44   I HAVE THIS GOAL MESSAGE THAT COMES IN, FROM THAT
00:51:47   GOAL MESSAGE I GET A FILE NAME AND A STEP SIZE
00:51:50   AND I BASICALLY PLAY THE RESULT.
00:51:51   AND WHAT I DO IS JUST CHECK, SO IF I CHECK AND
00:51:56   THE FILE'S NOT THERE, I CREATE THIS RESULT
00:51:58   MESSAGE AND SAY I COULD NOT FIND THE FILE, PASS
00:52:02   IT BACK TO THE ROBOT, THE THING THAT CALLED ME.
00:52:03   OTHERWISE, I CONTINUE.
00:52:05   I LOAD UP THAT FILE AND THEN I START PLAYING ALL
00:52:08   THE WAY THROUGH.
00:52:09   SO ONCE I PLAY IT, I JUST SAY, GO HERE, GO HERE,
00:52:12   WAIT, GO HERE, WAIT.
00:52:14   OKAY.
00:52:18   SO TO DEPLOY THAT ON TO THE JOY STICK, IT'S VERY,
00:52:21   VERY SIMPLE, VERY SIMILAR TO CREATING THE MAIN
00:52:24   NODE.
00:52:25   IF THERE'S TIME, I MIGHT SKIM OVER THIS A ALSO
00:52:28   BIT BUT I BIND THESE METHODS THAT CALL THESE
00:52:30   FUNCTIONS.
00:52:31   AND I CREATE THE MESSAGES THAT GO WITH THEM.
00:52:33   AND THEN I JUST ADD THIS ONE LINE BACK INTO MY
00:52:37   LAUNCH FILE, SO ALL OF THIS ENDS UP LOOKING LIKE
00:52:49   THIS.
00:52:49   SO NOW WHAT I CAN DO IS IF I PUSH HERE, I'LL
00:52:58   RECORD A WAY POINT, RECORD A WAY POINT, RECORD A
00:53:02   WAY POINT, AND THEN I CAN GO AND PLAY THEM BACK.
00:53:06   RIGHT?
00:53:06   ALL RIGHT.
00:53:07   SO WE'VE BUILT UP SOME PRIMITIVES, THE ROBOT IS
00:53:11   MOVING AROUND, WE'RE ABLE TO DO SOMETHING
00:53:13   SLIGHTLY MORE COMPLEX BUT THE ROBOT HAS NO
00:53:15   FEEDBACK.
00:53:15   THE ROBOT IS JUST FLAILING AROUND IN THE MIDDLE
00:53:17   OF SPACE, HAVE NO IDEA WHERE IT'S GOING OR WHAT
00:53:19   IT'S DOING.
00:53:22   SO WE'RE DOING TO ADD CAMERAS TO THIS ROBOT.
00:53:26   OH, ONE LAST THING.
00:53:27   I KNOW THIS LOOKS COOL RUNNING IN THE SHELL BUT
00:53:29   WE WANT ALL THIS STUFF TO RUN ON THE WEB, SO
00:53:32   THERE IS THERE IS SOMETHING TO CHECK OUT WHEN
00:53:33   THIS IS ALL OVER CALLED ROBOT WEB TOOLS,
00:53:36   BASICALLY A BRIDGE BETWEEN THE ROS MESSAGE BOX
00:53:38   THAT I'VE BEEN PLAYING ON AND JAVASCRIPT, SO YOU
00:53:41   CAN BUILD ALSO JAVASCRIPT APPS THAT RUN ON TOP OF
00:53:45   YOUR ROBOT.
00:53:46   LOTS OF FUN, CHECK IT OUT.
00:53:48   SO NOW WE'RE GIVING THE ROBOT SOME INFORMATION,
00:53:50   SOME FEEDBACK.
00:53:50   WE'LL GIVE IT A CAMERA.
00:53:52   AND IN ROS, RUNNING CAMERAS IS LIKE THE EASIEST
00:53:55   THING IN THE WORLD.
00:53:55   LIKE YOU HAVE RUN EVERYTHING FROM $10,000 FLOOR
00:53:58   CAMERAS ALL THE WAY DOWN TO $20, THIS LITTLE
00:54:01   PIDDLY CAMERA UP HERE.
00:54:03   THEY ALMOST ALL WORK, THEY GENERALLY WORK PRETTY
00:54:05   WELL OUT OF THE BOX AND I'VE NEVER SEEN SUCH A
00:54:07   LARGE DIVERSITY OF HARDWARE THAT YOU CAN SORT OF
00:54:10   PLUG AND PLAY.
00:54:11   BALLADINES, LASER SCANNERS, ALL THE COOL TOYS
00:54:14   THAT YOU COULD EVER WANT ARE IN THERE.
00:54:17   ROS CAMERAS TALK OF A MESSAGE IMAGE AND BASICALLY
00:54:20   PUBLISHED OVER THE MESSAGE BUS AND YOU CAN
00:54:22   BASICALLY MARSHAL THEM IN AND OUT OF OPEN CV AND
00:54:26   THEY USE NO LIDS, WHICH ARE SORT OF LIKE ROS
00:54:29   NODES BUT BASICALLY ALLOW TO YOU DO ALL YOUR
00:54:31   PROCESSING WITHOUT MOVING WHOLE CHUNKS OF MEMORY
00:54:34   AROUND, YOU JUST MOVE A POINTER AROUND.
00:54:36   SO TO DO THIS, YOU BASICALLY DO -- INSTALL, ROS
00:54:41   INDIGO CAM AND IMAGE PROC.
00:54:44   THAT GIVES YOU ALL THE TOOLS TO DO ROTATION,
00:54:47   SCALING, THAT SORT OF THING.
00:54:49   YOU CAN ALSO SET UP A DIFFERENT KIND OF CAMERA.
00:54:52   SO HERE IS WHAT LAUNCHING A CAMERA LOOKS LIKE IN
00:54:55   ROS.
00:54:55   BASICALLY, YOU CREATES A CAMERA OBJECT, YOU TELL
00:54:59   IT I WANT IT TO BE THIS BIG, THIS WIDE, GO THIS
00:55:02   FAST, I WANT IT TO USE THIS CALIBRATION FILE AND
00:55:06   RIGHT HERE IS SOME CODE THAT SPINS UP A COUPLE OF
00:55:08   VIEWS OF THE CAMERA.
00:55:09   SO LET'S...
00:55:12   IF I COULD SPELL.
00:55:29   ALL RIGHT.
00:55:29   SO IF YOU GUYS CAN SEE HERE, THIS IS MY CAMERA
00:55:32   OVER HERE.
00:55:34   AND SO IT'S JUST STREAMING AUTOMATICALLY, YOU
00:55:36   KNOW, SIMPLE LAUNCH FILE, WORK RIGHT OUT OF THE
00:55:39   BOX.
00:55:39   I HAVE GOT NO PYTHON HERE BUT WE HAVE A CAMERA,
00:55:42   IT'S RUNNING.
00:55:44   SO I WOULD BE REMISS IF I DIDN'T SHOW YOU HOW TO
00:55:47   DO SOME PROCESSING ON THIS IN PYTHON, SO LET'S
00:55:49   TAKE A LOOK AT THAT.
00:55:50   TO GET IMAGES INTO PYTHON FROM THIS BUS, WHAT
00:55:54   YOU'RE GOING TO USE IS SOMETHING CALLED THE OPEN
00:55:56   CV BRIDGE IN ROS AND WHAT IT DOES IS BASICALLY
00:55:58   TAKES IT OFF THE BRIDGE, MARSHALS IT INTO WHAT'S
00:56:01   CALLED A CV 2 NON-PI ARRAY, AND THAT'S IT.
00:56:09   SO WHAT I'M GOING TO DO HERE JUST AS A TOY
00:56:11   EXAMPLE, I HAVE THIS RED MILK CAP THAT I BROUGHT
00:56:16   IN FOR MY MILK CAP EARLIER, SO I'M GOING TO TEACH
00:56:20   THE ROBOT TO FIND THE MILK CAP, IT WILL FIND THE
00:56:24   IMAGE, FIND THIS AND OUTPUT ITS PIXEL POSITION
00:56:27   AND SIZE.
00:56:28   SO THIS IS A SUPER EASY PYTHON SCRIPT TO WRITE IN
00:56:32   ROS.
00:56:33   ALL I NEED TO DO IS INPUT THIS CV BRIDGE, IMPORT
00:56:37   THE POINT IN IMAGE MESSAGES WHICH ARE ROS
00:56:40   STANDARD MESSAGES, SO ROS HAS ALL THESE GAME FREE
00:56:44   MESSAGE AND BASIC WRAP-AROUND SENSOR MESSAGES AND
00:56:47   SOME OTHER BOOKKEEPING.
00:56:48   I'M GOING TO USE SIMPLE CV BECAUSE I WROTE IT AND
00:56:51   I LIKE USING IT SO HERE'S OUR IMAGE PROCESSING
00:56:54   EXAMPLE CLASS.
00:56:55   ALL THIS IS, SAME STRING, CREATES A CV BRIDGE,
00:56:59   SETS UP MY INPUT TOPICS WHICH I'LL LOOK FOR
00:57:02   MESSAGES IN CAMERA IMAGE REC COLOR, IMAGE REC
00:57:06   COLOR MEANS I WANT THE COLOR RECTIFIED IMAGE,
00:57:09   WHICH IS IF YOU HAVE A FISH-EYED CAMERA MAKES ALL
00:57:13   THE LINES LOOK STRAIGHT AGAIN.
00:57:14   I'M ALSO GOING TO GET A PARAMETER SAYING WHERE I
00:57:16   WANT YOU TO OUTPUT MY POSITION STUFF.
00:57:18   AND THEN I'M BASICALLY GOING TO CREATES A
00:57:22   PUBLISHER, WHICH IS IT IS OUTPUT IMAGE AND
00:57:24   ANOTHER ONE WHICH IS THE OUTPUT POSITION.
00:57:26   I'M GOING TO SAY, I'M GOING TO PUTS POSITIONS ON
00:57:28   THIS TOPIC, IT WILL BE A POINT TYPE AND THEN I'M
00:57:31   GOING TO SUBSCRIBE TO THE INPUT CAMERA MESSAGE.
00:57:34   SO I WANT TO SAY, I WANT TO LOOK AT THIS INPUT
00:57:36   TOPIC, IT WILL BE AN IMAGE AND WHEN I GET AN
00:57:39   IMAGE, SHOW COLORED STUFF.
00:57:41   SPIN MY NODE UP TO RUN AND THEN OUR ONLY
00:57:44   CALL-BACK IS THIS SHOW-COLORED STUFF.
00:57:46   SO WE DO BASICALLY THE MESSAGE MARSHALING.
00:57:52   THEN WE MOVE ALL THE THIS INTO SIMPLE CVISM AGE,
00:57:56   I DO A COPY.
00:57:57   HERE IS ALL OF MY IMAGE PROCESSING, SO WHAT ALL
00:58:00   I'M DOING IS BASICALLY HUE DISTANCE, LOOKING FOR
00:58:05   COLOR, FIND SOMETHING RED.
00:58:06   I DO A CONNECT COMPONENT, WHICH IS BASICALLY
00:58:08   THRESHOLD INTO A TWO-TONE IMAGE.
00:58:10   FIND THE BIGGEST THING THAT IS REDS AND GIVE ME
00:58:12   THE POSITION OF IT.
00:58:13   DRAW THAT THING THAT YOU FOUND WITH THE YELLOW
00:58:17   OVERLAY.
00:58:18   RIGHT HERE.
00:58:19   I BASICALLY TAKE THE POSITION OF THE THING THAT
00:58:22   CAME OUT OF SIMPLE CV, GIVE IT A POSITION AND A
00:58:25   SIZE AND THEN I PUBLISH IT.
00:58:27   AND SO -- AND A LITTLE BIT OF BOILER PLATE SO IF
00:58:34   YOU WATCH THIS...
00:58:37   SO NOW GOING TO SPIN UP ONE WINDOW AND I MIGHT
00:58:48   NEED THE LIGHTS FOR THIS, WE'LL SEE.
00:58:50   HERE'S MY RED BOTTLE CAP AND HERE, HOPEFULLY,
00:58:53   PLEASE WORK...
00:58:55   MIGHT GET IT.
00:58:56   MIGHT NEED THE LIGHTS.
00:58:59   I'LL USE MY FLASHLIGHT.
00:59:01   FIND IT.
00:59:04   HERE IT IS.
00:59:05   SO IF I GO SWITCH OVER HERE, I CAN ACTUALLY TAP
00:59:07   DIRECTLY INTO THE ROS MESSAGE BUS...
00:59:13   OH, NO.
00:59:18   SO HERE I'M GOING TO HAVE ROS ACTUALLY TELL ME
00:59:22   EVERY SINGLE TOPIC THAT'S BEING PUBLISHED RIGHT
00:59:25   NOW AND I CAN SEE DOWN HERE IN THE BOTTOM, HEY,
00:59:26   HERE'S A POSITION MESSAGE.
00:59:29   WONDERFUL.
00:59:29   SO IF I GO ROS TOPIC, ECHO, FLASH POSITION, IT
00:59:36   WILL ACTUALLY GIVE ME THE CENTROID OF MY RED
00:59:41   THING.
00:59:42   I GRAB THIS -- SEE IF WE CAN DO A SIDE-BY-SIDE
00:59:47   HAVE THE HERE WE GO.
00:59:51   SO I CAN GET THE POSITION OF THIS THING RUNNING
00:59:53   AROUND AND IT'S A MESSAGE, SO IF YOU'RE BUILDING
00:59:55   A ALSO TOY ROBOT AT HOME, THIS IS GREATS, RIGHTS?
00:59:57   YOU CAN GIVE THIS TO A KID AS A PACKAGE AND SAY,
01:00:00   GO LEARN TO TEACH YOUR ROBOT TO FOLLOW A RED BALL
01:00:02   OR SOME SORT OF TRIVIAL TEST LIKE THAT.
01:00:04   SO WE'VE GOT SOME BASICS, SOME INPUT, SOME
01:00:11   OUTPUT, WE CAN CONTROL THE ROBOT.
01:00:12   WOULD YOU GUYS LIKE TO START DOING SOMETHING
01:00:15   INTERESTING LIKE HAVING A ROBOT FIGURE OUT WHAT
01:00:17   IT LOOKS LIKE?
01:00:17   ALL RIGHT.
01:00:18   SO I'M GOING TO TALK ABOUT WHAT IS CALLED IN ROS
01:00:21   AND SOME OTHER SORT OF PARADIGMS, IT'S CALLED AN
01:00:24   URDF, RIGHT?
01:00:25   IT'S SWEDISH, STANDS FOR UNIVERSAL ROBOT
01:00:29   DESCRIPTION FORMAT.
01:00:30   WHAT THAT IS IS BASICALLY A PILE OF XML THAT
01:00:33   DEFINES THE GAME FREE OF YOUR ROBOT.
01:00:35   SO IT SAYS, HEY, THE ROBOT HAS AN ARM HERE, HEY,
01:00:38   IT'S GOT A MOTOR HERE, THIS IS WHAT MY ROBOT
01:00:41   LOOKS LIKE, THE JOINT UPON WHICH IT MOVES, IT
01:00:47   ALLOWS IT TO DO THOUGHTFUL GAME FREE ABOUT HOW
01:00:50   THIS STUFF WORKS AND WHAT'S GREAT ABOUT ROS IS
01:00:52   THERE'S EXPORTERS IN CAD FOR THIS, SO I CAN GO TO
01:00:56   SOLID WORKS AND TAKE MY ROBOT MODEL AND EXPORT
01:00:57   IT.
01:00:58   I DID NOT DO THAT FOR THIS ROBOT.
01:00:59   I DID THIS BY HAND BUT I DID IT BY HAND SO I CAN
01:01:02   SHOW YOU WHAT IT LOOKS LIKE REALLY, REALLY
01:01:04   QUICKLY.
01:01:05   SO ROBOTS ARE MADE OUT OF JOINTS, THESE RIGID
01:01:08   BOTS AND JOINTS WHICH ARE THESE THINGS WHICH ARE
01:01:12   MOVING AROUND ABOUT AN AXIS, SO WHAT THE URDF
01:01:15   DOES IS BASICALLY ALLOW YOU TO DEFINE YOUR JOINTS
01:01:18   AND YOUR LINKS.
01:01:19   SO IT LOOKS JUST LIKE THIS, SO JUST A PILE OF
01:01:24   XML, SAY, HEY, THE ROBOT'S BOTTOM BASE HERE IS
01:01:27   JUST ABOUT THIS BIG.
01:01:28   THEN THERE'S ANOTHER LINK RIGHT HERE, WHICH IS
01:01:32   THE FIRST PIECE OF THE ARM.
01:01:34   THERE'S ANOTHER LINK UP HERE WHICH IS THE SECOND
01:01:36   PIECE OF THE ARM.
01:01:37   AND THEN THERE'S ANOTHER LINK UP HERE, WHICH IS
01:01:39   THE THIRD PIECE OF THE ARM.
01:01:41   AND THEN THERE ARE JOINTS WHICH ARE THE JOINT
01:01:44   RIGHT HERE, THE JOINT RIGHT HERE, THE JOINT RIGHT
01:01:46   HERE, AND THE JOINT RIGHT HERE.
01:01:48   AND I JUST DEFINE THESE IN XML, KIND OF TEDIOUS,
01:01:52   WON'T GO THROUGH IT BUT YOU CAN GO THROUGH AND DO
01:01:55   THAT AND WHAT YOU END UP WITH IS BEING ABLE TO
01:01:56   RENDER A MODEL OF YOUR ROBOT BY JUST ADDING A FEW
01:01:59   SIMPLE LINES BACK TO YOUR LAUNCH FILE.
01:02:02   SO WHAT I SAY IS, HEY, I WANT TO YOU TAKE THIS
01:02:05   ROBOT DESCRIPTION FORMAT THAT I JUST LEARNED AND
01:02:08   SPIN IT UP AND PUT IT INSIDE THIS VISUALIZATION
01:02:11   FRAME CALLED ARVIS.
01:02:13   SO IF YOU DO THIS RIGHT, AND YOU MAKE YOUR
01:02:15   PERFECT INCANTATION, IT WILL START LOOKING LIKE
01:02:32   START LOOKING LIKE THIS, SO I HAVE A MODEL -- NOT
01:02:35   PERFECT BUT AN APPROXIMATION, RIGHT?
01:02:36   SO I CAN MOVE HIM AROUND, DO THIS, I CAN GO LIKE
01:02:40   THIS, ACTUALLY LOOK AT WHERE ALL THE JOINTS ARE.
01:02:42   SO THAT'S COOL, RIGHT?
01:02:44   WE CAN SEE OUR ROBOT.
01:02:45   WE THINK WE CAN PROBABLY PICK OUT SOME REALLY
01:02:49   COOL STUFF FOR THIS BUT WE NEED TO WIRE IT UP TO
01:02:52   TWITCHEE, RIGHT, SO YOU WANT TO MIRROR IT UP SO
01:02:54   IT MATCHES WHAT'S GOING ON HERE?
01:02:56   YAY.
01:02:56   ALL RIGHT.
01:02:57   SO THE WAY YOU WIRE THIS UP IS YOU CREATES WHAT'S
01:03:01   CALLED A JOINT STATE PUBLISHER.
01:03:02   SO A JOINT STATE PUBLISHER BASICALLY IS SAYING,
01:03:05   HEY, YOU NAMED ALL THESE JOINTS HERE SO I'M GOING
01:03:08   TO PUBLISH THEIR POSITION AND I WILL ACTUALLY
01:03:11   MAKE THE MODEL MATCH WHAT YOU TELL ME TO.
01:03:14   I DON'T NEED TO KNOW WHERE EVERYTHING IS, JUST
01:03:15   THE KEY PARTS THAT MOVE ARE.
01:03:17   TO DO THIS, I CREATE ANOTHER NODE, THIS IS CALLED
01:03:20   JOINT STATE REPUBLISHER.
01:03:21   IT'S GOT A COUPLE LITTLE PARAMETERS IN HERE THAT
01:03:23   I USE TO TWEAK STUFF AND ALSO GOT WHAT'S CALLED A
01:03:26   T.F. LISTENER.
01:03:28   AND IT BASICALLY LISTENS TO THE ROBOT OUTPUT, THE
01:03:32   ROBOT STATUS OUTPUT AND ALSO LISTENS TO CONSENT
01:03:35   MESSAGES TO WHERE THE ROBOT SHOULD BE.
01:03:37   AND IT ALSO HAS ANOTHER TOPIC CALLED THE JOINT
01:03:41   TOPIC AND WE PUBLISH TO THE JOINT TOPIC.
01:03:43   WE SAY EVERY TIME THE ROBOT UPDATES, YOUR JOINTS
01:03:45   ARE HERE, YOUR JOINTS ARE HERE, YOUR JOINTS ARE
01:03:48   HERE AND BASICALLY ORVIS IS LISTENING TO WHERE
01:03:51   THE JOINTS ARE AND RENDERING THAT.
01:03:52   MAKE IT LOOK LIKE THIS MY JOINTS ARE HERE, MAKE
01:03:54   IT LOOK LIKE THIS.
01:03:55   SO TO DO THIS, YOU BASICALLY WAIT AND YOU CREATE
01:03:58   A CALL-BACK METHOD FOR EVERY TIME THE ROBOT
01:04:01   PUSHES ITS JOINT STATE.
01:04:03   AND HERE IS WHERE THAT HAPPENS.
01:04:08   SO ALL I DO IS -- SO THIS IS A ALSO BIT OF CODE,
01:04:11   THIS IS A LITTLE BIT MORE EXPANSIVE, I'M GOING TO
01:04:14   SKIP OVER IT BUT WHAT IT DOES IS MAKES SURE THE
01:04:16   HEAD IS ALWAYS FACING DOWN BUT WHAT I DO IS TAKE
01:04:18   THE INPUT MESSAGE POSITION, I CONVERTS IT FROM
01:04:23   GRADIENTS -- FROM DEGREES TO GRADIENTS, I DO A
01:04:26   LITTLE BIT OF MATH ON IT.
01:04:27   I SET THAT UP.
01:04:29   AND I BASICALLY CREATE THIS JOINT STATE MESSAGE
01:04:32   HERE AND I GIVE IT EACH OF THE JOINT NAMES AND I
01:04:35   SET EACH OF THE JOINT VALUES AND THEN I JUST
01:04:38   PUBLISH THAT, AND THAT'S IT.
01:04:39   AND THEN TO CONSTRUCT THIS INTO A LAUNCH FILE, WE
01:04:42   JUST ADD A COUPLE MORE LINES, RIGHTS?
01:04:44   SO WE ALREADY HAVE THE ARE ADVICE STUFF IN HERE,
01:04:48   THE OTHER STUFF WE'VE WRITTEN, I JUST SPIN UP
01:04:50   THIS NODE WHICH IS RIGHT DOWN HERE, WHICH IS THE
01:04:52   ARM CONTROLLER -- WAIT.
01:04:55   A JOINT STATE PUBLISHER.
01:04:58   SO LET'S SEE THIS RUNNING.
01:05:01   GOOD MORNING.
01:05:11   SO, NOW WE CAN ACTUALLY HAVE A ROBOT THAT MATCHES
01:05:15   WHAT IT'S DOING IN HERE.
01:05:16   [ Applause ]
01:05:17
01:05:17   >> THANK YOU.
01:05:18   NOW IT'S GETTING IMPRESSIVE.
01:05:21   ALL RIGHT.
01:05:22   SO THE GUY UP FRONT IS GOING TO TELL ME I AM
01:05:25   RUNNING A ALSO BIT LATE SO THE NEXT BIT OF THIS
01:05:30   IS HOW ABOUT WE WIRE UP THIS CAMERA THAT I SET UP
01:05:33   TO DO SOMETHING ACTUALLY INTERESTING WITH THIS?
01:05:35   SO LET'S PUT ALL THIS TOGETHER.
01:05:40   SO WE HAVE THIS LIKE INTUITIVE NOTION THAT IF I
01:05:43   HAVE A CAMERA UP HERE AND I HAVE A ROBOT AND I
01:05:45   KNOW IN THE -- AND THE ROBOT KNOWS WHERE THE
01:05:47   CAMERA IS AND WE KNOW WHERE THE ROBOT'S ARM IS,
01:05:50   WE CAN KINDS OF, LIKE, FIGURE OUT WHERE EACH
01:05:54   PIXEL MAPS TO, THERE'S ALWAYS A BUNCH WHERE YOU
01:05:58   CAN'T DO THAT QUITE CORRECTLY, BUT YOU HAVE SORT
01:06:00   OF AN INTUITIVE NOTION AND YOU WOULD LIKE TO BE
01:06:03   ABLE TO TELL THE ROBOT WHERE IT IS IN THE WORLD.
01:06:06   AND SO WHAT I'VE DONE HERE IS I WOULD LIKE TO BE
01:06:08   ABLE TO TELL THE ROBOT WHERE IT IS WITH RESPECT
01:06:10   TO MY WHOLE WORLD AND TELL IT WHERE CERTAIN
01:06:13   THINGS ARE.
01:06:13   SO ONE SOLUTION TO THIS IS I COULD SIT HERE ALL
01:06:18   DAY WITH A YARDSTICK AND A TAPE MEASURE AND
01:06:23   FIGURE OUT WHERE ALL THESE THINGS ARE AND MEASURE
01:06:25   LIKE HOW FAR THIS CAMERA IS FROM THIS JOINT AND
01:06:27   ALL THAT KIND OF STUFF.
01:06:28   BUT WE'RE LAZY SOFTWARE ENGINEERS, I DON'T WANT
01:06:31   TO DO THAT, EVER, RIGHT?
01:06:32   SO THERE'S ACTUALLY A COUPLE OF PACKAGES I CAN
01:06:35   LEAN ON TO SOLVE ALL THESE PROBLEMS FOR ME.
01:06:37   SO WHAT EERIE GOING TO USE ARE CALLED
01:06:39   A.R. MARKERS, SO WHAT EAR WE' GOING TO DO IS USE
01:06:42   THE CAMERA TO FIND THE A.R. MARK YEARS SO THESE
01:06:45   ARE LIKE SUPER HIGH CONTRAST, BIG PATTERNS THAT
01:06:47   YOU CAN DO IMAGE PROCESSING ON PRETTY QUICKLY,
01:06:50   YOU KNOW, HOW BIG THEY ARE.
01:06:51   YOU HAVE A BUNCH OF POINTS ON THERE, AND SO YOU
01:06:54   CAN ACTUALLY FIGURE OUT WHERE THE CAMERA IS
01:06:56   POSITIONED WITH RESPECT TO ONE OF THESE.
01:06:58   SO IF THE CAMERA SEES THIS AND THE CAMERA IS
01:07:00   CALIBRATED, CAN SAY, OH, I'M HERE WITH RESPECT TO
01:07:03   THAT.
01:07:03   AND I CAN ALSO SAY, OH, THE CAMERA'S WITH RESPECT
01:07:07   TO THIS IS OVER HERE, SO I CAN DO THE INVERSE
01:07:10   TRANSFORM AND I CAN ALSO TIE THAT TRANSFORM TO
01:07:13   OTHER BITS IN THE SCENE SO I CAN ACTUALLY TIE
01:07:16   THIS GUY TO SORT OF THIS A.R. MARKER THAT'S
01:07:19   HOLDING OFF BEHIND THE ROBOT.
01:07:21   AND THIS IS JUST A PACKAGE IN ROS, LIKE THIS IS,
01:07:24   LIKE -- OKAY, THIS ONE I INSTALLED FROM SOURCE,
01:07:27   BUT WASN'T A BIG DEAL, USED WHAT'S CALLED A
01:07:30   W.S. TOOL, SO YOU SAY TOOL, GET THIS PACKAGE FROM
01:07:33   GET AND BUILD IT AND YOU DO SOME CONFIGURATION.
01:07:36   SO I ADDED A COUPLE OF LINES HERE TO MY LAUNCH
01:07:39   FILE.
01:07:40   GOING TO SAY, HEY, ROBOT, T.F., BETWEEN YOU AND
01:07:44   THIS MARKER IS THIS BAR AND THE ROTATION FROM
01:07:47   THIS MARKER TO YOU IS LIKE THIS.
01:07:49   AND THEN I FIRE UP THIS A.R. TOOL KIT MARKER,
01:07:54   PACKAGE AND IT JUST RUNS, BASICALLY SUCKS OFF ALL
01:07:59   OF THE DATA FROM MY CAMERA, GOES THROUGH, FIGURES
01:08:02   OUT WHERE ITS POSITION IS WITH RESPECT TO THE
01:08:04   MARKER AND SHOOTS THAT TO RBUS TO SAY YOU'RE
01:08:09   HERE.
01:08:10   A LITTLE BIT OF CONFIGURATION I HAVE TO DO WHERE
01:08:12   I'M GOING TO SAY HERE I HAVE THREE MARKERS.
01:08:15   LET'S TAKE A LOOK AT THIS.
01:08:16   I'M GOING TO NEED THE HOUSE LIGHTS FOR THIS, IF
01:08:18   THAT'S POSSIBLE.
01:08:18   SO THIS WON'T ACTUALLY SPIN UP BECAUSE -- IF I
01:08:40   CAN GET THE LIGHTS HERE, HOPEFULLY THIS WILL
01:08:42   WORK.
01:08:42   SINCE IT WON'T SPIN UP UNTIL IT ACTUALLY SEES THE
01:08:45   MARKER BUT IF I USE THIS -- THERE IT GOES.
01:08:48   LET'S TAKE A LOOK AT THIS.
01:08:50   SO YOU CAN SEE, I KNOW WHERE THE IMAGE S I KNOW
01:08:52   WHAT'S IN THE IMAGE AND I HAVE A MODEL OF MY
01:08:55   ROBOT -- THERE WE GO.
01:08:56   NOW WHAT I CAN DO, I CAN ACTUALLY PROJECT MY
01:08:59   ROBOT MODEL ON TO MY IMAGE RIG, WHICH YOU CAN SEE
01:09:04   WHERE THIS COULD GET KIND OF USEFUL, RIGHT,
01:09:06   BECAUSE NOW I CAN FIND THE OTHER LITTLE MARKERS
01:09:09   IF I WERE TO PUT THEM ON BOXES OR OTHER THINGS MY
01:09:12   ROBOT WANTED TO PICK UP.
01:09:13   CAN WE FIND IT?
01:09:14   MAYBE.
01:09:14   SO IF WE HAVE A MARKER FOR HERE, RIGHT, AND I
01:09:22   HAVE A MARKER FOR THE ROBOT AND I KNOW WHERE THIS
01:09:24   IS TO HERE AND I KNOW WHERE THIS THING IS IN MY
01:09:28   ENTIRE SCENE, ROS MAKES IT SUPER SIMPLE TO FIGURE
01:09:30   OUT THE MATH HERE.
01:09:31   SO I CAN BASICALLY SAY THE POSITION DIFFERENTIAL,
01:09:33   THE DIFFERENCE IN POSITION BETWEEN THE TIP OF MY
01:09:35   ROBOT RIGHT OUT HERE AND THIS THING THAT I LAID
01:09:39   IN THE SCENE, I CAN FIGURE THAT OUT ALL IN A
01:09:41   FUNCTION CALL WHICH IS PRETTY SWEET.
01:09:45   JUST TAKE A LOOK AT THIS A LITTLE BIT MORE
01:09:48   BECAUSE YOU GUYS DIDN'T SEE THIS.
01:09:50   IT'S MOVING AROUND AND SO IN ROS, WHAT I CAN DO
01:09:55   IS I CAN MAKE A SINGLE FUNCTION CALL HERE TO
01:09:59   T.F., AND SO T.F. IS THIS LIBRARY THAT SAYS GIVE
01:10:03   ME THE POSITION FROM A TO B, SO FOR A MARKER IN
01:10:06   THE SCENE, ALL THE WAY TO THE ROBOT, SINGLE
01:10:08   FUNCTION CALL TO NOTE THE POSITION DIFFERENCE.
01:10:12   SO IN PYTHON, IT LOOKS JUST LIKE THIS.
01:10:17   AND WE CAN ALSO RUN IT -- RUN IT IN THE COMMAND
01:10:22   LINE, SO I'LL DO THAT REALLY QUICK.
01:10:24   HOPEFULLY THIS WORKS, HOPEFULLY YOU CAN SEE THE
01:10:26   RIGHT MARKER.
01:10:26   SO THIS IS ACTUALLY THE POSITION DIFFERENCE
01:10:34   BETWEEN THIS MARKER AND THE -- OF THIS ROBOT AND
01:10:39   THAT'S A FUNCTION CALLED IN-PYTHON.
01:10:41   AND THAT'S IT.
01:10:42   PRETTY POWERFUL.
01:10:43   SO LAST LITTLE BIT HERE AND I WON'T SHOW ALL OF
01:10:49   THIS BUT JUST AS A TASTE OF WHAT'S AVAILABLE TO
01:10:51   YOU, THERE IS FINALLY A ROS PACKAGE CALLED "MOVE
01:10:54   IT."
01:10:55   WHAT THAT DOES IS REVERSE KINEMATIC SOLVER FOR
01:10:57   THIS.
01:10:57   SO IF I HAVE THIS POSITION RIGHT HERE AND I KNOW
01:11:00   WHAT MY ROBOT LOOKS LIKE AND WHERE THIS IS HERE,
01:11:02   THIS INVERSE KINEMATICS PACKAGE, THE HARD JOB OF
01:11:07   THE MATHEMATICS, IS GO FROM HERE TO HERE.
01:11:10   SO I RAN A LITTLE BIT LATE SO I HAVE TO WRAP UP
01:11:12   HERE BUT IF YOU GUYS ARE INTERESTED, COME TALK TO
01:11:14   ME.
01:11:15   THANK YOU.
01:11:43   [ BREAK ]
01:45:34



















