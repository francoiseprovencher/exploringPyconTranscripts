           APRIL 10, 2015 PYCON, 12:10 - 12:40  - GOT TEXT
           FROM ANA AT 12:20, THERE IS A CONFUSION, CAN I
           JUMP BACK ON...
01:32:18
-00:00:00  THERE IS CRITICISM OF HTTP2, I'M CALLING IT OUT
00:00:11   BECAUSE I'M CERTAIN A LOT OF PEOPLE IN THE ROOM
00:00:13   HAVE READ THE VARIOUS DOCUMENTS TAKING SHOTS AT
00:00:16   THE PROTOCOL.
00:00:19   POLLEN AND CAMP IS A BSD DEVELOPER, LEAD
00:00:22   DEVELOPER OF THE VARNISH HTTM PROTOCOL AND HE'S
00:00:26   CIRCULATED A LOT OF WRITING ABOUT HOW TERRIBLE IT
00:00:29   IS, AND I MYSELF AM VERY GLAD HE DOESN'T HAVE A
00:00:32   PROTOCOL DESIGN CLASS FOR ME TO FLUNK OUT OF.
00:00:34   BUT THE QUESTION IS, WHY, WHY IS THERE SO MUCH
00:00:40   NEGATIVITY ABOUT HTTP2 WHEN IT HAS SO MANY NICE
00:00:44   THINGS IN IT?
00:00:45   THE REAL ANSWER IS MUCH LIKE HTTP1, IT'S A FLAWED
00:00:49   PROTOCOL, IT'S NOT PERFECT.
00:00:51   I WOULD CONTEND THAT NO PROTOCOL EVER IS, AND SO
00:00:53   WE'VE TRADED SOME DOWNSIDES FOR OTHER DOWNSIDES.
00:00:57   SOME GOOD EXAMPLES.
00:00:58   IT'S REALLY TRICKY TO REASON ABOUT.
00:01:01   SO HTTP1 TO ONE HAS AS ONE OF ITS GREAT JOYS,
00:01:07   VERY EASY TO LOOK AT A WAY TO SPOT WHAT THE
00:01:09   PROBLEM IS, SO THE BRAIN, HUMAN BRAIN IS GREAT AT
00:01:13   PATTERN MATCHING AND WE CAN LOOK AT THE TEXT
00:01:15   RESPONSE AND SAY THAT CAN'T POSSIBLY BE RIGHT
00:01:17   BECAUSE WEIRD THING HERE IS GOING WRONG AND IT'S
00:01:20   HARD FOR CODES TO SPOT THAT.
00:01:22   BUT THE WORST PART IS, HPPT2 MAINTAINS REALLY
00:01:26   EXTENSIVE STATE IN ITS CONNECTIONS, SO IN HPPP1
00:01:30   TO ONE, YOU COULD HOP INTO THE FIFTH REQUEST IN A
00:01:32   SEQUENCE AND IT WOULD STAND ALONE, YOU COULD
00:01:34   UNDERSTAND IT IN COMPLETE CONTEXT WITH NO EXTRA
00:01:36   TOOLS.
00:01:37   AND YOU CAN'T DO THAT IN HPP-- HTTP-2, SO THE
00:01:42   FIFTH REQUEST WILL SAY RESEND HEADER 5.
00:01:44   WHAT THE HELL IS HEADER 5?
00:01:47   I HAVE NO IDEA WHAT THAT WAS.
00:01:48   SO YOU NEED COOPERATION FROM YOUR TOOLS AND THIS
00:01:53   MEANS THAT BASICALLY TOOLS NOW NEED TO BE ABLE TO
00:01:56   DROP THEIR CONNECTION STATE INTO DEBUG LOGS FOR
00:02:00   TO YOU SUCCESSFULLY DEBUG AND MOST TOOLS HAVE NOT
00:02:03   WRITTEN THAT FUNCTION.
00:02:03   THIS ALSO MEANS THAT IT'S REALLY HARD TO DEBUG,
00:02:08   YOU NEED TO DO A TON OF INTERRUPT TESTING, THAT'S
00:02:10   THE ONLY WAY YOU CAN BE SURE YOU'VE IMPLEMENTED
00:02:13   CORRECTLY IS GET EVERY OTHER IMPLEMENTATION AND
00:02:16   RUN YOUR CODES AGAINST THEM.
00:02:17   THERE ARE SOME GREAT RESOURCES FOR DOING THIS BUT
00:02:19   YOU HAVE TO FIND THEM.
00:02:20   IT'S GOT SOME REALLY TERRIBLE AWKWARD EDGE CASES
00:02:23   AND THESE CAME OUT BECAUSE WE WERE REQUIRED TO
00:02:24   MAINTAIN COMPATIBILITY WITH HPT-- HTTP1.1.
00:02:30   SO ANYTHING YOU COULD SEND IN ONE HAD TO BE ABLE
00:02:34   TO BE SENT IN TWO.
00:02:35   THE BIGGEST PROBLEM IS HEADERS SO, HPP-- HTTP2
00:02:40   FRAMES, THEY HAVE A MAXIMUM LENGTH, IN PRACTICE,
00:02:42   16 KILOBYTES.
00:02:43   AND ITS TURNS OUT YOU CAN HAVE A SINGLE HEADER
00:02:46   THAT'S MORE THAN 16 KILOBYTES LONG.
00:02:48   COBRA WILL GENERATE HEADERS THAT ARE THAT LARGE
00:02:52   FOR THEIR TOKENNIZATION.
00:02:53   NOW, FOR ME, I WOULD CALL THAT A GOOD REASON TO
00:02:56   ABANDON COBRAS BUT UNFORTUNATELY, I CAN'T MAKE
00:03:00   THOSE MANDATES SO INSTEAD WE HAVE TO ALLOW IT AND
00:03:03   THIS MEANS IN PRACTICE, YOU CAN FREEZE AN HTTP2
00:03:05   CONNECTION DEAD BY SENDING OFFICIALLY LARGE
00:03:09   HEADERS AND NOT FINISHING THEM OFF.
00:03:10   THIS IS WE'LL QUITE TRICKY.
00:03:13   I FOUND ONE FOR PYTHON, THOUGH, FUNDAMENTALLY
00:03:16   HTTP2 IS INHERENTLY CONCURRENT, IT'S GOT ONE TCP
00:03:20   STREAM DOWN WHICH IT SENDS DATA AND ALSO CONTROL
00:03:22   FRAMES SO THINGS LIKE IS THIS CONNECTION STILL
00:03:25   ALIVE, PLEASE INCREASE YOUR FLOW CONTROL WINDOW,
00:03:28   PLEASE CHANGE YOUR HEADER COMPRESSION STATE.
00:03:30   YOU NEED TO PROCESS THESE PROMPTLY.
00:03:32   THEY NEED -- YOU NEED TO BE PUMPING THAT
00:03:34   CONNECTION ALL THE TIME AND THIS IS REALLY
00:03:36   DIFFICULT IN SYNCHRONOUS PROGRAMMING LIKE WHAT A
00:03:38   LOT OF US DO IN PYTHON.
00:03:39   IF YOU'RE USED TO USING REQUESTS, YOU'RE GOING TO
00:03:42   FIND THIS REALLY VERY TRICKY AND WE'VE GOT TO DO
00:03:45   A LOT OF CLEVER WORK TO MAKE SURE THAT WE CAN
00:03:48   HANDLE THIS APPROPRIATELY.
00:03:49   IT'S GOING TO BE REALLY HARD, I'M PROBABLY NOT
00:03:54   SMARTS ENOUGH TO SOLVE IT.
00:03:55   IF THERE IS ANYONE, COME TALK TO ME OR EVEN IF
00:03:58   YOU'RE NOT SMART ENOUGH TO SOLVE IT, BUT WOULD
00:04:02   LIKE TO HELP, I CAN'T DO IT ON MY OWN.
00:04:04   I WOULDN'T BE SURPRISED TO FIND THAT HTTP2 IS THE
00:04:07   PRIMARY MOTIVATOR BEHIND A BIG A-SYNCS I.O., AND
00:04:14   IF YOU HAVEN'T USED IT, NICHOLAS IS TALKING ABOUT
00:04:17   IT, DOING AN INTRODUCTION, I RECOMMEND GOING
00:04:19   BECAUSE IF YOU WORK WITH THE WEB, YOU PROBABLY
00:04:20   WANT TO START USING IT.
00:04:21   BUT DESPITE ALL OF THESE THINGS, IN A LOT OF
00:04:24   CASES, HTTP2 IS REALLY GOOD AND AS AN EXAMPLE OF
00:04:28   HOW GOOD, I WANT TO BRING UP THIS.
00:04:30   THIS IS FROM THE GO PROGRAMMING LANGUAGE HTTP2
00:04:34   WEB PAGE.
00:04:35   THIS IS A GOPHER TILES DEMONSTRATION.
00:04:37   YOU CAN LOAD THIS UP NOW IF YOU GOOGLE GOPHER
00:04:39   TILES, YOU CAN FIND THIS FOR THOSE OF YOU WHO
00:04:41   HAVE LAPTOPS IN FRONTS OF YOU.
00:04:42   SO EACH OF THESE IMAGES IS MADE UP OF 180 TILED
00:04:45   SMALLER IMAGES.
00:04:46   THE ONE ON THE LEFT IS BEING SERVED OVER HTTP1.1.
00:04:50   THE ONE ON THE RIGHT OVER 2.
00:04:52   THESE ARE BOTH FROM CHROME.
00:04:53   SO IF YOU'VE GOT CHROME OR FIREBOX HTTP2 WORKS
00:04:57   RIGHT NOW, YOU CAN LITERALLY TEST THIS WHILE I
00:04:59   GO.
00:05:00   SO I'M GOING TO START THEM BOTH AT THE SAME TIME
00:05:02   AND BY AT THE SAME TIME, I MEAN I'M GOING TO GIVE
00:05:04   HTTP1.1 A SECOND OF HEAD START.
00:05:07   AND WE'LL SEE WHICH LOADS FIRST.
00:05:10   THAT WAS EASY.
00:05:14   AND THIS IS CONSISTENTLY TRUE.
00:05:16   SO THERE'S LOTS OF -- YOU CAN'T REALLY SEE
00:05:19   BECAUSE I COMPRESSED THE HELL OUT OF THESE IMAGES
00:05:21   BUT THERE IS A TON OF VARIOUS OPTIONS YOU CAN ADD
00:05:24   LATENCY TO THE REQUESTS, SO THAT WAS THE ZERO
00:05:26   LATENCY DEMO, THE BEST CASE FOR HTTP1.1, AND 2
00:05:32   SMOKES IT OUT OF THE WATER.
00:05:33   I TESTED THIS WITH MY IMPLEMENTATION IN PYTHON
00:05:37   AND I COULD -- THE ONLY WAY I COULD GET 1.1 TO BE
00:05:40   AS FAST WAS TO START 180 CONCURRENT CONNECTIONS,
00:05:43   SO I HAD TO DOWNLOAD THEM ALL IN PARALLEL AT THE
00:05:47   SAME TIME, THAT DOES NOT SCALE TO EVERYONE ON THE
00:05:49   INTERNET DOING THAT.
00:05:49   SO HTTP2 HAS SOME SERIOUS ADVANTAGES.
00:05:54   ALL RIGHT.
00:05:54   SO IT'S REALLY GOOD, HOW DO YOU GET TO PLAY
00:05:57   AROUND WITH IT?
00:05:58   SO THERE ARE AT LEAST 34 CURRENT IMPLEMENTATIONS
00:06:01   OF HTTP2.
00:06:04   THIS IS NOT ALL OF THEM, THIS IS A SMALL LIST,
00:06:07   THEY'VE GOT VARIOUS EXCITING NAMES, SOMEONE'S ON
00:06:11   THIS LIST THAT ARE WORTH FLAGGING UP, THERE IS
00:06:14   HYPER, PYTHON CLIENT LIBRARY, I'LL TALK ABOUT
00:06:16   THAT IN A SECOND BECAUSE IT'S MINE.
00:06:18   AND, THEREFORE, WORTHY OF YOUR TIME.
00:06:21   THERE'S MGHTTP2.
00:06:26   THAT'S THE OPEN SOURCE REFERENCE IMPLEMENTATION
00:06:29   FOR HTTP2.
00:06:31   DOES ALL THE THINGS A CLIENT, A SERVER, A PROXY,
00:06:35   WHATEVER YOU WANT IT TO DO, ITS ONLY DOWNSIDE IS
00:06:37   IT'S A NIGHTMARE TO COMPILE, IT HAS A LOT OF
00:06:40   DEPENDENCIES BUT IF YOU CAN INTERRUPT WITH THAT,
00:06:43   YOU CAN PROBABLY INTERRUPT WITH A LOT OF OTHER
00:06:45   TOOLS.
00:06:47   FIREFOX AND CHROME, BOTH HAVE IMPLEMENTATIONS, IF
00:06:51   YOU GO TO TWITTER ON THOSE, YOU'RE USING 2,
00:06:54   BECAUSE TWITTER HAS AN IMPLEMENTATION, AS WELL.
00:06:58   WIRESHOCK CAN DECODE THE FRAMES, WHICH WOULD BE
00:07:00   USEFUL EXCEPT FOR THE FACT THAT HTTP2 IS ALMOST
00:07:04   ALWAYS SERVED OVER ALTS.
00:07:07   CURL AND LIP CURL CAN USE 2, THEY USE 2'S STUFF
00:07:12   SO YOU NEED NGH 2 FIRST BUT THEN YOU CAN USE IT
00:07:16   WITH CURL STRAIGHT OUT OF THE BOX.
00:07:18   INTERNET EXPLORER IS WORKING ON ONE FOR THOSE OF
00:07:21   YOU WHO LOVE MICROSOFT AND THERE ARE PLENTY OF
00:07:23   OTHERS FLOATING AROUND FOR YOUR FAVORITE
00:07:25   LANGUAGES.
00:07:25   IN FACT, PYTHON IS ONE OF THE LANGUAGES THAT IS
00:07:27   UNDERSERVED BY IMPLEMENTATIONS, THERE ARE MORE
00:07:29   IMPLEMENTATIONS FOR HASKELL THAN THERE ARE FOR
00:07:32   PYTHON.
00:07:33   SO LET'S TALK ABOUT HYPER QUICKLY, PYTHON'S
00:07:36   CURRENT ONLY HTTP2 IMPLEMENTATION.
00:07:39   IT'S NOT EVEN FULL, IT REALLY IS JUST A CLIENT
00:07:42   LIBRARY BECAUSE THAT'S REALLY ALL I CARE ABOUT.
00:07:45   SO HITCHER FITS IN ROUGHLY THE SAME PLACE IN THE
00:07:48   HTTP STACK AS MTTP LIB OR DOT-CLIENT.
00:07:53   AND IF YOU'VE NEVER USED EITHER OF THOSE
00:07:56   DIRECTLY, THEN PROBABLY THE KIND OF THING YOU
00:07:58   WON'T WANT TO THINK ABOUT.
00:08:00   THE REAL GOAL IS TO SLOT IN ROUGHLY AT THE BOTTOM
00:08:02   OF THE STACK SO WE CAN PUT THE URL 3 ON TOP OF
00:08:05   THAT AND REQUESTS ON TOP OF THAT.
00:08:07   IT IS STILL UNDER VERY ACTIVE DEVELOPMENT BUT
00:08:11   IT'S PRIMARILY JUST ME.
00:08:12   I GET A LOT OF PEOPLE KIND OF FLOATING IN AND OUT
00:08:14   TO CONTRIBUTE BUT I DON'T HAVE A LOT OF PEOPLE
00:08:16   WORKING ON IT CONSISTENTLY WHO AREN'T ME.
00:08:18   IT'S GOT A LOT OF FEATURE REQUESTS OPEN, A LOT OF
00:08:21   ISSUES OPEN.
00:08:23   HELP WOULD BE GOOD.
00:08:25   BUT YOU CAN FIND IT THERE ON GITHUB IF YOU WANT
00:08:27   TO LOOK AT THE CODE.
00:08:29   SOME OF THE CODE IS GOOD, SOME OF IT'S TERRIBLE.
00:08:31   AND YOU CAN GET DOCS, SO IF YOU JUST WANT TO PLAY
00:08:34   WITH IT, IF YOU JUST WANT TO TRY STUFF OUT, YOU
00:08:36   CAN GO TO THE DOCUMENTATION, YOU CAN DOWNLOAD IT
00:08:38   FROM PY-PI AND START MAKING REQUESTS.
00:08:44   ONE PLACE TO START MAKING REQUESTS IS HTTP2 BIN.
00:08:47   THIS IS HTTP BIN WHICH A LOT OF PEOPLE WILL KNOW
00:08:52   ABOUT, AND MAINTAINED BY THE LOVELY PEOPLE AT
00:08:55   RUNSCOPE, AND EXACTLY THAT, CODE FOR CODE,
00:08:57   EXACTLY THE SAME, EVENLY IDENTIFIES IT AS HTTP
00:09:00   BIN, BUT RUNNING BEHIND H2O WHICH IS AN HTTP1.1
00:09:05   AND 2 PROXY.
00:09:06   SO IT CAN SPEAK 1.1 AND 2.
00:09:10   I'VE GOT DOCKERRIZED VERSIONS OF ALL THESE AND SO
00:09:15   YOU CAN GO TO MY GITHUB AND GET THEM.
00:09:17   I HAVEN'T UPLOADED THEM TO DOCKER HUB YET BUT
00:09:20   WILL DO, SO YOU CAN EMPLOY THEM INTERNALLY IF YOU
00:09:24   DON'T TRUST ME TO STORE THE DATA I DON'T GET FROM
00:09:26   THE SERVICE.
00:09:27   THE OTHER THING TO KNOW HERE IS THAT H2O REVERSE
00:09:31   PROXIES TO 1.1, SO YOU CAN PUT IT IN FRONT OF ANY
00:09:34   PYTHON WEB APP YOU HAVE RIGHT NOW AND GIVE 2 A
00:09:37   SHOT ON YOUR APP TO SEE HOW IT FEELS, SO IF
00:09:40   YOU'VE GOT STUFF FLOATING AROUND, I HIGHLY
00:09:42   RECOMMEND GIVING IT SOME TIME, TAKE A LOOK AT THE
00:09:45   DOCKER FILE TO SEE HOW THAT SORT OF THING WORKS.
00:09:48   IF YOU WANT TO DO MORE READING, IF YOU ARE
00:09:50   INTERESTED, WANT TO SEE MORE, THEN THERE ARE TWO
00:09:52   MAJOR RESOURCES, THE TOP ONE IS FROM THE CURL
00:09:56   DEVELOPER AND IT'S AN ENORMOUS DOCUMENT THAT
00:09:58   COVERS THE WHYS AND THE HOW AND THE WHAT OF
00:10:00   HTTP2.
00:10:02   IT IS THE RESOURCE, IF YOU TAKE NOTHING ELSE
00:10:06   AWAY, THAT URL IS GREAT.
00:10:07   AND THE PAGE ONE DOWN IS THE CARD PAGE AND IT
00:10:12   CONTAINS THE SPECS AND LINKS TO IMPLEMENTATIONS,
00:10:15   AND ALL SORTS OF OTHER STUFF.
00:10:17   ALL RIGHT.
00:10:18   SO THAT'S PRETTY MUCH MY TIME.
00:10:19   I WILL BE HAPPY TO STOP FOR QUESTIONS.
00:10:22   I WANT TO MAKE ONE QUICK NOTE.
00:10:24   THE REQUESTS CORE TEAM ARE GOING TO BE AT THE
00:10:28   NUMB FOCUS BOOT TOMORROW FROM 12:30ISH, IF YOU
00:10:32   WANT TO CHAT WITH US, HAVE LUNCH WITH US, WE
00:10:34   WOULD LOVE TO MEET YOU, WE WANT TO TALK ABOUT
00:10:36   ANYTHING WITH PEOPLE WHO ARE USING OUR STUFF.
00:10:37   GET YOUR FEEDBACK.
00:10:39   THAT'S ALL FOR ME.
00:10:39   THANK YOU VERY MUCH.
00:10:40   [ Applause ]
00:10:45
00:10:49   >> GREAT.
00:10:50   WE HAVE A FEW MINUTES FOR QUESTIONS, SO IF ANYONE
00:10:53   HAS ANY QUESTIONS AND WOULD LIKE TO COME TO THE
00:10:56   MIC BACK HERE, WE WILL TAKE THEM:
00:10:58   >> AUDIENCE:  AWESOME TALK, THANK YOU VERY MUCH.
00:11:00   I HAD A COUPLE, TWO RELATED QUESTIONS.
00:11:02   THE FIRST ONE IS, SO LET'S SAY IF YOU ARE RUNNING
00:11:05   A WEBSITE AND RUNNING WEB SERVERS, LIKE WHAT ARE
00:11:07   THE OPTIONS TO SUPPORT HTTP2.
00:11:11   YOU MENTIONED THE REVERSE PROXY BUT WHAT ABOUT
00:11:13   NATIVE IMPLEMENTATIONS IF YOU'RE RUNNING APACHE
00:11:16   AND WHATEVER ELSE.
00:11:17   >> THE OPEN SOURCE WEB SERVICES ARE MOVING
00:11:19   RELATIVELY SLOWLY.
00:11:20   INTERNETS HAVE SAID THEY'LL HAVE SUPPORT BY,
00:11:22   QUOTES, UNQUOTES, THE ENDS OF THE YOUR, WHICH IS
00:11:24   THOROUGHLY DISAPPOINTING, SO HOPEFULLY SOMEONE
00:11:26   WILL STEP UP AND MAKE THAT HAPPEN FASTER.
00:11:28   APACHE IS GETTING THERE.
00:11:30   THERE IS A MOD H2, THAT'S WHAT IT'S CALLED, I
00:11:35   DON'T RECALL HOW FAR THROUGH DEVELOPMENT IT IS
00:11:37   BUT THAT'S THE THING TO LOOK AT.
00:11:38   IT'S ALSO BUILT ON TOP OF NGHTTP2.
00:11:41   >> AUDIENCE: THE NEXT QUESTION KIND OF RELATED TO
00:11:43   THAT, LIKE, WHEN DO YOU EXPECT IN TERMS OF
00:11:45   ADOPTION WE'LL SEE LIKE THE WHOLE INTERNET
00:11:47   RUNNING ON HTTP2 AND PEOPLE TALK ABOUT 1.1 BEING
00:11:52   IN THE BACK OF THE DAYS KIND OF THING.
00:11:53   >> I'M NOT CERTAIN WE'LL EVER GET RID OF 1.1,
00:11:57   THERE IS A FEW CASES WHERE IT'S BETTER THAN 2.
00:11:59   >> AUDIENCE: WIDE MAINSTREAM ADOPTION, MORE
00:12:01   MAINSTREAM THING.
00:12:03   >> MAINSTREAM ADOPTION I THINK WITHIN THIS
00:12:04   CALENDAR YEAR IS THE ANSWER, SO WE ARE -- IT IS
00:12:06   ALREADY MORE WIDELY USED THAN IPV6 IS, AND...
00:12:11   [ Laughter ]
00:12:11   >> AND IT'S NOT ACTUALLY EVEN FULLY STANDARDIZED
00:12:14   YET, STILL IN THE ISG, SO IT'S STILL GOT A BIT OF
00:12:17   WORK SO GOOGLE HAS DEPLOYED IT ALREADY, SO GOOGLE
00:12:19   AND CHROME, ANYONE USE INKING THAT IS USING IT.
00:12:24   TWITTER, LOTS OF BIG WEBSITES ARE DEPLOYING IT, I
00:12:27   SUSPECT Facebook WILL BE ALONG, AS WELL, LOTS
00:12:29   OF BIG SOCIAL MEDIA STUFF WILL, I THINK, I'M
00:12:31   CONFIDENT THIS YEAR.
00:12:32   >> AUDIENCE:  AWESOME.
00:12:34   THANK YOU VERY MUCH.
00:12:35   >> THANK YOU.
00:12:36   >> AUDIENCE:  MY QUESTION CONCERNS PUSH FEATURES
00:12:39   THAT YOU BRIEFLY MENTIONED.
00:12:41   HOW DO YOU SEE THIS WORKING WITH POPULAR WEB
00:12:44   FRAMEWORK?
00:12:44   IS IT LIKE YOU ARE GOING TO DECLARE WHAT NEEDS TO
00:12:49   BE PUSHED ON THIS PAGE?
00:12:50   >> YEAH, I THINK POPULAR WEB FRAME WORKS ARE
00:12:53   GOING TO NEED EXTENSIONS TO TRY AND WORK THIS
00:12:56   OUT.
00:12:57   THAT SAID, I WOULD THINK IT WOULD BE NOT TOO
00:13:00   CHALLENGING TO ADD A REVERSE PROXY THAT USES SOME
00:13:04   MACHINE LEARNING STUFF TO TRY AND WORK OUT WHAT
00:13:07   REQUESTS CORRELATE TOGETHER IN SUCH A WAY THAT IT
00:13:10   COULD DO QUITE WELL.
00:13:11   I'LL PROBABLY TRY AND HAVE A CONVERSATION WITH
00:13:13   THE H2O LEAD AT SOME POINT ABOUT WHETHER OR NOT
00:13:17   WE CAN TRY IT WITH HIS IMPLEMENTATION.
00:13:18   YEAH.
00:13:20   >> AUDIENCE:  WILL YOU BE WORKING ON HYPER IN THE
00:13:23   SPRINTS?
00:13:23   >> I THINK I'LL BE TRYING TO DO SOME, YEAH.
00:13:25   I'LL BE HERE MONDAY, THAT'S THE ONLY DAY SPRINTS
00:13:28   AISLE WILL BE HERE BUT I'M TOTALLY HAPPY TO WORK
00:13:31   ON RAMPING PEOPLE UP ON IT SO OTHER PEOPLE CAN IF
00:13:34   I DON'T HAVE THE CHANCE TO.
00:13:35   >> AUDIENCE:  THANKS.
00:13:36   >> AUDIENCE:  YEAH, REQUEST RESPONSE FOR PAIRS
00:13:41   CALLED STREAM WHEN THEY'RE MULTIPLEX, HOW DOES
00:13:44   THE PRIORITIZATION AND FLOW CONTROL INTERACT WITH
00:13:48   TCP'S PRIORITIZATION FLOW CONTROL AND EVEN IP'S
00:13:53   FACILITIES, SEEMS LIKE THERE IS SOME REDUNDANCY
00:13:56   THERE, MAYBE SOME POTENTIAL FOR FIGHTING BETWEEN
00:13:58   THOSE MECHANISMS?
00:14:00   >> SO, THE GOAL SHOULD BE THAT THEY WON'T FIGHT.
00:14:02   SO THE KEY THING TO KNOW, AND THIS GETS BROUGHT
00:14:06   UP A LOT AND SOME DISCUSSIONS ON THE MAILING LIST
00:14:08   ABOUT IT WHICH MIGHT BE WORTH TRYING TO FIND WITH
00:14:10   SOME GOOGLE BUT THE KIND OF HIGH-LEVEL STUFF HERE
00:14:12   IS THE FLOW CONTROL IS APPLICATION LAYER FLOW
00:14:15   CONTROL SO IT'S ABOUT WHETHER OR NOT THE
00:14:18   APPLICATION ITSELF IS PROCESSING THE DATA, THE
00:14:20   TCP STREAM SHOULD STILL BE BEING PUMPED BECAUSE
00:14:23   YOU NEED TO GET THOSE CONTROL FRAMES SO TCP'S
00:14:26   FLOW CONTROL FLOW IS AN OR THROWING NATURAL THINK
00:14:31   WHICH SAYS IT CAN'T PROCESS MORE DATA, FOR THIS
00:14:35   STREAM.
00:14:35   SO IT'S A MUCH MORE FINE-GRAINED ISSUE.
00:14:39   THERE SHOULD BE, WITH CAREFULLY TUNED ALGORITHMS,
00:14:42   NO HEAD OF LINE BLOCKING.
00:14:44   HOWEVER, YOU CAN DEFINITELY DO IT WRONG AND IT'S
00:14:48   AN IMPORTANT THING THAT HAS TO GETS TESTS LIVE.
00:14:51   >> AUDIENCE:  THAT'S KIND OF WHAT I'M ASKING, HAS
00:14:54   THERE BEEN MUCH TESTING OR INVESTIGATION INTO HOW
00:14:56   THOSE INTERACT?
00:14:58   THERE ARE SO MANY FLOW CONTROL ALGORITHMS FOR TCP
00:15:01   BECAUSE OF THE SAME ISSUE BETWEEN I.P. LAYER
00:15:04   STUFF.
00:15:06   >> DEFINITELY LESS WORK DONE THAN TCP BUT PLENTY
00:15:08   OF IMPLEMENTATIONS FLOATING AROUND AND FOR A
00:15:12   LITTLE WHILE WE HAD A SPECIAL FRAME THAT WOULD
00:15:14   TELL YOU IF YOU HAD BLOCKED A STREAM THAT COULD
00:15:16   BE SERVED FOR SOME DE-BUGGING PURPOSE.
00:15:19   THEY GOT TAKEN OUT BECAUSE IT ADDED COMPLEXITY
00:15:21   BUT THE THING TO DO IS GO TO THE VARIOUS MAJOR
00:15:23   IMPLEMENTATIONS AND ASK THEM TO KIND OF WRITE A
00:15:25   DOCUMENT THAT TRACKS EXACTLY HOW THEIR ALGORITHMS
00:15:28   WORK BUT THEY'LL ALL BE QUITE DIFFERENT.
00:15:31   I ALSO SUSPECT GOOGLE WILL PUBLISH A WHITE PAPER.
00:15:35   >> AUDIENCE:  GREAT TALK.
00:15:38   >> AUDIENCE: I HAVE A QUESTION.
00:15:39   HTTP2 MAKES SENSE BETWEEN THE BROWSER AND WEB
00:15:44   SERVICE.
00:15:44   WHAT'S THE PLACE BETWEEN THE ARCHITECTURE, DO YOU
00:15:46   THINK IT HAS A PLACE -- MAYBE WITHOUT TLS?
00:15:49   >> I THINK IT HAS THE POTENTIAL TO BE STREAMLY
00:15:51   VALUABLE IN THOSE CASES.
00:15:53   IT'S A BIT INTERESTING BECAUSE IT VERY MUCH
00:15:55   DEPENDS ON YOUR NETWORKED APOLOGY, BUT IN
00:16:00   PRINCIPLE, IT HAS THE ABILITY TO BE A REALLY
00:16:01   GREAT KIND OF RPC MECHANISM AND IN FACT THERE IS
00:16:04   ONE ALREADY, GOOGLE HAVE PUBLISHED GRPC, A PCC
00:16:12   MECHANISM OVER HTTP2.
00:16:14   AND THAT HAS THE POTENTIAL TO BE MUCH, MUCH MORE
00:16:16   EFFECTIVE THAN THE CURRENT 1.1 USE OF THAT.
00:16:19   >> AUDIENCE:  THANK YOU.
00:16:20   >> THANK YOU.
00:16:22   >> AUDIENCE:  GIVEN PAGE OR SESSION TYPICALLY
00:16:26   RESTRICTED TO A SINGLE TCP CONNECTION AND IF SO,
00:16:30   IS THAT A BOTTLENECK OR DO YOU FORESEE THAT BEING
00:16:32   A BOTTLENECK IN THE FUTURE?
00:16:34   >> THE SPEC SAYS THAT THERE SHOULD, CAPITAL
00:16:37   SHOULD BE NO MORE THAN ONE TCP CONNECTION BEER
00:16:40   AUTHORITY, SO HOST, SO, YEAH, IN PRINCIPLE, I
00:16:44   SHOULD MAINTAIN ONLY THE ONE CONNECTION TO A
00:16:46   GOOGLE SERVER.
00:16:48   CURRENTLY WE DON'T EXPECT THAT TO BE A BOTTLENECK
00:16:51   BUT THE KIND OF THING WHICH MAY WELL COME BACK
00:16:53   AND SAY WE NEED MORE, IDEALLY I THINK WHAT WE
00:16:55   WOULD ACTUALLY DO IS RECONSIDER THE WAY WE HANDLE
00:16:58   THE ONE CONNECTION.
00:16:59   ONE CONNECTION SHOULD BE THE OPTIMAL CASE FOR
00:17:02   TCP.
00:17:04   HOPEFULLY IT WILL.
00:17:06   >> AUDIENCE:  OKAY, THANK YOU.
00:17:09   >> THANK YOU.
00:17:09   >> AUDIENCE:  YOU MENTIONED THE BINARY
00:17:11   PARTICLE -- RESOURCE ENVIRONMENTS.
00:17:14   IS IT POSSIBLE TO DISABLE OTHER FEATURES SUCH AS
00:17:17   H-PAC AND MANDATORY TLS SO YOU CAN RUN THIS ON AN
00:17:21   8 OR 16-BITS --
00:17:23   >> MAYBE.
00:17:23   THERE HAVE BEEN SOME PEOPLE DOING WORK ON THAT.
00:17:25   I'M NOT ENTIRELY UP TO SPEED ON WHERE THEY ARE
00:17:27   BUT YOU CAN DISABLE MANY OF THE COMPLICATIONS
00:17:30   FEATURES, SO FLOW CONTROL, YOU CAN HAVE A KIND OF
00:17:33   NO-OP FLOW CONTROL THAT SENDS BAKE WINDOW UPDATES
00:17:38   THAT ARE THE SIZE OF THE DATA YOU RECEIVED AND
00:17:39   THAT'S WHAT HYPER DOES RIGHT NOW -- NO, IT
00:17:42   DOESN'T, I MADE IT SMARTER RECENTLY, DOESN'T DO
00:17:44   THAT ANYMORE BUT YOU CAN TURN OFF THE
00:17:47   COMPRESSIONEE PARTS OF HPAC, SO YOU CAN HAVE
00:17:51   H-PAC SAY YOU CAN NEVER ADD HAYERS TO THE
00:17:53   COMPRESSION TABLE AND THEN YOU ALWAYS GET
00:17:56   ESSENTIALLY UNCOMPRESSED HEADERS.
00:17:59   I DON'T THINK YOU CAN TURN OFF HUFFMAN ENCODING
00:18:03   FOR THOSE SO YOU MAY NEED TO DO HUFFMAN DECODING,
00:18:07   I'LL HAVE TO CHECKS.
00:18:09   >> AUDIENCE:  HI, OTHER THAN THE RPC USE, WHAT DO
00:18:12   YOU SEE HYPER BEING USED AS, OR USED FOR IN
00:18:16   PYTHON?
00:18:17   >> THAT'S A GOOD QUESTION.
00:18:18   I HAVE AN EXPLICIT LONG-TERM GOAL TO GET REQUESTS
00:18:21   TO USE IT.
00:18:21   I'M KIND OF CHEATING BUT IN THE FOCUSED AREAS, I
00:18:27   WOULD LIKE TO BE ABLE TO TRANSPARENTLY IN TO WORK
00:18:30   BETWEEN 1.1 AND 2 SO YOU CAN USE WHATEVER IS MOST
00:18:33   PRESENT.
00:18:33   IT ALSO HAS A SEPARATE, A THOROUGHLY SEPARATE
00:18:36   FRAMING LAYER SO THE BIT THAT KNOWS ABOUT HTTP
00:18:39   FRAMES AND THE BIT THAT KNOWS ABOUT H-PAC ARE
00:18:41   QUITE SEPARATE AND COULD BE BROKEN OUT INTO OWN
00:18:44   LIBRARIES, RECENTLY, SO I'M TALKING TO SOMEONE
00:18:46   WHO IS CONSIDERING ADDING SUPPORT TO THE STANDARD
00:18:48   LIBRARY, USING THE FRAMING LAYER.
00:18:50   I ALSO PLAN TO ADD SUPPORT FOR THINGS LIKE
00:18:53   TWISTED AND G-EVENT AND ALL THOSE SORTS OF
00:18:56   THINGS, AND IDEALLY, I WOULD LIKE TO WRITE A
00:18:59   SERVER IMPLEMENTATION AT SOME POINT, AS WELL,
00:19:01   PROBABLY ON A-SYNC IO, BUT THAT'S ASSUMING I HAVE
00:19:04   EIGHT MILLION HOURS BECAUSE THERE IS A LOT OF
00:19:07   WORK THERE.
00:19:07   >> AUDIENCE:  A FOLLOWUP TO THAT, USUALLY THE
00:19:09   FLOW IN PYTHON, IS A REQUEST RESPONSE KIND OF
00:19:14   DEAL, WHERE HTTP1 PROBABLY WORKS OKAY.
00:19:18   SO IS IT A DIFFERENT INTERFACE THAT REQUEST IS
00:19:22   GOING TO IMPLEMENT OR DO YOU HAVE ANY VISION
00:19:24   THERE?
00:19:25   >> MY EXPECTATION IS THAT THE -- WE WILL KEEP
00:19:29   THAT ABSTRACTION BUT IN PRACTICE, TO GET GOOD
00:19:32   PERFORMANCE OUT OF IT, TO GET LIKE EXCELLENT
00:19:35   PERFORMANCE OUT OF IT, YOU WILL NEED TO START
00:19:38   HAVING CONCURRENT SEE IN PLACE.
00:19:39   SO YOU MIGHT USE ONE OF THE CONCURRENT INTERFACES
00:19:41   TO REQUEST, LIKE G-REQUESTS OR T-REQUESTS OR T
00:19:44   REC OR ANY OF THOSE.
00:19:46   OR EVEN JUST SPAWN A BACKGROUND THREAD THAT
00:19:52   MULTIPLEX ON TO SO YOU CAN HAVE MANY, MANY
00:19:55   THREADS RUNNING AND THEY USE ONE UNDERLYING
00:19:57   CONNECTION, MULTIPLEXING DOWN IT.
00:19:59   AGAIN, I WOULD LOVE TO TALK ABOUT THIS WITH MORE
00:20:02   USERS BECAUSE I WANT TO GET A FEEL FOR WHAT THOSE
00:20:04   USE CASES LOOK LIKE.
00:20:05   IT'S EASY FOR ME TO DESIGN IN A BUBBLE AND NONE
00:20:07   ONE WILL LIKE IT.
00:20:09   >> AUDIENCE:  THANK YOU.
00:20:12   >> AUDIENCE:  A QUICK FOLLOW-UP QUESTION TO GO
00:20:14   AFTER THE ONE ABOUT SERVER PUSH.
00:20:16   IT SEEMS LIKE HTTP2 IS CRYING TO REQUIRE THE
00:20:19   APPLICATION LAYER TO BE MUCH, MUCH SMARTER THAN
00:20:21   IT IS RIGHT NOW WITH HTTP1.
00:20:24   THE APPLICATION LAYER HAS TO DECIDES WHAT TO PUSH
00:20:25   AHEAD OF TIME, WHAT THE USER IS GOING TO NEED,
00:20:28   EVERYTHING AHEAD OF TIME.
00:20:29   DO YOU THINK THERE IS A SOLUTION TO THAT IN
00:20:34   ENGINE X OR DO YOU THINK IT'S ENTIRELY THE
00:20:36   RESPONSIBILITY OF THE APPLICATION DEVELOPER TO
00:20:38   MAKE IT SMART ENOUGH TO HANDLE HTTP2?
00:20:44   >> I THINK WITH COMPUTERS ALMOST EVERYTHING IS
00:20:47   POSSIBLE, SO I THINK THAT YOU COULD ABSOLUTELY
00:20:50   SOLVE THIS IN ENGINE X AND I THINK ANYONE WHO
00:20:54   DOES IS GOING TO HAVE A REALLY GREAT CONFERENCE
00:20:56   SPEAKING CAREER AND HOPEFULLY TURN IT INTO QUITE
00:20:58   A BIT OF MONEY BUT, IN PRACTICE, CURRENTLY, THE
00:21:01   APPLICATION LAYER HAS TO KNOW ABOUT IT, SO WHAT'S
00:21:03   THE EXPECTED WAYS OF DEALING WITH THIS WILL BE TO
00:21:06   ADD EXTRA HEADERS THAT YOUR SERVER INTERCEPTS
00:21:08   THAT SAY THINGS LIKE THIS OTHER RESOURCE IS
00:21:11   RELATED, PLEASE PUSH IT.
00:21:12   SO THAT'S THE CURRENT EXPECTATION OF THE FLOW.
00:21:15   WE'LL GET THAT RIGHT FIRST AND THEN WORRY ABOUT
00:21:17   BEING SMART.
00:21:19   >> AUDIENCE:  OKAY, GREAT, THANKS.
00:21:21   GREAT TALK.
00:21:22   >> THANK YOU.
00:21:25   >> I WANTED TO ASK IF THERE'S ANYTHING ON THE
00:21:26   ROAD --
00:21:38   >> THE ANSWER IS CURRENTLY NO.
00:21:39   THERE ARE A COUPLE OF LAYERS TO THIS QUESTION,
00:21:41   SO, FIRSTLY, THE WORKING GROUP IS EXHAUSTED.
00:21:46   HTTP2 WAS A BATTLE, A BATTLE FOR TWO YEARS, THERE
00:21:48   WAS A LOT OF CONTENTION ABOUT IT, A LOT OF BACK
00:21:51   AND FORTH AND A LOT OF PEOPLE NEED SOME TIME TO
00:21:54   NOT DO THAT.
00:21:55   ARGUMENTS ON THE MAILING LIST GET TIRING AFTER A
00:21:58   WHILE.
00:21:58   THAT SAID, THERE HAS BEEN LOTS OF EXPLICIT
00:22:00   DISCUSSION ABOUT HTTP3.
00:22:02   WE'RE NOT PROPOSING TO DO IT RIGHT NOW, NO ONE
00:22:04   PANIC BUT IT'S THE KIND OF THING THAT WE'RE
00:22:07   PREPARED TO TALK ABOUT, WE'RE GOING TO LET THE
00:22:09   STANDARD KIND OF BOIL -- KIND OF SIMMER FOR SIX
00:22:12   MONTHS, LET PEOPLE IMPLEMENT, LET PEOPLE FIND THE
00:22:15   ACTUAL PROBLEMS THEY HIT IN THE WILD AND THEN
00:22:16   WE'LL COME BACK TO THE TABLE, I THINK, AND LOOK
00:22:18   AT WHETHER OR NOT WE CAN ADDRESS THESE WITH
00:22:20   EXTENSIONS OR WHETHER OR NOT WE REALLY HAVE TO
00:22:23   RE-SPEC.
00:22:24   ONE OF THE GOOD THINGS THAT CAME OUT OF THIS, WAS
00:22:26   A WHOLE INFRASTRUCTURE FOR TRANSPARENTLY ADDING
00:22:29   EXTRA PROPERTY TO COMES THAT YOU CAN UPGRADE TO
00:22:32   SO HOPEFULLY FURTHER HTTP VERSIONS SHOULD BE
00:22:36   EASIER TO HANDLE THAN THIS ONE.
00:22:38   THIS ONE REQUIRED A LOT OF EXTRA INFRASTRUCTURE.
00:22:41   >> AUDIENCE:  I THINK WE'RE GOING HAVE TO CUT IT
00:22:44   OFF THERE BECAUSE I'M HUNGRY FOR LUNCH, SO THANK
00:22:48   YOU, CORY, AND GET SOME LUNCH, FOLKS.
00:22:51   [ Applause ]
00:23:43   [ LUNCH BREAK ]
00:23:47   [ ENDED AT 12:47. ]






















