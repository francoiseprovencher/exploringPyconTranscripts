I WOULD LIKE TO INTRODUCE THE SPEAKERS FOR THIS
SESSION.
IT'S MATT MAKAI.
HE'S A DEVELOPER EVANGELIST AT TWILIO AND KATE
HEDDLESTON, WHO ARE A SOFTWARE ENGINEER AND
CURRENTLY FUN EMPLOYED.
AND THEY WILL BE TALKING ABOUT CHOOSING THEIR
NEXT WSGI DEPLOYMENT ADVENTURE.
IT'S GOING TO BE DIFFERENT FROM THE OTHER
TALKS.
I THINK IT WILL BE VERY EXCITING.
[ APPLAUSE ]
>> GOOD AFTERNOON, EVERYONE.
MY NAME IS MATT MAKAI.
I'M A DEVELOPER EVANGELIST WITH TWILIO.
SO THIS IS CHOOSE YOUR OWN WSGI DEPLOYMENT
ADVENTURE.
AND AS ROBERT ALLUDED TO, THIS IS GOING TO BE
SLIGHTLY DIFFERENT FROM SOME OF THE OTHER
TALKS.
WE NEED AUDIENCE PARTICIPATION HERE.
AND YOU ARE GOING TO PARTICIPATE VIA EITHER A
PHONE OR A LAPTOP.
SO THIS IS THE EXACT OPPOSITE OF WHAT MOST
SPEAKERS WANT.
PULL OUT EITHER YOUR PHONE OR YOUR LAPTOP.
GET IT CONNECTED TO WI-FI BECAUSE WE'RE GOING
TO NEED TO YOU HELP US FIGURE OUT WHICH PADS WE
CHOOSE THROUGH THIS STORY TODAY.
THERE'S GOING TO BE MULTIPLE DECISION POINTS
WHERE WE'LL NEED YOU TO DO VOTING VIA SMS OR
THE WEB BROWSER.
SO ONE OR THE OTHER.
AND WE'LL EXPLAIN THAT WHEN WE GET TO OUR FIRST
DECISION POINT.
SO I WOULD LIKE TO INTRODUCE MY ESTEEMED
CO-PRESENTER FOR HER SECOND TALK OF THE DAY
TODAY, KATE HEDDLESTON.
>> HELLO.
MY NAME IS KATE HEDDLESTON.
I'M A SOFTWARE ENGINEER.
I AM FUN EMPLOYED.
I DON'T WORK AT TWILIO.
SO ONLY ONE OF US IS ASSOCIATED WITH TWILIO.
HERE'S OUR STORY TODAY.
YOU HAVE STARTED THE HOTTEST NEW COMPANY IN
SILICON VALLEY.
YOU ARE A GROUP OF DUDES, ENGINEERING THINGS,
AND YOU HAVE CONVINCED SOME INVESTORS TO FUND
YOUR IDEA.
NOW, YOU HAVE TO BUILD IT.
DID YOU BUILD TINDER FOR PETS, THE HIP NEW APP
THAT CONNECTS LONELY PETS AT HOME FOR DAYTIME
MEET-UPS, OR DID YOU BUILD THE DACHSHUND DOC
SEND DELIVERY SERVICE, WHICH IS A PRODUCT THAT
DEPLOYS AN ARMY OF DACHSHUNDS TO DELIVER
DOCUMENTS AND TRACK ANALYTICS?
SO HERE'S YOUR FIRST VOTING POINT.
DID YOU BUILD TINDER FOR PETS OR THE DACHSHUND
DOC SEND DELIVERY SERVICE?
WE'RE ALREADY GETTING IN VOTES.
SEND AN SMS TO THAT NUMBER ON THE SCREEN OR GO
TO [INAUDIBLE].
THERE WILL BE TWO BUTTONS ON THE SCREEN SO YOU
CAN VOTE FOR WHICH APP WE'RE GOING TO CHOOSE
HERE.
WE'LL HAVE MULTIPLE SCREENS THAT ARE LIKE THIS.
SO THE URL WILL CHANGE AS WE GO ALONG, BUT THIS
IS HOW WE'RE GOING TO BE ABLE TO VOTE.
SO IT LOOKS LIKE HEAD TO HEAD.
>>  OH, WOW.
TINDER IS PULLING -- THIS IS EXCITING.
THIS IS RIVETING.
>>  SO YOU HAVE TO STAY ON THE PAGE FOR THE
ACTUAL VOTE TO COUNT.
SO STAY ON THE PAGE IF YOU'RE USING THE WEB
BROWSER VOTING.
AND THAT WILL ALLOW IT TO CONTINUE TO COUNT
YOUR VOTE HERE.
SO WHAT'S HAPPENING IS WE'RE CALCULATING IN THE
FLASK APPLICATION THE VOTES THAT ARE COMING IN.
WE'RE INCREMENTING REDIS OR DECREMENTING REDIS
IF YOU LEAVE THE PAGE, AND WE'RE COUNTING THE
NUMBER OF VOTES THAT ARE COMING IN.
>>  ALL RIGHT.
WE MIGHT HAVE SOME DUPLICATE VOTES.
I DON'T KNOW IF WE HAVE 110 PEOPLE HERE.
BUT IT LOOKS LIKE THE DACHSUND DOC SEND
DELIVERY SERVICE IS GOING TO BE THE WINNER.
SO YOU BUILD THE DACHSUND DOC SEND DELIVERY
SERVICE.
HERE AT DACHSUND HQ, WE HAVE NAILED THE
DELIVERY WORLD.
THE QUESTION IS THEN HOW DO WE TRANSLATE THIS
EXPERIENCE INTO THE PHYSICAL WORLD.  TODAY
WE'RE EXCITED TO REVEAL THE DACHSUND DOC SEND
DELIVERY SERVICE.
WHEN YOU NEED A DOCUMENT DELIVERED, GO TO
DACHSHUNDDOCSEND.COM AND PLACE YOUR DELIVERY
REQUEST.
A DACHSUND WILL ARRIVE AT YOUR FRONT DOOR.
STRAP THE DOCUMENT TO THE DACHSUND CARRIER, AND
YOUR DOCUMENT WILL BE ON ITS WAY.
>>  OUR HIGHLY TRAINED DACHSUND WILL PAY CLOSE
ATTENTION.
THE BILL WILL BE CAREFULLY TABULATED AND
REPORTED BACK TO YOU.
DACHSUND DOCUMENT DELIVERY A SPECIAL OFFER.
FREE FROM ANY WORRIES THAT YOUR DOCUMENT GETS
INTO THE WRONG HANDS.
READY TO GIVE OUR LATEST CREATION A SPIN AND
JUST HEAD TO DACHSUND.DOCSEND.COM.
>>  ALL RIGHT.
SO YOU'RE WORKING ON BUILDING THE HOTTEST NEW
APP SINCE COLOR.
THIS IS GOING TO BE AMAZING.
YOU'VE GOT THE CODE READY TO GO.
IT'S ALL READY FOR YOU TO DEPLOY.
SO WHAT DOES THAT LOOK LIKE?
>>  SO WE HAVE OUR APPLICATION CODE.
WE'VE BUILT OUR DACHSUND DOC SEND DELIVERY
SERVICE.
AND I WILL TRIP UP ON THAT MULTIPLE TIMES.
NOW WE NEED TO DO SOMETHING WITH IT.
SO WHAT DO WE DO WITH OUR CODE THAT'S RUNNING
ON OUR LOCAL DEVELOPMENT ENVIRONMENT SO THAT
OTHER PEOPLE CAN ACTUALLY START USING IT?
SO LET'S TAKE A LOOK OUR DEPLOYMENT.
WHAT WE NEED IS A MAP OF WHAT OUR DEPLOYMENT
SHOULD LOOK LIKE.
A MAP KIND OF LIKE THIS ONLY WITH OUR WSGI
DEPLOYMENT INSTEAD OF JUST LIKE THE OLD STYLE
HERE.
SO CAVEAT.  I AM NOT A CARTOGRAPHER, SO I WAS
TRYING TO DRAW A MAP THAT WOULD LOOK REALLY
NICE LIKE THIS, AND I COME UP WITH [INAUDIBLE]
MARK-UPS.
SO WE'RE GOING TO DRAW A MAP THAT WAY WITH THE
CONTENTS.
WE WILL START WITH THE INTERNET.
SO ON THE INTERNET ARE USERS THAT WANT TO USE
OUR DACHSUND DELIVERY SERVICE, AND WE HAVE OUR
APPLICATION CODE SITTING ON OUR LOCAL MACHINES.
THAT DOESN'T DO US ANY GOOD.
USERS CAN'T USE THE APPLICATION.
WHAT WE NEED IS A SERVER.
AND THE SERVER WE CAN GO OUT AND BUY HARDWARE,
CONNECT IT TO THE INTERNET, OR WE CAN GO GET A
VIRTUAL PRIVATE SERVER FROM A COMPANY.
SO, FOR EXAMPLE, WE COULD GO OUT, AND WE COULD
GO TO LINODE AND GO GET A SERVER.
THE REASON I PICKED LINODE, THAT'S WHAT'S
RUNNING OUR SERVER RIGHT NOW, SO IF WE HAVE ANY
PROBLEMS WITH THIS, WE CAN GO DOWNSTAIRS AND
YELL AT THEM AT THEIR BOOTH.
WE PROVISION A SERVER.  WE SPIN IT UP.
WE SSHN.
WE'RE IN OUR NEW SERVER AS THE NEW ACCOUNT.
NOW WE WANT TO GET OUR APPLICATION CODE ON TO
OUR SERVER.
SO WE'RE USING GITHUB.
WE WOULD GO AND GET CLONE, GET REPOSITORY TO
GET OUR APP CODE, AND WE PUT IT ON OUR SERVER.
NEXT WE NEED A WEB SERVER.
SO WE WOULD GO TO SUDO APP, GET INSTALL ENGINE
X, AND WE WOULD CONFIGURE ENGINE X SERVER.
SO OUR TEAM IS NOT -- WE GO ON STACK OVERFLOW.
WE COPY AND PASTE OUR CODE AND TRY TO MAKE OUR
CONFIGURATION WORK.
SO THE FIRST FEW LINES WE'RE NOT SURE WHAT THEY
DO YET.
THEY SAY SOMETHING ABOUT A WSGI THING.
BUT WE'LL WORRY ABOUT THAT LATER.
WE'RE JUST TRYING TO GET ENGINE X UP AND
RUNNING.
WE CAN FIGURE SOME BASIC LOGGING, AND THEN AT
THE END, WE COPY AND PASTE WHAT WE'VE SEEN ON
STACK OVERFLOW FOR THIS WSGI SERVER THING THAT
WE NEED TO FIGURE OUT IN A FEW MINUTES.
ALL RIGHT.
WE DO A RESTART OF OUR ENGINE X SERVER SO THAT
WE CAN GET THE CONFIGURATION TAKEN UP.
AND NOW WHEN PEOPLE GO TO OUR WEBSITE THEY SEE
A 502 BAD GATEWAY.
ALL RIGHT.
WHAT'S HAPPENING HERE?
SO WHEN PEOPLE ARE GOING TO THE WEBSITE, WHEN
THEY'RE GOING TO OUR APPLICATION.
THE WEB SERVER IS ACTING AS A PROXY.
SO THE PROXY IS JUST THE MIDDLE MAN.
IT'S SAYING, OKAY, I'M GETTING AN INCOMING
REQUEST.
AND I NEED TO HAND THIS OFF TO A PORT FIVE
UPSTREAM SERVER, SO CLEARLY, WE NEED TO SET
THIS THING UP.
WHAT WE NEED HERE IS A WSGI SERVER.
SO WE HAVE OUR WEB SERVER THAT'S HANDLING THE
RESPONSES.
WE'RE HANDLING REQUESTS FROM USERS.
AND THEN WE NEED TO GO AND HIT A WSGI SERVER
THAT IS GOING TO BE RUNNING OUR APPLICATION
CODE.
SO WE WOULD GO AND DO A SUDO APP GET, INSTALL
OUR DEPENDENCIES AND ONE OF OUR DEPENDENCIES
WOULD BE GREEN UNICORN.
THAT'S GOING TON THE WSGI SERVER THAT CAN RUN
OUR APPLICATION.
BUT WE'RE NOT REALLY SURE HOW TO RUN GREEN
UNICORN.
YOU KNOW, WE KEEP USING RUN SERVER ON OUR LOCAL
DEVELOPMENT ENVIRONMENT.
SO WE'LL JUST USE THAT FOR NOW HERE.
I KNOW AT THIS POINT MANY OF YOU WHO HAVE DONE
DEPLOYMENTS BEFORE ARE SHAKING YOUR HEAD.
RUN SERVER, THE DEV SERVER, A REALLY TERRIBLE
IDEA.
IF YOU HAVE A PROBLEM THAT WSGI HAS, AND YOU
SEE SOMEONE ELSE IN THE AUDIENCE WHO IS LIKE DO
RUN SERVER, YOU CAN HELP THEM OUT AND SHOW THEM
HOW WE SHOULD ACTUALLY DO THIS IN A SAFE,
SECURE WAY.
FOR NOW, THIS IS WHAT'S GOING TO BE RUNNING OUR
APPLICATION.
SO NOW PEOPLE GO, AND THEY WOULD SEE SOMETHING
LIKE THIS.
THEY WOULD SEE PLAIN HTML.
AND WHAT SHOULD HAPPEN IS, FOR EXAMPLE, WHEN
YOU GO TO A WEB PAGE, WHAT SHOULD HAPPEN IS WE
SHOULD SEE, OKAY, WE GET NOT ONLY THE HTML, BUT
WE GET IMAGES AND JAVASCRIPT AND ALL THAT
STUFF.
THIS IS WHAT HAPPENS.
THE REQUEST RESPONSE CYCLE.
BUT WE HAVEN'T CONFIGURED OUR WEB SERVER TO
HANDLE THE IMAGES IN JAVASCRIPT AND CSS THAT
SHOULD BE BRINGING UP OUR APPLICATION.
SO WE NEED TO SET UP STATIC FILE SERVING.
SO WE GO AND CHANGE THE CONFIGURATION OF ENGINE
X.
SO BELOW WHERE WE HAD OUR LOG CONFIGURATION SET
UP, WE WOULD PUT IN FOUR LINES.
AT THE LOCATION/STATIC.
SO ANY URL THAT HAS STATIC IN THIS, WE ARE
GOING TO HAVE AN ALIAS TO OUR BAR WWW STATISTIC
DIRECTORY.
AND THEN WE HAVE THE REST OF OUR CONFIGURATION
WHICH WE HAVE ALREADY PUT IN.
SO NOW WE HAVE OUR COMPLETE DEPLOYMENT,
COMPLETE INITIAL DEPLOYMENT, WELL, EXCEPT FOR
ONE OTHER STEP.
SO OUR ANGEL INVESTORS TOLD US THAT THERE'S
SOMETHING CALLED -- THAT THE DATA THAT WE HAVE
IS REALLY IMPORTANT.
SO DATA IS LIKE THE NEW OIL IS WHAT THE ANGEL
INVESTORS KEEP SAYING.
SO WE NEED SOME SORT OF DATABASE TO STORE
INFORMATION ABOUT OUR DOC SEND DELIVERY
SERVICE.
SO WE DO A POSTGRES INSTALLATION.
WE INSTALL A CLIENT, SO WE CAN ACCESS POSTGRES
FOR OUR APPLICATION, AND [INAUDIBLE] LOSS AUDIO
CONNECTION.
>>  SERVING UP IMAGES OF PETS THAT COULD BE
DOING DELIVERING.
AND WE'VE LAUNCHED.
FINALLY, THE WORLD CAN USE OUR DOC SEND
DELIVERY SERVICE.
EVEN BETTER.
WE'RE FEATURED ON TECH CRUNCH.
WE HAVE HYPER GROWTH, NOT JUST GROWTH.
WE HAVE HYPER GROWTH NOW.
SO WITH HYPER GROWTH COMES MORE PROBLEMS.
SO THE QUESTION IS DO WE HAVE SO MANY USERS
THAT ARE SIGNING UP FOR OUR DOC SEND DELIVERY
SERVICE THAT WE NEED TO MAKE EMAIL INVITES?
OR DO WE NEED TO SET UP AUTOMATION BECAUSE WE
KEEP HAVING TO MANUALLY LOG INTO THE SERVER AND
DO SSH UPDATE OUR CODE.
SO THE QUESTION IS ARE WE DOING EMAIL
INVITATIONS, OR ARE WE GOING TO AUTOMATE OUR
DEPLOYMENTS.
SO THE QUESTION OR THE PATH TO THE STORY IS UP
TO YOU.
SO THIS IS THE SAME NUMBER THAT WE HAD BEFORE.
AND THIS IS A NEW URL.
SO WE HAVE A J.MP/PYROCKET.
SEE WHAT PEOPLE THINK.
>>  THIS IS A CLOSE RACE.
I THINK IT'S A LITTLE UNCLEAR TO ME WHICH ONE
YOU GUYS PREFER.
FOR ANYONE THINKING BY THE WAY THAT THIS
COULDN'T POSSIBLY BE HOW COMPANIES LAUNCH, IT
IS.
SNAPCHAT.
[ LAUGHTER ]
>> ALL RIGHT.
WE'RE GOING TO CUT TO THIS POINT.
SO AUTOMATION IS CLEARLY KEY TO BEING ABLE TO
QUICKLY ITERATE ON OUR MVP.
SO WE'RE GOING TO WALK THROUGH AUTOMATED
DEPLOYS.
THIS IS JUST GOING TO BE A HIGH LEVEL OVERVIEW
OF AUTOMATION.
NOW, I THOUGHT THIS PICTURE WAS JUST -- I DON'T
KNOW.
IT JUST CRACKED ME UP.
WHAT I DECIDED WAS THIS WAS GOING TO BE THE TV
SECTION OF THE CHOOSE YOUR OWN ADVENTURE STORY.
SO I TRIED TO PUT IN AS MANY TV CLIPS AS
POSSIBLE THROUGHOUT IT.
SO WE WANT TO AUTOMATE, INSTEAD OF HAVING A
HUMAN DO EVERYTHING, WE HAVE A -- WELL, NOT A
ROBOT, BUT WE HAVE SOFTWARE DOING IT FOR US.
SO WE START LOOKING FOR WHAT CONFIGURATION
MANAGEMENT TOOLS ARE OUT THERE.
WHAT WOULD ALLOW US TO AUTOMATE.
AND WE SEE FABRIC, SALTSTACK, DOCKER, WHAT ARE
ALL THESE TOOLS, WHAT IS ALL THIS STUFF.
SO WE CALL UP A FRIEND.
WE'RE KIND OF LOST.
WE PHONE A FRIEND.
AND THEY SAY, ALL RIGHT, WHAT DO YOU WANT TO
AUTOMATE, RIGHT?
SO THAT'S THE FIRST THING IS WHAT -- LET'S JUST
START ANSWERING SIMPLE QUESTIONS LIKE WHAT IS
IT THAT YOU WANT TO AUTOMATE.
WE'VE GOT TO START SOMEWHERE.
YOU SAY, ALL RIGHT, WELL, I JUST DON'T WANT TO
SSH INTO THE MACHINE EVERY SINGLE TIME.
AND SO WHAT WE NEED TO DO IS WE NEED TO PICK
SOME TOOLS THAT WILL HANDLE DEPLOYMENTS FOR US.
SO WE CAN START BUCKETING THESE TOOLS WHEN
WE -- IF WE KNOW NOTHING ABOUT THE
CONFIGURATION MANAGEMENT TOOLS AND THE
DEPLOYMENT AUTOMATION THAT'S OUT THERE, WE CAN
BUCKET THEM.
SO, FOR EXAMPLE, IN THIS CASE, WE WOULD HAVE
UNDER SERVER STATE, CHEF PUPPET, SALTSTACK,
THIS IS GREAT FOR MANAGING THIS [INAUDIBLE]
HAVE SOMETHING THAT'S AKIN TO DEPLOYMENTS.
AND SO WE HAVE SHELL SCRIPTS.
WE DECIDE, OKAY, LET'S MAKE ANTS AND FABRIC
THAT ALLOW SOME SCRIPTS THAT ALLOW US TO
INSTEAD OF US HAVING TO SHH IN AND PULL DOWN
THE CODE, WE AUTOMATE THAT WITH SOME ANSIBLE
PLAYBOOKS AND FABRIC FUNCTIONS, AND THEN WE ADD
CONTINUOUS INTEGRATION.
SO LET'S GO BACK TO OUR MAP HERE.
WHAT WE HAVE IS THE APPLICATION THAT WE HAD SET
UP AND PULL DOWN OUR APP CODE FROM THE SOURCE
CONTROL.
WE GET IT THROUGH CONTINUOUS INTEGRATION.
SO WE WORK ON OUR CODE LOCALLY.
WE PUSH IT TO THE SOURCE CONTROL REPOSITORY.
THE CONTINUOUS INTEGRATION ENVIRONMENT IS
NOTIFIED AND THEN BUILDS THE CODE, IT MAYBE
TESTS AT SOME POINT IN THE FUTURE WHAT WE
ACTUALLY GET TIME TO WRITE SOME TESTS, AND THEN
WE DEPLOY THE CODE THROUGH THE CONTINUOUS
INTEGRATION.
SO WE NO LONGER HAVE TO SHH INTO THE MACHINE TO
DO EVERY SINGLE DEPLOYMENT.
SO FINALLY WE HAVE SOME AUTOMATION IN PLACE.
SO THIS CREATES SOME OTHER ISSUES.
CONFIGURED AND DEPLOYED IN YOUR ENVIRONMENT,
BUT NOW, DO WE HAVE HTTP REQUESTS THAT KEEP
TIMING OUT BECAUSE WE'RE TRYING TO GET TOO MUCH
WORK DONE OR WE'RE REPORTING WE'RE NOT SURE HOW
TO HANDLE THEM ALL?
THE CHOICE IS UP TO YOU.
SO AGAIN, SAME PHONE NUMBER.  IT'S
J.MP/ASYNC-FIX.
NECK IN NECK.
>>  OKAY.
SO YOU CHOSE TO BUILD AN ASYNCHRONOUS SERVICE.
THIS IS A PRETTY COMMON THING THAT COMES UP
VERY QUICKLY WHEN YOU'RE BUILDING A WEB
APPLICATION.
RIGHT?
SO THIS IS A PICTURE OF MINIONS BECAUSE THAT'S
HOW I THINK OF ASYNCHRONOUS SERVICES, AS
AUTOMATED MINIONS GOING OUT AND DOING YOUR
BIDDING BEHIND THE SCENES.
BASICALLY, WHAT HAPPENS IS SOMEONE IS USING
YOUR APPLICATION.
AND WHEN THEY COME IN, THEY MIGHT CLICK A
BUTTON, AND YOUR APPLICATION MIGHT GO CRAWL WEB
DATA.
BUT MAKING CALLS OUT TO THE REST OF THE WEB,
AND GETTING A BUNCH MORE DATA IS ACTUALLY VERY
SLOW, AND YOU DON'T WANT TO BLOCK USER
INTERACTIONS FROM MAKING CALLS OUT TO THE WEB.
SO YOU NEED AN ASYNCHRONOUS TAX SERVICE TO GO
OUT AND DO THIS BEHIND THE SCENES WHILE USERS
CAN GO ON YOUR SITE AND DO A BUNCH OF DIFFERENT
THINGS.
THIS IS A NICE LITTLE DIAGRAM.
BASICALLY, WHAT HAPPENS IS A CLIENT COMES IN,
THEY INITIATE A CALL.
AND RATHER THAN BLOCKING AND SAYING, OKAY,
WE'RE GOING TO ACTUALLY GO OUT, CRAWL THIS WEB
DATA, GET THE INFORMATION THAT YOU WANT, AND
THEN FOUR MINUTES LATER THE BUTTON IS GOING TO
STOP LOADING, AND IT'S GOING TO BE LIKE YOU'RE
DONE BECAUSE YOUR USER WAS GONE AFTER FIVE
SECONDS, THEY'RE NOT GOING TO WAIT FIVE SECONDS
FOR YOU TO DO ALL THESE TASKS BEHIND THE
SCENES.  SO WHAT YOU DO INSTEAD IS YOU SEND A
CALL BACK THAT SAYS, ALL RIGHT, WE'VE RECEIVED
THIS TASK, AND WE'RE DOING IT BEHIND THE
SCENES, LIKE WE'LL LET YOU KNOW WHEN WE HAVE
THE DATA THAT YOU NEED, AND WE'LL SEND YOU A
NOTIFICATION OR AN EMAIL OR WHATEVER IT IS.
THE ASYNCHRONOUS WEB SERVICE BEHIND THE SCENES
HAS QUEUES OF THESE DIFFERENT TASKS, AND THESE
QUEUES RUN AND PROCESS THE TASKS.
USUALLY ASYNCHRONOUS TASKS INVOLVE THINGS LIKE
GOING OUT AND GETTING DATA AND UPDATING THE
DATABASE OR SENDING EMAILS OR DOING NETWORK
INTENSIVE CALLS THAT YOU REALLY JUST DON'T WANT
TO HAVE HAPPEN IN REAL-TIME.
OR SOMETIMES YOU HAVE A WEB CRAWLER IN THE
BACKGROUND WHERE EVERY DAY YOU GO AND UPDATE
INFORMATION.
SO MAYBE EVERY DAY YOU WANT TO GO AND UPDATE
FACEBOOK LIKES EVERY DAY.
OR EVERY DAY YOU WANT TO CRAWL CERTAIN THINGS
TO GET NEWS ABOUT WHAT'S HAPPENING IN THE
WORLD.
AND SO THOSE ARE TIME-INTENSIVE TASKS  WHENEVER
IT GETS TO THESE QUEUES.
A LOT OF TIMES WHEN YOU ARE USING A THIRD-PARTY
SERVICE AND YOU SEND AN EMAIL OR YOU KICK OFF A
TASK AND IT TAKES AN HOUR, THAT'S BECAUSE THE
QUEUES GET BACKED UP IN AN ASYNCHRONOUS
SERVICE.
SO IT GOES TO THIS BLACK BOX, AND THEN AN HOUR
LATER YOUR TASK GETS PROCESSED.
BUT IT'S OKAY.
WHEN IT'S DONE, IT WILL SEND A RESPONSE, AND
YOU CAN NOTIFY THE USER THAT THE DATA IS THERE,
OR THEY WILL GET AN EMAIL OR WHATEVER IT IS
THAT THE TASK WAS DOING.
SO A LOT OF PEOPLE TALK ABOUT CELERY AND
RABBITMQ.
THERE'S ACTUALLY MORE LIGHTWEIGHT TOOLS, SO IF
YOU STARTED WITH ASYNCHRONOUS TASKS FOR THE
VERY FIRST TIME, AND YOU'RE LIKE CELERY AND
RABBITMQ ARE A LOT OF OVERHEAD.
THERE'S A LOT OF DOCUMENTATION TO READ.
THERE'S AN OPTION THAT'S EASIER THAT I REALLY
LIKE FOR GETTING UP AND RUNNING WITH A NEW WEB
APPLICATION, AND YOU CAN USE REDIS OR PYTHON
AQ.
REDIS IS A KEY DATA STORE.
YOU CAN INSTALL IT LOCALLY OR ON YOUR SERVER.
YOU START THE SERVER ON PORT 6739 OR WHATEVER
THE PORT THAT YOU NORMALLY START IT ON.
AND PYTHON RQ, YOU START THE PYTHON RQ TASK
LISTENER AND IN YOUR CODE YOU GO THROUGH AND
ALL YOU DO IS -- IT'S ONE LINE, YOU ENQUEUE
FUNCTION CALLS.
SO LET'S SAY YOU HAVE A FUNCTION THAT'S CRAWL
FACEBOOK DATA.
THIS FUNCTION IS WHAT GOES OUT, DOES THE
NETWORK CALLS TO FACEBOOK, GETS BACK
INFORMATION ABOUT SOMEONE'S PROFILE, THINGS
LIKES THAT.
SO WHEN A USER COMES IN AND SIGNS UP OR DOES
THIS TASK, THE FUNCTION GOES THROUGH.
AND RATHER THAN ACTUALLY MAKING THE CALLOUT TO
FACEBOOK, IT ENQUEUES THIS FUNCTION CALL.
AND IT'S LIKE, ALL RIGHT, STICK THIS IN OUR
PYTHON RQ, AND DO THIS LATER.
AND THEN CONTINUE WITH THE REST OF THIS
FUNCTION, RETURN TO THE USER, AND LET THEM GET
BACK TO THEIR DAILY LIVES.
AND THEN IN THE BACKGROUND PYTHON RQ WAS
LISTENING, AND IT'S LIKE, YEAH, A TASK, AND IT
GOES OUT AND GOES TO FACEBOOK AND RUNS THIS
FUNCTION AND GETS THE DATA AND UPDATES THINGS
AND DOES EXACTLY WHAT YOU TELL IT TO DO IN THIS
FUNCTION BECAUSE YOU'VE WRITTEN THE CODE THAT'S
BEEN EXECUTED, SO WHEN IT'S ALL DONE YOU CAN
SEND EITHER A NOTATION, OR SOMETIMES YOU DO
NOTHING.
BUT IT'S HAPPENING ASYNCHRONOUS.
SO THE USER ISN'T BLOCKED, AND THIS CODE IS
RUNNING IN THE BACKGROUND.
AND PYTHON RQ ALSO HAS A SCHEDULER, SO IF YOU
WANT TO SCHEDULE TASKS TO BE RUN AT A CERTAIN
TIME, WHICH IS ANOTHER COMMON ASYNCHRONOUS USE
CASE, YOU CAN ACTUALLY USE RQ SCHEDULER WITH
PYTHON RQ, AND THEY'RE BOTH PYTHON LIBRARIES
THAT YOU JUST PIP INSTALL.
YOU CAN SCHEDULE IT TO DO TASKS IN THE UI.  AND
I LOVE THESE FOR GETTING STARTED.
WHEN YOU START TO HAVE REALLY BIG ASYNCHRONOUS
SERVICES IN THE BACKGROUND AS IN YOU MIGHT BE
DOING A LOT OF ASYNCHRONOUS TASKS, A LOT OF WEB
CRAWLING, YOU HAVE A LOT OF USERS WANTING TO DO
A LOT OF THINGS WITH YOUR APPLICATION, AND YOU
HAVE TO SCALE THESE SERVICES TO MULTIPLE
SERVERS.
YOU MIGHT START NEEDING MORE ROBUST SOLUTIONS,
BUT THAT WOULD BE AT A PRETTY BIG SCALE, SO
THESE ONES WILL SERVE YOU ALL FOR A VERY, VERY
LONG TIME.
THE DOCS ARE GREAT, AND I AM A HUGE FAN.
ALL RIGHT.
YOU'VE SET UP A BASIC ASYNCHRONOUS SERVICE.
TASKS ARE RUNS IN THE BACKGROUND.
YOU'RE SUPER EXCITED.
NOW, DID YOU -- NO.
YEAH.
I'M REALLY GOOD AT USING TECHNOLOGY.
I DON'T WANT TO BRAG OR ANYTHING.
>> SO NOW THE QUESTION IS WE'VE AUTOMATED OUR
DEPLOYMENTS, WE'RE HANDLING ASYNCHRONOUS TASKS,
BUT WE'RE RUNNING OUT OF MONEY.
WE HAVE TWO BIG PROBLEMS.
WE'RE RUNNING OUT OF MONEY, AND SO WE'RE
THINKING ABOUT HAVING TO GO TO VCS, AND THEY'RE
GOING TO ASK ABOUT TRACTION.
THEY'RE GOING TO WANT PRETTY GRAPHS LIKE THIS.
BUT THE OTHER PROBLEM IS WE'VE GOT HACKERS THAT
ARE TRYING TO BREAK INTO OUR SYSTEM.
SO THE QUESTION IS HOW DO WE HANDLE THAT.
DO WE FIRST GO TO THE VCS FOR MONEY, OR DO WE
TRY TO HANDLE OUR SECURITY ISSUES FIRST?
THE CHOICE IS UP TO YOU.
SO THIS IS J.MP/TRACK, TRAC-SAC SECURITY.
ALL RIGHT.
LOOKS LIKE SECURITY HAS DOUBLE THE VOTES, SO
WE'RE GOING TO GO WITH SECURITY.
HAVE SOME MAJOR SECURITY CONCERNS RIGHT NOW.
WE'RE LOGGING IN AS ROOT.
WE'RE USING A PASSWORD.
WE HAVEN'T SET UP ANY SORT OF PUBLIC/PRIVATE
KEY IN ORDER TO LOG IN.
AND THESE GUYS ARE COMING [INAUDIBLE].
WE'RE NOT EVEN GOING TO ADDRESS THE ISSUES THAT
MAY BE OCCURRING FROM AN APPLICATION LEVEL.
WE'RE SIMPLY GOING TO DO SOME VERY BASIC
UPDATES TO THE WEB SERVER -- TO THE SERVER
ITSELF.
FIRST OFF, NO ROOT LOGIN.
WE WANT SSH KEY LOGINS ONLY, AND WE'RE GOING TO
INSTALL TWO PASSAGES, FAIL DEBAND AND TWO
UNINTENDED UPGRADES.
HERE'S HOW WE DO THAT.
LOG INTO THE MACHINE.
WE SHH BACK INTO THE MACHINE.
THIS ISN'T SOMETHING WE'VE AUTOMATED, AND WE DO
A GROUP ADD FOR EMPLOYERS.
WE THEN ADD WITH THE SECOND COMMAND, WE OPEN UP
SUDOERS.
WE SHOULD COPY THE SUDOERS FILE.
SO THAT WOULD BE A DEPLOYERS.
DEPLOYERS EQUALS ALL.
ANY USER IN THE DEPLOYERS GROUP WOULD HAVE SUDO
PRIVILEGES, SO WE'RE NOT GOING TO DRAG IN AS
ROOT ANYMORE.
WE'RE GOING TO LOG IN AS A USER IN THE
DEPLOYER'S GROUP SO WE CAN THEN USE SUDO
COMMANDS.
WE WOULD ADD A USER CALLED DEPLOYER.
WE WOULD SET THE PASSWORD OF DEPLOYER, AND THEN
WE WOULD CHANGE THE USER TO BE A PART OF THE
DEPLOYER'S GROUP.
MAKE A DIRECTORY, A DOT SHH DIRECTORY FOR THE
DEPLOYER.
CHANGE THE OWNERSHIP OF THAT DIRECTORY BECAUSE
WE'RE CURRENTLY AS GROUP RIGHT NOW.
SO WE HAVE TO CHANGE THE OWNERSHIP OF THE
DEPLOYER HOME DIRECTORY AND THE .SHH DIRECTORY
TO BE UNDER DEPLOYER AND DEPLOYER FOR THE USERS
OF THE GROUP.
WE WOULD EDIT THE SHH D CONFIGURATION AND
CHANGE TWO LINES.
LET'S SAY WE'RE ON UBUNTU RIGHT NOW.
WE WOULD NOT DO PASSWORD AUTHENTICATION.
A PUBLIC/PRIVATE KEY USING THE SHH KEY GEN.
WE COPY OUR PUBLIC KEY TO BE AN AUTHORIZED KEY,
AND THEN WE SCP FROM OUR LOCAL SYSTEM ON TO A
REMOTE SYSTEM THE THREE FILES THAT WE
CREATED -- OR THE PUBLIC KEY AND THE AUTHORIZED
KEY.
AND THEN WE INSTALL FAIL DEMAND.
SO WE WOULD DO A SUDO APP GET FAIL DEMAND,
INSTALL UPGRADES, AND CONFIG UNINTENDED
UPGRADES, WHICH WOULD INSTALL SECURITY UPDATES
AUTOMATICALLY FOR ANY PACKAGES THAT WE HAVE
INSTALLED ON OUR SYSTEM AND FAIL DEBAND WOULD
PREVENT MANY ATTEMPTED USER LOGINS,
UNAUTHORIZED USER LOGINS.
THE SCRIPT KITTIES FOR NOW.
SO THE QUESTION IS WE'VE GOT ONE MORE CHOICE
HERE.
DO WE HAVE PROBLEMS WITH SCALING THAT WE NEED
TO FIGURE OUT, OR DID WE DELETE ALL OF OUR
DATA, AND NOW WE HAVE TO FIGURE OUT HOW TO
HANDLE THAT?
THE CHOICE IS UP TO YOU.
SO THIS IS J.MP/SCALE-DATA.
DATA IS CATCHING UP.
NECK IN NECK.
SCALING OR DATA?
>>  ALL RIGHT.
LET'S GO WITH DATA.
I'M JUST GOING TO CALL IT AND GO WITH DATA.
ALL RIGHT.
SO YOU HAVE MISSING DATA.
AND THE BACKGROUND STORY TO THIS IS IT'S
SOMETHING LIKE WHAT MY BROTHER DID AT HIS FIRST
INTERNSHIP.
HE WORKED AT TRILIO WHEN THEY WERE REALLY
SMALL, AND HE GETS THIS, AND, YOU KNOW, THEY
GIVE HIM ACCESS TO EVERYTHING.
HE'S A 19-YEAR-OLD INTERN.
HE'S TAKING TWO PROGRAMMING CLASSES AT THE
TIME.
AND HE GETS IN THERE, AND HE'S DOING SOMETHING
IN THE DATABASE, AND HE GOES DELETE STAR FROM
USERS, AND THEN HE ACCIDENTALLY HITS ENTER.
THAT'S WHY YOU DON'T GIVE PEOPLE READ/WRITE
PERMISSION FROM YOUR DATABASE.
SO MY BROTHER DELETED THE ENTIRE USER TABLE ON
HIS FIRST DAY OF INTERNSHIP.
THEY HAD TO RESTORE IT WHICH THEY ONLY COULD DO
BECAUSE THEY HAD BACKUPS OF THEIR DATA.
YOU NEVER WANT TO HAVE A SINGLE POINT OF
FAILURE.
YOUR DATA IS REALLY IMPORTANT, AND YOU ALWAYS
WANT TO BE ABLE TO RESTORE IT.
YOU WANT TO BE ABLE TO DEAL WITH A PROBLEM IF
YOUR MASTER DATABASE GOES DOWN.
I DIDN'T HAVE TIME TO FIX THIS, BUT THERE IS A
BIG MOVEMENT TO NOT CALL THEM MASTER SLAVES, TO
CALL THEM MASTER MIRRORS AND THINGS LIKE THAT,
WHICH I'M TOTALLY ON BOARD WITH.
SO REPLACE THAT WITH MIRROR OR REPLICATION
DATABASE, BUT THE BASIC IDEA IS THE SAME.
YOU HAVE ONE MASTER DATABASE, AND THAT IS WHERE
ALL OF THE RIGHTS IN YOUR SYSTEM GO.
SO WHENEVER SOMEONE -- ANY USER COMES IN, AND
THEY WRITE DATA OR YOUR ASYNCHRONOUS TAX
SERVICE WRITES DATA, IT ALL WRITES IT TO THE
MASTER DATABASE, THE MIRROR DATABASES, AND YOU
CAN HAVE AS MANY OF THESE AS YOU WANT GET
WRITTEN TO FROM THE MASTER DATABASE.
SO DATA COMES INTO THE MASTER, AND THEN IT GETS
WRITTEN TO THE NEXT MIRROR AND GETS WRITTEN TO
THE NEXT MIRROR AND SO ON.
SO YOU HAVE THESE ROBUST BACKUPS OF YOUR DATA
AND IN FACT CLIENTS CAN COME IN AND READ FROM
THE MIRROR DATABASES, THEY JUST CAN'T WRITE TO
THEM.
HAD ANOTHER CO-WORKER DO THIS WHERE HE ONE TIME
LOGGED INTO PRODUCTION AND ALTERED DATA ON A
PRODUCTION READ-ONLY MIRROR.
NOT RECOMMENDED.
IT TOTALLY BREAKS REPLICATION.
IF THE MASTER FAILS.
YOU CAN GO OUT TO ANY ONE OF THE MIRROR
DATABASES WHICH IS A GREAT SYSTEM.
YOU ALSO HAVE MORE DATABASES TO READ FROM SO
YOU CAN SPREAD OUT THE LOAD.
THIS IS THE MASTER MIRROR SYSTEM.
THE SECOND SYSTEM IS THE MULTI-MASTER SYSTEM.
SO IN THIS SYSTEM, EVERY DATABASE IS A MASTER.
EVERY DATABASE CAN BE WRITTEN TO.
AND THEN THOSE RIGHTS GET REPLICATED ACROSS THE
OTHER DATABASES.
NOW, MOST PEOPLE, MOST COMPANIES GO WITH THE
MASTER MIRROR SYSTEM BECAUSE IT'S SIMPLER TO
IMPLEMENT.
THE MULTI-MASTER SYSTEM HAS SOME ADVANTAGES.
YOU CAN READ AND WRITE TO ANY DATABASE, BUT IT
HAS SOME CHALLENGES, WHICH IS THAT DEALING WITH
COLLISIONS, DATA COLLISIONS ACROSS DIFFERENT
DATABASES CAN GET VERY COMPLICATED, ESPECIALLY
AS YOU SCALE AND ESPECIALLY AS YOU HAVE MORE
MULTI-MASTER DATABASES.
RIGHT?
SO YOU CAN DO EITHER ONE OF THESE.
THEY BOTH INVOLVE SETTING UP A SYSTEM WHERE YOU
HAVE MULTIPLE DATABASES.
NO SINGLE POINT OF FAILURE.
AND BACKUPS OF YOUR DATA.
SO THAT ONE OF YOUR DATABASES GOES DOWN, YOU'RE
LIKE, THAT'S FINE.
WE HAVE ANOTHER DATABASE.
THE SITE IS NOT GOING TO GO DOWN.
WE'RE NOT GOING TO DIE.
YOU'RE STILL GOING TO BE THERE ALL NIGHT
TERRIFIED OF WHATEVER IT IS THAT'S GOING ON
THAT MADE YOUR MASTER DATABASE GO DOWN, BUT YOU
HAVE A BACKUP.
AND THEN THE FINAL THING THAT YOU SHOULD DO
THAT COMPANIES ALSO DO IS THEY HAVE CONSTANT
BASICALLY BACKUPS OF ALL OF THE DATA.
SO EVERY TIME DATA IS WRITTEN TO A DATABASE,
THERE'S A TRANSACTION LOG.
THOSE CAN GET BACKED UP.
THOSE CAN GET COPIED TO A THIRD-PARTY STORAGE
SYSTEM SO THAT WHEN YOU GO TO -- IF YOU DELETE
A BUNCH OF DATA LIKE MY BROTHER DID, EITHER YOU
CAN CHANGE OVER THE MASTER AND SAY, OKAY, THIS
DATABASE IS TOTALLY RUINED, OR YOU CAN GET THE
BACKUP LOGS AND RESTORE THE DATA FROM THERE.
SO THERE'S A COUPLE DIFFERENT OPTIONS.
YOU SHOULD DO BOTH.
YOU SHOULD HAVE MULTIPLE DATABASES SO THERE'S
NO SINGLE POINT OF FAILURE, AND YOU SHOULD ALSO
HAVE COPIES OF YOUR DATABASES JUST BEING LOGGED
TO A THIRD-PARTY SYSTEM.
AND YOU GENERALLY USE A THIRD-PARTY SYSTEM FOR
THOSE BACKUPS BECAUSE THE DATA GETS REALLY
LARGE.
IF YOU'RE CONSTANTLY BACKING UP YOUR DATABASE
AND YOU'RE CONSTANTLY BACKING UP ALL OF YOUR
DATA, IT'S LIKE A MASTER SCALE THING AS YOU GET
MORE USERS AND MORE INFORMATION.
SO THERE ARE THIRD PARTY [INAUDIBLE].
ALL RIGHT.
YOUR DATA IS SAFE FOR NOW IF ONE OF YOUR
DATABASES GETS KILLED OR SOMETHING BAD HAPPENS.
YOU HAVE A FAILOVER SYSTEM.
BUT NOW --
>>  ALL RIGHT.
WE'VE PUT IT OFF AS LONG AS WE COULD.
BUT WE HAVE TO GO TO THE VENTURE CAPITALISTS
FOR ADDITIONAL FUNDING.
WE NEED TO RAISE MONEY TO CONTINUE OUR
APPLICATION.
>>  THOSE DACHSHUNDS ARE REALLY EXPENSIVE.
>>  DACHSHUNDS ARE REALLY EXPENSIVE.
WE HAVE ONE MORE CHOICE WE NEED YOU TO MAKE.
SO YOU GO AROUND, YOU DO THE TWO-WEEK, NON-STOP
TOUR OF 40 DIFFERENT VCS.
PUSHING YOUR DOC SEND DELIVERY SERVICE OVER AND
OVER AGAIN.
THE QUESTION IS DO WE ACCEPT OR REJECT THE
MONEY FROM VCS?
SO THIS IS THE FINAL QUESTION FOR THE AUDIENCE
SO WE CAN TEST, ACCEPT OR REJECT OR GO TO
J.MP/VC DOLLARS.
ACCEPT OR REJECT.
>>  JUST KNOW THAT YOUR VCS CAN TELL YOU TO
BUILD TOOLS FOR CUSTOMERS AND DO ONE-OFF THINGS
AND -- GENERALLY --
>>  WE KNOW WE LOSE THE CONTROL OF YOUR
APPLICATION IF WE ACCEPT THE FUNDING.
>>  BUT YOU ALSO GET A LOT OF MONEY, AND YOU
CAN BUY PING-PONG TABLES AND SNACKS.
A LOT OF SNACKS.
I LOVE THE OPEN SOURCE CROWD.
EVERYONE IS LIKE REJECT.
REJECT IT.
ALL RIGHT.
SO FUNDING IS REJECTED.
GOOD CHOICE.
THOSE GUYS ARE -- THEY WERE KIND OF JERKS
ANYWAYS.
>> SO WE'VE REJECTED THE VC MONEY.
WE STUCK TO OUR GUNS, AND WE DECIDED WE'RE
GOING TO SCRAPE BY FOR AS LONG AS WE CAN.
IT TURNED OUT TO BE A REALLY GOOD CHOICE.
WE WERE ABLE TO IMPROVE OUR CASH FLOW, OUR
SERVICE, AND EVENTUALLY, WE STRUCK RICHES.
AND WE STILL OWN THE COMPANY.
>>  BOOTSTRAPPING FOR THE WIN.
>> MASSIVE FUNDING FLOWS THROUGH YOUR COFFERS.
YOU'RE A GREAT SUCCESS.
BUT THE QUESTION IS IS IT ALL JUST A BUBBLE.
SO THIS IS OUR VERSION OF THE CHOOSE YOUR OWN
ADVENTURE STORY.
ALL OF THIS CODE, THIS IS A FLASK APPLICATION
THAT IS RUNNING WHICH ACCEPTS SMS INPUT AND HAS
WEB BROWSER VOTING.
SO YOU CAN GO AND DO YOUR OWN VERSION OF THE
CHOOSE YOUR OWN ADVENTURE STORY.
IT'S AN OPEN SOURCE FLASK APPLICATION ON
GITHUB.
AND IF YOU ARE INTERESTED IN THE CODE AND
TUTORIALS THAT SHOW YOU HOW YOU CAN BUILD AN
APPLICATION LIKE THIS AND ADD MORE
FUNCTIONALITY AND CREATE YOUR OWN, GO TO THIS
LINK J.MP/PYCON/CIA.
IT WILL GIVE YOU A LINK TO OUR BLOG POST AND
OTHER BLOG POSTS THAT YOU LEARN FROM THERE.
WE REALLY APPRECIATE YOU PARTICIPATING IN OUR
STORY TODAY.
THANK YOU.
[ APPLAUSE ]
WE HAVE A LITTLE BIT OF TIME LEFT.
IF ANYONE HAS QUESTIONS, YOU'RE WELCOME TO -- I
DON'T KNOW IF THERE'S A MICROPHONE OR YOU CAN
JUST STAND UP AND -- YEAH, THERE'S A MICROPHONE
IN THE MIDDLE BACK.
I CAN SEE IT NOW.
SO YOU'RE WELCOME TO ASK QUESTIONS.
IF YOU WANT TO COME AND ASK US QUESTIONS LATER,
TOO, WE'LL BE OUTSIDE IN THE HALLWAY.
YEAH.
THAT'S ABOUT IT.
>>  AUDIENCE:  SO YOU TALKED ABOUT HAVING
ASYNCHRONOUS QUEUE, AND IT'S ACTUALLY VERY HARD
TO DEBUG IT, TO TEST IT FOR PROBLEMS.
DO YOU HAVE ANY RECOMMENDATIONS FOR HOW TO GET
THAT PART OF THE APPLICATION CORRECT?
>>  TESTING YOUR ASYNCHRONOUS CODE?
SO WE DIDN'T TALK A TON ABOUT TESTING IN HERE,
BUT I MEAN I HOPE EVERYONE KNOWS THAT TESTING
IS A REALLY GOOD THING, AND THERE'S A LOT OF
TOOLS OUT THERE FOR CONTINUOUS INTEGRATION THAT
WILL RUN YOUR TESTS WHEN YOU MERGE CODE INTO
GITHUB.
BUT TESTING ASYNCHRONOUS CODE, YOU'RE RIGHT, IS
VERY DIFFICULT BECAUSE IF YOU'RE TESTING A
FUNCTION THAT HAS AN ASYNCHRONOUS CALL, YOU'RE
NOT ACTUALLY WAITING FOR THAT CALL TO COMPLETE.
THERE'S A TALK GOING ON RIGHT NOW THAT YOU
SHOULD WATCH THE VIDEO OF WHERE SOMEONE IS
GIVING A TALK ON TESTING ASYNCHRONOUS CODE.
AND THAT IS WHERE I WOULD POINT YOU, BASICALLY,
WHICH IS JUST TOOLS FOR TESTING THESE TYPES OF
THINGS.
AND THERE'S A BUNCH OF THINGS YOU CAN DO.
YOU CAN MOCK CODE.
YOU KNOW, YOU CAN TRY TO TEST DATABASE BUT
THAT'S GOING TO BE REALLY HARD.
SO SOMETIMES YOU CAN JUST TEST TO MAKE SURE
THAT THE NETWORK CALLS EITHER CALL OR FAIL
APPROPRIATELY.
THINGS LIKE THAT.
IT CAN GET VERY COMPLICATED.
SO I'M GOING TO POINT YOU TO THAT TALK AND YOU
SHOULD GO WATCH THAT.
>>  AUDIENCE:  THANK YOU.
HEY.
SO I REALLY ENJOYED THIS TALK.
I REALLY LIKED THE FORMAT.
ONE OF THE REASONS WHY I WAS A BAD KID WHEN I
WAS GROWING UP WAS BECAUSE WHEN I READ A CHOOSE
YOUR OWN ADVENTURE BOOK I WOULD ALWAYS LOOK AT
ALL THE OTHER OUTCOMES.
ARE THESE SLIDES ONLINE SO I CAN SEE ALL THE
PATHS WE DIDN'T TAKE TODAY?
>>  THEY ARE NOT.
>>  AUDIENCE:  OH, WILL YOU PUT THEM ONLINE?
>>  I WILL CERTAINLY CONSIDER PUTTING THEM
ONLINE, YEAH.
I WILL POST A LINK TO IT ON THE BLOG POST THAT
I PUT UP.
>>  AUDIENCE:  COOL.
THANK YOU.
COOL.  THANK YOU ALL VERY MUCH FOR COMING OUT.
>> KATE:  HAVE A GOOD AFTERNOON, EVERYONE.
