THE FINAL TALK OF OUR SESSION TODAY WILL BE GIVEN
BY LAURA RUPPRECHT WHO WORKS FOR ZEFR IN LOS
ANGELES.
SHE'LL TALK ABOUT DESCRIPTORS, SO PLEASE GIVE HER
A WARM WELCOME.
[ Applause ]
>> HEY, EVERYBODY.
I'M LAURA RUPPRECHT AND, YES, I'M HERE TO TALK
ABOUT DESCRIPTORS.
A LITTLE BIT MORE ABOUT ME.
I LIVE IN L.A. NOW, I WORK AT ZEFR.
WE DO A LOT OF CONTENT MANAGEMENT FOR PEOPLE ON
YOUTube AND I WORK ON A REALLY SMALL TEAM AND
WE WORK ON THE ADTECH SIDE.
SO ON THE DOWN SIDE, I PUT A LOT OF ADS ON CUTE
CAT VIDEOS BUT ON THE UPSIDE, YOU GET TO SEE ALL
THE CUTE CAT VIDEOS FOR FREE, SO PLUSES AND
MINUSES.
SOMETIMES I POST THINGS ON TWITTER.
THAT'S HOW I GET IN TOUCH.
SO I WANTED TO TALK A LITTLE BIT ABOUT WHAT A
DESCRIPTOR ACTUALLY IS, BECAUSE I DON'T THINK
THERE'S A LOT OF STUFF OUT THERE THAT REALLY GOES
OVER IT IN PRAGMATIC WAY AND TO DO THAT, I'M
GOING TO GO OVER A CUSTOM EXAMPLE AND THEN TALK A
LITTLE BIT ABOUT THE KIND OF DESCRIPTORS THAT
EXIST IN PYTHON AND HOW THEY'RE ACTUALLY USED IN
THE STANDARD LIBRARY, AND THEN TOUCH A LITTLE BIT
ON A FEW EXAMPLES SO, LIKE, PROPERTIES, CLASS
METHODS, A LITTLE BIT OF USAGE IN ORM AND THEN
TALK ABOUT A COUPLE OF COMMON PROBLEMS THAT YOU
MIGHT RUN INTO WHEN YOU'RE USING THEM.
SO FIRST THINGS FIRST.
WHAT EXACTLY IS A DESCRIPTOR?
SO, IT'S A CERTAIN TYPE OF ATTRIBUTE, SO HERE I
HAVE SOME DESCRIPTOR AND I'M USING THIS AS THIS
CLASS ATTRIBUTE ON THIS CLASS FOO, AND SO SOME
DESCRIPTOR SOMETHING THAT I'M USING INSTEAD OF A
NORMAL ATTRIBUTE, LIKE INSTEAD OF A STRING OR
ANOTHER RANDOM OBJECT AND AS LONG AS YOU DEFINE
DUNDER GET, DUNDER DELETE, THIS IS HOW THIS DOES
ITS MAGIC.
SO WHAT DOES THAT MEAN?
WHEN YOU WRITE A DESCRIPTOR, IT SHOULD LOOK
SOMETHING LIKE THIS, IF YOU WRITE THE CLASS.
QUICK NOTE, I'M DOING ALL OF MY EXAMPLES IN
PYTHON 3, SO IF YOU'RE DOING PYTHON 2, STILL, IN
THIS DESCRIPTOR CLASS, YOU HAVE TO INHERIT FROM
OBJECT OR ELSE IT WON'T WORK.
SO I HAVE AN INIT FUNCTION, I CAN PASS IN A BUNCH
OF ARGUMENTS, KEY WORD ARGUMENTS AND THAT SORT OF
DEFINES WHAT I'M DOING WITH THIS DESCRIPTOR, AND
THEN I HAVE MY GET METHOD AND SET AND DELETE,
WHICH DEFINES HOW I'M DOING ALL OF MY ATTRIBUTE
ACCESS.
SO THE INTERESTING THING ON THIS DUNDER GET
METHOD IS THAT I'M PASSING IN THE INSTANCE ON
WHICH I'M USING THIS DESCRIPTOR, WHICH I'LL SHOW
AN EXAMPLE SO HOPEFULLY IT'S A LITTLE BIT MORE
CLEAR, AND THEN I PASS IN THE OWNER, WHICH IS
PRETTY MUCH THE CLASS OF THAT INSTANCE.
SO I CAN ACTUALLY CALL THIS DIRECTLY FROM THE
CLASS AND HAVE DIFFERENT BEHAVIOR FROM IF YOU
CALL THIS ON AN INSTANCE, WHICH IS INTERESTING,
WHEREAS THE GET AND THE SET, THEY ONLY REALLY
CARE ABOUT THE INSTANCE AND THEN WHATEVER VALUES
YOU'RE TRYING TO SET ON THAT INSTANCE.
SO HOW I GOT INVOLVED IN TRYING TO FIGURE OUT HOW
DESCRIPTORS WORK IS I DEAL WITH A LOT OF VIDEO
STUFF AND I HAD TO DEAL WITH THE YOUTube API,
AND IT'S A LOT OF JSON SO I HAVE A BUNCH OF
DICTIONARY ACCESS EVERYWHERE IN THE CODE.
SO I'M DEALING WITH STUFF LIKE THIS.
SO IF I WANT TO PULL OUT A URL FROM A RESPONSE
THAT I GET, I HAVE TO GET THE VIDEO RESPONSE AND
I HAVE TO PULL OUT THE SNIPPET AND THE
THUMBNAILS.
THEN I HAVE TO PULL OUT THE PARTICULAR RESOLUTION
THUMBNAIL THAT I WANT AND THEN I HAVE TO PULL OUT
THE URL, AND, YEAH, IT'S OKAY BUT IT'S A REAL
PAIN TO DEAL WITH.
MY I.D.E. IS DO NOT REALLY DO ANY AUTO COMPLETE
FOR THIS TYPE OF THING BECAUSE IT'S JUST
DICTIONARY ACCESS, SO MY BOSS AT THE TIME, THIS
IS WHEN I WAS WORKING AT THE ZEFR BOSTON OFFICE,
JONATHAN TUSHMAN, HE CAME UP TO ME AND HE'S
ALWAYS EXCITED ABOUT EVERYTHING.
SO HE SAID, OKAY, I THINK I KNOW HOW TO SOLVE
THIS PROBLEM AND I THINK THE WAY TO DO IT IS TO
USE DESCRIPTORS.
TO WHICH I SAID, AH, OKAY, SO WHAT'S A
DESCRIPTOR?
WHICH BROUGHT ME TO THAT WHOLE THING WHERE I WAS
TRYING TO FIGURE OUT WHAT IT WAS, WHICH IF YOU
LOOK IN THE OFFICIAL DOCUMENTATION, IT'S AN
ATTRIBUTE WITH SOME SORT OF BINDING BEHAVIOR,
WHICH IN RETROSPECT, RIGHT, AFTER I'VE DONE ALL
OF THIS READING ON DESCRIPTORS, TOTALLY MAKES
SENSE.
ABSOLUTELY MAKES SENSE.
BUT WHEN I WAS FIRST LOOKING AT THIS, IT -- LIKE
WHAT KIND OF BINDING BEHAVIOR?
SO THAT'S THAT GET, SET AND DELETE THAT I WAS
TALKING ABOUT.
SO FORGET THAT, LET'S JUST LOOK AT THIS LOVELY
RESPONSE THAT I GET BACK FROM YOUTube.
AND THIS ISN'T EVEN IF I PULL OUT ALL THE FIELDS
THAT I CAN PULL OUT.
SO THAT'S MY LOVELY DICTIONARY ACCESS.
IT'S KIND OF ANNOYING.
AND I'M NOT EVEN USING MOST OF THIS SO MOST OF
THIS I'M JUST GOING TO IGNORE.
SO I'M DEALING WITH IT LIKE THIS, BUT HOW CAN I
MAKE THIS A LITTLE BIT PRETTIER TO DEAL WITH?
AND SO FIRST TRY IS TAKE THIS AND PUT IT INTO AN
OBJECT.
I HAVE THIS RESPONSE, IT WOULD BE MYSELF TO
PACKAGE THAT UP SOMEHOW, SO I DO ALL OF THAT SAME
DICTIONARY ACCESS AND I PUT IN ALL OF THE
RESPONSES AND I PULL OUT ALL THE FIELDS IN MY
INIT FUNCTION.
THE ONLY PROBLEM HERE IS IF I UPDATE ANY OF THIS
STUFF, I HAVE TO DO IT EXPLICITLY BECAUSE ONCE I
SET THESE THINGS ON SELF, IT WON'T AUTOMATICALLY
UPDATE, SO IF THE RESPONSE CHANGES, I CAN'T JUST
UPDATE THE RESPONSE ON THE OBJECT AND THEN HAVE
THAT SORT OF BUBBLE UP TO ALL OF THOSE
ATTRIBUTES.
SO, OKAY, A LITTLE BIT BETTER.
THIS JUST FOR THE SAKE OF CONVENIENCE I FIGURED I
WOULD USE A DICTIONARY DIGGER MODULE, WHICH
YOU'LL SEE WHY I'M DOING THIS IN A LITTLE BIT.
IT LETS YOU PASS IN A BUNCH OF PATH ARGUMENTS AND
THEN IT USES THAT TO PULL OUT ALL OF THOSE JSON
RESPONSES BUT IT STILL HAS THE SAME PROBLEM AS
THE LAST EXAMPLE WHICH IS NAMELY THAT I HAVE THIS
JSON RESPONSE AND IT -- IF I UPDATE THE JSON
RESPONSE, THAT JSON RESPONSE WILL BE OUT OF SYNC
WITH ALL OF THESE ATTRIBUTES THAT I HAVE IN THAT
INSTANCE.
SO STILL REPETITIVE, NOW WE BRING IN THE MAGIC.
SO I HAVE A DESCRIPTOR NOW, RIGHT?
AND THIS IS THE COOL THING.
SO I HAVE A JSON RESPONSE IN MY YOUTube
RESPONSE CLASS.
OR IN AN INSTANCE OF MY YOUTube RESPONSE
CLASS.
AND THEN IF YOU NOTICE THE YOUTube I.D. AND
THE TITLES AND THE VIEWS AND THE DESCRIPTION, I'M
JUST USING A DESCRIPTOR FOR THAT.
SO WHAT THIS DESCRIPTOR IS ACTUALLY DOING, I
INITIALIZE IT AND THIS GETS EXECUTED WHEN I FIRST
CREATE THIS CLASS AND I'M SPECIFYING THE RULES
FOR PULLING OUT THESE ATTRIBUTES.
SO INSTEAD OF SETTING SOMETHING TO SELF IN AN
INIT FUNCTION, I'M SAILING THIS IS MY DESCRIPTOR
WHEN I DO A GET OPERATION SO INSTANCE OF
YOUTube RESPONSE.VIEWS, GO TO THIS GET
FUNCTION, PASS IN THAT INSTANCE THAT I HAVE, AND
THEN PASS IN THE CLASS, AND THEN PULL OUT
WHATEVER IS THE PATH FOR GETTING THAT JSON
RESPONSE OUT.
AND I SET UP THE PATH, THAT'S THE FIRST THING
THAT HAPPENS WHEN THIS CLASS IS CREATED.
SO JUST FOR COMPLETENESS, FIGURE IT ADDS SOME
ERROR CHECKING, SO IF I RUN INTO AN INDEX ERROR
OR KEY ERROR, GIVE BACK A MORE USEFUL ERROR.
SO GIVE BACK AN ATTRIBUTE ERROR BECAUSE THAT'S
WHAT YOU WOULD EXPECT IN THIS CASE, AND THEN I
STILL HAVE THE YOUTube RESPONSE AS BEFORE.
SO IT'S A LOT EASIER TO DEAL WITH AND THEN I CAN
PULL OUT THE TITLE REALLY EASILY AND I CAN
RICK-ROLL EVERYBODY.
SO, NOW, I DIDN'T EXPLAIN EVERYTHING, THOUGH, SO
THERE'S TWO TYPES OF DESCRIPTORS.
THERE'S A DATA DESCRIPTOR WHERE YOU DEFINE A GET
AND THEN YOU DEFINE A SET AND/OR DELETE.
AND THEN THERE IS A NONE DATED DESCRIPTOR WHERE
WHERE YOU JUST DEFINE A GET FUNCTION.
SO, LIKE, WHY DO I HAVE THESE?
SO WHEN I LOOK UP AN ATTRIBUTE, PYTHON IS
DICTIONARIES ALL THE WAY DOWN, IF YOU TALK TO
ANYONE, THEY SAY, YEAH, EVERYTHING IN PYTHON IS A
DICTIONARY, SO WHAT HAPPENS WHEN I LOOK UP
FOOD.X, IS I LOOK IN THAT INSTANCE DICTIONARY AND
THEN I PULL OUT X AND I GET WHATEVER I PUT IN
THERE.
WELL, KIND OF, RIGHT.
LIKE THIS ENTIRE TALK IS, YEAH, THAT'S HOW IT
WORKS BUT IT ACTUALLY WORKS LIKE THIS.
SO WHEN I LOOK FOR FOO.X, I'M BREAKING IT UP INTO
FOUR STEPS, RIGHT?
SO FIRST I CHECK THE CLASS DICTIONARY FOR A DATA
DESCRIPTOR, SO IT HAS TO HAVE A SET OR DELETE IN
ADDITION TO A GET METHOD DEFINED.
SO FIRST I CHECK THERE.
IF THERE IS A NON-DATA DESCRIPTOR OR IF THERE'S
JUST A NORMAL ATTRIBUTE, DON'T CARE, SKIP IT.
IF I DON'T FIND THAT, I CHECK THE INSTANCE
DICTIONARY AND THAT'S SORT OF THE NORMAL PYTHON
ACCESS THAT YOU'RE LOOKING FOR.
IF I DON'T FIND THAT, THEN I LOOK ON THE CLASS
AGAIN FOR A NON-DATA DESCRIPTOR OR JUST A CLASS
ATTRIBUTE, OR IF I DON'T FIND ANYTHING, THROW AN
ATTRIBUTE THERE.
REMEMBER, THIS ALSO GOES FOR EVERYTHING IN THE
RESOLUTION METHOD ORDER, IF YOU DON'T FIND
ANYTHING IN THAT CLASS.
SO WHY ON EARTH IS THIS SPLIT UP?
IT'S A WAY TO HAVE FUNCTION OR METHOD ACCESS FIT
IN A LITTLE BIT BETTER WITH ATTRIBUTE ACCESS IN
GENERAL.
SO WHEN YOU CALL A FUNCTION, YOU CALL
INSTANCE.FOFX.
THEN YOU CHECK THAT CLASS DICTIONARY FOR A DATA
DESCRIPTOR.
YOU DON'T USUALLY FIND ONE OF THOSE FOR A NORMAL
METHODICAL, SO THEN YOU CHECK THE INSTANCE
DICTIONARY OF WHATEVER YOU'RE CALLING THIS ON FOR
ANY KIND OF ATTRIBUTE.
DON'T USUALLY FIND THAT, SO THEN YOU GO AND YOU
FIND A NON-DATA DESCRIPTOR BACK IN THE CLASS --
IN THE CLASS DICTIONARY.
AND THEN YOU PULL OUT THAT SPECIFIC FUNCTION WITH
THE INSTANCE AND THE OWNER, USING THAT GET
DESCRIPTOR METHOD, AND THEN YOU HAVE THE FUNCTION
AND SO THAT SELF, WHICH IS USUALLY YOUR FIRST
ARGUMENT, THAT'S WHAT YOU MORE OR LESS PASS INTO
THAT FUNCTION.
SO IN THIS WHOLE LINE OF LOOKING UP AN ATTRIBUTE,
WHEN YOU HAVE A FUNCTION, YOU'RE DOING THIS THIRD
STEP.
SO NOW THAT WE'VE GONE OVER THAT, PROPERTY AND
CLASS METHOD.
THEY GET USED A LOT AND A LOT OF TIMES PEOPLE
DON'T KNOW WHY THEY WORK BUT THEY DO AND IT'S
MAGIC AND IT'S REALLY NICE AND FOR PROGRAMMING,
IT'S A PRETTY NEAT WAY TO GET DESCRIPTOR
FUNCTIONALITY WITHOUT HAVING TO DO ALL OF THESE
SETTING EVERYTHING UP YOURSELF.
SO WHEN YOU HAVE SOMETHING SET UP AS A PROPERTY,
YOU ACTUALLY TRANSFORM SOMETHING WITH THIS
DECORATOR FROM SOMETHING LIKE -- LIKE PROPERTY
DEATH BAR RETURN, WHATEVER THE ANSWER IS, INTO
THIS PROPERTY-LIKE THING.
SO YOU'LL IN THE, IF YOU'RE FAMILIAR WITH THE WAY
PROPERTIES WORK, YOU CAN ACTUALLY DO SOMETHING
LIKE BAR.SETTER OR BAR.DELETER, AND THEN THAT
WILL MORE OR LESS ADD THOSE FUNCTIONS TO THIS BAR
PROPERTY.
BUT MOST OF THE TIME I SEE THIS, PEOPLE JUST HAVE
A SINGLE PROPERTY, SO THEY JUST DEFINE THE GETTER
AND YOU CAN DEFINE DOCUMENTATION, TOO, WHICH IS
KIND OF NEAT.
SO THAT'S ESSENTIALLY WHAT THIS GETS TRANSFORMED
INTO.
NOW, WHEN I USE THIS LIKE THIS, IT'S REALLY NICE
BECAUSE I GET TO TREAT IT SORT OF AS AN
ATTRIBUTE, SO IF IT'S SOMETHING THAT HAS TO BE
COMPUTED ON THE FLY, I CAN USE IT THAT WAY.
BUT YOU HAVE TO REMEMBER, EVEN IF YOU DON'T SET
THE UPSET METHOD OR THE DELETE METHOD, THIS IS
ALWAYS A DATA DESCRIPTOR SO IT WILL ALWAYS TAKE
PRECEDENCE IN THAT ORDER I SHOWED EARLIER.
ON THE OTHER HAND, CLASS METHOD TRANSFORMS YOUR
CODE FROM SOMETHING LIKE THIS INTO THIS SPECIAL
CLASS METHOD ATTRIBUTE, AND THE WAY YOU USE THAT
IS YOU CALL IT EITHER ON AN INSTANCE OR YOU CAN
CALL IT ON THE CLASS ITSELF.
AND THIS IS ALSO A NON-DATA DESCRIPTOR, AND I'M
NOT GOING TO GO OVER STATIC METHOD BUT THAT'S
SIMILAR.
SO IN ORMs, NOW THAT YOU'VE SEEN A LOT OF THESE
IN THE EARLIER PORTIONS OF THIS TALK, YOU'LL
NOTICE THAT I HAVE THIS CAR FIELD AND THIS DATE
FIELD AND THOSE ARE DESCRIPTORS, RIGHT, BECAUSE
THE NAME AND THE BIRTHDAY, THOSE ARE DEFINED ON
THIS PERSON CLASS, SO I HAVE THESE ATTRIBUTES
THAT ARE SET ON THE CLASS AND I'M USING THEM TO
DEFINE HOW I'M GETTING THINGS OUT OF AN INSTANCE
OF THAT CLASS.
IT'S A LITTLE ROUNDABOUT BUT I CAN DO STUFF
THAT'S COOL LIKE THIS, LIKE SETTING A MAXIMUM
LENGTH ON A FIELD.
AND USE THAT JUST HOWEVER I WOULD NORMALLY USE IT
IN DJANGO AND I CAN JUST SOME CRAZY VALIDATION,
AND IT WILL TELL ME, NO, THIS DOESN'T WORK.
SO WHY WOULD YOU WANT TO DO THIS, BECAUSE THESE
ARE SUPER COMPLICATED?
SO A LOT OF THIS VALIDATION -- I SEE A LOT OF
THIS FOR CONVERTING UNITS, IF YOU'RE DOING A LOT
OF GETTING AND SETTING AND LET'S SAY YOU RESTORE
EVERYTHING ON THE BACK END IN METRIC BUT YOU HAVE
SOME CRAZY U.S. PEOPLE WHO WANT TO USE IMPERIAL
UNITS.
YOU CAN MAKE IT EASIER TO MANIPULATE THOSE FIELDS
AND YOU DON'T HAVE TO WORRY ABOUT YOUR
DIFFERENT -- YOUR DIFFERENT ATTRIBUTES ON YOUR
INSTANCES BECOMING OUT OF SYNC HAVE WHY NOT TO
USE THIS?
BECAUSE IT LOOKS AWESOME.
JOB SECURITY.
ALTHOUGH IN HINDSIGHT, THOSE MIGHT BE WHY YOU
SHOULD USE DESCRIPTORS, SO, AGAIN, PLUSES AND
MINUSES.
AND BECAUSE YOU'RE SETTING ALL THIS STUFF UP
YOURSELF, YOU SHOULD THINK ABOUT INCLUDING SOME
OTHER ERROR CHECKING SO THAT WHEN PEOPLE USE THIS
STUFF, WHEN THEY HIT AN EXCEPTION FOR SOME
REASON, THEY KNOW WHY THEY'RE GETTING THAT
EXCEPTION SO IF YOU DECIDE YOU DON'T WANT TO
IMPLEMENT SOMETHING, ADD A NOT-IMPLEMENTED ERROR.
OR IF YOU DON'T WANT AN ATTRIBUTE TO EXIST ON A
CERTAIN CLASS OR ON A CERTAIN INSTANCE, THEN YOU
CAN RAISE THAT.
NOW, LAST THINGS IS IT'S REALLY EASY TO MESS THIS
STUFF UP, ESPECIALLY IF YOU'RE USED TO USING SORT
OF NORMAL PYTHON CLASSES.
AND NOT DESCRIPTORS.
SO WHAT I'M DOING HERE IS I'M INITIALIZING SOME
VALUE ON A DESCRIPTOR TO NONE.
I HAVE A GET METHOD AND I RETURN THE VALUE, I LET
YOU SET THE VALUE.
PROBLEM HERE IS, LIKE, THIS IS NORMAL PYTHON
CODE, RIGHT?
YOU CAN EXECUTE IT, IT DOES STUFF, BUT IF I MAKE
THING ONE THAT'S AN INSTANCE OF THAT CLASS, AND I
SET AN ATTRIBUTE ON, SAY, X, WHATEVER IS THIS
DESCRIPTOR, ESSENTIALLY SET THAT AS A CLASS
ATTRIBUTE BECAUSE I MAKE ANOTHER INSTANCE OF THAT
CLASS AND THEN I PRINT OUT THING2.X AND I GET
WHAT I PUT INTO THE FIRST ONE.
WHY IS THAT?
BECAUSE I HAVE ONE INSTANCE OF THIS DESCRIPTOR
DEFINING THAT X FIELD AND I'M STORING THAT HELLO
WORLD, I'M STORING THAT ON THAT DESCRIPTOR WHICH
IS WHY I GET THAT BACK WHEN I HAVE THING2.X.
ANOTHER THING TO LOOK OUT FOR IS INFINITE
RECURSION.
DON'T USE YOUR GET FUNCTIONS TO DO A GET ADDER
BECAUSE THAT WILL JUST CALL YOUR GET FUNCTION
AGAIN.
THERE IS A WAY TO DEAL WITH THIS, A FEW GOOD
WAYS.
YOU'RE REALLY NOT USING THAT INSTANCE DICTIONARY
SO WHY NOT STORE THE STUFF THERE?
THROW IN SOME ERROR CHECKING AND THEN I CANNOT
EVEN INCLUDE A SETTER.
SO USE THAT INSTANCE DICTIONARY AND THEN ANOTHER
THING TO NOTE IS THIS SET.
IF I DON'T INCLUDE THIS SET, THEN I HAVE A
NON-DATA DESCRIPTOR, WHICH MEANS THAT THAT
INSTANCE DICTIONARY, I DON'T LIKE THAT ATTRIBUTE
WILL BE RETURNED FROM THAT INSTANCE DICTIONARY
BECAUSE IT WILL TAKE PRECEDENCE OVER THAT GET
METHOD.
BUT IF I DO HAVE IT, THEN I'M JUST RETURNING
WHATEVER IS IN THAT DICTIONARY.
SO THERE ISN'T TOO MUCH REALLY AWESOME STUFF OUT
THERE ON DESCRIPTORS BUT THERE ARE A FEW REALLY
GOOD THINGS, SO DE-MYSTIFYING DESCRIPTORS IN FIVE
MINUTES BY CHRIS BIAUMONT WITH A REALLY SNAZZY
PYTHON NOTEBOOK, THAT'S A GOOD ONE, FIVE MINUTES,
SUPER NICE.
I REALLY LIKE DAVID BEASLEY'S PYTHON 3 META
PROGRAMMING TUTORIAL.
UNFORTUNATELY IT'S LIKE THREE HOURS LONG.
IT'S A THREE HOURS THAT I WOULD DEFINITELY
RECOMMEND, THOUGH, REALLY GOOD.
ON THE SHORTER SIDE OF THINGS, AGAIN, IS SIMIAN
FRANKLIN HAS A REALLY GOOD THREE-MINUTE
PRESENTATION ON PYTHON DESCRIPTORS AND HE DOES A
GOOD JOB OF GOING THROUGH ALL THE PYTHON ACCESS.
AND TRIED AND TRUE, RAYMOND HEADINGER'S
DESCRIPTOR HOW-TO GUIDE.
FOR THAT ONE, I DEFINITELY RECOMMEND READING IT
AND GOING AND DOING SOME OTHER READING AND THEN
COMING BACK TO IT AND WHEN YOU COME BACK TO IT,
THERE WILL BE SO MUCH STUFF THAT JUST DIDN'T
REALLY SINK IN BEFORE BUT BECOMES REALLY CLEAR
LATER.
AND THEN ALSO THE INSIDE STORY ON NEW STYLE
CLASSES, ALSO REALLY GOOD.
HE GOES INTO A LOT OF WHY METHODS WORK THE WAY
THEY DO AND HOW THEY'RE SORT OF WRAPPED IN ORDER
TO HAVE AN INSTANCE BE ABLE TO CALL A METHOD ON
IT AND THEN HAVE THAT CALL A FUNCTION WITH YOUR
INSTANCE AS THE FIRST ARGUMENT AUTOMATICALLY.
SO THESE ARE ALL REALLY GOOD.
I'LL POST THE SLIDES SO YOU CAN PULL THOSE OUT.
SLIDES ARE THERE AT PYDESCRIPTORS AND YOU CAN
CONTACT ME THAT WAY.
SO, THANKS.
IF YOU HAVE ANY QUESTIONS, LOVE TO ANSWER THEM.
[ Applause ]
>> AUDIENCE:  THANKS FOR YOUR TALK.
I GOT A -- BY THE SLIDE THAT I DIDN'T HAVE TIME
TO LOOK AT THE CODE.
CAN YOU GO BACK AND DO THE SLIDE, PLEASE?
>> WHICH ONE?
>> AUDIENCE:  THE RED CRAWL ONE, WHEN YOU GOT THE
ATTRIBUTES -- FINAL SOLUTION FOR THE ATTRIBUTE
FOR THE YOUTube.
YEAH, THAT ONE.
>> THIS ONE?
>> AUDIENCE:  NO, PREVIOUS -- THE BIG...
YEAH.
>> YEAH.
>> AUDIENCE:  I GOT DISTRACTED BY THE IMAGE.
[ Laughter ]
>> I KNOW, THAT'S BEAUTIFUL.
ACTUALLY DID PULL THIS OUT USING THE YOUTube
API.
TO GET THE MAXIMUM RESOLUTION URL.
[ Laughter ]
>> AUDIENCE:  HI.
I ACTUALLY HAVE A QUESTION ABOUT THE NEXT SLIDE.
[ Laughter ]
>> THIS.
>> AUDIENCE:  NEXT ONE.
>> THE NEXT-NEXT ONE.
>> AUDIENCE:  THIS ONE, YES.
YOU SAY THAT THERE IS A DIFFERENCE BETWEEN STEP
ONE AND STEP 3 AND I DON'T REALLY SEE IT.
YOU SAY TYPE FOUR AND YOU WERE CHECKING FOR DATA
DESCRIPTOR AND THEN FOR CHECKING FOR NON-DATA
DESCRIPTOR BUT LOOKING AT THE CODE, I CAN'T TELL
THE DIFFERENCE.
>> OH, OKAY, SO THIS LOOKS IN THE SAME PLACE, SO
IN BOTH OF THOSE STEPS, YOU LOOK AT THE CLASS OF
WHATEVER INSTANCE YOU HAVE AND THEN YOU LOOK IN
THE CLASS DICTIONARY AND THEN YOU LOOK AT
WHATEVER -- X, IN THIS CASE.
THE DIFFERENCE IS THAT IN STEP 1, YOU'RE
EXPLICITLY CHECKING FOR SOMETHING THAT HAS A SET
OR DELETE, AND THE PYTHON INTERPRETER LOOKS FOR
THIS AND IF YOU HAVE SOMETHING THAT DOESN'T HAVE
SET OR DELETE BUT JUST HAS A GET, THAT'S SORTS OF
TERMED AS A NON-DATA DESCRIPTOR AND THEN YOU
DON'T PULL THAT OUT UNTIL THE THIRD STEP HERE.
SO IF YOU HAVE A SET OR DELETE ALONG WITH YOUR
GET, YOU'LL HIT STEP ONE WHEN YOU PULL OUT THAT
TRIBUTE.
OTHERWISE, YOU'LL GO THROUGH THESE OTHER STEPS.
AND THE REASON THEY DID THIS WAS SO THAT YOU
COULD HAVE FUNCTION CALLS OR METHOD CALLS,
RATHER, AND THOSE USUALLY ARE FOUND IN THIS THIRD
STEP BECAUSE THEY'RE -- LIKE, YOU HAVE A FUNCTION
THAT'S SORT OF WRAPPED IN A NON-DATA DESCRIPTOR
SO THAT YOU CAN PASS IN THAT INSTANCE AS THE
FIRST ARGUMENT WHEN YOU'RE CALLING THAT FUNCTION.
BUT YOU CAN ACTUALLY OVERRIDE THAT CALL ON THE
INSTANCE ITSELF BECAUSE IF YOU PUT SOMETHING INTO
THAT INSTANCE DICTIONARY, WHEN YOU GO TO CALL
THAT FUNCTION, IT WILL HIT THAT SECOND STEP
FIRST, OR SECOND.
IT WILL HIT IT BEFORE THE THIRD STEP AND THAT'S
WHAT'S IMPORTANT.
>> AUDIENCE:  SO WHEN IT COMES TO FUNCTIONS,
WOULD THEY BE CONSIDERED DATA DESCRIPTORS OR
NON-DATA DESCRIPTORS?
>> NON-DATA DESCRIPTORS.
>> AUDIENCE:  THANK YOU.
>> AUDIENCE:  YOU ACTUALLY JUST ANSWERED MY
QUESTION.
[ Laughter ]
>> YES, TWO FOR ONE.
>> AUDIENCE:  OKAY.
THANK YOU VERY MUCH, LAURA.
>> THANK YOU.
[ Applause ]
03:09:59