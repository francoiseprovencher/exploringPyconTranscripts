>> HELLO, EVERYONE.
SO OUR SPEAKER TODAY IS JULIA EVANS, AND HER TALK
IS TITLED SPYING ON YOUR PROGRAMS.
PLEASE GIVE HER A WARM WELCOME.
[APPLAUSE]
>> HEY, EVERYONE.
SO I'M JULIA, AND I'M GOING TO TALK ABOUT ONE OF MY
FAVORITE THINGS I'M BEEN LEARNING FOR THE LAST YEAR
AND A HALF WHICH IS HOW TO BECOME A BETTER SPY.
SO I'M NOT GOING TO TAKE QUESTIONS AT THE END OF
THE TALK.
IF YOU HAVE QUESTIONS, TWEET THEM TO ME.
IF I HAVE TIME I'LL TRY TO ANSWER THEM.
BUT WE'RE NOT GOING TO DO QUESTIONS AT THE
MICROPHONE.
SO, LET'S GET GOING!
FIRST OFF, THIS TALK IS NOT REALLY ABOUT PYTHON.
IT'S ABOUT LOTS OF STUFF.
IT'S ABOUT TOOLS THAT YOU CAN USE TO DEBUG
PROGRAMS, NO MATTER WHAT PROGRAMMING LANGUAGE
THEY'RE WRITTEN IN WHICH I HEARD IS A THING ONLY
RECENTLY AND KIND OF A HUGE SURPRISE TO ME.
MOST OF THE THINGS I'M GOING TO DISCUSS IN THIS
TALK ARE GOING TO BE LINUX-SPECIFIC.
WE'RE GOING TO GET FAST TO LINUX DETAILS, WHICH I
PROMISE YOU'RE GOING TO UNDERSTAND BECAUSE YOU'RE
ALL REALLY SMART AND I'LL GOING TO EXPLAIN IT.
SO DON'T WORRY.
BUT THIS IS A LINUX-SPECIFIC TALK.
AND YOU'RE GOING TO UNDERSTAND WHY.
PRETTY SOON.
THE ATTITUDE I WANT TO KIND OF CONVINCE YOU OF IN
THIS TALK IS THAT YOU SHOULD START THINKING ABOUT
YOUR PROGRAMS AS BLACK BOXES.
AS IF THEY'RE WRITTEN BY PEOPLE WHO ARE MALICIOUS.
SO THIS TALK IS REALLY ABOUT THE PROBLEM OF LIKE
HOW DO YOU OBSERVE WHAT A PROGRAM IS DOING WHILE
IT'S RUNNING, RIGHT?
YOU'VE WRITTEN A PROGRAM, IT'S DOING SOMETHING, AND
HOW DO YOU KNOW WHAT THAT IS, RIGHT?
[NO AUDIO]
LOOK AT THE SOURCE CODE, WHO LOOKS AT THE SOURCE
CODE?
[NO AUDIO]
BY THE CODE, YOU MIGHT THINK THAT TO DEBUG A
PROGRAM, YOU NEED TO KNOW THE PROGRAMMING LANGUAGE
THAT ITS WRITTEN IN.
NONE OF THESE THINGS ARE TRUE.
AND THE TOOLS I'M GOING TO EXPLAIN DON'T INVOLVE
READING THE PROGRAM, CARING ABOUT THE PROGRAM
LANGUAGE THAT ITS WRITTEN IN.
AND WE WANT TO TALK ABOUT HOW TO BE A WIZARD,
RIGHT?
HOW TO DEBUG WITHOUT DOING ANY OF THIS STUFF.
THIS IS SOMETHING WHICH IS ALREADY FAMILIAR TO YOU,
RIGHT?
LIKE I'M SAYING THIS IS WIZARDRY.
IF YOU LOOK AT A TOOL WHICH TELLS YOU HOW MUCH CPU
PROGRAMS YOURS ARE USING.
TOP DOESN'T CARE WHAT LANGUAGE CHROME IS WRITTEN
IN, RIGHT?
IT'S USING THE SWITCH MEMORY, USING THIS MUCH CPU,
AND THAT'S IT.
AND WE'RE GOING TO TALK ABOUT LIKE, MORE LIKE
ADVANCED WAYS TO DO THAT.
AND I'LL EXPLAIN WHAT I MEAN BY THAT.
AS WE GO THROUGH THIS.
SO, HERE'S HOW IT'S GOING TO GO.
WE'RE GOING TO START OFF BY TALKING ABOUT OPERATING
SYSTEMS A LITTLE BIT.
AND WHAT'S AN OPERATING SYSTEM, HOW DOES IT WORK
AND WHAT DO WE NEED TO KNOW TO BECOME WIZARDS.
AND WE'RE GOING TO TALK THROUGH THREE MYSTERIES.
CASE OF -- WEBSITE AND THE CASE OF THE SLOW
PROGRAM.
AND THEY'RE ALL GOING TO BE REALLY FUN.
AND WE'RE GOING TO LEARN A FEW THINGS ABOUT SPYING.
AND HOW TO BECOME A SPY.
SO I WANT TO TALK A LITTLE BIT ABOUT WHY YOU SHOULD
LOVE YOUR OPERATING SYSTEM.
WHEN I STARTED LEARNING ABOUT THIS, I HAD BEEN
USING LINUX FOR A LONG TIME, FOR MAYBE NINE YEARS
AND ATOM POINT -- AT SOME POINT I WAS LIKE WHAT DID
THE LINUX ACTUALLY DO.
I REALIZED I WAS CONFUSED ABOUT SOME FUNDAMENTAL
POINTS ABOUT WHAT AN OPERATING SYSTEM DID.
I'M GOING TO EXPLAIN EVEN THOUGH YOU PROBABLY KNOW
MORE OR LESS THE STUFF ALREADY.
SO LET'S SAY THAT YOU GO TO GOOGLE.COM, RIGHT?
SO THE THINGS THAT HAPPEN ARE, LIKE, THIS IS AN
ENGINEER QUESTION I'VE GOTTEN BEFORE.
WHAT HAPPENS WHEN YOU GO TO GOOGLE.COM?
FIRST YOU PRESS "H" OR "G" ON YOUR KEYBOARD, AND
WHEN YOU PRESS G, IT'S LIKE I KNOW HOW TO HANDLE
THIS.
HOW TO HANDLE YOUR KEYBOARD DRIVER, RIGHT?
ALSO, WHEN IT STARTS TO GET GOOGLE.COM, IT SENDS
ALL THE NETWORK PACKETS, RIGHT?
YOUR WHOLE NETWORK IS INSIDE -- IS INSIDE YOUR
OPERATING SYSTEM AND YOUR OPERATING SYSTEM KNOWS
HOW TO DO THAT.
WHEN YOU WRITE NETWORK CODE YOU DON'T HAVE TO
IMPLEMENT NETWORK PROTOCOL CODES EVERY TIME.
IT'S REALLY HARD AND I TRIED.
IF YOU WANT TO WRITE FILES TO DISK, YOUR OPERATING
SYSTEM NEEDS TO KNOW ABOUT, FOR EXAMPLE, HOW, LIKE,
YOUR HARD DRIVE WORKS AND HOW TO COMMUNICATE BYTES
TO YOUR HARD DRIVE.
LIKE, I NEED YOU TO WRITE THESE BYTES TO THIS PART
OF THE DRIVE.
AND ALSO NEEDS TO KNOW, LIKE, GIVEN A BUNCH OF
BYTES ON YOUR HARD DRIVE, HOW ARE THOSE ORGANIZED
INTO FILES, RIGHT?
AND THIS IS ALL THIS STUFF YOU NEVER HAVE TO WORRY
ABOUT AS A PROGRAMMER.
AND THE REASON YOU DON'T HAVE TO WORRY ABOUT IT IS
BECAUSE YOUR OPERATING SYSTEM KNOWS HOW TO DO IT
AND ALLOCATES MEMORY.
IT WILL LIKE COMMUNICATE WITH THE GRAPHICS CARD.
IF LIKE CHROME RUNS OUT OF MEMORY, IT WILL BE LIKE
YO CHROME, AND START SWAPPING TO DISK.
IF REALLY RUNS OUT OF MEMORY, IT WILL KILL IT, SO
IT DOES ALL KINDS OF AMAZING STUFF FOR YOU.
AND THIS IS GOING TO BE REALLY IMPORTANT TO KNOW IN
A MINUTE.
THAT THE OPERATING SYSTEM DOES ALL THIS.
SO HOW DO YOU CALL OPERATING SYSTEM CODE?
RIGHT?
THIS IS SOMETHING I DIDN'T UNDERSTAND UNTIL LIKE
LAST YEAR.
SO THIS IS, LIKE, IF YOU WRITE SOMETHING TO DISK,
WE'VE ESTABLISHED THAT THE OPERATING SYSTEM WRITES
STUFF TO DISK.
BUT LIKE HOW DOES IT DO THAT?
AND THE ANSWER IS SYSTEM CALLS, IS THE BEST AND MY
FAVORITE, AND WE'RE GOING TO GET THERE.
SO SYSTEMS CALLS ARE THE WAY YOU COMMUNICATE WITH
YOUR OPERATING SYSTEM.
YOU'RE LIKE, YO, I NEED YOU TO WRITE THIS FILE.
LIKE, PLEASE HELP.
AND IT'S LIKE, OKAY, I GOT IT.
DON'T WORRY.
AND, LIKE, BASICALLY ALMOST ALL OF THE
COMMUNICATION WITH YOUR HARDWARE THAT YOU DO,
HAPPENS THROUGH SYSTEM CALLS.
AND DOESN'T MATTER WRITING PYTHON, WRITING C,
WRITING INTERCAL.
NO MATTER WHAT, YOU'RE WRITING TO A FILE YOU WRITE
SYSTEM CALLS.
YOU DON'T HAVE A CHOICE.
SO THESE ARE -- THIS IS LIKE THE INTERFACE TO YOUR
OPERATING SYSTEM.
USE IT TO OPEN FILES, YOU START PROGRAMS.
YOU CHANGE FILE PERMISSIONS.
SO WE'VE LEARNED -- WE'RE NOW LIKE OPERATING SYSTEM
EXPERTS.
YOU NO LONGER NEED TO TAKE AN OS CLASS.
WE KNOW IT DOES STUFF AND YOUR PROGRAMS TELL IT
WHAT TO DO USING SYSTEM CALLS.
YOU'RE DONE.
SO HOW CAN WE USE THIS KNOWLEDGE TO DEBUG OUR
PROGRAMS, RIGHT?
AND THE --
[NO AUDIO]
BECAUSE WE DON'T TRUST OUR PROGRAMS.
THEY'RE WRITTEN BY OURSELVES AND THE PAST IT'S BEEN
WRONG.
SO LET'S DO THIS.
WHO'S EVER WRITTEN -- RUN A PROGRAM AND NOT KNOWN
WHERE THE CONFIGURATION FILE WAS?
OH MY GOD, THAT'S LIKE ALL OF YOU.
AMAZING.
YEAH.
SO THIS HAPPENS ALL THE TIME.
AND I REALLY HATE READING DOCUMENTATION TRYING TO
FIGURE OUT WHERE THE CONFIG FILE IS, ONE PERSON
WILL SAY ONE THING AND SOMEONE ELSE WILL SAY
SOMETHING ELSE.
NO, I JUST WANT TO KNOW.
PLEASE JUST TELL ME, I WANT TO KNOW THE ANSWER, I
DON'T WANT TO HAVE TO READ STUFF.
SO HERE'S A SPECIFIC EXAMPLE OF THIS.
IS, THIS QUESTION IS LIKE BASH_PROFILE, OR BASHRC
WHEN IT STARTS.
AND I KIND OF KNOW THE ANSWER TO THIS.
BUT IF YOU WANTED TO CHECK IT, THERE'S A REALLY,
REALLY SIMPLE WAY TO CHECK IT.
AND THIS IS BY BEING A WIZARD.
AKA USE A TOOL CALLED STRACE.
IT'S BASICALLY MY FAVORITE THING IN THE WORLD AND
I'M GOING TO TELL YOU ABOUT IT.
WE'RE GOING TO GET THERE.
SO STRACE LETS YOU BE A WIZARD.
AND THE WAY, IT TRACES SYSTEMS CALLS FOR YOU.
SO YOU RUN STRACE ON A PROGRAM AND TELLS YOU EVERY
SYSTEM CALL THAT IT RUNS.
SO IF IT OPENS A FILE, IT'S LIKE, HEY, LETTING YOU
KNOW A PROGRAM OPENED THAT FILE.
SO YOU CAN USE THIS, TO FIND OUT WHAT YOUR PROGRAMS
ARE DOING WHILE THEY'RE RUNNING.
LIKE IN AN AUTHORITATIVE WAY.
SO THE WAY STRACE IS YOU'RE ON STRACE AND THEN YOU
RUN THE PROGRAM THAT YOU WANT TO RUN.
WHAT HAPPENS WHEN YOU STRACE?
IS YOU GET SOMETHING THAT LOOKS LIKE THIS, WHICH IS
OBVIOUSLY, NOT TOTALLY UNDERSTANDABLE.
BUT I JUST WANTED TO SHOW IT TO YOU TO LET YOU KNOW
IT'S NOT LIKE -- TO NOT WORRY IF YOU SEE SOMETHING
LIKE THIS.
YOU'RE LIKE, WHAT'S GOING ON?
IF YOU LOOK AT THIS AND LOOK ON THE BACK SEE LIB --
OKAY, WHATEVER.
GOOGLE CHROME IS LOADING SOMETHING LIKE AUDIO
LIBRARIES, RIGHT?
THAT'S ALL I'M LEARNING FROM THIS.
SO WE WANT TO ANSWER THIS QUESTION, DOES BASH USE
BASH_PROFILE OR BASHRC?
SO WHAT I DID, WAS I S TRACED BASH.
HEY, SHOW ME THE OPEN SYSTEM CALLS.
SO I LOOKED FOR ALL OF THEM AND IT WAS LIKE, YEAH,
IT OPENED BASHRC AND BASH HISTORY.
AND THOSE WERE THE ONLY THINGS IN MY HOME DIRECTORY
THAT IT OPENED.
NOW I KNOW.
I DON'T NEED TO READ STACK OVERFLOW.
I DON'T NEED TO ASK A FRIEND.
IT OPENS BASHRC AND THAT'S IT.
WHEN YOU RUN BASH LOG IN --
THAT'S WHAT I DID IN THAT CASE.
SO BASHRC 1, THERE ARE A LOT OF OTHER SYSTEM CALLS
THAT I LOVE TO LOOK AT.
THERE'S RIGHT -- IF YOU'RE PROGRAM IS WRITING TO A
FILE AND YOU DON'T KNOW, THAT HAPPENS TO ME ALL THE
TIME, IT IF YOU HAVE SOME KIND OF WRAPPER SCRIPT
THAT'S RUNNING PROGRAMS, YOU CAN STRACE THE SYSTEM
CALL AND TELL YOU WHAT PROGRAM IS RUNNING AND WHAT
ALL THE COMMAND FLAGS ARE, WHICH IS THE GREATEST.
YOU CAN SPY ON NETWORK DATA BY USING LIKE RECEIVE
FROM.
YOU CAN SEE LIKE WHAT SOFTWARE CONNECTIONS IT'S
MAKING.
CONNECTING TO OTHER SERVICES.
THIS TALK, I HAVE THEM IN A BOX HERE, YOU SHOULD
COME GET IT FROM ME.
BECAUSE I REALLY LIKE STRACE A LOT.
AND SO I'M NOT GOING TO GO TOO MUCH FURTHER INTO
STRACE RIGHT NOW.
BECAUSE YOU CAN GET --
[NO AUDIO]
SO THE NEXT TOPIC I WANT TO COVER IS THE CASE OF
THE FRENCH WEBSITE.
SO THIS IS SOMETHING I MANUFACTURED.
I MADE A WEBSITE WHERE YOU GO TO IT, AND -- IN
CHROME.
I WENT TO IT IN CHROME.
IT'S LIKE, HEY, WELCOME TO PYTHON.
WOW.
AND THEN I TRIED TO GET IT FROM THE COMMAND LINE
AND IT WAS LIKE, "BONJUR."
AND WHY IS IT IN FRENCH, RIGHT?
WHAT HAPPENED, IT'S THE SAME WEBSITE, BUT IT'S
GIVING IT TO ME IN TWO DIFFERENT LANGUAGES.
[NO AUDIO]
WHEN SOMETHING NETWORK -- WHEN A NETWORK THING IS
HAPPENING, WHAT YOU CAN DO IS...
[NO AUDIO]
THINGS ARE THEORETICALLY DETERMINISTIC.
YOU CAN DEBUG THE PROGRAM.
WHICH IS THE GREATEST.
SO WE'RE GOING TO SPY ON THE NETWORK TO FIGURE OUT
WHAT'S GOING ON HERE.
THIS IS A PRETTY SIMPLE EXAMPLE OF IT, YOU CAN DO
LITTLE MORE COMPLICATED STUFF.
SO, IF YOU LOOK AT THIS, THIS IS TOO MUCH STUFF.
BUT BASICALLY, I WAS LIKE, JUST SHOW ME EVERYTHING
THAT'S BEING SENT ON 4 OR 5,000.
AND I DON'T KNOW IF I CAN POINT TO THIS, PROBABLY
NOT.
BUT YOU CAN SEE THAT UP THERE, THE FIRST PART, IS
LIKE WAY MORE STUFF THAT CHROME IS SENDING.
AND CAN YOU RECALL IS SENDING WAY -- CURL IS
SENDING WAY LESS STUFF.
[NO AUDIO]
THERE'S THIS HEADER WHERE IT'S LIKE, "ACCEPT
LANGUAGE" "ENGLISH" SO CHROME IS LIKE PLEASE GIVE
ME HAVE AN ENGLISH WEBSITE.
AND CURL IS LIKE GIVE ME A WEBSITE.
IT'S OKAY.
AND IT'S LIKE I'LL GIVE IT TO YOU IN FRENCH THEN.
SO WHAT HAPPENED IS, THEY ACTUALLY REQUESTED
DIFFERENT THINGS, RIGHT?
AND THIS IS A LITTLE BIT OF A CONTRITE EXAMPLE.
I THINK YOU CAN EASILY SEE HOW YOU CAN USE THIS IN
MORE SERIOUS NETWORK DID HE DEBUGGING SITUATIONS.
SO IF WE USE CURL AND WE'RE LIKE HEY, I WANT AN
ENGLISH WEBSITE, HI, WELCOME TO PYTHON.
AND NOW WE DON'T NEED TO LEARN FRENCH.
EVEN THOUGH LEARNING FRENCH IS PRETTY FUN.
SO THERE ARE A LOT OF NETWORKS SPYING TOOLS THAT
YOU CAN USE.
I USED NGRAP HERE BECAUSE IT WAS THE SIMPLEST ONE I
COULD FIND.
THERE'S TCP -- WHICH IS A SUPER POWERFUL TOOL WHICH
YOU CAN USE TO DUMP ALL YOUR NETWORK TRAFFIC.
WIRESHARK IS THE BEST.
WIRESHARK IS LIKE A GRAPHICAL TOOL WHICH WILL SHOW
YOU NETWORK TRAFFIC AND LET YOU DIG INTO IT.
AND UNDERSTAND -- AND IT REALLY HELPS YOU
UNDERSTAND WHAT'S GOING ON BECAUSE IT IT WILL
INTERPRET ALL THE STUFF FOR YOU.
THESE FIRST THREE TOOLS THAT I MENTIONED, ONLY WORK
WITH, LIKE, NON-ENCRYPTED TRAFFIC, BECAUSE THE
WHOLE POINT OF ENCRYPTED TRAFFIC IS YOU CAN'T SPY
ON IT, RIGHT?
SO IF YOU'RE USING SPYING TOOLS TO SPY ON TRAFFIC,
ENCRYPTED TOOL IS SAYING BLAH.
I CAN SEE SOMETHING IS BEING SENT AND THAT'S NOT
HELPFUL TO ME.
YOU CAN USE MITM PROXY.
MAN IN THE MIDDLE PROXY.
MAN IN THE MIDDLE YOURSELF, TO SEE THE UNENCRYPTED
TRAFFIC.
AND THAT'S SUPER USEFUL.
SO, LIKE, THIS IS AN AMAZING THING TO DO AGAIN
BECAUSE YOU DON'T NEED TO READ YOUR SOURCE CODE.
YOU DON'T NEED TO UNDERSTAND AND THINK ABOUT THE
LOGIC.
JUST SEEING WHAT'S SENT AND WHAT COMES BACK AND
WHETHER THAT'S THE RIGHT THING.
NOW WE'RE GOING TO TALK ABOUT MY FAVORITE PART.
THE CASE OF THE SLOW PROGRAM.
PROFILING, USING LIKE SYSTEMS TOOLS IS LIKE THE
MOST FUN THING.
I HAVE THREE PROGRAMS HERE.
ONE OF THEM IS SLOW.
BECAUSE IT'S SPENDING TOO MUCH TIME ON THE CPU.
SECOND ONE IS SLOW, BECAUSE IT'S DOING TO MUCH IO,
WRITING TOO MUCH DATA TO DISK.
THIRD ONE IS WAITING FOR SOME SERVER.
SO -- AND WHAT WE'RE GOING TO DO IS WE'RE GOING TO
IDENTIFY WHICH ONE IS WHICH WITHOUT, LIKE, READING
THE CODE OR ANYTHING.
WE'RE JUST GOING TO RUN THE PROGRAMS AND THEN WE'RE
GOING TO KNOW.
BECAUSE WE'RE WIZARDS.
AND WE'RE GOING TO USE NEW TOOLS TO DO THIS.
ONE OF MY FAVORITE TOOLS WHEN I WAS DOING THIS, WAS
ACTUALLY TIME.
WHO'S USED THE TIME COMMAND TO FIND OUT HOW LONG
SOMETHING TAKES?
TIME IS AWESOME.
IT DOES TWO THINGS:  TELLS YOU HOW LONG A PROGRAM
TOOK.
THIS PROGRAM, MYSTERY PROGRAM ONE TOOK TWO SECONDS.
WHICH IS, USEFUL INFORMATION.
AND IT ALSO TELLS YOU HOW MUCH TIME IT SPENT ON THE
CPU.
WHICH IS, WHAT -- I HAVE A POLL QUESTION FOR YOU.
WHAT IS IT -- IF IT'S NOT ON CPU, WHAT IS IT DOING?
IO, MAYBE, BUT FUNDAMENTALLY IT'S...
WAITING!
IT'S WAITING FOR SOMETHING!
WHOEVER SAID WAITING WINS.
IT COULD BE WAITING FOR IO, COULD BE WAITING
BECAUSE THERE ARE OTHER PROGRAMS DOING STUFF,
RIGHT?
AND THE OPERATING SYSTEM SCHEDULED IT OFF AND IT'S
LIKE SORRY, RIGHT?
I HAVE A MORE IMPORTANT --
BUT YEAH.
IT'S WAITING.
SO THIS IS, LIKE, A QUESTION, WHAT IS IT WAITING
FOR?
AND IT TURNS OUT THAT WE CAN JUST ASK THE OPERATING
SYSTEM THIS DIRECTLY, WITHOUT TRYING TO READ THE
PROGRAM OR REASON ABOUT IT.
SO -- AND WE'RE GOING TO DO THIS BY LOOKING INTO
THE KERNEL'S SOUL.
PRETTY MUCH LITERALLY.
SO THIS IS A LITTLE BIT OF A LOT OF STUFF.
BUT BASICALLY WHAT I DID IS, I LOOKED FOR THE PID
OF THIS PROCESS, AND I WAS LIKE, HEY, TELL ME WHAT
THE KERNEL STACK IS, RIGHT NOW.
LIKE, WHAT IS IT DOING?
AND THIS IS A LITTLE SMALL, MAYBE FOR YOU AT THE
BACK, BUT WHAT IT SAYS IS K -- SK WAIT DATA, TCP, I
NET RECEIVE NOTICE, SYS RECEIVED FROM.
SO WHAT IS THIS WAITING FOR?
NETWORK!
IT SAYS LIKE TCP RECEIVE -- EI NET.
I'M NOT LIKE A SUPER EXPERT OF UNDERSTANDING WHAT
THESE THINGS MEAN, BUT I'M LIKE, SOUNDS LIKE
NETWORK TO ME.
RIGHT?
IT'S WAITING FOR SOME KIND OF NETWORK STUFF.
I DON'T KNOW.
WHICH IS WAY MORE THAN I KNEW BEFORE.
BEFORE WE JUST KNEW IT WAS TAKING TWO SECONDS.
AND WE DIDN'T NEED TO -- AND LIKE, THIS IS A SIMPLE
PROGRAM.
BUT IF THIS WERE A SUPER COMPLICATED PROGRAM, SEE
THAT IT'S AWESOME, JUST KNOW WHAT IT'S DOING.
WE KNOW --
THE SERVER THAT I -- THAT I WROTE, DOES THIS.
SO THE REASON IT'S BAITING IS BECAUSE THE SERVER --
IT'S WAITING IS BECAUSE THE SERVER HAS BEEN
SLEEPING.
THAT'S WHY IT WAS WAITING.
THE NEXT ONE I WANT TO DO, IS MYSTERY PROGRAM
NUMBER TWO.
THIS ONE TOOK 2.74 SECONDS, SO THE SAME META TIME,
BUT SPENT 99% OF IT'S TIME ON THE CPU.
AND THIS, TO ME, IS LIKE ALL I WANT TO KNOW ABOUT
THIS PROGRAM.
LIKE, IT'S JUST DOING SOME COMPUTATIONS, AND THIS
IS LIKE AN INSTANCE WHERE I'M LIKE USE A PYTHON
PROFILING.
-- THIS IS ALL ABOUT NOT USING PYTHON PROFILERS.
IF IT'S SPENDING ALL TIME IN CP -- IN CPU, FIND OUT
WHAT PYTHON IS DOING.
WE DON'T NEED TO DO SPECIAL OPERATING SYSTEM
MATCHING STUFF.
LIKE, WE'RE DONE HERE.
AND TIME TOLD US EVERYTHING WE NEEDED TO KNOW.
WITH -- WHAT THIS PROGRAM IS ACTUALLY DOING IS
THIS.
[LAUGHTER]
IT TAKES A WHILE.
[LAUGHTER]
YEAH.
MYSTERY PROGRAM NUMBER THREE.
THIS ONE IS COOL, I WROTE THIS PROGRAM AND I
THOUGHT I KNEW WHAT WAS GOING ON WITH IT, AND A
WHOLE NEW MYSTERY CAME OUT OF IT AND I HAD TO SOLVE
IT AND IT WAS SLOW IN WAYS I DIDN'T EXPECT.
SO HERE'S WHAT HAPPENED.
I TIMED IT TWICE, AND THE FIRST TIME IT TWO -- TIME
IT TOOK TWO SECONDS AND SECOND TIME IT WAS TEN
SECONDS.
THIS WAS A DETERMINIS TICK PROGRAM.
IT TOOK A LONG AMOUNT OF TIME.
THE FIRST TIME IT WAS WAITING LIKE -- LIKE 40% OF
THE TIME, SPENDING 6 OH -- 60% ON CPU.
AND SECOND TIME IT WAS 90% OF THE TIME.
AND I ACTUALLY HAD NO IDEA WHY THIS WAS HAPPENING.
I WROTE THIS PROGRAM, IT WAS LIKE FOUR LINES OF
CODE, RIGHT?
SO WE'RE GOING TO DO OUR FIRST STEP.
OH, YEAH, WE NEED TO DO A DEMO.
THIS IS GOING TO BE FUN.
OH, NO.
OKAY.
SO WE STARTED OUR PROGRAM.
WE TRIED TO GET OUR PASSWORD, RIGHT?
AND WE'RE GOING TO DO THIS THING WHERE WE LOOK INTO
THE CONCERN'S SOUL WHILE IT'S WAITING.
LET ME...
MAYBE DO THIS IN A DIFFERENT...
WILL YOU WORK?
WILL YOU TELL ME WHAT IT'S DOING?
OKAY.
THE PROGRAM IS DONE.
WE NEED TO START THE PROGRAM AGAIN.
I SPENT A LOT OF TIME, LIKE, DOING THIS.
OKAY.
SO, WE HAVE LOOKED INTO THE CONCERN'S SOUL AND
WE'RE SEEING SOME THINGS LIKE, DO WAIT, BLOCK RIGHT
BEGIN, X4 MARK I KNOW DIRTY, BLOCK RIGHT.
IT'S DOING RIGHTS, RIGHT?
LIKE, I DON'T TOTALLY UNDERSTAND WHAT ALL OF THIS
MEANS.
I KNOW X4 IS FILE SYSTEM AND I KNOW IT'S WRITING.
THAT'S IT.
SO THAT'S GREAT.
IT'S WRITING STUFF.
BUT WHY IS IT TAKING SUCH DIFFERENT AMOUNTS OF
TIME, RIGHT?
WHY DOESN'T IT TAKE THE SAME AMOUNT OF TIME EVERY
TIME?
SO I LIKE TO DO THIS A BIT -- WE CAN ACTUALLY LOOK
AT WHAT THE PROGRAM DOES.
BECAUSE AT THIS POINT, LIKE, IT'S STILL NOT OBVIOUS
WHY IT'S SLOW.
SO JUST WRITING A WHOLE BUNCH OF STUFF TO THE FILE.
AND IT DOESN'T ALWAYS TAKE THE SAME META TIME, SO
NOW WE'RE GOING TO USE SOMETHING CALLED DSTAT,
WHICH I KIND OF LOVE.
IT'S A REALLY GREAT PROGRAM, TELLS YOU HOW MUCH
STUFF -- IT CAN TELL YOU HOW MUCH STUFF, LIKE, YOUR
OPERATING SYSTEM IS WRITING TO DISK RIGHT NOW.
SO I START WRITING DSTAT, I'M NOT DOING A LOT,
RIGHT?
AND I START THIS PROGRAM.
AND THEN ON THE RIGHT, YOU'RE GOING TO SEE DSTAT
START TO WRITE A LOT OF DATA.
ANSWERING 19 MEGABYTES.
42, 42.
IT'S HAPPENING.
WAITING.
DID THE PROGRAM FINISH?
THIS IS THE WORSE.
I HATE EVERYTHING.
LET'S DO IT AGAIN.
THIS IS WHAT I LOVE ABOUT LIVE DEMOS.
YEAH, OKAY.
SO THE PROGRAM STOPPED.
DSTAT IS SHOWING YOU IT'S STILL WRITING STUFF.
IT'S STILL WRITING.
AND NOW IT'S DONE.
BUT IT KEPT WRITING FOR LIKE FIVE SECONDS AFTER THE
PROGRAM FINISHED.
SO THIS IS LIKE, THE FIRST -- THE PROGRAM THOUGHT
IT WAS DONE, IT WAS WANT REALLY DONE.
IT WAS A LIE.
THE PROGRAM WAS LYING.
THIS IS BECAUSE THE OPERATING SYSTEM LOVES US.
AND WHEN IT WRITES STUFF IT WANTS IT TO BE FAST.
AND SO WHAT IT DOES, IT'S LIKE, HEY, YOU WROTE A
WHOLE BUNCH OF STUFF, DON'T WORRY, I'LL TAKE CARE
OF IT.
AND THEN IT CACHES ALL THE THINGS IN MEMORY AND
YOUR PROGRAM FINISHES, AND ALL RIGHT, IT WRITES ALL
THE STUFF TO DISK AFTERWARDS.
THIS IS HOW WRITES WORK BY DEFAULT.
YOU CAN SET THEM UP, HEY, DON'T DO WRITES --
THEY ACTUALLY WANT TO KNOW THE SYSTEM CRASHES,
LIKE, THERE WEREN'T A WHOLE BUNCH OF MORE WRITES
THAT NEEDED TO HAPPEN.
SO WHAT WAS HAPPENING BEFORE, I WOULD RUN THE
PROGRAM, IT WOULD DO SOME WRITES, RIGHT?
AND RUN THE PROGRAM AGAIN, AND IT WOULD BE LIKE,
OH, I'M NOT -- I'M STILL -- I'M STILL WRITING STUFF
FROM THE LAST TIME.
AND WOULDN'T BE LIKE READY.
TAKE WAY LONGER THE SECOND TIME.
WHICH IS REALLY AWESOME.
YEAH.
SO WE WON.
THIS IS EVERYTHING I HAD TO SAY.
SO, LIKE, I HOPE THAT I CONVINCED YOU.
TREATING YOUR PROGRAM AS A BLACK BOX IS AWESOME AND
SUPER FUN.
AND YOU'RE LIKE I'M A OPERATING SYSTEM KERNEL
HACKER WIZARD.
RIGHT?
THERE ARE A LOT OF REALLY AWESOME TOOLS YOU CAN USE
TO DO THIS KIND OF WORK.
A LOT OF THEM ARE LIKE BUILT INTO YOUR COMPUTER.
THINGS LIKE DSTAT, RIGHT?
/PROC HAS A LOT OF AMAZING STUFF IN IT.
THE PEERING INTO YOUR KERNEL SOUL'S STACK THING WE
SAW.
YOU HAVE DTRACE WHICH IS AMAZING.
IF YOU LEARN ABOUT YOUR OPERATING SYSTEM YOU CAN DO
SO MUCH MORE THAN YOU DID BEFORE.
AND DO IT ACROSS ANY PROGRAMMING LANGUAGE.
IT DOESN'T MATTER PYTHON TO PERL.
IT'S THE GREATEST.
I LEARNED A LOT OF THIS STUFF, IF YOU, LIKE, HAVE A
JOB AND YOU WANT TO LEARN AWESOME STUFF.
YOU CAN QUIT YOUR JOB AND GO TO THE RECUR CENTER
AND HANGOUT AND LEARN ALL KINDS OF THINGS ABOUT
PROGRAMMING.
THIS IS THE KIND OF THING I DID WHEN I WAS THERE.
[NO AUDIO]
AND IF YOU WOULD LIKE ONE, I HAVE A LOT OF THEM,
AND I WOULD REALLY LIKE YOU TO HAVE ONE.
THAT'S ALL.
[APPLAUSE]
YEAH.
>> THANK YOU.
>> NO PROBLEM.
[MUSIC PLAYING]
10:16:09AM10:23:05AM10:23:05AM10:28:50AM10:28:50AM