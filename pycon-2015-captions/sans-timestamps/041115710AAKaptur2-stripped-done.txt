WELCOME TO THE SECOND OF TWO TALKS ALLISON KAPTUR
IS GIVING THIS SESSION.
SHE WORKS AT DROPBOX.
PLEASE GIVE HER A WARM ROUND OF APPLAUSE.
[ Applause ]
>> HI, THANKS, EVERYONE, WHO CAME HERE OR STAYED
HERE FOR THIS TALK.
TODAY WE'RE GOING TO TALK ABOUT EXPLORING IS
NEVER BORING, UNDERSTANDING CPYTHON WITHOUT
READING THE CODE.
AS AS THEY ARE MENTIONED, I'M ALLISON KAAP TUSH,
CURRENTLY WORKING AT DROPBOX IN SAN FRANCISCO, I
USED TO WORK AT RECURES SCHOOL, WHICH YOU MAY
KNOW AS HACKER SCHOOL.
RECURS CENTER IS NOT A BOOT CAMP, A WRITER'S
RETREAT FOR PROGRAMMERS, SO IF YOU'VE BEEN TO THE
PY CON SPRINTS BEFORE, IT'S LIKE DOING THREE
MONTHS OF THAT.
THE PEOPLE WHO ALREADY KNOW AT LEAST SOME
PROGRAMMING GET TOGETHER AND WORK ON WHATEVER IT
IS THAT THEY'RE EXCITED ABOUT.
AND I SAY THIS BIT TO GIVE YOU A LITTLE BIT OF
CONTEXT FOR THE PROBLEM THEIR WE GOING TO SOLVE
TODAY, WHICH I BET YOU CAN RELATE TO.
IN THE COURSE OF FACILITY TEENAGE YES AT THE
RECURS CENTER, I TALKED TO A LOT OF PEOPLE IN THE
FOLLOWING SITUATION.
THEY LEARNED A LITTLE BIT OR MAYBE A LOT OF
PYTHON AND THEN YOU HAD TO MAKE THINGS WITH IT,
THEY'VE DONE A BUNCH OF PROJECTS.
AT SOME POINT, THEY STARTED TO WANT TO DIG
DEEPER, SAYING HOW DOES PYTHON WORK UNDER THE
HOOD, THE WORD "REALLY" ANSWER IN THESE
QUESTIONS.
HOW DO LISTS REALLY WORK WHEN YOU APPEND TO THEM
AND SO ON.
AND VERY OFTEN, THEY FOUND IT HARD TO GET
STARTED.
SORT OF STRUGGLED TO GET PURCHASE ON THE GIANTS
SURFACE AREA THAT PYTHON PRESENTS.
SO THIS SOUNDS FAMILIAR, THEN THIS TALK IS FOR
YOU.
AND TODAY I'LL TALK ABOUT SOME STRATEGIES THAT
YOU CAN USE TO DEEPEN YOUR OWN UNDERSTANDING OF
PYTHON, SOME PITFALLS THAT YOU CAN HOPEFULLY
AVOID.
THE GOAL IS TO GIVE YOU A SET OF TOOLS THAT YOU
CAN USE ON YOUR OWN AND WE'LL LAB AT SOME
EXAMPLES IN CPYTHON AND FOR THE MOST PART, THESE
ARE STRATEGIES THAT YOU COULD USE ON ANY CODE
BASE.
SO FIRST A BRIEF WORD ABOUT WHY YOU WOULD WANT TO
SPEND TIME UNDERSTANDING THE INTERNALS OF PYTHON.
I WANT TO SAY EXPLICITLY THAT I DON'T THINK THAT
YOU HAVE TO DO THIS TO BE A GREAT PROGRAMMER OR
EVEN TO BE A GREAT PYTHON PROGRAMMER
SPECIFICALLY.
THE BEST REASON TO DO THIS IS WHAT'S IN THE
TITLE, SOUNDS LIKE FUN TO YOU.
THE IDEA THAT YOU HAVE TO, TO ME SORT OF IS THE
TURTLES ALL THE WAY DOWN APPROACH.
YOU HAVE TO UNDERSTAND THE INTERNALS OF PYTHON,
HALF OF IT IS IMPLEMENTED IN C SO DO YOU HAVE TO
UNDERSTAND C REALLY WELL AND THEN YOU HAVE A
COMPUTER UNDERNEATH THAT SO WHAT ABOUT HARDWARE
AND MEMORY AND...
I'M BASICALLY DON'T THINK THAT'S STRICTLY
NECESSARY.
SO THE MAIN REASON IS THAT THIS IS FUN.
I THINK IT'S REALLY FUN.
HOPEFULLY SOUNDS LIKE FUN TO YOU.
I'VE HAD A GREAT TIME OVER THE LAST YEAR OR SO
ZIGGING IN ON BYTECODE AND THE BYTECODE
INTERPRETER, CAN I GET A QUICK SHOW OF HANDS WHO
WAS IN THE ROOM HALF AN HOUR AGO?
THAT'S LIKE MAYBE HALF OR MORE, GREAT.
SO I FIND IT VERY POWERFUL THAT WE CAN TAKE THIS
REALLY COMPLEX PROJECT THAT YOU'VE BEEN TREATING
AS BASICALLY A BLACK BOX AND YOU CAN START TO
BREAK IT DOWN, YOU CAN UNDERSTAND THE PIECES, YOU
CAN FIGURE OUT WHY CERTAIN DECISIONS WERE MADE
THE WAY THAT THEY WERE, AND WHY CERTAIN
LIMITATIONS EXIST THE WAY THAT THEY DO.
I THINK THAT'S ALL VERY POWERFUL AND COOL.
I'M NOT GOING TO TALK AT ALL TODAY ABOUT
CONTRIBUTE TO PYTHON.
CONTRIBUTING IS GREAT AND YOU SHOULD TOTALLY DO
IT IF IT SOUNDS LIKE FUN TO YOU.
I THINK THAT CORRECTING PRESENTS A DIFFERENT SET
OF CHALLENGES THAN THE ONE THAT I WANT TO FOCUS
ON TODAY WHICH IS UNDERSTANDING CODE BASE.
CONTRIBUTING IS HARDER IN SOME WAYS, PARTICULARLY
TOOLING AND SET-UP, VERY OFTEN YOU ENDS UP IN
SOME SWORD OF BEWILDERING INSTALL HELL THAT YOU
HAVE NO IDEA HOW TO EXTRACT YOURSELF FROM.
ONE OF MY FAVORITE PYTHON MAILING LISTS IS GUIDO
COMPLAINING ABOUT A CHANGE MADE TO A RECENT
MODULE THAT TURNS OUT TO BE A SIDE EFFECTS OF HIS
UPGRADING TO MAVERICKS.
THIS STUFF IS HARD.
THE OTHER PIECE THAT'S HARD ABOUT CONTRIBUTING IS
THAT THERE'S ALL THIS RESTRICTIONS AROUND CULTURE
AND COMMUNICATION AND THAT SORT OF THING THAT
JUST DON'T EXIST IF YOU'RE NOT WORKING WITH OTHER
PEOPLE.
CONTRIBUTING IS EASIER IN SOME WAYS THAN SITTING
DOWN TO UNDERSTAND A CODE BASE, TOO, AND
PARTICULARLY IN SCOPING A PROJECT.
IF YOU'RE CONTRIBUTING TO AN EXISTING PROJECT,
YOU PROBABLY HAVE ONE THING IN PARTICULAR THAT
YOU'RE TRYING TO DO.
AND IF YOU DON'T HAVE ONE THING IN PARTICULAR
THAT YOU'RE TRYING TO DO, THE FIRST THING YOU
WILL DO IS GET ONE THING THAT YOU'RE TRYING TO
DO.
IF YOU'RE SITTING DOWN TO UNDERSTAND A CODE BASE,
IT CAN BE HARDER TO NARROW THE SCOPE.
SO I WON'T TALK TODAY ABOUT THE DEVIN OR BUG
TRACKER OR HOW TO SUBMIT A PATCH.
IF YOU WANT TO FOLLOW UP WITH THAT LATER, HERE'S
THE LINK TO THE INITIAL DEVIN GUIDE AND I THINK
THERE WAS A TALK EARLIER THAT YOU CAN CATCH THE
REPLAY OF AND THAT'S ALL I'LL SAY ABOUT
CONTRIBUTING.
SO YOU'RE SITTING DOWN WITH A NEW CODE BASE AND
SETTING OUT TO UNDERSTAND IT.
I'M GUESSING EVERYONE IN THE ROOM HAS HEARD ONE
PARTICULAR PIECE OF ADVICE.
READ THE CODE.
LOTS OF FOLKS WILL TELL YOU TO READ THE CODE AND
THIS ISN'T NECESSARILY BAD ADVICE.
I JUST THINK IT'S NOT ALWAYS VERY HELPFUL.
YOU MIGHT HAVE TRIED THIS, RIGHT, SO YOU GO TO,
YOU KNOW, PYTHON.ORG AND YOU DOWNLOAD THE SOURCE
AND OPEN IT UP IN YOUR TEXT EDITOR OF CHOICE AND
NOW WHAT?
NOW YOU'RE STARING AT ALL OF THESE FILES AND MANY
OF THEM ARE THOUSANDS OF LINES LONG AND HALF OF
THEM ARE IN C AND YOU HAVE NO IDEA WHERE TO
BEGIN.
IT'S VERY EASY AT THIS POINT TO GET LOST, AND
THIS IS ESPECIALLY TRUE WHEN YOU HAVE A BROAD
SCOPE AND YOU SAY I WANT TO UNDERSTAND MORE, YOU
KNOW, DIG DEEPER, BUT YOU DON'T HAVE ANYTHING
NARROW YET THAT YOU'RE FOCUSED ON.
YOU DON'T YET HAVE PARTICULAR SUBGOALS OR AREAS
OF INTEREST.
IT'S ALSO VERY EASY AT THIS POINT TO WASTE A LOT
OF TIME.
YOU KNOW, YOU'RE LIKE LOOKING OVER DIFFERENT
FILES AND YOU'RE NERVE REALLY GETTING A FOOTHOLD
SO BOTH OF THOSE ARE BAD OUTCOMES.
THIS IS MY OBJECTION TO THE IDEA OF READING THE
CODE.
I THINK IT'S JUST NOT A VERY HELPFUL WAY TO THINK
ABOUT INTERACTING WITH A CODE BASE, PARTICULARLY
ONE THAT'S AS LARGE AS PYTHON HAVE THE IF YOU'RE
THINKING ABOUT READING, IT DRAWS ANALOGIES IN
WAYS THAT ARE NOT CONSTRUCTIVE FOR THE LEARNER.
IN THE READING THAT YOU'RE USED TO, IF YOU'RE
READING AN ARTICLE OR A NOVEL OR TWITTER FEED OR
WHATEVER, THERE IS AN ORDER OF CONTENT, RIGHT?
YOU PROBABLY HAVE TO READ THE THINGS THAT
HAPPENED FIRST TO UNDERSTAND THE THINGS THAT
HAPPENED LATER.
AND FINALLY, THINK ABOUT THIS EXPERIENCE AS
READING I THINK UNDERSELLS IT PRETTY
SIGNIFICANTLY.
YOU SHOULD EXPECT THAT THE FIRST TIME YOU TRY TO
DO THIS IT IS GOING TO FEEL REALLY HARD.
AND IF YOU THINK -- ARE THINKING OF THAT AS
READING, IT'S GOING TO BE REALLY DISCOURAGING FOR
YOU.
NOW, UNDERSTANDING A CODE BASE IN THIS WAY IS A
SPECIALIZED SKILL.
THE GOOD NEWS ABOUT THAT IS IT MEANS YOU CAN GET
BETTER AT IT WITH TECHNIQUES AND PARTICULAR
IMPROVEMENT.
BUT IF YOU'RE THINKING ABOUT THIS AS READING, YOU
SHOULD EXPECT THAT IT WILL BE VERY CHALLENGING.
AND CALLING IT READING REALLY UNDERSELLS THAT.
JUST TO EMPHASIZE THIS POINT A BIT, THERE IS A
GREAT SHORT PAPER CALLED "HOW TO READ A PAPER."
AND SPOILER ALERT, IT DOES NOT SAY IF THE PAPER
IS IN ENGLISH, START AT THE TOP AND GO LEFT TO
RIGHT, TOP TO BOTTOM.
THERE'S A DIFFERENT SET OF STRATEGIES THAN THAT.
AND READING A PAPER, EVEN A TECHNICAL ONE IS A
LOT CLOSER TO THE READING THAT WE'RE USED TO,
LIKE READING A BOOK OR AN ARTICLE THAN READING
CODES IS.
IF YOU BELIEVE THAT READING A PAPER IS A
SPECIALIZED SKILL, AND YOU SHOULD, YOU SHOULD GO
READ THIS PAPER, THEN YOU SHOULD ABSOLUTELY AGREE
THAT READING A CODE BASE IS A SPECIALIZED SKILL
AND INTERACTS IN A DIFFERENT WAY.
SO CONSUMING INFORMATION IN THIS WAY IS A SKILL.
YOU CAN GET BETTER AT WITNESS STRATEGIES AND
TECHNIQUES AND READING IS NOT NECESSARILY A
HELPFUL MENTAL MODEL OF WHAT WE'RE DOING.
TODAY I WANT TO TALK ABOUT A FEW MENTAL MODELS
THAT I BELIEVE ARE HELPFUL FOR DIGGING INTO THE
INNARDS OF PYTHON THAT GO BEYOND READ THE SOURCE.
THESE ARE GUIDING METAPHORS FOR INTERACTION WITH
CODE BOYS AND I'LL SUGGEST SOME TOOLS THAT YOU
CAN USE THAT FIT INTO THAT MODEL AND WE'LL LOOK
AT A BRIEF EXAMPLE OF PUTTING THAT STRATEGY TO
WORK.
THE FIRST WAY THAT WE CAN THINK ABOUT INTERACTING
WITH THE CODE BASE IS DELIBERATE OBSERVATION, AND
THIS WAS REALLY WELL-ARTICULATED BY PETER SEEBOLD
IN A BLOG POST I BELIEVE LAST YEAR AND PART OF IT
READS, CODE IS NOT LITERATURE AND WE ARE NOT
READERS.
RATHER, INTERESTING PIECES OF CODE ARE SPECIMENS
AND WE ARE NATURALISTS.
HE GOES ON TO SAY, INSTEAD OF TRYING TO PICK OUT
A PIECE OF CODE AND READING IT AND DISCUSSING IT
LIKE A BUNCH OF COMP LIT GRAD STUDENTS, I THINK A
BETTER MODEL IS FOR ONE OF US TO PLAY THE ROLE OF
A 19th CENTURY NATURALIST, RETURNING FROM A
TRIP TO AN EXOTIC ISLAND TO PRESENT TO THE LOCAL
SCIENTIFIC SOCIETY A DISCUSSION OF THE BEETLES
THEY FOUND.
LOOK AT THE ANTENNAS ON THIS MONSTER, THEY LOOK
UNGAINLY BUT THE MALE OF THE SPECIES CAN USE THEM
TO KILL SMALL FROGS IN WHOSE CARCASS THE FEMALES
LAY THEIR EGGS.
[ Laughter ]
SO THE NATURALIST MODEL IS VERY DIFFERENT FROM
THE READING MODEL.
MEANS THAT YOU'RE CONSIDERING THE ENVIRONMENT
THAT THE CODE IS INHABITING.
YOU TAKE INTO ACCOUNT, HISTORY, EVOLUTION OF THE
CODE AND YOU REMEMBER THAT NOT EVERYTHING ABOUT
THE CODE IS NECESSARILY DELIBERATE OR
INTENTIONAL.
SO BACK IN COLORADO STATE ASTRO PHYSICS, MY
UNDERGRAD THESIS WAS OBSERVATIONAL ASTRONOMY.
THAT'S INTERESTING TO ME AS A SCIENTIFIC
DISCIPLINE BECAUSE THERE'S NO SUCH THING AS
EXPERIMENTAL ASTRONOMY.
THERE ARE THREE WAYS OF LEARNING ABOUT THE WORLD.
THE FIRST IS THEORY, SOMETIMES AFFECTIONATELY
REFERRED TO AS THE FINEMAN METHOD, YOU WRITE DOWN
THE PROBLEM AND THINK VERY HARD AND WRITE DOWN A
SOLUTION.
[ Laughter ]
THE SECOND WAY OF LEARNING ABOUT THE WORLD IS
THROUGH COMPUTER MODELS, BASICALLY.
AND THEN THE THIRD IS JUST LOOKING AT WHAT'S OUT
THERE IN THE UNIVERSE AND HAPPENS TO BE SENDING
PHOTONS TOWARDS EARTH AND HOPEFULLY HITTING
TELESCOPES, THOSE ARE YOUR ONLY OPTIONS.
IF YOU'RE DOING OBSERVATIONAL ASTRONOMY, THE
SINGLE MOST IMPORTANT QUESTION YOU CAN ASK
YOURSELF IS WHY ARE WE SEEING WHAT WE'RE SEEING.
TO WHY DO WE SEE SUPER MASSIVE BLACK HOLES NEAR
WEIRD-LOOKING GALAXIES.
AND IN THAT CASE, THE ANSWER IS, BECAUSE
WEIRD-LOOKING GALAXIES ARE INTERESTING AND WE'VE
POINTED TELESCOPES AT THEM FOR A LONG TIME AND IF
YOU PUT THE TELESCOPE ELSEWHERE, YOU SEE THE
MASSIVE BLACK HOLES THERE, TOO.
I CAN GO ON FOR QUITE A BIT ABOUT THIS.
THE SCIENTIST IN QUESTION IS HALLTON HARP AND I
WOULD LOVE TO TALK MORE ABOUT THAT.
THIS WAY OF THINKING IS ALMOST THE OPPOSITE OF
READING.
IF YOU'RE READING A TEXT, USUALLY IT IS NOT
DESIGNED TO DECEIVE YOU.
IT WAS PROBABLY BUILT FOR YOU TO READ IT.
THE AUTHOR ISN'T ACTIVELY TRYING TO BE MISLEADING
OR CONFUSING OR ANYTHING ELSE.
BUT CODE IS NOT BUILT FOR YOU TO READ IT, AND I
REALIZE THAT THIS IS A SOMEWHAT CONTROVERSIAL
STATEMENT.
AND I CURRENTLY WORK WITH AND HAVE WORKED WITH
BEFORE A LOT OF GREAT PROGRAMMERS WHO SET OUT
WITH GREAT INTENTIONS AND HAVE GOOD SKILLS AND
THE CODE IS REALLY READABLE AND CLEAN AND
AWESOME, AND THEN REALITY HITS IN SOME MANNER.
YOU EITHER HAVE OPTIMIZATION PROBLEMS, YOU HAVE
TO GET PERFORMANCE UP OR YOU HAVE DEADLINES OR
YOU HAVE ED CASES THAT YOU HAVE TO HANDLE AND
SOMETIMES YOU HAVE ALL THREE OF THOSE AT THE SAME
TIME AND SO THE CODE ENDS UP ARE NOT BEING AS
CLEAN AS YOU WOULD LIKE IT TO BE.
SO WHAT DOES ITS LOOK LIKE FOR YOU TO THINK OF
YOURSELF AS AN EXPERT OBSERVE JURY OF YOUR CODE
BASE.
IT FREES YOU UP TO BE MORE TARGETED, TO LOOK
ACROSS HISTORY AND SEE DIFFERENT LEVELS OF
STRUCTURE.
SO LET'S LOOK AT SOME SPECIFIC TOOLS FOR
ACCOMPLISHING THAT.
ONE GREAT TOOL FOR DIGGING INTO THE PYTHON CODE
BASE IS THE INSPECT MODULE.
THIS TAKES YOU RIGHT TO THE SOURCE CODES OF
ANYTHING THAT'S IMPLEMENTED IN PYTHON WITHOUT YOU
HAVING TO DO A TON OF SEARCHING.
HERE I'M LOOKING AT THE SOURCE CODE FOR
RANDOM.CHOICE, WHICH TURNS OUT TO BE A ONE-LINER
SO THE WAY THIS IS IMPLEMENTED, IT INDEXES INTO A
SEQUENCE USING RANDOM.RANDOM TIMES THE HECKTH OF
THE SEQUENCE.
SO THERE ARE THREE COOL THINGS ABOUT DOING THIS.
THE FIRST ONE IS, A ONE-LINER THAT WE CAN
UNDERSTAND IN LESS THAN A MINUTE WHICH IS
SATISFYING.
THE SECOND THING, THERE IS A COMMENT THAT SAYS,
THIS RAISES INDEX ERROR IF THE SEQUENCE IS EMPTY.
THIS DOES NOT APPEAR IN THE DOCUMENTATION,
ALTHOUGH BE A REASONABLE EXPECTATION GIVEN THE
WAY THE DOCUMENTATION IS PHRASED.
THIS IS GOOD TO KNOW.
THE THIRD THING IS THAT CHOICE APPEARS TO BE A
METHOD, TAKE SELF AS A PARAMETER, EVEN THOUGH
WE'RE CALLING IT LIKE ITS MODULE LEVEL FUNCTION,
SO WHAT'S UP WITH THAT, EXACTLY?
AND THE ANSWER TO THAT QUESTION IS REALLY
INTERESTING AND MAYBE WE CAN COME BACK TO THAT IN
Q AND A, IF YOU WANT.
BUT IN UNDER A MINUTE, WE CAN UNDERSTAND THE
IMPLEMENTATION, WE CAN LEARN ABOUT AN EDGE CASE
AND WE FOUND THIS THREADS THAT WE CAN PULL ON IF
WE WANT TO PURSUE THIS FURTHER.
SO IF YOU'VE TRIED TO USE THE INSPECT MODULE
BEFORE AND GOT THIS SORT OF MYSTIFYING OUTPUT.
THE ONE BUMMER ABOUT THE INSPECT MODULE IN THE
STANDARD LIBRARY IT DOESN'T WORK FOR THINGS THAT
ARE NOT IMPLEMENTSnd PYTHON SO IF YOU CALL ON
A BUILT-IN OR SOMETHING ELSE IMPLEMENTnd C,
IT FALLS DOWN.
AND YOU CAN'T TELL IF SOMETHING'S IMPLEMENTED IN
PYTHON OR C AHEAD OF TIME WITHOUT JUST KNOWING.
SO A FRIEND OF MINE HAS WRITTEN A TOOL CALLED C
INSPECT, WHICH IS A GREAT HACK THAT MAKES INSPECT
WORK FOR ALL C-IMPLEMENTED CODES AND HERE IS A
LINK TO THAT.
I THINK IT'S NOT COMPLETELY POLISHED AT THIS
POINT BUT VERY FINE, WORKS A SURPRISING AMOUNT OF
TIME AND I ALSO TAKE A LOT OF PLEASURE IN MY
PYTHON REBEL SUDDENLY SPITTING C-CODE AT ME.
IF YOU WANT TO CHECK THAT OUT, HERE'S THE LINK.
SO ANOTHER WAY YOU CAN BE AN EXPERT OBSERVER IS
TO LOOK AT HISTORY.
YOU HAVE THE FULL HISTORY OF THE PYTHON CODE BASE
AVAILABLE TO YOU SO YOU CAN USE EARLY CODE TO
UNDERSTAND THE CODES YOU'RE LOOKING AT TODAY AND
THIS IS PARTICULARLY USEFUL IN PYTHON.
PYTHON HISTORICALLY HAS HAD A REPUTATION FOR
BEING REALLY CLEAN AND READABLE C-CODE, SO YOU
CAN SIT DOWN WITH, SAY, THE INTERPRETER AND
FOLLOW ALONG WITHOUT REALLY KNOWING EXACTLY
WHAT'S HAPPENING AHEALED OF TIME.
AND DECADES LATER, THAT THE LESS TRUE THAN IT
USED TO BE, AND TO BE CLEAR, THAT'S PERFECTLY
REASONABLE.
MOST OF WHAT'S GOING ON IS THAT THERE IS SOME
OPTIMIZATION THAT'S GOING TO SPEED UP THE
EXECUTION OF EVERYONE'S PYTHON AT THE COST OF
MAKING THE INTERPRETER MORE COMPLEX, THAT IS
ALMOST ALWAYS THE RIGHT DECISION TO MAKE.
BUT SO TODAY THE RESULT IS THE INTERPRETER IS
MUCH HARDER TO GET A FOOTHOLD ON THAN TEN YEARS
AGO, THAT'S THE REALITY, BUT YOU ARE NOT LIMITED
TO THE COLD IN FRONT OF YOU.
YOU CAN START YOUR EXPLORATION IN AN EARLIER
VERSION, YOU CAN TAKE A FIELD TRIP TO THE LAND
WHERE PYTHON WAS REALLY CLEAN AND READABLE C.
CLOSELILY RELATED TO HISTORY IS LOOKING AT CHANGE
LOGS.
FOR PYTHON IN PARTICULAR, WHICH IS USES MERE CURE
Y'ALL, YOU CAN USE THIS WOULD BE, THIS WILL GIVE
A PATCH TO INTRODUCE THE PARTICULAR LINE OF CODES
AND THE AUTHOR AND COMMIT MESSAGE AND SO ON.
THIS IS REALLY USEFUL TO BE UNDERSTANDING THE
CONTEXT IN WHICH THE CODES WAS INTRODUCED.
WAS THIS LINE OF CODE PART OF A BUG FIX OR PART
OF A NEW FEATURE, WAS IT PART OF REFACTORING,
REARRANGE THINGS AND LOOKING AT THE ENTIRE PATCH
CAN OFTEN BE AN INSTRUCTIVE EXERCISE.
ANOTHER POSSIBILITY IS TO LOOK AT THE INTERNAL
STRUCTURE OF THE CODE.
AND FOR PYTHON THERE ARE LOTS OF DIFFERENT LEVELS
WE CAN LOOK AT THE CODES.
THERE'S THE SOURCE CODE BUT ALSO AT THE AST OR
YOU CAN LOOK WHERE THE GRAMMAR IS DEFINED OR LOOK
AT THE BYTECODE INTERPRETER, AND SOMETIMES ONE OF
THESE VIEWS WILL BE MORE ILLUMINATING THAN THE
ORIGINAL SOURCE CODE.
TO TAKE AN EXAMPLE OF THAT, THIS IS A GREAT BIT
OF PYTHON TRIVIA COURTESY OF A COLLEAGUE OF MINE
AT DROPBOX.
DOES ANYONE WANT TO TAKE A GUESS FOR WHAT THIS
EVALUATES TO?
THIS SAYS FALSE IS FALSE IS FALSE.
I'M HEAR A LOT OF FALSES.
ANYONE WANT TO GIVE AN EXPLANATION FOR WHY FALSE?
>> FALSE IS FALSE IS...
[ Audio Indiscernible ]
>> SO FALSE IS FALSE IS TRUE, TRUE IS FALSE IS
FALSE, THEREFORE, FALSE.
BASICALLY PARSING LIKE THIS, TOTALLY REASONABLE
GUESS.
[ Laughter ]
IN FACT, ADDING PARENTHESES TO THIS EXPRESSION
CHANGES IT COMPLETELY.
WOOPS.
I SEE WHAT HAPPENED HERE.
SO IN FACT THIS VALUE IS TRUE.
SORRY.
THIS EVALUATES TO TRUE.
AND THE REASON WHY IT DOES THAT IS BECAUSE THIS
IS IN FACT A TURNER COMPARISON OPERATION --
RETURN RATE COMPARISON OPERATION, WHICH YOU CAN
SEE HERE IF I HADN'T SCREWED UP THE SYNTAX.
THIS IS EXACTLY THE SAME CODE AS A LESS THAN B
LESS THAN C.
I SEE A LOT OF SKEPTICAL FACES, THAT'S TOTALLY
REASONABLE SO LET'S LOOK AT THE BYTECODE.
SO HERE IS FALSE IS FALSE IS FALSE.
DON'T BLINK WHILE I CHANGE THE SLIDE.
HERE IS A LESS THAN B LESS THAN C.
SO YOU DON'T HAVE TO KNOW ANYTHING AT ALL ABOUT
BYTECODE TO SEE THAT THIS IS EXACTLY THE SAME
STRUCTURE.
EVEN IF YOU'RE NOT USED TO LOOKING AT THIS AT
ALL, IT LEAPS OFF THE PAGE AND SO WE CAN USE THIS
INTERNAL VIEW TO BECOME MUCH MORE CONFIDENT ABOUT
THE WAY THE COLD BEHAVES.
I MENTION THE MODEL IS CORRECT OR AS IT TURNS OUT
BASICALLY HAVING EVERYONE IN THE ROOM GUESS THE
WRONG ANSWER.
BUT HERE'S WHAT'S GOING ON HERE.
I DID THIS, TOOK THE FIRST TIME I SAW THIS.
THE OTHER THING THAT'S KIND OF FUN IS WE CAN SEE
THAT COMPARISON OPERATORS ARE PARAMETERIZED, I'LL
LEAVE THAT AS A LITTLE NUGGET TO COME BACK TO.
LET'S TALK ABOUT THE SECOND STRATEGY
EXPERIMENTATION.
SO WE'VE BEEN TALKING ABOUT LEAVING CODE
SCIENTIFICALLY AND THE TWO EXAMPLES SO FAR ARE
NATURALISTISM AND ASTRONOMY AND THOUGHT TWO
THINGS HAVE IN COMMON IS IT'S HARD TO DO
EXPERIMENTS.
BUT WE'RE PROGRAMMERS SO WE DON'T SUFFER UNDER
THIS RESTRICTION.
THERE ARE LOTS OF WAYS ABOUT LEARNING ABOUT
UNFAMILIAR CODES BASE IN FRONT OF YOU, OTHER THAN
JUST LOOKING AT IT DIFFERENT WAYS.
YOU CAN RUN EXPERIMENTS, YOU CAN MAKE HYPOTHESES
AND TEST THOSE HYPOTHESES.
AND ONE WAY YOU CAN TEST YOUR HYPOTHESES IS WITH
MEASUREMENTS.
THERE ARE A TON OF DIFFERENT MEASURING TOOLS
AVAILABLE, ONE SIMPLE ONE IS TIME IT FOR
MEASURING THE SPEED OF CODE SNIPPETS.
IN THIS EXAMPLE, I'M TESTING WHETHER IT IS FASTER
TO CALL THE METHOD SORT OR CALL THE BUILT-IN
SORTED ON A LIST.
THERE WAS A REALLY INTERESTING EXAMPLE IN DAVID
BEASLEY'S TALK YESTERDAY, WHERE HE WAS TIMING
EXECUTION OF DIFFERENT VERSIONS OF CONCURRENT
CODE, AND THROUGH JUST LIKE SOMETHING THAT WAS
MAKE REQUESTS IN A LOOP AND MEASURING HOW MANY
REQUESTS PER SECOND HE COULD GET, HE LED US TO AN
INTERESTING PIECE OF INFORMATION ABOUT HOW THE
GIL PRIORITIZES TASKS THAT I THINK IS THE
OPPOSITE OF WHAT MOST PEOPLE WOULD EXPECT IT TO
DO AND SO JUST DOING THE SIMPLE MEASUREMENT AND
HAVING A THEORY FOR HOW THE GIL SHOULD BE DOING
PRIORITIZATION, WE CAN ACTUALLY TEST THAT.
I THINK IT'S PARTICULARLY IMPORTANT IN THIS SORT
OF EXPERIMENTATION TO HAVE A HYPOTHESIS THAT
YOU'RE TESTING.
OTHERWISE, IT'S PRETTY EASY TO KIND OF ACCUMULATE
A LOT OF NUMBERS THAT DON'T REALLY MEAN ANYTHING
OR TELL YOU ANYTHING NEW.
AND I DO WANT TO SAY, PLEASE DON'T TIME THINGS
AND THEN GO DO THINGS THAT WAY ALWAYS
IRRESPECTIVELY OF STYLE.
THIS SORT OF MINUSCULE TIMING OPTIMIZATION IS
ALMOST NEVER A GOOD GUIDE FOR HOW YOU SHOULD
PHRASE A LINE OF CODE.
ANOTHER GREAT WAY TO RUN EXPERIMENTS IS WITH
TESTS, SO YOU'RE SAYING TO YOURSELF, I'M READING
THIS CODE BASE AND I THINK THIS PARTICULAR
VARIANT ALWAYS HOLDS SO WRITE A TEST THAT PROVES
THAT OR THAT SHOWS THAT FOR A NUMBER OF CASES
FEEL THEN YOU CAN BUILD UP THESE SMALL BLOCKS OF
KNOWLEDGE INTO A MUCH MORE ROBUST UNDERSTANDING
OF THE SYSTEM.
THIS WILL PROBABLY BE SLOW THE FIRST TIME THAT
YOU DO IT AND IT DOES REINTRODUCE THE TOOLING AND
INSTALLATION HELL THAT WE HOPED TO AVOID BUT I
THINK IT'S WORTH IT AND THE REASON WHY I
EMPHASIZE THIS IS NOT BECAUSE IT HAS NEVER
OCCURRED TO ANY OF TO YOU WRITE TESTS BUT BECAUSE
I THINK MY THRESHOLD FOR WHEN YOU START WRITING
TESTS IS MUCH LOWER THAN YOU MIGHT HAVE HEARD.
I THINK IF YOU'RE SPENDING MORE THAN LIKE AN HOUR
WITH CPYTHON, YOU SHOULD TRY WRITING A TEST.
AND YOU DON'T NECESSARILY HAVE TO WRITE A FORMAL
TEST, EITHER.
YOU CAN, FOR EXAMPLE, USE THE FUNCTION THAT
YOU'RE LOOKING AT OR, LIKE, REMOVE A PIECE THAT
SEEMS IMPORTANT AND SEE IF IT FALLS OVER IN THE
WAY THAT YOU EXPECT IT TO.
AND THIS IS SOMETHING THAT I PERSONALLY AM OFTEN
BAD AT.
I REALLY WANT TO -- I OFTEN WANT TO HAVE A VERY
COMPLETE MENTAL MODEL OF THE SYSTEM BEFORE I
NOTHING AND START MAKING CHANGES, AND THIS IS AN
INEFFICIENT DECISION, LIKE ALMOST EVERY TIME.
IT WOULD BE MUCH FASTER TORE ME TO START MAKING
CHANGES, WRITING TEST ATTENTION, BUILD UP MY
MODEL ALONG THE WAY AND THAT'S CODES I PROBABLY
WON'T KEEP, I WILL END UP BUILDING THE MENTAL
MODEL, THROWING OUT THE CODE AND MAYBE MAKING A
CHANGE IF THAT'S WHAT I'M TRYING TO DO.
BUT, AGAIN, SINCE WE'RE NOT TALKING ABOUT
CONTRIBUTING OR ANYTHING TODAY, YOU SHOULD -- YOU
CAN TAKE YOUR COPY OF CPYTHON AND MAKE IT DO
WHATEVER YOU CARE ABOUT.
IT'S JUST TO INCREASE YOUR UNDERSTANDING AND THEN
THROW IT AWAY.
SO LET'S PUT THIS ALL BACK TOGETHER AND I WANT TO
LEAVE A COUPLE OF MINUTES FOR QUESTIONS ABOUT
STRATEGIES AND/OR THE RANDOM MODULE IF YOU'RE
INTERESTED.
WHEN YOU START TO ZIG INTO THE PYTHON CODE BASE,
DON'T READS IT, INTERACT WITH IT IN SOME OTHER
WAY.
I LIKE DIGGING AROUND IN PYTHON SOURCE, I FIND IT
DEEPLY GOOD FOR UNDERSTANDING IT.
I HOPE YOU DO THIS IN A REALLY INTERACTIVE AND
PLAYFUL WAY AND ONE OF THE GREAT THINGS ABOUT
OPEN SOURCE SOFTWARE IS THAT YOU HAVE YOUR OWN
COPY OF THE CODE IN FRONT OF YOU, AND YOU CAN
POKE IT AND PRODUCT IT AND RUN EXPERIMENTS AND
MAKE SILLY OR ILL-ADVISED CHANGES AND SOME OF THE
MOST INTERESTING AND OBJECTIVELY REALLY FUN
PROJECTS THAT I'VE HAD WERE EXTREMELY
ILL-ADVISED.
AND THEY WERE GREAT WAYS TO LEARN.
SO I ENCOURAGE YOU TO GO OUT AND DOWNLOAD A COPY
OF PYTHON SOURCE, IF YOU DON'T ALREADY HAVE ONE
AND START NOT READING IT.
THANK YOU.
[ Applause ]
01:49:16>> AUDIENCE:  HI.
I CONSIDER MYSELF A FAIRLY JADED OLD PYTHON
PROGRAMMER SO I JUST WANT TO SAY THANKS BECAUSE I
LEARNED SOMETHING TODAY.
MY QUESTION, THOUGH, IS SO WHY DOES CHOICE LOOK
LIKE A METHOD?
>>  IF ONLY I HAD A SLIDE FOR THAT.
[ Laughter ]
SO THIS IS A REALLY INTERESTING MODEL, I THINK.
SO BASICALLY THE CHOICE IS IMPLEMENTED AS A
METHOD ON THE RANDOM CLASS AND WHEN YOU IMPORT
THE RANDOM MODULE FOR THE FIRST TIME, YOU GET AN
INSTANCE OF THAT CLASS AND THEN IN THAT MODULE,
IT REBINDS ALL OF THE METHODS AS FUNCTION NAMES,
SO YOU SEE LIKE C EQUALS INSTANCE DOT SAEED AND
RANDOM AND SO ON.
THERE IS A COMMENTS THAT EXPLAINS THE RATIONALE,
WHICH SAYS THAT YOU WANT TO PRESERVE THE ABILITY
FOR THE PYTHON PROGRAMMER TO RE-SEED THE RANDOM
MODULE AND THAT'S WHAT HAPPENS IN THE INIT MODULE
OF THIS RANDOM CLASS, SO WE DO WANT TO PRESERVE
THAT, SO RANDOM.CHOICE I THINK IS MOST OFTEN USED
IN TEXT ADVENTURE GAMES FOR BEGINNERS SO WE DON'T
WANT TO IMPOST THIS COST ON NEW PYTHON
PROGRAMMERS OR PROGRAMMERS WHO DON'T NEED SPECIAL
CONTROL OVER THE RANDOM MODULE.
SO THAT'S THE WAY THIS IS IMPLEMENTED AND THE
NAMES ARE REBOUND AND DOUBLE UNDERSCORE ALL IS
DEFINED IN THE METHODS SO YOU DON'T GET KIND OF
JUNK THAT DOESN'T BELONG THERE WHEN YOU DO A STAR
IMPORT.
OTHER QUESTIONS?
ALL RIGHT.
THANK YOU.
[ Applause ]
^^^^^^^^^^^^^
