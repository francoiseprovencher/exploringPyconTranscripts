I'D LIKE TO INTRODUCE THE NEXT SPEAKER.
IT'S COLTON MYERS FROM SALTSTACK TALKING
ABOUT HOW TO MANAGE YOUR INFRASTRUCTURE WITH
SALTSTACK.
[ APPLAUSE ]
>> ALL RIGHT.
IT'S LATE IN THE DAY HERE.
IT LOOKS LIKE WE'VE LOST A BUNCH OF PEOPLE
BETWEEN THE LAST TALK AND THIS ONE.
BUT OH, WELL.
MY NAME IS COLTON MYERS.
I'M A PLATFORM ENGINEER FROM SALTSTACK.
I'VE WORKED THERE FOR A NUMBER OF YEARS AND
HAVE BEEN INVOLVED IN SALT DEVELOPMENT FOR
ALL THAT TIME.
REALLY QUICK BEFORE WE JUMP INTO THE ACTUAL
CONTENT, JUST A QUICK PLUG FOR MY BOOK.
IT WAS JUST PUBLISHED.
THIS TALK IS GOING TO BE KIND OF A LEARNING
SALTSTACK LIGHT.
WE'RE GOING TO TALK A LOT ABOUT THE CONTENT
THAT'S IN THE BOOK AND VERY QUICKLY BECAUSE
THIS IS ONLY A 30-MINUTE TALK.
SO LET'S GET TO IT.
WHAT IS SALTSTACK?
IF YOU'RE HERE, YOU PROBABLY HAVE AT LEAST A
LITTLE BIT OF AN IDEA.
MAYBE YOU'VE COME AND TALKED TO US AT OUR
BOOTH DURING THE CONFERENCE.
SALTSTACK IS FAST COMMUNICATION.
THAT'S WHAT EVERYTHING IS BUILT UPON.
IN FACT, WHEN SALTSTACK WAS FIRST STARTED AS
A PROJECT, IT WAS ONLY INTENDED FOR REMOTE
EXECUTION.
ON TOP OF THAT FAST COMMUNICATION, WE'VE BEEN
ABLE TO BUILD A WHOLE PLATFORM OF OTHER
PIECES.
MORE EXECUTION IS WHERE IT STARTED, AND THEN
CONFIGURATION MANAGEMENT IS PROBABLY WHAT
WE'RE BEST KNOWN FOR.
WE ALSO CAN DO AUTOMATION [INAUDIBLE].
AND IT'S ALL WRITTEN IN -- [INAUDIBLE] THAT
YOU NEED IT FOR.
IT'S COMPLETELY OPEN SOURCE.
THIS IS AWESOME.
I GET PAID TO WRITE OPEN SOURCE SOFTWARE,
WHICH IT DOESN'T GET MUCH BETTER THAN THAT.
THE NEXT QUESTION THAT USUALLY PROMPTS IS,
WELL, HOW DO YOU GUYS MAKE MONEY.
IS IT JUST TRAINING, IS IT JUST SERVICES.
AND THE METAPHOR THAT WE LIKE TO USE IS CAR
PARTS.
SO SALT OPEN SOURCE HAS ALL OF THE THINGS
THAT YOU NEED TO BUILD WHATEVER YOU WANT TO
BUILD WITH IT.
EVERYTHING IS THERE.
WE DON'T HOLD ANYTHING BACK.
IT'S ALL COMPLETELY OPEN SOURCE.
WITH THOSE PIECES, WE BUILD SALTSTACK
ENTERPRISE, WHICH IS THE FINISHED CAR, THE
FINISHED PACKAGE.
AND SO IF YOU'RE INTERESTED IN LEARNING MORE
ABOUT THAT, THEN HEAD TO
SALTSTACK.COM/ENTERPRISE.
THAT'S ALL I'M GOING TO SAY ABOUT THAT.
WITH THAT, WE'RE GOING TO JUMP INTO A DEMO,
AND WE'RE GOING TO HOPE IT WORKS.  THE
MINIONS ARE ALREADY CONNECTED TO THE MASTER.
THE MASTER IS THE SERVER FOR WHICH YOU'RE
CONTROLLING ALL OF YOUR HOSTS AND THE MINION
IS [INAUDIBLE] CONTROLLING.
SO THE MASTERS CONTROL MINIONS.
SO CONNECTED TO THIS MASTER, I HAVE -- LET'S
RUN OUR FIRST COMMAND HERE.
WE'RE GOING TO PING ALL OF OUR AVAILABLE
MINIONS.
AS YOU CAN SEE, THERE ARE FOUR MINIONS.
THAT'S THE [INAUDIBLE] AND THREE OTHER
MINIONS, AND THAT'S ALMOST GETTING CUT OFF.
ACTUALLY, I THINK IT WILL BE OKAY.
SO WE HAVE THREE OTHER MINIONS THAT ARE
SEPARATE FROM OUR MASTER THAT ARE CONNECTED
AS WELL.
THE STEPS FOR INSTALLATION OF SALT AND
CONNECTING THE MINION TO THE MASTER ARE
REALLY STRAIGHTFORWARD.
IF YOU GO TO DOCSTAT.COM, THERE'S AN
INSTALLATION PAGE RIGHT THERE.
AND YOU CAN GET THAT DONE.
I SKIPPED ALL THAT IN THE INTEREST OF TIME SO
WE CAN SEE.
SO WE CAN SEE THAT WE'VE CONNECTED.
MINIONS -- [INAUDIBLE] WE'VE ALREADY
PRE-ACCEPTED THESE FOUR MINIONS.
IF WE WERE TO BRING UP NEW MINIONS AND HAVE
THEM CONNECT, THEY WOULD BE UNDER UNACCEPTED
KEYS, AND HE WOULD HAVE TO ACCEPT THEM USING
SALT-A TO ACCEPT THE KEYS.
THAT'S A QUICK RUNDOWN WHERE YOU MIGHT GET TO
THE POINT WHERE WE ARE.
LET'S TALK ABOUT OUR FIRST COMMANDS.
SO INSIDE A SALTSTACK -- I JUST REALIZED --
WHICH IS JUST FANTASTIC.
THIS IS WHAT I GET FOR DEMOING.
HUH?
SO WHAT I'M DOING IS I'M FETCHING SOME
MATERIALS THAT I'M GOING TO BE USING LATER.
SO I JUST FETCHED SOME MATERIALS THAT I'M
GOING TO USE LATER AND STUCK THEM IN THE
DIRECTORY ON MY MASTERS.
SO OUR FIRST COMMAND WAS SALTSTACK TEST.PING.
THERE ARE A COUPLE DIFFERENT PIECES OF THIS
COMMAND THAT YOU SHOULD BE AWARE OF.
SALT IS THE BINARY FROM WHICH YOU CALL ALL OF
THESE COMMANDS.
IF WE DO SALT-H, WE CAN SEE HELP TEXTS AND
ALL THE DIFFERENT OPTIONS THAT WE HAVE
AVAILABLE TO US.
AND IT'S JUST A LITTLE BIT TOO BIG.
THERE WE GO.
THAT'S BETTER.
OKAY.
AND I'M NOT GOING TO TALK ABOUT A LOT OF THE
OPTIONS.
THEY'RE PRETTY SELF-EXPLANATORY.
THERE'S SOME GOOD DOCUMENTATION HERE.
YOU CAN SEVER LOG LEVELS, TIME OUTS,
ET CETERA, ET CETERA.
SO IN THIS PARTICULAR COMMAND, I'M NOT
ACTUALLY USING ANY OF THESE, BUT I MIGHT HAVE
A DASH V FOR VERBOSE OR WHATEVER.
LET'S BRING THAT UP TO THE TOP.
ALL RIGHT.
SO AFTER OUR COMMAND LINE OPTIONS, WE HAVE
THIS STAR.
AND THIS IS AN EXAMPLE OF A TARGETING STRING.
SO WE NEED TO BE ABLE TO TELL SALT WHICH
MINIONS IT'S ACTUALLY GOING TO BE CONNECTING
TO AND RUNNING THESE COMMANDS ON.  AND SO
RIGHT NOW I'M RUNNING STAR, AND I NEED TO PUT
IT IN QUOTES; OTHERWISE BASH WILL TRY TO
CONSUME IT AS A BLOB.
STAR MEANS EVERYTHING.
AND THEN I'M GOING TO TALK ABOUT TARGETING
LATER.
WE HAVE THE FUNCTION WHICH WE'RE ACTUALLY
RUNNING, AND THIS IS JUST A REMOTE EXECUTION
MODULE FUNCTION.
IF YOU LOOK IN THE SOURCE CODE FOR SALT, IT'S
IN SALT/MODULES, AND THIS IS GOING TO BE THE
TEST MODULE WITH THE PING FUNCTION WITHIN IT.
AND ALL THIS DOES IS RETURN TRUE.
AND WE'RE GOING TO ACTUALLY LOOK AT THAT A
LITTLE BIT.
IF WE HAD A FUNCTION WHICH TAKES ARGUMENTS,
WE WOULD ALSO HAVE ARGUMENTS ON THE END OF
HERE.
SO TEST.OKAY CODE HELLO, AND ALL OF OUR
MINIONS SAY HELLO.
THE REALLY COOL THING ABOUT SALT -- OR ONE OF
THE REALLY COOL THINGS IS THAT IT IS SELF
DOCUMENTING.
SO WE HAVE A MODULE CALLID SYS, WHICH ALLOWS
YOU TO SEE WHAT WE HAVE AVAILABLE TO US.
IF I DO SYS.MODULES, THERE IT GOES.
WE CAN SEE THE MODULES LOADED ON OUR MINIONS,
AND THERE ARE A TON OF THEM.
AND THIS LIST IS NOT ACTUALLY EVEN EXHAUSTED
BECAUSE THE MINION IS ONLY LOADING THOSE
MODULES FOR WHICH IT HAS THE DEPENDENCIES.
SO WE ALREADY KNOW WE HAVE THE TEST MODULES,
SO LET'S LOOK AT THE FUNCTIONS WITHIN THAT
MODULE.
LIST, FUNCTIONS, TEST, AND WE CAN SEE, OKAY,
WE HAVE TEST.R, TEST.ECHO, TEST.FIB, TONS OF
THINGS THAT WE CAN USE FOR TESTING SALT.
AND IF WE GO FURTHER, WE CAN GO SYS.DOC OR
TEST.PING USED TO MAKE SURE THE MINION IS UP
AND RESPONDING, NOT SLEEPING.
IT'S JUST A FUNCTION IN PYTHON THAT RETURNS
TRUE.
INTERESTINGLY, SYS REFERS TO ITSELF.
SO THIS IS USEFUL TO KNOW.
IT LISTS ALL ITS FUNCTIONS IN SYS.
WE CAN SEE THAT WE CAN ALSO LIST STATE
FUNCTIONS, STATE MODULES, STATE DOCS AND ALL
THESE OTHER THINGS AS WELL.  YOU CAN GET
ALMOST ALL OF THE SALT DOCUMENTATION RIGHT
THERE ON THE COMMAND LINE.
SO THIS IS SUPER USEFUL TO KNOW ESPECIALLY
WHEN YOU'RE NEW TO SALT.
LET'S TALK ABOUT A COUPLE OF THESE OTHER
MODULES THAT WE MIGHT HAVE.
WE CAN INSTALL PACKAGES.
TKG.INSTALL.
I KNOW IT HAS NO DEPENDENCIES, SO IT WILL BE
FAST.
THE FIRST ALREADY HAD AN INSTALL SO IT DIDN'T
NEED TO INSTALL.
THAT'S WHY THERE WAS NOTHING THERE.
WE COULD INSTALL EMAX.
EVEN THOUGH THAT'S AGAINST MY RELIGION.
THAT ONE WILL TAKE A LITTLE BIT LONGER.
SO WHILE THAT RUNS, WHILE THAT INSTALLS EMAX,
LET'S TALK A LITTLE BIT ABOUT TARGETING.
SO BY DEFAULT, WE TARGET VIA GLOBBING.
SO WHILE WE'RE HITTING ALL OF OUR MINIONS, WE
CAN TARGET.
SO AS SOON AS THIS FINISHES COMING BACK --
YOU CAN DO IT.
WHICH MINION ISN'T COMING BACK YET?
EMAX HAS A LOT OF DEPENDENCIES.
THAT'S RIDICULOUS.
ANYWAY, IF WE GO BACK TO SALT, WE CAN DO
SALT, LET'S GET OUR LIST OF MINIONS AGAIN
HERE.
SO WE CAN SAY SALT.
TEST.PING.
THIS IS JUST GLOBBING.
IT'S USING THE PYTHON GLOBBING LIBRARY.
SO WE CAN DO WHATEVER WE WANT TO.
WE CAN DO RANGES.
STAR, MINION, ONE THROUGH TWO, SO THAT'S JUST
GLOBBING.
IF WE LOOK IN THE HELP -- OOPS.
I GOT IT ANYWAY.
WE CAN GLOB A BUNCH OF OTHER WAYS.
WE CAN GLOB VIA REGULAR EXPRESSIONS, JUST A
COMMA SEPARATED LIST.
WE CAN GLOB VIA GRAINS.
SO GRAINS ARE STATIC INFORMATION ABOUT OUR
MINIONS.
FOR EXAMPLE, WE HAVE INFORMATION SUCH AS THE
OS THAT'S RUNNING ON THE MINION OR THE OS
VERSION OR THE OS FAMILY OR THE -- LET'S JUST
LOOK.
IF WE DO SALT -- LET'S JUST LOOK AT ONE OF
OUR MINIONS HERE.
WE HAVE GRAINS.ITEMS.
AND WE CAN SEE THE EXHAUSTIVE LIST WHICH
WE'RE NOT GOING TO GO OVER.
IPV4, IP INTERFACES.
PROBABLY IN GRAINS.
SO WE CAN TARGET OFF OF THAT.
WE CAN SAY, OKAY, I JUST WANT TO TARGET OS
FAMILY WN.
SO WE USE A COLON TO -- LET'S BRING THAT TO
THE TOP.
OS FAMILY DEBIAN.
WE USE A COLON.
WE GET JUST OR DEBIAN MINIONS.
IT CAN BE GOOD TO KNOW WHAT THESE ARE.
LET'S DO OS FAMILY AND OS RELEASE.
I HAVE A CENTOS 6.4, A DEBIAN 7.5, AND
ANOTHER.
NOW WE HAVE THREE DEBIAN MINIONS.
SO WE CAN ALSO USE GLOBBING IN HERE, DEBIAN W
STAR, WHATEVER.
NOT A VERY GOOD EXAMPLE, BUT STILL SHOWS THAT
IT WORKS.
AND THAT'S GRAINS TARGETING.
LET'S TALK A LITTLE BIT -- SO WE CAN ALSO
TARGET WITH REGULAR EXPRESSIONS IN GRAINS.
WE CAN -- I'M GOING TO SKIP A COUPLE.
PILLAR DOWN THERE.
WE'RE NOT GOING TO TALK MUCH ABOUT PILLAR IN
THIS TALK.
PILLAR IS JUST A SECURE VERSION OF GRAINS
BASICALLY.
THIS IS INFORMATION THAT COMES FROM THE
MASTER AND IS GIVEN TO THE MINIONS IN A
SECURE WAY SO YOU CAN STICK, YOU KNOW, SECURE
DATA IN THERE THAT ONLY SOME MINIONS ARE
SUPPOSED TO HAVE, FOR EXAMPLE, OR YOU CAN
JUST STICK DATA THAT YOU WANT TO USE THAT
COMES FROM A MASTER.
AND THEN FINALLY, LET'S TALK ABOUT COMPOUND
MATCHING.
WE CAN ACTUALLY COMBINE THESE MATCHES WITH
COMPOUND.
SO I CAN SAY, OKAY, I WANT A GRAINS MATCH,
G@OS FAMILY DEBIAN AND NOT G@OS DEBIAN.
SO I DON'T WANT ANYTHING THAT'S PART OF THE
OS FAMILY DEBIAN BUT NOT ACTUALLY DEBIAN.
TEST.PING.
THAT SHOULD BE TWO MINIONS, AND WE GOT OUR
TWO MINIONS BACK.
AND THEN THE LAST TYPE OF TARGETING IS NODE
GROUP, WHICH IS JUST COMPOUND MATCHING.
BUT YOU CAN ASSIGN AN ALIAS TO A COMPOUND
MATCH BECAUSE TYPING THAT OUT EVERY TIME IS
GOING TO BE PRETTY TIRESOME.
SO IN YOUR MASTER CONFIG, YOU CAN ASSIGN
GROUPS WHICH ARE ASSIGNED TO THESE COMPOUND
MATCHES.
SO THAT COVERS SUPER BRIEFLY OUR MODE
EXECUTION SYSTEM, AND IT'S SUPER POWERFUL.
YOU CAN DO LOTS OF THINGS WITH IT.
BUT WHERE SALT REALLY SHINES FOR MANAGING
YOUR SERVERS IS WHEN YOU GET INTO THE STATE
SYSTEM.
I HAVE SOME STATES THAT I PUT IN PLACE A
LITTLE BIT EARLIER, WHICH -- OOPS.
WHERE AM I?
OKAY.
SO THIS IS OUR FIRST STATE.
AND THIS IS A STATE FILE THAT HAS THREE
STATES INSIDE OF IT.
I'VE KIND OF PRE-WRITTEN THEM HERE.
AND AT FIRST, IT LOOKS LIKE A LOT, BUT IT
STARTS TO BOIL DOWN PRETTY QUICKLY INTO
THINGS THAT ARE SIMPLE TO UNDERSTAND.
THIS FIRST LINE INSTALL APACHE IS JUST THE
STATE ID.
SO EVERY UNIQUE STATE THAT WE RUN NEEDS TO
HAVE AN ID.
THIS PKG.INSTALLED SHOULD LOOK FAMILIAR.
IT FOLLOWS THE SAME MODEL WE USE FOR MODE
EXECUTION, AND WE BASICALLY SAY I WANT THIS
PACKAGE TO BE INSTALLED ON MY SYSTEM.
OKAY?
AND THEN WE GIVE IT ANY ARGUMENTS, AND THE
FIRST ARGUMENT IS ALWAYS NAME.
THE NAME OF THE PACKAGE WE'RE INSTALLING IS
APACHE 2.
IT'S INTERESTING TO NOTE HERE THAT THE
VERBIAGE IS DIFFERENT IN SALT -- OR IN
STATES.
WHEN WE WERE INSTALLING PACKAGES WITH
EXECUTION, WE WERE JUST SAYING PKG.INSTALL
BECAUSE WE JUST WANT TO INSTALL A PACKAGE,
AND IT'S JUST CALLED INSTALL H TOP OR
WHATEVER IT IS, WHEREAS IN THE STATE SYSTEM
WE HAVE PKG.INSTALLED.
WE ARE DEFINING THE FINAL STATE OF OUR
SYSTEM, AND SALT JUST MAKES THAT HAPPEN.
SO PKG.INSTALLED, IF THAT PACKAGE IS ALREADY
INSTALLED, IT'S NOT GOING TO DO ANYTHING.
IF IT IS NOT INSTALLED, IT WILL INSTALL IT,
MAKE SURE IT'S INSTALLED PROPERLY AND RETURN,
YOU KNOW, THE [INAUDIBLE].
THE OTHER THING TO NOTE THAT'S INTERESTING IS
THIS -- YOU NOTICE THAT I'VE JUST BEEN USING
PKG.
I HAVEN'T HAD TO REFER TO ACT OR YUM OR ANY
OF THESE TOOLS EVEN THOUGH I HAVE A MIXTURE
OF MINIONS AND SALT THAT ACTUALLY ABSTRACTS
THAT AWAY FOR US.
WE DON'T HAVE TO WORRY ABOUT WHETHER THERE'S
YUM OR APP ON THE TARGET SYSTEMS.
IT WILL ACTUALLY DETECT THAT AND RUN THE
CORRECT COMMAND.
THE SECOND STATE HERE IS OUR SERVICE.RUNNING
STATE.
AGAIN, APACHE RUNNING.
THAT'S JUST A STATE ID.
WE CAN USE WHATEVER WE WANT THERE, BUT IT'S
USEFUL TO MAKE IT DESCRIPTIVE SO THAT WE KNOW
WHAT'S GOING ON.
SO WE WANT TO MAKE SURE THAT THE APACHE 2
SERVICE IS RUNNING.
WE WANT TO ALSO ENABLE IT SO THAT IT IS -- IT
WILL RUN ON START-UP.
AND THEN WE HAVE TWO SPECIAL ARGUMENTS WHICH
WE CALL REQUISITES INSULT.
AND THIS ALLOWS US TO CREATE DEPENDENCIES IN
OUR STATE TREE.
SO, FOR EXAMPLE, WE REQUIRE THE PACKAGE STATE
INSTALL APACHE.
THIS MEANS THAT THE PACKAGE STATE IS ALWAYS
GOING TO RUN FIRST NO MATTER WHETHER WE'VE
PUT THEM -- WHAT ORDER WE'VE PUT THEM INTO
THE FILE.
BY DEFAULT STATES WILL RUN IN THE ORDER THAT
THEY'RE DEFINED, BUT WE CAN MASSAGE THAT
ORDER AS NEEDED WITH THESE REQUISITES.
SO THIS WILL MAKE SURE THAT THE PACKAGE RUNS
FIRST AND THAT IT INSTALLS SUCCESSFULLY
BEFORE WE TRY TO RUN THE STATE.
AND THEN THIS WATCH IS A SPECIAL REQUISITE
THAT I'M NOT GOING TO TALK ABOUT IN TOO MUCH
DETAIL.
BUT THE WAY IT'S USED HERE MEANS THAT IT'S
ACTUALLY WATCHING THIS FILE DOWN HERE THAT
I'M GOING TO TALK ABOUT IN JUST A MINUTE.
AND IF THAT FILE CHANGES IT'S GOING TO
ACTUALLY RESTART APACHE.
SO IF YOU USE A WATCH REQUISITE WITH A
SERVICE STATE LIKE THIS, IT WILL RESTART THE
SERVICE WHEN THERE ARE CHANGES THAT ARE MADE.
SO THAT'S SUPER USEFUL.
SO LET'S TALK ABOUT THIS FINAL STATE HERE
INSTALL APACHE.COMF.
WE SAY FILE.MANAGED BECAUSE WE JUST WANT TO
DEFINE THE FINAL STATE OF THE SYSTEM.
OKAY?
SO WE HAVE THE NAME, WHICH IS THE TARGET ON
THE SYSTEM.
THE FILE NAME ON THE SYSTEM.
WE HAVE THE SOURCE, WHICH HAS A SPECIAL
SALT:// WHICH REFERS TO FILES ON THE MASTER.
IN FACT, I CAN EDIT THAT FILE RIGHT HERE.
IF I SAY EDIT/ -- IT'S RIGHT THERE.
GOT A FILE HERE.
AND THEN WE DEFINE THE USER AND THE GROUP
THAT WE WANT THAT FILE TO BE SET AS, THE MODE
OF THE FILE AND ACTUALLY USE SOME TEMPLATING.
I USE SOME JINJA INSIDE OF THAT FILE TO GET
RID OF SOME DEBIAN COMPATIBLE STUFF BECAUSE I
PULLED THE CONFIGURATION.
AND FINALLY, WE MAKE SURE THAT THE APACHE IS
INSTALLED FIRST.
SAME AS BEFORE, WE NEED TO MAKE SURE THAT
APACHE IS INSTALLED SO THESE DIRECTORIES ARE
IN PLACE.
SO WE HAVE THE STATE.
AND THEN WE CAN RUN IT.
NOW, YOU NOTICE IN THE STATE I'VE ACTUALLY
USED APACHE 2 EXPLICITLY IN A COUPLE PLACES,
AND SO THAT'S ACTUALLY GOING TO FAIL ON MY
CENTOS MACHINES BECAUSE THEY EXPECT HTTPD.
SO NOW I'M JUST GOING TO RUN THIS ON MY --
I'LL SHOW YOU HOW TO FIX THAT IN JUST A
MINUTE.
IT'S INSTALLING APACHE.
PUTTING THIS FILE INTO PLACE.
MAKING SURE THE SERVICE IS STARTED.
SO WE'RE ALREADY GETTING STUFF BACK.
SO THIS IS OUR MINION 2, WHICH IS MY DEBIAN
MINION.
SO YOU NOTICE IT INSTALLED APACHE.
IT TELLS US ALL THE DIFFERENT PACKAGES THAT
CHANGED.
THIS DIF IS HOW THE APACHE.COMF FILE CHANGED,
AND IT'S FAIRLY HEFTY BECAUSE I PULLED THIS
FROM MY UBUNTU MACHINES.
NOW LET'S JUST DO ONE QUICK TEST.
IF I ADD A NEW LINE TO THIS APACHE.COMF, THAT
MEANS THAT IT WILL CHANGE ON THE TARGET
SYSTEMS, AND WE WANT TO MAKE SURE THAT APACHE
RESTARTS BECAUSE WE HAD THAT WATCH IN THERE
TO MAKE SURE APACHE RESTARTS.
SO IF WE LOOK HERE, OKAY, SO INSTALL APACHE.
IT SAID APACHE 2 IS ALREADY INSTALLED.
BUT HERE WE CAN SEE THE DIF OF THE FILE
BECAUSE WE ADDED THAT NEW LINE.
AND DOWN HERE WE CAN SEE THE SERVICE
RESTARTED.
SO EVERYTHING IS WORKING PERFECTLY.
IF I RUN THIS AGAIN, NOW THERE'S NO CHANGES.
SO EVERYTHING SHOULD JUST BE PERFECTLY GREEN
AND NOTHING CHANGED.
AND EVERYTHING IS GOOD ON ALL THREE SYSTEMS.
SO LET'S EXTEND THIS TO A LITTLE BIT OF CROSS
PLATFORM AGNOSTICISM, IF YOU WILL.
SO IF YOU IGNORE THOSE FIRST EIGHT OR NINE
LINES, THE REST OF THE FILE IS PRETTY MUCH
THE SAME AS BEFORE.
I'VE USED A COUPLE LITTLE JINJAS, SO USE WHAT
I'VE DEFINED AT THE TOP.
BUT OTHERWISE, IT'S EXACTLY THE SAME.
WE HAVE ACCESS TO UNGRAINS, WHICH I'VE BEEN
USING BEFORE.
INTERESTINGLY ENOUGH, WE ALSO HAVE ACCESS TO
OUR PILLAR, WHICH I'M GOING TO SHOW IN JUST A
MINUTE.
WE ACTUALLY CAN EVEN CALL OUT TO REMOTE
EXECUTION MODULES FROM WITHIN HERE.
SO IF GRAINS -- IF THE OS FAMILY IS DEBIAN,
THEN WE SAY OKAY.
IF IT'S IN APACHE 2, THAT NAME INSTEAD, PUT
THE FILE THERE AND GET THE FILE FROM THERE.
SO I HAVE A DIFFERENT FILE FOR THE
[INAUDIBLE].
AND DOWN HERE WE USE LITTLE JINJA BLOCKS TO
INSERT THE FILE.
NOW WE CAN RUN APACHE JINJA.
OUR UBUNTU AND DEBIAN CAME RIGHT BACK.
WE'RE STILL WAITING ON OUR CENTOS MACHINE.
IT DIDN'T HAVE TO INSTALL NEARLY AS MANY
DEPENDENCIES.
I PULLED THIS FILE FROM A CENTOS MINION SO IT
DIDN'T ACTUALLY CHANGE.
SERVICE ATB HAS BEEN ENABLED AND IS RUNNING.
ON OUR UBUNTU MACHINES, IT'S BEEN ENABLED.
BUT ON OUR RIGHT-HAND MACHINES, IT WILL NOT,
SO OUR STATE ACTUALLY ENABLED THAT SERVICE
FOR US.
SO NOW IF WE RUN THIS ONE MORE TIME JUST TO
MAKE SURE, YOU NOTICE THEY ALL CAME BACK
ALMOST IMMEDIATELY.
EVERYTHING IS IN THE CORRECT STATE, AND WE
KNOW EVERY TIME WE RUN THIS HIGH STATE THAT
STATE THAT WE'VE DEFINED WILL BE THE WAY THAT
WE DEFINED IT.
AND THAT'S THAT.
SO AS MY FINAL DEMO, I'M GOING TO SHOW PILLAR
REALLY QUICK.
I'M NOT ACTUALLY GOING TO SHOW HOW YOU GET
PILLAR DATA ONTO YOUR MINIONS.
IT'S FAIRLY STRAIGHTFORWARD.
IT'S JUST A SERIES OF YOU FILES, AND YOU GET
SENT TO THE MINIONS.
THERE'S PLENTY OF GOOD DOCUMENTATION THERE.
I WILL SHOW YOU THAT IT'S ALREADY THERE.
SO IT'S PILLAR.ITEM.
I PUT IN A PILLAR KEY CALLED USERS ON ALL MY
MINIONS.
IT'S ALL THE SAME.
SO ALL MY MINIONS HAVE THIS LARRY, MOE, AND
CURLY LIST OF USERS.
SO NOW I HAVE ANOTHER STATE THAT WILL
ACTUALLY USE THIS DATA.
SO IF WE LOOK AT USERS PILLAR HERE, NOW I'M
USING A JINJA FOUR LOOP FOR USER IN PILLAR
USERS.
WE HAVE MANAGE_, AND WE USE THE USER NAME,
BECAUSE, AGAIN, THIS LINE HAS TO BE UNIQUE,
SO WE NEED TO USE THE USER NAME IN OUR ID TO
MAKE IT UNIQUE.
USER.PRESENT.
AGAIN, IT'S NOT USER.ADD BECAUSE THAT'S
ITERATIVE.
IT'S USER.PRESENT BECAUSE WE'RE DEFINING THE
FINAL STATE OF OUR MACHINE, AND WE GIVE IT
THE NAME OF THE USER.
OKAY?
SO IF WE DO THIS -- THAT WAS FAST.
ALL RIGHT.
SO WE CAN SEE ALL OF THE INFORMATION ABOUT
THE USER, THE HOME DIRECTORY, ALL THE
DIFFERENT STUFF THAT WAS CREATED, LARRY, MOE,
AND CURLY ARE PRESENT, AND IF WE RUN THIS
AGAIN WE CAN SEE THEY'RE ALREADY THERE AND UP
TO DATE.
WE CAN DEFINE DIFFERENT PIECES OF INFORMATION
FOR THESE GUYS, YOU KNOW, THEIR HOME
DIRECTORY OR WHATEVER, AND EVERYTHING WILL BE
UPDATED AS NECESSARY.
SO THAT'S THE STATE SYSTEM AT SALT.
AND I THINK THAT'S ALL I HAVE.
SO WE ARE GOING TO HAVE A FEW QUESTIONS.
AND AGAIN, IF THIS IS -- THIS IS REALLY FAST.
I WENT THROUGH A LOT OF CONTENT REALLY FAST.
AND SO MAKE SURE YOU GO BACK TO THE VIDEO IF
YOU WANT.
CHECK OUT MY BOOK.
IT'S REALLY THE BETTER VERSION OF THIS TALK
BECAUSE IT HAS MORE INFORMATION.
AND YOU CAN GET MY SLIDES AND THE STATE FILES
THAT I USED AT THAT BITLY ADDRESS.
AND THANK YOU VERY MUCH.
[ APPLAUSE ]
>> THERE'S A MICROPHONE IN THE CENTER IF YOU
WANT TO ASK QUESTIONS.
I'LL START WITH THE FIRST QUESTION.
>> Audience:  IF YOU'RE USING DOCKER, IT
SEEMS LIKE A REALLY DIFFERENT STYLE VERSUS
CHANGING ALL THIS.
CAN YOU TALK A LITTLE BIT ABOUT THE TRADE OFF
BETWEEN THE TWO AND CAN SALTSTACK BE USED
WITH DOCKER.
>>  YEAH, SALTSTACK CAN MANAGE DOCKER NO
PROBLEM.
IT CAN MANAGE SPINNING THEM UP AND
INTERACTING WITH DOCKER.
WE ACTUALLY JUST REWROTE OUR DOCKER SUPPORT
SO IT WILL BE IN OUR NEXT FEATURE RELEASE.
THAT REWRITE WILL.
THERE'S TWO DIFFERENT FORMS OF CONFIGURATION
MANAGEMENT THAT ARE HAPPENING RIGHT NOW.
ONE OF [INAUDIBLE] IF I NEED TO CHANGE
SOMETHING, I JUST BLOW IT AWAY AND MAKE A NEW
ONE.
AND THEN THERE'S THE SALT, YOU KNOW, CHEF
PUPPET WHERE WE ARE TRYING TO JUST MANAGE THE
SYSTEMS AND WE DON'T USUALLY BLOW THEM AWAY.
WE JUST MAKE SURE THEY GET IN THE CORRECT
STATE AND FIX THEM AS THEY NEED IT.
AND I DON'T KNOW WHICH ONE IS GOING TO WIN.
HONESTLY, WE'RE GOING TO KIND OF SEE WHERE IT
GOES IN THE NEXT COUPLE YEARS BECAUSE YOU CAN
ALSO USE SALT TO DO A SIMILAR THING TO DOCKER
WHERE YOU DON'T EVEN HAVE A MASTER.
YOU JUST SPIN UP A MASTER LIST ALT INSTALLED
AND THEY PULL THEIR STATES FROM GIT FS AND
WE'LL JUST RUN THEIR STATES ON A SCHEDULE TO
MAKE SURE THEY'RE IN THE RIGHT STATE.
AND THEY WON'T EVER -- YOU WON'T EVER TOUCH
THOSE MINIONS ONCE THEY HAVE APPEARED EXCEPT
BY MAYBE UPLOADING NEW STATES TO GIT FS OR
WHATEVER.
AND SO THAT'S ANOTHER INTERESTING, YOU KNOW,
HANDS OFF, NO MASTER, AND WITH THOSE KINDS OF
THINGS YOU LOSE OUT ON QUICK CHANGES.
YOU CAN'T JUST DO PACKAGE.INSTALL AND UPGRADE
YOUR SECURITY FIX.
YOU KNOW, YOU CAN'T INSTALL PATCHES WITH A
SINGLE COMMAND.
YOU HAVE TO ACTUALLY MAKE NEW ONES OR
WHATEVER.
SO THERE'S A LOT OF TRADE-OFFS BUT I REALLY
LIKE THE WAY THAT WE DO THINGS AT SALT.
I THINK IT REALLY WORKS REALLY WELL AND
SCALES REALLY WELL, AND I HOPE THAT ANSWERED
YOUR QUESTION?
>> Audience:  ARE THE MINIONS AWARE OF THEIR
STATE?
COULD YOU QUERY AND SAY WHAT MINIONS HAVE
THIS STATE FILE, LIKE SO CHEF CAN DO THAT,
RIGHT?
YOU CAN QUERY CHEF AND SAY TELL ME ALL OF THE
ONES THAT ARE RUNNING THIS COOKBOOK AND IT
WILL SPIT YOU OUT A LIST.
IS THERE SOMETHING SIMILAR.
>> A LOT OF THIS PROCESSING HAPPENS ON THE
MINION, IT REQUEST FILES FROM THE MASTER AND
COMPILES THEM.
YOU CAN HAVE IT COMPILE THOSE I FILES DOWN TO
A LIST OF WHAT STATES IT'S GOING TO RUN AND
VIEW THAT LIST.
OR YOU CAN EVEN RUN TEST RUNS IF YOU PASS IN,
IN FACT, I CAN JUST DO IT REALLY QUICK.
IF YOU PASS IN STAR STATE.SLS APACHE, AND WE
DO TEST -- OH, SORRY.
I DIDN'T KNOW YOU GUYS HAVE CHANGED -- OKAY.
IF WE DO TEST EQUALS TRUE ON THE END OF THAT.
NOW, THIS ISN'T A GOOD EXAMPLE.
BECAUSE -- ACTUALLY, IT WILL.
THESE FAILED BECAUSE I USED THE WRONG ONE.
LET'S DO APACHE UNDERSCORE GINGER HERE.
THIS WILL ACTUALLY NOT MAKE ANY CHANGES ON
THE TARGET SYSTEM.
IT WILL TELL YOU WHAT CHANGES ARE GOING TO BE
MADE.
SO LET'S MAKE A LITTLE CHANGE HERE.
SO WE ADDED A NEW LINE AGAIN.
SO CHANGES WOULD BE MADE NORMALLY.
AND SO IF WE LOOK HERE, SEE HOW IT'S IN
YELLOW NOW?
SO NOW IT SAYS, OKAY, THE FILE THIS IS SET TO
BE CHANGED.
IT WILL TELL YOU EXACTLY WHAT'S DIFFERENT
BETWEEN WHAT YOU'VE DEFINED AND WHAT'S ON THE
SYSTEM.
AND WHAT'S GOING TO HAPPEN THE NEXT TIME YOU
RUN A REAL STATE RUN.
AND THIS ONE SAYS SERVER IS SET TO BE
RESTARTED BECAUSE IT KNOWS IT'S GOING TO BE
RESTARTED NEXT TIME YOU RUN A STATE RUN.
SO THOSE ARE TWO WAYS YOU CAN SEE THE STATE
OF A MACHINE WITHOUT TOUCHING IT.
THE OTHER ONE I DIDN'T RUN THE COMMAND.
YOU CAN DO STATE.SHOW.
HIGH STATE.SHOW.
I HAVEN'T ACTUALLY DEFINED A TOP FILE SO I
DON'T THINK THIS WILL WORK BUT YOU CAN USE
HIGH STATE NORMALLY IF YOU'VE DEFINED A TOP
FILE AND ENVIRONMENTS AND STUFF THAT I DIDN'T
GO INTO TODAY.
BUT ANYWAY.
>> AUDIENCE:  CAN YOU TALK BRIEFLY ABOUT THE
CONNECTIVITY REQUIREMENTS BETWEEN THE MINIONS
AND THE MASTER?
IS THAT SOMETHING THAT'S ALWAYS ENCRYPTED?
HOW IS IT SECURED?
>> YES, SO THE MINIONS [INAUDIBLE].
ONE OF THEM IS A PUB PORT 4505.
ALL THE MINIONS STAY CONNECTED TO THAT ALL
THE TIME.
THE OTHER ONE IS THE RAT PORT AND WHEN
MINIONS ARE DONE RUNNING A JOB THEY WILL
RETURN THEIR INFORMATION THERE.
THAT'S THE DEFAULT SETUP.
WE HAVE A COUPLE OTHER WAYS YOU CAN RUN SALT.
YOU CAN RUN IT OVER SHH.
IT'S CALLED SALT-SHH.
AND THAT'S A FEATURE COMPLETE VERSION OF SALT
THAT USES SHH AS THE TRANSPORT.
AND WE HAVE ANOTHER EXPERIMENT AT TRANSPORT
THAT'S OVER UDP CALLED RATE.
RELIABLE, ASYNCHRONOUS EVENT TRANSPORT.
AND IT'S REALLY PROMISING.
THE DRAWBACK THERE IS THAT YOU HAVE TO HAVE
OPEN PORTS ON THE MINION.
BUT YES, THAT CONNECTION IS ALWAYS OPEN BUT
IT'S VERY LIGHTWEIGHT AND -- YEAH.
HOPE THAT ANSWERS YOUR QUESTION.
COULD YOU TALK ABOUT REACTOR AND MAYBE
OVERSTATE?
>>  YEAH.
SO SALT HAS AN EVENT SYSTEM BUILT INTO IT.
MINIONS CAN FIRE EVENTS.
IN FACT YOU CAN ACTUALLY PUT EVENTS ON THE
BUS FROM THIRD PARTY APPLICATIONS EVEN.
AND THEN THE MASTER SEES THOSE EVENTS AND CAN
REACT TO THEM BY RUNNING COMMANDS, RUNNING
STATES, ET CETERA.
THAT'S THE REALLY HIGH LEVEL.
IT'S REALLY COOL BECAUSE YOU CAN MAKE SELF
HEALING INFRASTRUCTURES AND REACTIVE
INFRASTRUCTURES AND THEN OVERSTATE IS
ACTUALLY DEPRECATED IN FAVOR OF ORCHESTRATE.
SO ORCHESTRATE ALLOWS YOU TO RUN STATES AND
COMMANDS ON MINIONS IN BATCHES.
SO IF YOU NEED TO BRING UP YOUR DATABASE
SERVERS BEFORE YOU BRING UP YOUR WEB SERVERS
IF YOU JUST RUN NORMAL STATES ON THEM, THEY
WILL RUN THEIR STUFF WITHOUT KNOWING EACH
OTHER AT ALL.
WHEREAS ORCHESTRATE ALLOWS YOU TO RUN.
RUN CLUSTERS OF SERVERS.
BEFORE I EVEN START RUNNING THESE STATES OVER
HERE.
SO THAT'S STATE.ORCHESTRATE.
AND THERE'S INFORMATION ABOUT THAT ON THE
DOCS.
SO.
>>  IT LOOKS LIKE THE LAST QUESTION.
SO THANK YOU.
>> YEAH, I THINK WE'RE GOOD.
THANKS, EVERYBODY.
[ APPLAUSE ]
