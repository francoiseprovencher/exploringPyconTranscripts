HOW Y'ALL DOING?
THAT WAS REALLY SAD.
LIKE, HOW Y'ALL DOING?
>> WHOO!
>> YEAH, MUCH MUCH BETTER.
ALL RIGHT.
SO, OUR NEXT TALK, WHICH IS GOING TO BE AWESOME,
IS BY ASHEESH LAROIA AND PHILIP JAMES.
THEY ARE LONGTIME PYTHON FRIENDS.
THEY'RE GOING TO BE TELLING US WHAT HAPPENS WHEN
YOU RUN PYTHON.
THEY WORK AT EVENTBRITE.
[ APPLAUSE ]
>> THANKS.
AS HE SAID, MY NAME IS PHILIP JAMES, I WORK AT
EVENTBRITE AS A SOFTWARE ENGINEER ON THE ORGANIZER
GROWTH TEAM.
YES, WE ARE HIRING.
I'VE BEEN USING PYTHON FOR ABOUT SEVEN YEARS, EVER
SINCE A FRIEND WHO'S IN DATABASES INTRODUCED ME TO
THE LANGUAGE, BUT IT WASN'T UNTIL I SAW HOW EASY
IT WAS TO BUILD A WEB ABSENT PYTHON THAT I REALLY
GOT EXCITED AND I'VE BEEN BUILDING THINGS EVER
SINCE.
>> HI, MY NAME IS ASHEESH, I'M A SOFTWARE ENGINEER
AND A COMMUNITY ENGINEER AT SANDSTORM NOW.
AND I FIRST GOT INTO PYTHON BECAUSE I WANTED TO
WRITE SOME CODE TO TAKE MY HIGH SCHOOL NEWSPAPER'S
PAGE MAKER FILES AND MAKE A WEBSITE OUT OF THEM.
AND I HAD READ THAT PYTHON WAS A GREAT LANGUAGE
FOR THIS KIND OF THING.
SO I TRIED TO INSTALL PYTHON ON THE COMPUTER LAB
MACHINE IN THE HIGH SCHOOL NEWSPAPER OFFICE.
IT DIDN'T WORK.
SO THEN I USED UNPATCHED WINDOWS SECURITY
VULNERABILITY TO GET LOCAL SYSTEM AND INSTALL
PYTHON.
AND THEN FOR THE REST OF THE YEAR, I WAS ABLE TO
MAKE SOME CODE TO MAKE A WEBSITE.
[ APPLAUSE ]
>> AND WE'RE HERE TO TALK ABOUT WHAT HAPPENS WHEN
YOU TYPE PYTHON AND PRESS ENTER.
SO WHAT IS IT DOES HAPPEN?
YOU TYPE PYTHON.
YOU PRESS ENTER.
SOME MAGIC HAPPENS.
THE SHELL IS DISPLAYED.
AND THAT'S THE END OF THE TALK.
THANKS, EVERYBODY, IT WAS REALLY GREAT TO HAVE
YOU.
>> THANKS SO MUCH.
[ Laughter ]
>> REALLY, WE'RE GOING TO BE TALKING ABOUT THE
PYTHON PROCESS AND HOW IT AS A UNIX PROCESS
INTERACTS WITH THE REST OF THE OPERATING SYSTEM
AND HOW USER INTERACT WITH THAT PROCESS.
IF YOU ARE EXPECTING A TALK ABOUT CPYTHON
INTERNALS, SORRY, THIS IS THE WRONG TALK.
THIS IS ABOUT THE ACTUAL PYTHON PROCESS AS AN
ABSTRACTION AND HOW IT INTERACTS WITH EVERYTHING
ELSE.
SO, WE'RE GOING TO START WITH THE SHELL.
THIS IS THE BASH SHELL.
AND WE'RE GOING TO TYPE PYTHON.
NOW, WHEN WE TYPE PYTHON AND PRESS ENTER, THE
FIRST THING THAT THE SHELL NEEDS TO DO IS FIND THE
PYTHON EXECUTABLE.
AND THE WAY THAT IT DOES THIS IS BY LOOKING IN AN
ENVIRONMENT VARIABLE CALLED THE PATH.
WE CAN PRINT THE PATH TO OUR SHELL BY USING THE
COMMAND ECHO PATH.
ALL ENVIRONMENT VARIABLES ARE STRINGS, BUT THIS IS
A STRING THAT BEHAVES LIKE A LIST BECAUSE OF THAT
COLON SEPARATOR BETWEEN THE ELEMENTS.
SO, IF WE TYPE PYTHON AND PRESS ENTER, THE SHELL
IS GOING TO START LOOKING FOR THE PYTHON
EXECUTABLE IN THE PARTS OF THE PATH IN ORDER.
IT'S GOING TO START IN SLASH HOME, SLASH PAUL
PROTEUS SLASH BIN.
IT DOESN'T FIND PYTHON.
IT MOVES TO USER BIN, BECAUSE THIS IS WHERE THE
PYTHON BINARY, BIN FOR BINARY, LIVES, IT GOES,
SUCCESS, I HAVE FOUND IT.
NOW, WE SAY THAT THE SHELL IS LOOKING FOR AN
EXECUTABLE, BUT WHAT DOES THAT MEAN?
THAT MEANS IT'S LOOKING FOR A TYPE OF FILE THAT
THE KERNEL KNOWS HOW TO EXECUTE.
THERE ARE MANY TYPES OF FILES THAT CAN BE EXECUTED
BY THE KERNEL.
BUT THE MECHANISM FOR FINDING THEM IS ALL THE
SAME.
SO IF WE WANTED TO FIGURE OUT HOW THE SHELL KNOWS
THAT THE PYTHON EXECUTABLE IS EXECUTABLE, WE COULD
TRY LOOKING AT THE RAW HEX.
AND IF WE LOOK AT THE BEGINNING OF THE FILE, WE
SEE THAT 7F454C46, OR ELF, WE CAN GET MORE
INFORMATION WITH THE FILE COMMAND AND SEE THE USER
BIN PYTHON IS AN ELF64 BIT LSB EXECUTABLE.
ELF STANDS FOR EXECUTABLE AND LINKABLE FORMAT
FILE.
AND WHEN THE SHELL HAS FOUND, IT KNOWS, THIS THING
IS EXECUTABLE, IT MATCHES THE COMMAND THAT THE
USER GAVE ME, I'M GOING TO TRY TO EXECUTE THIS.
IF THE ALGORITHM FOR FINDING THE FILES WAS WRITTEN
IN PYTHON, IT WOULD LOOK A LOT LIKE THIS.
THIS ISN'T THE ACTUAL CODE, BECAUSE THE BASH SHELL
IS WRITTEN IN C, BUT IF YOU WANTED TO BUILD A
SHELL IN PYTHON, THIS MIGHT BE WHAT YOU USE.
SO, NOW THE BASH PROCESS HAS FOUND PYTHON AND
WANTS TO START IT.
IF WE LOOK AT THE SHELL AGAIN, IT MIGHT USE
SOMETHING LIKE EXEC PYTHON, WHICH IS A WAY OF
TAKING A COMMAND AND RUNNING IT RIGHT IN THE
SESSION THAT YOU'RE CURRENTLY RUNNING.
AND, SO, IT WOULD START PYTHON, GREAT.
THIS LOOKS LIKE IT MIGHT BE WHAT YOU WANT.
BUT THERE'S A PROBLEM.
IF PYTHON QUITS FOR WHATEVER REASON, EXITS OR
SOMETHING EXTERNAL CAUSES IT TO EXIT, THEN THAT
PROCESS WOULD JUST BE DEAD.
YOU MAY HAVE SEEN SOMETHING LIKE THIS ON YOUR
MACHINE WHEN YOUR PROCESS EXITS IN THE TERMINAL.
THIS ISN'T WHAT WE WANT.
WHAT WE WANT IS FOR THE BASH PROCESS TO MAKE A
COPY OF ITSELF THROUGH A SYSTEM CALL CALLED FORK.
A SYSTEM CALL IS A MECHANISM THAT A PROGRAM CAN
USE TO TALK TO THE OPERATING SYSTEM AND DO KERNEL
FUNCTIONS, FUNCTIONS THAT NEED THE KERNEL'S HELP.
SO BASH CALLS THE FORK SYSTEM CALL.
AND CREATES A COPY OF ITSELF.
YOU CAN SEE THE PROCESS I.D. HAS CHANGED FROM 1221
TO 1222.
IT THEN CALLS EXECUTE ON THE PYTHON BINARY THAT IT
FOUND EARLIER AND THE CHILD BECOMES PYTHON.
SO, WE CAN VISUALIZE THIS CHANGE OF FORKING AND
EXECUTING, WHICH, BY THE WAY, IS HOW ALL PROCESSES
ON A UNIX SYSTEM, AND HERE WE'RE TALKING ABOUT
LINUX AND MAC, HOW ALL THE PROCESSES ARE STARTED
THROUGH ANOTHER PROGRAM CALLED PSTREE.
IF WE WERE TO RUN PSTREE, WE WOULD SEE THE FLOW,
THE TREE OF ALL THE PROCESSES ON OUR SYSTEM.
WE'VE TAKEN SOME OUT TO MAKE IT EASIER TO LOOK AT,
BUT YOU CAN SEE, IT STARTS WITH INIT WHICH THEN
FORKS AND EXECS ALL THE OTHER PROGRAMS IN THE
SYSTEM, DOWN TO THE SHH DAEMON, WHICH WE'RE USING
TO LOG INTO THE MACHINE, WHICH CREATES BASH, WHICH
CREATES PYTHON AND PSTREE.
QUICK REVIEW.
PROCESS CREATION, FIND THE BINARY IN THE PATH
ENVIRONMENT VARIABLE.
FORK THE CURRENT PROCESS.
AND EXEC THE FOUND BINARY INTO THE NEW PROCESS.
NOW, IF WE HAD PASSED SOME ARGUMENTS TO THE PYTHON
COMMAND, WE'D SEE SOMETHING LIKE THIS.
PYTHON DASH V GIVES YOU A LIST OF ALL THE IMPORTS
THAT IT'S GOING TO FIND WHEN IT TRIES TO LOAD THE
INTERACTIVE SHELL.
BASH SEES THOSE ARGUMENTS FIRST, TOKENIZES THE
LIST OF ARGUMENTS AND PASSES THAT THROUGH THE EXEC
COMMAND TO THE NEW PROGRAM THAT IT'S STARTING.
WHAT'S INTERESTING TO NOTE IS THAT EVEN THE FIRST
ELEMENT OF THE LIST IS THE NAME OF THE PROGRAM.
SO HERE WE SEE THAT IF WE WERE TO PASS PYTHON DASH
V, THEN OUR PYTHON PROCESS WOULD HAVE AN ARG V
LIST OF PYTHON AND DASH V.
IF WE LOOK AT JUST OUR STANDARD PYTHON PROCESS,
WITH NO OPTIONS, ARG V IS STILL POPULATED WITH THE
NAME OF THE COMMAND.
SO NOW WE HAVE A PYTHON PROCESS, WE HAVE A SHELL,
BUT HOW DO WE INTERACT WITH THAT SHELL?
HOW DO WE HANDLE INPUT AND OUTPUT?
FOR THAT I'M GOING TO TURN IT OVER TO ASHEESH.
>> THANKS, PHILIP.
SO TO TELL YOU SOMETHING ABOUT HOW INPUT AND
OUTPUT WORKS WITH UNIX PROCESSES, I'M GOING TO
START BY SHOWING YOU A PHOTOGRAPH OF A 1950s
DEVICE CALLED A TELETYPE.
THIS TELETYPE IS A PIECE OF HARDWARE CALLED A
TELETYPE BECAUSE WHEN YOU TYPE ON THE KEYBOARD,
WHAT YOU TYPE FLOWS OUT A MODEM LINE, A PHONE
LINE, THROUGH THE BACK OF THIS DEVICE, GOES TO
SOME COMPUTER FAR AWAY, WHATEVER YOU TYPE IT SEES,
AND WHEN IT WANTS TO TALK TO TO YOU, IF YOU'VE
TYPED SOMETHING THAT REQUIRES A RESPONSE, WHEN IT
KNOWS WHAT TO TELL YOU, IT WILL PRINT THAT ON THIS
PIECE OF PAPER AT THE TOP OF YOUR TELETYPE.
THIS IS, HONEST TO GOODNESS, PAPER TERMINALS.
NOWADAYS WE DON'T HAVE TERMINALS.
WE HAVE TERMINAL EMULATORS.
BECAUSE IT'S MUCH CHEAPER TO HAVE SOFTWARE THAN
TELETYPES.
BUT THERE'S STILL SOFTWARE IN THE OPERATING SYSTEM
THAT MODELS THIS TELETYPE DEVICE.
IN LINUX, THAT'S CALLED A PSEUDO-TTY LAYER, TTY
FOR TELETYPE, AND A COOL THING ABOUT UNIX SYSTEMS
IS THAT YOU COULD, IN THE 1970s, WHEN UNIX
BEGAN, CONNECT MULTIPLE OF THESE TELETYPE DEVICES
TO THE SAME UNIX SYSTEM.
SO DIFFERENT PEOPLE COULD BE SHARING ACCESS, THEY
COULD BE TYPING COMMANDS, ALL SEPARATELY, PAPER
COULD BE SPILLING OUT, ALL SEPARATELY.
AND NOWADAYS THAT'S SIMULATED BY THESE
PSEUDO-TELETYPE DEVICES HAVING INDIVIDUAL FILES IN
THIS DIRECTORY DEV PTS.
LET'S SAY THAT THE TERMINAL WINDOW WHICH WE'LL
OPEN, WHICH WE'LL DO THE REST OF THIS INPUT/OUTPUT
DISCUSSION IS NUMBERED DEV PTS3.
SO, THE NEXT THING WE'LL DO IS TYPE 2 PLUS 2 AND
PRESS ENTER, AND PRESS ENTER, INTO PYTHON.
TO VISUALIZE HOW THAT WORKS, PYTHON NOT ONLY HAS A
PID, IT ALSO HAS A SET OF FILE DESCRIPTORS, FILE
DESCRIPTOR NUMBER 0 IS WHERE THE NUMBER 2 WILL
APPEAR AND THAT'S COMMONLY NAMED STANDARDIN.
SO, STANDARD IN IS REALLY JUST A NAME FOR THE
NUMBER 0 IN THIS CONTEXT OF FILE DESCRIPTORS.
AND A FILE DESCRIPTOR IS A FINDING FROM THIS
NUMBER TO THE OPEN FILE OBJECT INSIDE THE
OPERATING TESTIMONY KERNEL, IN OUR CASE, IT'S OPEN
AND BOUND TO THE PSEUDO-TELETYPE DEVICE PROVIDED
BY THE OPERATING SYSTEM.
SO WHEN WE PRESS 2 ON THE KEYBOARD, THAT FLOWS
INTO THIS LAYER, WHICH INSIDE THE OPERATING SYSTEM
MIMICS THAT 1950 TELETYPE DEVICE AND THE LAYER
PASSES THAT 2 TO THIS FILE DESCRIPTOR 0 THAT
PYTHON HAS READ.
AND SO, THAT'S HOW THE EVENT WILL FLOW INTO THE
PYTHON PROCESS.
THAT'S A VISUAL AND I'LL SHOW YOU WHAT THAT'S LIKE
IF WE USE STRACES.
HOW MANY WENT TO JULIA'S TALK?
SOME OF YOU MAY NOW HAVE A COPY OF HER STRACE.
AND STRACE IS A PROGRAM THAT WE CAN USE TO WATCH
ALL THESE SYSTEM CALLS A PROGRAM MAKES, AND SYSTEM
CALLS ARE CALLS A PROGRAM MAKES THAT REQUIRE THE
ASSISTANCE OF THE OPERATING SYSTEM KERNEL TO BE
COMPLETED.
SO, WHEN WE STRACE PYTHON, HOW MANY OF YOU HAVE
STRACED PYTHON?
OKAY, OKAY.
WELL, YOU SHOULD DO THAT SOME MORE, WHEN YOU'RE
DONE WITH THIS TALK.
IT PRINTS OUT A LOT OF STUFF.
BUT EVENT IT WILL PRINT OUT READ OF 0.
AND THE FACT THAT THIS CALL DOESN'T HAVE A CLOSE
PAREN WHEN PRINTED OUT BY STRACE, MEANS THAT THE
CALL HASN'T FINISHED.
READ IS BLOCKING, IT'S WAITING, IT WILL NEVER
TERMINATE UNTIL SOMETHING HAPPENS AND IN OUR CASE,
SOMETHING DOES HAPPEN, WE'LL PRESS 2.
SO THAT WILL FLOW INTO THIS TERM LAYER.
AND READABLE RETURN, THE BYTE 2, AS A STRING, AND
THE NUMBER 1, WHICH INDICATES HOW MANY BYTES IT
RETURNED.
SO, PYTHON WILL PROCESS THAT AND EVENTUALLY DECIDE
THAT THAT'S NOT A FULL PYTHON EXPRESSION THAT IT
WANTS TO EVALUATE YET, SO IT WILL CALL READ AGAIN
ON FILE DESCRIPTOR 0.
WE CAN PRESS PLUS.
THAT WILL FLOW INTO THE PYTHON PROCESS.
AND HAVING DONE THAT, IF WE PRESS 2 AND THEN ENTER
AGAIN, THE MORE DATA WILL FLOW INTO THE PYTHON
PROCESS AND AT THIS POINT, PYTHON WILL DO SOME
COMPUTATION BECAUSE IT'S READY TO EVALUATE ALL
THIS STUFF.
PYTHON'S INTERACTIVE SHELL EXISTS TO READ DATA,
WAIT FOR A NEW LINE, EVALUATE THAT, AND PRINT THE
RESPONSE.
AND I'LL SHOW YOU SOME PSEUDOCODE NOW THAT
EXPLAINS HOW THAT MIGHT WORK.
THE PYTHON INTERACTIVE PROMPT IS ACTUALLY WRITTEN
IN C, NOT IN PYTHON, BUT IF IT WERE WRITTEN IN
PYTHON, IT WOULD LOOK A LOT LIKE THIS.
PYTHON IS GOING TO LOOP FOREVER.
GRABBING ONE CHARACTER AT A TIME FROM SYSOP.
WHICH IS TO SAY, FILE DESCRIPTOR 0 FROM THE C
PERSPECTIVE.
CHECKS IF THAT CHARACTER'S A NEW LINE, AND IF SO,
EVALUATES ALL THE DATA IT'S SEEN SO FAR.
THIS IS KNOWN AS THE READ EVAL PRINT LOOP OR REPL,
IF YOU'VE HEARD PEOPLE TALK ABOUT THE REPL AND NOT
KNOWN WHAT THAT WAS ABOUT, NOW YOU KNOW.
READ EVAL, I DIDN'T HAVE A WORD THAT WAS LOOP.
SO THAT'S HOW PYTHON GETS DATA.
BUT I HAVEN'T YET SAID HOW PYTHON SHOWS THAT DATA
TO YOU.
I HAVE USED THE WORD PRINT HERE.
AS AN HOMAGE TO THE PAPER TERMINALS THAT WE SAW
BEFORE.
PYTHON, IT TURNS OUT, HAS MORE FILE DESCRIPTORS
THAN JUST THE NUMBER 0.
IT WAKES UP WITH AT LEAST THREE FILE DESCRIPTORS,
NUMBER 0, 1, AND 2.
FILE NUMBER 0 IS STANDARDIN.
FILE DESCRIPTOR 1 IS STANDARD OUT AND THAT'S WHERE
PRINT WILL GO.
THAT'S WHAT SYS SET OUT IS BOUND TO IN THE FIRST
PLACE, FILE DESCRIPTOR 2 IS STANDARD ERROR.
ALL THREE OF THESE ARE BOUND TO THE SAME TERMINAL.
BUT IT'S USEFUL, RIGHT, BECAUSE IF YOU WANT TO BE
TYPING INTO ONE TERMINAL, YOU DON'T WANT THE
OUTPUT TO GO A DIFFERENT TERMINAL WINDOW BY
DEFAULT.
SO, THAT'S PYTHON'S FIRST THREE FILE DESCRIPTORS,
BUT IT'S ALSO BASH'S FIRST THREE FILE DESCRIPTORS.
BECAUSE BASH IS THE IF I CAN THING INTO WHICH WE
TYPED PYTHON, THAT FORK, EXEC PYTHON.
AND, SO, WHEN I SEE A DIAGRAM LIKE THIS, I WONDER,
WHEN I TYPE 2 PLUS 2 AND TYPE ENTER, I WONDER, WHO
WILL WIN?
WHO WILL GET THE EVENT?
BASH 0 IS THE TERMINAL.
PYTHON 0 IS THE TERMINAL.
AND THE ANSWER IS THAT BASH SCRUPULOUSLY REFUSES
TO READ FROM FILE DESCRIPTOR 0 WHEN IT'S RUNNING
PYTHON BECAUSE THAT WOULD JUST BE RUDE.
THE POINT IS TO INTERACT WITH PYTHON, NOT TO
INTERACT WITH BASH.
THERE'S A COLLECTION OF CONCEPTS AROUND THIS THAT
CAN BE SUMMARIZED AS PYTHON IS THE FOREGROUND
PROCESS AND THAT'S WHY BASH MAKES SURE YOUR DATA
GOES THERE.
SO, THAT'S THE BASICS OF INPUT AND OUTPUT.
THERE'S A COUPLE OF SPECIAL TYPES OF INPUT WORTH
GOING INTO.
ONE OF MY FAVORITES IS CONTROL C.
SO, CONTROL C IS A CHARACTER SEQUENCE LIKE ANY
OTHER, AND THE WAY THAT TERMINALS WORK, IT'S SORT
OF A SIGNAL EVENT, SO LIKE ANY OTHER EVENT ON THE
KEYBOARD THAT YOU TYPE INTO YOUR TERMINAL WINDOW,
IT GOES TO THE SUBSYSTEM IN THE KERNEL.
BUT TERMIOS KNOWS THAT CONTROL C IS A BIT SPECIAL.
CONTROL C IS NORMALLY USED TO INTERRUPT A PROGRAM.
SO TERMIOS KNOWS IT NEEDS TO FIND A PROGRAM TO
WHICH IT CAN SEND AN INTERRUPT SIGNAL, WHICH WE
ABBREVIATE HERE AS SIGINT, NOT SINGLE
INTELLIGENCE.
AND THE INTERRUPT SINGAL, BECAUSE PYTHON IS THE
FOREGROUND PROCESS, GET PASSED TO THE PYTHON
INTERPRETER.
BY DEFAULT, WHAT THIS WOULD DO IS CAUSE PYTHON TO
QUIT, BUT PYTHON DOESN'T WANT TO QUIT WHEN YOU DO
CONTROL C.
IT WANTS TO RAISE AN EXCEPTION, A PYTHON
EXCEPTION, SO IT'S BOUND SOME SPECIAL CODE TO THE
INTERRUPT SIGNAL, CALLED A SIGNAL HANDLER.
YOU'VE PROBABLY TYPED CONTROL C INTO A PYTHON
INTERPRETER AND GOTTEN OUTPUT LIKE THIS.
WHEN YOU PRESS CONTROL C, YOU SEE KEYBOARD
INTERRUPT.
AND THAT'S BECAUSE PYTHON HAS SOME CODE INSIDE IT
THAT TURNS THAT SIGNAL FROM C INTO EFFECTIVELY
RAISE KEYBOARD INTERRUPT IN THE PYTHON PROCESS.
DOING THIS CONTROL C THING ISN'T REALLY NORMAL
INPUT.
IT'S THIS CRAZY SIDEWAYS INPUT WHERE THE OPERATING
SYSTEM STOPS THE PROGRAM ENTIRELY, FREEZES IT, AND
THEN CALLS WHATEVER FUNCTION PYTHON BOUND AS A
SIGNAL HANDLER.
SO IT'S ACTUALLY A LOT OF WORK TO BIND THE SIGNALS
AND HANDLE THEM CORRECTLY AND WE CAN ALL BE
GRATEFUL THAT PYTHON DOES THAT RIGHT.
SO, THERE ARE AT LEAST TWO SIGNALS THAT PYTHON
BINDS ONE BY THE HANDLER TO.
ONE IS SIG INTERRUPT AS WE SAW, THE OTHER IS
SIGPIPE, AND THAT'S A SIGNAL THAT THE OPERATING
SYSTEM WILL PASS IT UNDER SOME CIRCUMSTANCES
RELATED TO SUBPROCESSES.
THE REASON PYTHON BINDS THAT IS SO THAT IT CAN
CONVERT THIS SIGPIPE SIGNAL INTO AN APPROPRIATE
PYTHON EVENT FOR THE REST OF THE PYTHON
INTERPRETER.
THE ALTERNATIVE IS YOU WRITE THE CODE HALF IN C,
HALF IN PYTHON AND THAT WOULD BE SUPER CONFUSING.
SO THAT'S CONTROL C.
CONTROL D IS SIMILAR BUT DIFFERENT.
SO, LIKE ANYTHING ELSE, WHEN WE TYPE CONTROL D, IT
GOES TO THE TERMIOS LAYER.
HERE I'M GOING TO SHOW YOU WHAT WOULD HAPPEN IF WE
HAVE A PROGRAM CALLED CAT, NOT THE PROGRAM PYTHON.
BY DEFAULT, TERMIOS BEHAVIOR IS TO, INSTEAD OF
PASSING CONTROL D AS A BYTE SEQUENCE TO FILE
DESCRIPTOR 0, THE DEFAULT BEHAVIOR OF CONTROL D IS
THAT IT MEANS END OF FILE.
SO, FOR A SIMPLE PROGRAM LIKE CAT THAT DOESN'T
CAREFULLY RECONFIGURE THE TERMIOS LAYER, WHAT WILL
HAPPEN IS THE TERMIOS LAYER WILL CLOSE THAT FILE
DESCRIPTOR 0 AND CAT WILL SAY, WELL, THAT'S ALL
THERE IS ON THE STANDARD INPUT, I'D BETTER EXIT.
THAT'S WHAT CAT WOULD DO.
BUT MAYBE YOU CAN SEE WHAT PYTHON WOULD DO.
WHEN YOU TYPE HELLO.
OKAY, GREAT.
WHEN YOU GIVE CONTROL D TO THE PYTHON PROCESS, IT
GOES THROUGH THE SAME TERMIOS LAYER, IT GOES TO
THE SAME FILE DESCRIPTOR, BUT PYTHON HANDLES THAT
DIFFERENTLY.
AS MANY OF YOU KNOW, IN A PYTHON INTERACTIVE
SHELL, CONTROL D IS HOW YOU EXIT THE PYTHON
PROGRAM.
NOW, THAT'S ONE OF THREE WAYS THAT YOU CAN EXIT.
AND I'M GOING TO SHOW YOU THOSE THREE WAYS.
AND I'M GOING TO SHOW YOU HOW THE OPERATING SYSTEM
THEY ALL RESULT IN THE SAME THING.
SO FIRST THERE'S CONTROL D, WHICH IS EQUIVALENT TO
DOING IMPORT SYS AND SYS.EXIT.
YOU MAY HAVE DONE THIS AS YOU HAD A SCRIPT YOU
WANTED TO EXIT OUTSIDE OF THE NORMAL PROCESS.
YOU CAN ALSO RAISE A SYSTEM EXIT.
AND WHAT'S INTERESTING ABOUT ALL THREE OF THESE,
WE WERE TO GO TO OUR STRACE PYTHON COMMAND AGAIN,
IN ALL THREE OF THESE CASES, WE WOULD SEE THE
SYSTEM CALLED EXIT 0 WITH NO RETURN STATEMENT.
AND WE WOULD GET DROPPED BACK TO A SHELL PROMPT.
NOW, IF WE WERE TO ECHO DOLLAR QUESTION MARK,
WHICH IS THE STATUS CODE OF THE PREVIOUS PROGRAM,
THE EXIT STATUS CODE, TO BE PRECISE, WE WOULD SEE
0.
0 IS THE STANDARD EXIT CODE FOR PROGRAM.
WHAT'S INTERESTING IS, IF WE WERE TO DO IMPORT SYS
AND SYS.EXIT 1, WE CAN ACTUALLY CHANGE THE EXIT
CODE OF THE PYTHON PROCESS.
SO, PROCESS EXITS, ECHO DOLLAR QUESTION MARK, AND
WE GET 1 AS THE RESULT.
SO LET'S DO A QUICK RECAP.
WE START WITH A BASH PROCESS.
THAT BASH PROCESS GETS THE COMMAND THAT WE WANT TO
RUN PYTHON.
IT SEARCHES ITS PATH, FINDS THE PYTHON EXECUTABLE,
AND THEN FORKS AND EXECS TO CREATE THE PYTHON
PROCESS.
WHICH HAS AN ARG V LIST OF PYTHON BECAUSE WE
DIDN'T GIVE IT ANY EXTRA PARAMETERS.
THE PYTHON PROCESS ALSO HAS A SET OF FILE
DESCRIPTORS, HERE'S 0, 1, 2, STANDARD IN, STANDARD
OUT AND STANDARD ERROR.
AND ADDITIONALLY, THE PYTHON PROCESS BINDS
HANDLERS TO SOME SIGNALS, SPECIFICALLY SIGPIPE AND
SIGINT.
WE'RE GOING TO POST THESE SLIDES ONLINE AND ALSO
THIS IS A GREAT TIME TO TAKE A PHOTO IF YOU WANT
TO TAKE A PHOTO.
THIS IS THE MODEL THAT REALLY HELPED US, THIS
ABSTRACTION REALLY HELPED US SOLIDIFY WHAT'S
HAPPENING WITH THE PYTHON PROCESS ON A UNIX
SYSTEM.
IT HELPED FUEL OUR CURIOSITY.
AND WE THINK THAT YOU SHOULD BE CURIOUS ABOUT THIS
KIND OF STUFF.
WE HOPE THAT YOU ARE SEEING SOME OF THE TALKS
ALREADY OR SOME OF THE TALKS IN THE FUTURE ABOUT
SYSTEMS PROGRAMMING AT PYCON.
WE'D LIKE TO SAY THAT WHEN WE SUBMITTED THE
PROPOSAL FOR THIS TALK, NEITHER OF US KNEW ENOUGH
TO GIVE THIS TALK FROM MEMORY, WE USED THE SAME
TOOLS THAT WE DEMOED HERE, PSTREE AND STRACE AND
FILE AND HEX DUMP, TO LEARN ENOUGH TO BE ABLE TO
GIVE THIS TALK.
SO, IF YOU ARE CURIOUS, AND WE HOPE YOU ARE
CURIOUS, THERE ARE SOME TALKS AT THIS PYCON TO
EXPLORE MORE, ONE IS SYSTEMS PROGRAMMING AS A
SWISS ARMY KNIFE, AND, UNFORTUNATELY, YOU NEED A
TIME MACHINE TO GO VISIT IT THIS MORNING.
BUT YOU CAN ALSO VIEW IT ON PYVIDEO.ORG WHEN IT'S
RELEASED.
ALSO EXPLORING IS NEVER BORING: UNDERSTANDING
CPYTHON WITHOUT READING THE CODE.
ALLISON KAPTUR IS DOING TWO TALKS THIS AFTERNOON
AND BOTH OF THEM ARE PROBABLY WORTH ATTENDING, IF
THIS IS INTERESTING TO YOU.
AND THEN TOMORROW, WHERE IN YOUR RAM IS PYTHON SAN
DIEGO.PY, IT'S GOT A GREAT TITLE AND IT SHOULD BE
A LOT OF FUN.
THERE ARE A COUPLE OF TITLES BY FRIENDS WE'RE
GOING TO SHOUT-OUT.
ONE WILL REQUIRE A TIME MACHINE, SECURITY TUTORIAL
THAT ASHEESH GAVE.
AND THEN FINDING SPAMMERS AND SCAMMERS THROUGH
RATE CHECKING WITH PYTHON AND REDIS.
MICA AND JAY WORK WITH ME AT EVENTBRITE AND DO
AMAZING STUFF ON THE INTEGRITY TEAM MAKING SURE
THAT NOBODY CAN STEAL MONEY OR SPAM EVERYBODY.
AND I THINK, AT THAT POINT, THAT IS ABOUT IT.
WE WILL OPEN IT UP FOR QUESTIONS AND THANK YOU
VERY MUCH FOR COMING.
[ APPLAUSE ]
>> THANK YOU VERY MUCH.
YOU KNOW THE DRILL FOR QUESTIONS, FOLKS.
YOU WANT TO LINE UP AT THE MICROPHONE IN THE
CENTER OF THE ROOM.
DO WE HAVE QUESTIONS?
>> OH, NO.
>> OH, GREAT.
>> UH-OH.
[ Laughter ]
>> AUDIENCE: HI, GUYS.
THANK YOU.
GREAT TALK.
THAT WAS VERY VERY GOOD.
THIS MAY BE UNFAIR QUESTIONS.
BUT I WONDER IF YOU KNOW ANYTHING ABOUT SOME OF
THE QUESTIONS THAT HAVE OCCURRED TO ME WHEN I'VE
BEEN LOOKING INTO THIS STUFF.
YOU COME ACROSS THE WORD TTY AND PTY AND WHAT IS
THE DIFFERENCE BETWEEN THOSE?
THERE ARE LIBRARIES IN THE STANDARD LIBRARIES FOR
PYTHON.
IF YOU KNOW THE DIFFERENCE OF THOSE I'M
INTERESTED.
>> WE'LL STOP YOU WITH THAT ONE.
>> AUDIENCE: OKAY.
I'LL WAIT.
>> OKAY.
SO, WHAT I REALLY SHOULD DO IS IMPORT THEM AND RUN
HELP ON THEM.
BUT I'LL TELL YOU WHAT MY GUESS IS FIRST.
BASED ON -- HOPEFULLY IS BASED ON THINGS YOU MIGHT
HAVE BEEN ABLE TO INFER FROM THIS TALK.
SO TTY IS ABOUT HOW TO CHANGE THE CONFIGURATION OF
THE TERMIOS SUBSYSTEM, SO, FOR EXAMPLE, I REMARKED
THAT CAT TERMIOS, CLOSES FILE DESCRIPTOR 0 WHEN
YOU DO CONTROL D.
FOR PYTHON, CONTROL D ACTUALLY FLOWS IN AS A BYTE
SEQUENCE.
0X04.
THOSE ARE THE KINDS OF THINGS I IMAGINE YOU COULD
CHANGE IF YOU DO IMPORT TTY.
IMPORT TTY MIGHT LET YOU DRAW THINGS AT DIFFERENT
LOCATIONS ON THE SCREEN.
I DON'T KNOW IF IT DOES.
IMPORT PTY, I IMAGINE WOULD LET YOU CREATE NEW
VIRTUAL TERMINALS IN THE OPERATING SYSTEM BECAUSE
PTY REFERS TO THE OPERATING SYSTEM'S ABSTRACT
LAYER THAT SIMULATES THE TTYs AND, SO, IT'S
ABOUT MANIPULATING THEM AT THAT LAYER.
THAT WOULD BE MY GUESS.
IF YOU FIND OUT THE ANSWER, THEN LET ME KNOW.
>> AUDIENCE: THAT SOUNDS CONSISTENT WITH WHAT I
KNOW.
THERE'S AN OS DOT 4 SYSTEM.
SO I GUESS THEY DO SLIGHTLY DIFFERENT THINGS.
>> YEAH, PRESUMABLY OS DOT 4, THE DIRECT WRAPPER
AROUND THE SYSTEM CALL OF FORK.
AND PTY.FORK DOES SOMETHING USEFUL WITH BREAKING
OUT THE TERMINALS.
>> AUDIENCE: DOES IT START NEW TERMINALS?
>> NO.
>> AUDIENCE: THERE IS ALSO A TERMIOS LIBRARY SO
MAYBE THERE'S SOME DIFFERENCES TO WHAT TTY DOES.
THE OTHER ONE WAS, YOU KNOW, PIPES.
I WONDER IF THERE'S ANYTHING YOU CAN TALK TO ABOUT
THAT.
BECAUSE WHEN THERE'S AN OS.PIPE CALL IN THE
STANDARD LIBRARY.
AND IT GIVES YOU BACK TWO FILE DESCRIPTORS.
IN FACT, I THINK THERE'S A SIMILAR THING IN THE
PTY MODULE IF YOU WANT TO CREATE A NEW PTY, YOU
GET THREE FILE DESCRIPTORS, I THINK.
>> RIGHT.
>> AUDIENCE: THERE'S ONE CALLED A MASTER AND ONE
CALLED A SLAVE AND I'M VERY CONFUSED.
>> SO, THIS IS A GREAT TIME FOR ME TO SAY THAT I
KNEW SO MUCH LESS ABOUT PTYs AND TTYs UNTIL I
READ NELSON'S BLOG POST SERIES, "AN INTRODUCTION
TO TERMIOS."
WHICH YOU CAN TOTALLY SEARCH FOR IN YOUR FAVORITE
SEARCH ENGINE.
THAT BLOG POST SERIES ANSWERS THIS QUESTION ABOUT
SLAVE VERSUS MASTER, PTY DEVICES.
IN SUMMARY, THOUGH, IF YOU ARE WRITING A TERMINAL
EMULATOR, LIKE TERMINAL.APP BUT IN PYTHON, YOU
WOULD NEED TO CREATE A MASTER PTY SO THAT YOU CAN
THEN PASS THAT OFF TO OTHER PROGRAMS WHEN THEY
RUN.
AND WHAT THEY GET ACCESS TO IS THE SLAVE, AS I
UNDERSTAND IT.
>> AUDIENCE: RIGHT.
THESE ARE VERY RELEVANT QUESTIONS IF YOU WERE
TRYING TO CREATE A TERMINAL EVENT SUCH AS PYTHON
ANYWHERE.COM.
>> I WAS WAITING FOR THE PLUG.
PYTHONANYWHERE.COM.
>> AUDIENCE: OH, GOSH, DID THAT HAPPEN?
IT'S BEEN REALLY GOOD.
>> THANKS.
>> ANY OTHER QUESTIONS?
THANK YOU VERY MUCH, EVERYONE.
THANK YOU, GENTLEMEN.
[ APPLAUSE ]
01:42:57