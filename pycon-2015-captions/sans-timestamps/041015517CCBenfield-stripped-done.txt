THERE IS CRITICISM OF HTTP2, I'M CALLING IT OUT
BECAUSE I'M CERTAIN A LOT OF PEOPLE IN THE ROOM
HAVE READ THE VARIOUS DOCUMENTS TAKING SHOTS AT
THE PROTOCOL.
POLLEN AND CAMP IS A BSD DEVELOPER, LEAD
DEVELOPER OF THE VARNISH HTTM PROTOCOL AND HE'S
CIRCULATED A LOT OF WRITING ABOUT HOW TERRIBLE IT
IS, AND I MYSELF AM VERY GLAD HE DOESN'T HAVE A
PROTOCOL DESIGN CLASS FOR ME TO FLUNK OUT OF.
BUT THE QUESTION IS, WHY, WHY IS THERE SO MUCH
NEGATIVITY ABOUT HTTP2 WHEN IT HAS SO MANY NICE
THINGS IN IT?
THE REAL ANSWER IS MUCH LIKE HTTP1, IT'S A FLAWED
PROTOCOL, IT'S NOT PERFECT.
I WOULD CONTEND THAT NO PROTOCOL EVER IS, AND SO
WE'VE TRADED SOME DOWNSIDES FOR OTHER DOWNSIDES.
SOME GOOD EXAMPLES.
IT'S REALLY TRICKY TO REASON ABOUT.
SO HTTP1 TO ONE HAS AS ONE OF ITS GREAT JOYS,
VERY EASY TO LOOK AT A WAY TO SPOT WHAT THE
PROBLEM IS, SO THE BRAIN, HUMAN BRAIN IS GREAT AT
PATTERN MATCHING AND WE CAN LOOK AT THE TEXT
RESPONSE AND SAY THAT CAN'T POSSIBLY BE RIGHT
BECAUSE WEIRD THING HERE IS GOING WRONG AND IT'S
HARD FOR CODES TO SPOT THAT.
BUT THE WORST PART IS, HPPT2 MAINTAINS REALLY
EXTENSIVE STATE IN ITS CONNECTIONS, SO IN HPPP1
TO ONE, YOU COULD HOP INTO THE FIFTH REQUEST IN A
SEQUENCE AND IT WOULD STAND ALONE, YOU COULD
UNDERSTAND IT IN COMPLETE CONTEXT WITH NO EXTRA
TOOLS.
AND YOU CAN'T DO THAT IN HPP-- HTTP-2, SO THE
FIFTH REQUEST WILL SAY RESEND HEADER 5.
WHAT THE HELL IS HEADER 5?
I HAVE NO IDEA WHAT THAT WAS.
SO YOU NEED COOPERATION FROM YOUR TOOLS AND THIS
MEANS THAT BASICALLY TOOLS NOW NEED TO BE ABLE TO
DROP THEIR CONNECTION STATE INTO DEBUG LOGS FOR
TO YOU SUCCESSFULLY DEBUG AND MOST TOOLS HAVE NOT
WRITTEN THAT FUNCTION.
THIS ALSO MEANS THAT IT'S REALLY HARD TO DEBUG,
YOU NEED TO DO A TON OF INTERRUPT TESTING, THAT'S
THE ONLY WAY YOU CAN BE SURE YOU'VE IMPLEMENTED
CORRECTLY IS GET EVERY OTHER IMPLEMENTATION AND
RUN YOUR CODES AGAINST THEM.
THERE ARE SOME GREAT RESOURCES FOR DOING THIS BUT
YOU HAVE TO FIND THEM.
IT'S GOT SOME REALLY TERRIBLE AWKWARD EDGE CASES
AND THESE CAME OUT BECAUSE WE WERE REQUIRED TO
MAINTAIN COMPATIBILITY WITH HPT-- HTTP1.1.
SO ANYTHING YOU COULD SEND IN ONE HAD TO BE ABLE
TO BE SENT IN TWO.
THE BIGGEST PROBLEM IS HEADERS SO, HPP-- HTTP2
FRAMES, THEY HAVE A MAXIMUM LENGTH, IN PRACTICE,
16 KILOBYTES.
AND ITS TURNS OUT YOU CAN HAVE A SINGLE HEADER
THAT'S MORE THAN 16 KILOBYTES LONG.
COBRA WILL GENERATE HEADERS THAT ARE THAT LARGE
FOR THEIR TOKENNIZATION.
NOW, FOR ME, I WOULD CALL THAT A GOOD REASON TO
ABANDON COBRAS BUT UNFORTUNATELY, I CAN'T MAKE
THOSE MANDATES SO INSTEAD WE HAVE TO ALLOW IT AND
THIS MEANS IN PRACTICE, YOU CAN FREEZE AN HTTP2
CONNECTION DEAD BY SENDING OFFICIALLY LARGE
HEADERS AND NOT FINISHING THEM OFF.
THIS IS WE'LL QUITE TRICKY.
I FOUND ONE FOR PYTHON, THOUGH, FUNDAMENTALLY
HTTP2 IS INHERENTLY CONCURRENT, IT'S GOT ONE TCP
STREAM DOWN WHICH IT SENDS DATA AND ALSO CONTROL
FRAMES SO THINGS LIKE IS THIS CONNECTION STILL
ALIVE, PLEASE INCREASE YOUR FLOW CONTROL WINDOW,
PLEASE CHANGE YOUR HEADER COMPRESSION STATE.
YOU NEED TO PROCESS THESE PROMPTLY.
THEY NEED -- YOU NEED TO BE PUMPING THAT
CONNECTION ALL THE TIME AND THIS IS REALLY
DIFFICULT IN SYNCHRONOUS PROGRAMMING LIKE WHAT A
LOT OF US DO IN PYTHON.
IF YOU'RE USED TO USING REQUESTS, YOU'RE GOING TO
FIND THIS REALLY VERY TRICKY AND WE'VE GOT TO DO
A LOT OF CLEVER WORK TO MAKE SURE THAT WE CAN
HANDLE THIS APPROPRIATELY.
IT'S GOING TO BE REALLY HARD, I'M PROBABLY NOT
SMARTS ENOUGH TO SOLVE IT.
IF THERE IS ANYONE, COME TALK TO ME OR EVEN IF
YOU'RE NOT SMART ENOUGH TO SOLVE IT, BUT WOULD
LIKE TO HELP, I CAN'T DO IT ON MY OWN.
I WOULDN'T BE SURPRISED TO FIND THAT HTTP2 IS THE
PRIMARY MOTIVATOR BEHIND A BIG A-SYNCS I.O., AND
IF YOU HAVEN'T USED IT, NICHOLAS IS TALKING ABOUT
IT, DOING AN INTRODUCTION, I RECOMMEND GOING
BECAUSE IF YOU WORK WITH THE WEB, YOU PROBABLY
WANT TO START USING IT.
BUT DESPITE ALL OF THESE THINGS, IN A LOT OF
CASES, HTTP2 IS REALLY GOOD AND AS AN EXAMPLE OF
HOW GOOD, I WANT TO BRING UP THIS.
THIS IS FROM THE GO PROGRAMMING LANGUAGE HTTP2
WEB PAGE.
THIS IS A GOPHER TILES DEMONSTRATION.
YOU CAN LOAD THIS UP NOW IF YOU GOOGLE GOPHER
TILES, YOU CAN FIND THIS FOR THOSE OF YOU WHO
HAVE LAPTOPS IN FRONTS OF YOU.
SO EACH OF THESE IMAGES IS MADE UP OF 180 TILED
SMALLER IMAGES.
THE ONE ON THE LEFT IS BEING SERVED OVER HTTP1.1.
THE ONE ON THE RIGHT OVER 2.
THESE ARE BOTH FROM CHROME.
SO IF YOU'VE GOT CHROME OR FIREBOX HTTP2 WORKS
RIGHT NOW, YOU CAN LITERALLY TEST THIS WHILE I
GO.
SO I'M GOING TO START THEM BOTH AT THE SAME TIME
AND BY AT THE SAME TIME, I MEAN I'M GOING TO GIVE
HTTP1.1 A SECOND OF HEAD START.
AND WE'LL SEE WHICH LOADS FIRST.
THAT WAS EASY.
AND THIS IS CONSISTENTLY TRUE.
SO THERE'S LOTS OF -- YOU CAN'T REALLY SEE
BECAUSE I COMPRESSED THE HELL OUT OF THESE IMAGES
BUT THERE IS A TON OF VARIOUS OPTIONS YOU CAN ADD
LATENCY TO THE REQUESTS, SO THAT WAS THE ZERO
LATENCY DEMO, THE BEST CASE FOR HTTP1.1, AND 2
SMOKES IT OUT OF THE WATER.
I TESTED THIS WITH MY IMPLEMENTATION IN PYTHON
AND I COULD -- THE ONLY WAY I COULD GET 1.1 TO BE
AS FAST WAS TO START 180 CONCURRENT CONNECTIONS,
SO I HAD TO DOWNLOAD THEM ALL IN PARALLEL AT THE
SAME TIME, THAT DOES NOT SCALE TO EVERYONE ON THE
INTERNET DOING THAT.
SO HTTP2 HAS SOME SERIOUS ADVANTAGES.
ALL RIGHT.
SO IT'S REALLY GOOD, HOW DO YOU GET TO PLAY
AROUND WITH IT?
SO THERE ARE AT LEAST 34 CURRENT IMPLEMENTATIONS
OF HTTP2.
THIS IS NOT ALL OF THEM, THIS IS A SMALL LIST,
THEY'VE GOT VARIOUS EXCITING NAMES, SOMEONE'S ON
THIS LIST THAT ARE WORTH FLAGGING UP, THERE IS
HYPER, PYTHON CLIENT LIBRARY, I'LL TALK ABOUT
THAT IN A SECOND BECAUSE IT'S MINE.
AND, THEREFORE, WORTHY OF YOUR TIME.
THERE'S MGHTTP2.
THAT'S THE OPEN SOURCE REFERENCE IMPLEMENTATION
FOR HTTP2.
DOES ALL THE THINGS A CLIENT, A SERVER, A PROXY,
WHATEVER YOU WANT IT TO DO, ITS ONLY DOWNSIDE IS
IT'S A NIGHTMARE TO COMPILE, IT HAS A LOT OF
DEPENDENCIES BUT IF YOU CAN INTERRUPT WITH THAT,
YOU CAN PROBABLY INTERRUPT WITH A LOT OF OTHER
TOOLS.
FIREFOX AND CHROME, BOTH HAVE IMPLEMENTATIONS, IF
YOU GO TO TWITTER ON THOSE, YOU'RE USING 2,
BECAUSE TWITTER HAS AN IMPLEMENTATION, AS WELL.
WIRESHOCK CAN DECODE THE FRAMES, WHICH WOULD BE
USEFUL EXCEPT FOR THE FACT THAT HTTP2 IS ALMOST
ALWAYS SERVED OVER ALTS.
CURL AND LIP CURL CAN USE 2, THEY USE 2'S STUFF
SO YOU NEED NGH 2 FIRST BUT THEN YOU CAN USE IT
WITH CURL STRAIGHT OUT OF THE BOX.
INTERNET EXPLORER IS WORKING ON ONE FOR THOSE OF
YOU WHO LOVE MICROSOFT AND THERE ARE PLENTY OF
OTHERS FLOATING AROUND FOR YOUR FAVORITE
LANGUAGES.
IN FACT, PYTHON IS ONE OF THE LANGUAGES THAT IS
UNDERSERVED BY IMPLEMENTATIONS, THERE ARE MORE
IMPLEMENTATIONS FOR HASKELL THAN THERE ARE FOR
PYTHON.
SO LET'S TALK ABOUT HYPER QUICKLY, PYTHON'S
CURRENT ONLY HTTP2 IMPLEMENTATION.
IT'S NOT EVEN FULL, IT REALLY IS JUST A CLIENT
LIBRARY BECAUSE THAT'S REALLY ALL I CARE ABOUT.
SO HITCHER FITS IN ROUGHLY THE SAME PLACE IN THE
HTTP STACK AS MTTP LIB OR DOT-CLIENT.
AND IF YOU'VE NEVER USED EITHER OF THOSE
DIRECTLY, THEN PROBABLY THE KIND OF THING YOU
WON'T WANT TO THINK ABOUT.
THE REAL GOAL IS TO SLOT IN ROUGHLY AT THE BOTTOM
OF THE STACK SO WE CAN PUT THE URL 3 ON TOP OF
THAT AND REQUESTS ON TOP OF THAT.
IT IS STILL UNDER VERY ACTIVE DEVELOPMENT BUT
IT'S PRIMARILY JUST ME.
I GET A LOT OF PEOPLE KIND OF FLOATING IN AND OUT
TO CONTRIBUTE BUT I DON'T HAVE A LOT OF PEOPLE
WORKING ON IT CONSISTENTLY WHO AREN'T ME.
IT'S GOT A LOT OF FEATURE REQUESTS OPEN, A LOT OF
ISSUES OPEN.
HELP WOULD BE GOOD.
BUT YOU CAN FIND IT THERE ON GITHUB IF YOU WANT
TO LOOK AT THE CODE.
SOME OF THE CODE IS GOOD, SOME OF IT'S TERRIBLE.
AND YOU CAN GET DOCS, SO IF YOU JUST WANT TO PLAY
WITH IT, IF YOU JUST WANT TO TRY STUFF OUT, YOU
CAN GO TO THE DOCUMENTATION, YOU CAN DOWNLOAD IT
FROM PY-PI AND START MAKING REQUESTS.
ONE PLACE TO START MAKING REQUESTS IS HTTP2 BIN.
THIS IS HTTP BIN WHICH A LOT OF PEOPLE WILL KNOW
ABOUT, AND MAINTAINED BY THE LOVELY PEOPLE AT
RUNSCOPE, AND EXACTLY THAT, CODE FOR CODE,
EXACTLY THE SAME, EVENLY IDENTIFIES IT AS HTTP
BIN, BUT RUNNING BEHIND H2O WHICH IS AN HTTP1.1
AND 2 PROXY.
SO IT CAN SPEAK 1.1 AND 2.
I'VE GOT DOCKERRIZED VERSIONS OF ALL THESE AND SO
YOU CAN GO TO MY GITHUB AND GET THEM.
I HAVEN'T UPLOADED THEM TO DOCKER HUB YET BUT
WILL DO, SO YOU CAN EMPLOY THEM INTERNALLY IF YOU
DON'T TRUST ME TO STORE THE DATA I DON'T GET FROM
THE SERVICE.
THE OTHER THING TO KNOW HERE IS THAT H2O REVERSE
PROXIES TO 1.1, SO YOU CAN PUT IT IN FRONT OF ANY
PYTHON WEB APP YOU HAVE RIGHT NOW AND GIVE 2 A
SHOT ON YOUR APP TO SEE HOW IT FEELS, SO IF
YOU'VE GOT STUFF FLOATING AROUND, I HIGHLY
RECOMMEND GIVING IT SOME TIME, TAKE A LOOK AT THE
DOCKER FILE TO SEE HOW THAT SORT OF THING WORKS.
IF YOU WANT TO DO MORE READING, IF YOU ARE
INTERESTED, WANT TO SEE MORE, THEN THERE ARE TWO
MAJOR RESOURCES, THE TOP ONE IS FROM THE CURL
DEVELOPER AND IT'S AN ENORMOUS DOCUMENT THAT
COVERS THE WHYS AND THE HOW AND THE WHAT OF
HTTP2.
IT IS THE RESOURCE, IF YOU TAKE NOTHING ELSE
AWAY, THAT URL IS GREAT.
AND THE PAGE ONE DOWN IS THE CARD PAGE AND IT
CONTAINS THE SPECS AND LINKS TO IMPLEMENTATIONS,
AND ALL SORTS OF OTHER STUFF.
ALL RIGHT.
SO THAT'S PRETTY MUCH MY TIME.
I WILL BE HAPPY TO STOP FOR QUESTIONS.
I WANT TO MAKE ONE QUICK NOTE.
THE REQUESTS CORE TEAM ARE GOING TO BE AT THE
NUMB FOCUS BOOT TOMORROW FROM 12:30ISH, IF YOU
WANT TO CHAT WITH US, HAVE LUNCH WITH US, WE
WOULD LOVE TO MEET YOU, WE WANT TO TALK ABOUT
ANYTHING WITH PEOPLE WHO ARE USING OUR STUFF.
GET YOUR FEEDBACK.
THAT'S ALL FOR ME.
THANK YOU VERY MUCH.
[ Applause ]
00:10:45>> GREAT.
WE HAVE A FEW MINUTES FOR QUESTIONS, SO IF ANYONE
HAS ANY QUESTIONS AND WOULD LIKE TO COME TO THE
MIC BACK HERE, WE WILL TAKE THEM:
>> AUDIENCE:  AWESOME TALK, THANK YOU VERY MUCH.
I HAD A COUPLE, TWO RELATED QUESTIONS.
THE FIRST ONE IS, SO LET'S SAY IF YOU ARE RUNNING
A WEBSITE AND RUNNING WEB SERVERS, LIKE WHAT ARE
THE OPTIONS TO SUPPORT HTTP2.
YOU MENTIONED THE REVERSE PROXY BUT WHAT ABOUT
NATIVE IMPLEMENTATIONS IF YOU'RE RUNNING APACHE
AND WHATEVER ELSE.
>> THE OPEN SOURCE WEB SERVICES ARE MOVING
RELATIVELY SLOWLY.
INTERNETS HAVE SAID THEY'LL HAVE SUPPORT BY,
QUOTES, UNQUOTES, THE ENDS OF THE YOUR, WHICH IS
THOROUGHLY DISAPPOINTING, SO HOPEFULLY SOMEONE
WILL STEP UP AND MAKE THAT HAPPEN FASTER.
APACHE IS GETTING THERE.
THERE IS A MOD H2, THAT'S WHAT IT'S CALLED, I
DON'T RECALL HOW FAR THROUGH DEVELOPMENT IT IS
BUT THAT'S THE THING TO LOOK AT.
IT'S ALSO BUILT ON TOP OF NGHTTP2.
>> AUDIENCE: THE NEXT QUESTION KIND OF RELATED TO
THAT, LIKE, WHEN DO YOU EXPECT IN TERMS OF
ADOPTION WE'LL SEE LIKE THE WHOLE INTERNET
RUNNING ON HTTP2 AND PEOPLE TALK ABOUT 1.1 BEING
IN THE BACK OF THE DAYS KIND OF THING.
>> I'M NOT CERTAIN WE'LL EVER GET RID OF 1.1,
THERE IS A FEW CASES WHERE IT'S BETTER THAN 2.
>> AUDIENCE: WIDE MAINSTREAM ADOPTION, MORE
MAINSTREAM THING.
>> MAINSTREAM ADOPTION I THINK WITHIN THIS
CALENDAR YEAR IS THE ANSWER, SO WE ARE -- IT IS
ALREADY MORE WIDELY USED THAN IPV6 IS, AND...
[ Laughter ]
>> AND IT'S NOT ACTUALLY EVEN FULLY STANDARDIZED
YET, STILL IN THE ISG, SO IT'S STILL GOT A BIT OF
WORK SO GOOGLE HAS DEPLOYED IT ALREADY, SO GOOGLE
AND CHROME, ANYONE USE INKING THAT IS USING IT.
TWITTER, LOTS OF BIG WEBSITES ARE DEPLOYING IT, I
SUSPECT Facebook WILL BE ALONG, AS WELL, LOTS
OF BIG SOCIAL MEDIA STUFF WILL, I THINK, I'M
CONFIDENT THIS YEAR.
>> AUDIENCE:  AWESOME.
THANK YOU VERY MUCH.
>> THANK YOU.
>> AUDIENCE:  MY QUESTION CONCERNS PUSH FEATURES
THAT YOU BRIEFLY MENTIONED.
HOW DO YOU SEE THIS WORKING WITH POPULAR WEB
FRAMEWORK?
IS IT LIKE YOU ARE GOING TO DECLARE WHAT NEEDS TO
BE PUSHED ON THIS PAGE?
>> YEAH, I THINK POPULAR WEB FRAME WORKS ARE
GOING TO NEED EXTENSIONS TO TRY AND WORK THIS
OUT.
THAT SAID, I WOULD THINK IT WOULD BE NOT TOO
CHALLENGING TO ADD A REVERSE PROXY THAT USES SOME
MACHINE LEARNING STUFF TO TRY AND WORK OUT WHAT
REQUESTS CORRELATE TOGETHER IN SUCH A WAY THAT IT
COULD DO QUITE WELL.
I'LL PROBABLY TRY AND HAVE A CONVERSATION WITH
THE H2O LEAD AT SOME POINT ABOUT WHETHER OR NOT
WE CAN TRY IT WITH HIS IMPLEMENTATION.
YEAH.
>> AUDIENCE:  WILL YOU BE WORKING ON HYPER IN THE
SPRINTS?
>> I THINK I'LL BE TRYING TO DO SOME, YEAH.
I'LL BE HERE MONDAY, THAT'S THE ONLY DAY SPRINTS
AISLE WILL BE HERE BUT I'M TOTALLY HAPPY TO WORK
ON RAMPING PEOPLE UP ON IT SO OTHER PEOPLE CAN IF
I DON'T HAVE THE CHANCE TO.
>> AUDIENCE:  THANKS.
>> AUDIENCE:  YEAH, REQUEST RESPONSE FOR PAIRS
CALLED STREAM WHEN THEY'RE MULTIPLEX, HOW DOES
THE PRIORITIZATION AND FLOW CONTROL INTERACT WITH
TCP'S PRIORITIZATION FLOW CONTROL AND EVEN IP'S
FACILITIES, SEEMS LIKE THERE IS SOME REDUNDANCY
THERE, MAYBE SOME POTENTIAL FOR FIGHTING BETWEEN
THOSE MECHANISMS?
>> SO, THE GOAL SHOULD BE THAT THEY WON'T FIGHT.
SO THE KEY THING TO KNOW, AND THIS GETS BROUGHT
UP A LOT AND SOME DISCUSSIONS ON THE MAILING LIST
ABOUT IT WHICH MIGHT BE WORTH TRYING TO FIND WITH
SOME GOOGLE BUT THE KIND OF HIGH-LEVEL STUFF HERE
IS THE FLOW CONTROL IS APPLICATION LAYER FLOW
CONTROL SO IT'S ABOUT WHETHER OR NOT THE
APPLICATION ITSELF IS PROCESSING THE DATA, THE
TCP STREAM SHOULD STILL BE BEING PUMPED BECAUSE
YOU NEED TO GET THOSE CONTROL FRAMES SO TCP'S
FLOW CONTROL FLOW IS AN OR THROWING NATURAL THINK
WHICH SAYS IT CAN'T PROCESS MORE DATA, FOR THIS
STREAM.
SO IT'S A MUCH MORE FINE-GRAINED ISSUE.
THERE SHOULD BE, WITH CAREFULLY TUNED ALGORITHMS,
NO HEAD OF LINE BLOCKING.
HOWEVER, YOU CAN DEFINITELY DO IT WRONG AND IT'S
AN IMPORTANT THING THAT HAS TO GETS TESTS LIVE.
>> AUDIENCE:  THAT'S KIND OF WHAT I'M ASKING, HAS
THERE BEEN MUCH TESTING OR INVESTIGATION INTO HOW
THOSE INTERACT?
THERE ARE SO MANY FLOW CONTROL ALGORITHMS FOR TCP
BECAUSE OF THE SAME ISSUE BETWEEN I.P. LAYER
STUFF.
>> DEFINITELY LESS WORK DONE THAN TCP BUT PLENTY
OF IMPLEMENTATIONS FLOATING AROUND AND FOR A
LITTLE WHILE WE HAD A SPECIAL FRAME THAT WOULD
TELL YOU IF YOU HAD BLOCKED A STREAM THAT COULD
BE SERVED FOR SOME DE-BUGGING PURPOSE.
THEY GOT TAKEN OUT BECAUSE IT ADDED COMPLEXITY
BUT THE THING TO DO IS GO TO THE VARIOUS MAJOR
IMPLEMENTATIONS AND ASK THEM TO KIND OF WRITE A
DOCUMENT THAT TRACKS EXACTLY HOW THEIR ALGORITHMS
WORK BUT THEY'LL ALL BE QUITE DIFFERENT.
I ALSO SUSPECT GOOGLE WILL PUBLISH A WHITE PAPER.
>> AUDIENCE:  GREAT TALK.
>> AUDIENCE: I HAVE A QUESTION.
HTTP2 MAKES SENSE BETWEEN THE BROWSER AND WEB
SERVICE.
WHAT'S THE PLACE BETWEEN THE ARCHITECTURE, DO YOU
THINK IT HAS A PLACE -- MAYBE WITHOUT TLS?
>> I THINK IT HAS THE POTENTIAL TO BE STREAMLY
VALUABLE IN THOSE CASES.
IT'S A BIT INTERESTING BECAUSE IT VERY MUCH
DEPENDS ON YOUR NETWORKED APOLOGY, BUT IN
PRINCIPLE, IT HAS THE ABILITY TO BE A REALLY
GREAT KIND OF RPC MECHANISM AND IN FACT THERE IS
ONE ALREADY, GOOGLE HAVE PUBLISHED GRPC, A PCC
MECHANISM OVER HTTP2.
AND THAT HAS THE POTENTIAL TO BE MUCH, MUCH MORE
EFFECTIVE THAN THE CURRENT 1.1 USE OF THAT.
>> AUDIENCE:  THANK YOU.
>> THANK YOU.
>> AUDIENCE:  GIVEN PAGE OR SESSION TYPICALLY
RESTRICTED TO A SINGLE TCP CONNECTION AND IF SO,
IS THAT A BOTTLENECK OR DO YOU FORESEE THAT BEING
A BOTTLENECK IN THE FUTURE?
>> THE SPEC SAYS THAT THERE SHOULD, CAPITAL
SHOULD BE NO MORE THAN ONE TCP CONNECTION BEER
AUTHORITY, SO HOST, SO, YEAH, IN PRINCIPLE, I
SHOULD MAINTAIN ONLY THE ONE CONNECTION TO A
GOOGLE SERVER.
CURRENTLY WE DON'T EXPECT THAT TO BE A BOTTLENECK
BUT THE KIND OF THING WHICH MAY WELL COME BACK
AND SAY WE NEED MORE, IDEALLY I THINK WHAT WE
WOULD ACTUALLY DO IS RECONSIDER THE WAY WE HANDLE
THE ONE CONNECTION.
ONE CONNECTION SHOULD BE THE OPTIMAL CASE FOR
TCP.
HOPEFULLY IT WILL.
>> AUDIENCE:  OKAY, THANK YOU.
>> THANK YOU.
>> AUDIENCE:  YOU MENTIONED THE BINARY
PARTICLE -- RESOURCE ENVIRONMENTS.
IS IT POSSIBLE TO DISABLE OTHER FEATURES SUCH AS
H-PAC AND MANDATORY TLS SO YOU CAN RUN THIS ON AN
8 OR 16-BITS --
>> MAYBE.
THERE HAVE BEEN SOME PEOPLE DOING WORK ON THAT.
I'M NOT ENTIRELY UP TO SPEED ON WHERE THEY ARE
BUT YOU CAN DISABLE MANY OF THE COMPLICATIONS
FEATURES, SO FLOW CONTROL, YOU CAN HAVE A KIND OF
NO-OP FLOW CONTROL THAT SENDS BAKE WINDOW UPDATES
THAT ARE THE SIZE OF THE DATA YOU RECEIVED AND
THAT'S WHAT HYPER DOES RIGHT NOW -- NO, IT
DOESN'T, I MADE IT SMARTER RECENTLY, DOESN'T DO
THAT ANYMORE BUT YOU CAN TURN OFF THE
COMPRESSIONEE PARTS OF HPAC, SO YOU CAN HAVE
H-PAC SAY YOU CAN NEVER ADD HAYERS TO THE
COMPRESSION TABLE AND THEN YOU ALWAYS GET
ESSENTIALLY UNCOMPRESSED HEADERS.
I DON'T THINK YOU CAN TURN OFF HUFFMAN ENCODING
FOR THOSE SO YOU MAY NEED TO DO HUFFMAN DECODING,
I'LL HAVE TO CHECKS.
>> AUDIENCE:  HI, OTHER THAN THE RPC USE, WHAT DO
YOU SEE HYPER BEING USED AS, OR USED FOR IN
PYTHON?
>> THAT'S A GOOD QUESTION.
I HAVE AN EXPLICIT LONG-TERM GOAL TO GET REQUESTS
TO USE IT.
I'M KIND OF CHEATING BUT IN THE FOCUSED AREAS, I
WOULD LIKE TO BE ABLE TO TRANSPARENTLY IN TO WORK
BETWEEN 1.1 AND 2 SO YOU CAN USE WHATEVER IS MOST
PRESENT.
IT ALSO HAS A SEPARATE, A THOROUGHLY SEPARATE
FRAMING LAYER SO THE BIT THAT KNOWS ABOUT HTTP
FRAMES AND THE BIT THAT KNOWS ABOUT H-PAC ARE
QUITE SEPARATE AND COULD BE BROKEN OUT INTO OWN
LIBRARIES, RECENTLY, SO I'M TALKING TO SOMEONE
WHO IS CONSIDERING ADDING SUPPORT TO THE STANDARD
LIBRARY, USING THE FRAMING LAYER.
I ALSO PLAN TO ADD SUPPORT FOR THINGS LIKE
TWISTED AND G-EVENT AND ALL THOSE SORTS OF
THINGS, AND IDEALLY, I WOULD LIKE TO WRITE A
SERVER IMPLEMENTATION AT SOME POINT, AS WELL,
PROBABLY ON A-SYNC IO, BUT THAT'S ASSUMING I HAVE
EIGHT MILLION HOURS BECAUSE THERE IS A LOT OF
WORK THERE.
>> AUDIENCE:  A FOLLOWUP TO THAT, USUALLY THE
FLOW IN PYTHON, IS A REQUEST RESPONSE KIND OF
DEAL, WHERE HTTP1 PROBABLY WORKS OKAY.
SO IS IT A DIFFERENT INTERFACE THAT REQUEST IS
GOING TO IMPLEMENT OR DO YOU HAVE ANY VISION
THERE?
>> MY EXPECTATION IS THAT THE -- WE WILL KEEP
THAT ABSTRACTION BUT IN PRACTICE, TO GET GOOD
PERFORMANCE OUT OF IT, TO GET LIKE EXCELLENT
PERFORMANCE OUT OF IT, YOU WILL NEED TO START
HAVING CONCURRENT SEE IN PLACE.
SO YOU MIGHT USE ONE OF THE CONCURRENT INTERFACES
TO REQUEST, LIKE G-REQUESTS OR T-REQUESTS OR T
REC OR ANY OF THOSE.
OR EVEN JUST SPAWN A BACKGROUND THREAD THAT
MULTIPLEX ON TO SO YOU CAN HAVE MANY, MANY
THREADS RUNNING AND THEY USE ONE UNDERLYING
CONNECTION, MULTIPLEXING DOWN IT.
AGAIN, I WOULD LOVE TO TALK ABOUT THIS WITH MORE
USERS BECAUSE I WANT TO GET A FEEL FOR WHAT THOSE
USE CASES LOOK LIKE.
IT'S EASY FOR ME TO DESIGN IN A BUBBLE AND NONE
ONE WILL LIKE IT.
>> AUDIENCE:  THANK YOU.
>> AUDIENCE:  A QUICK FOLLOW-UP QUESTION TO GO
AFTER THE ONE ABOUT SERVER PUSH.
IT SEEMS LIKE HTTP2 IS CRYING TO REQUIRE THE
APPLICATION LAYER TO BE MUCH, MUCH SMARTER THAN
IT IS RIGHT NOW WITH HTTP1.
THE APPLICATION LAYER HAS TO DECIDES WHAT TO PUSH
AHEAD OF TIME, WHAT THE USER IS GOING TO NEED,
EVERYTHING AHEAD OF TIME.
DO YOU THINK THERE IS A SOLUTION TO THAT IN
ENGINE X OR DO YOU THINK IT'S ENTIRELY THE
RESPONSIBILITY OF THE APPLICATION DEVELOPER TO
MAKE IT SMART ENOUGH TO HANDLE HTTP2?
>> I THINK WITH COMPUTERS ALMOST EVERYTHING IS
POSSIBLE, SO I THINK THAT YOU COULD ABSOLUTELY
SOLVE THIS IN ENGINE X AND I THINK ANYONE WHO
DOES IS GOING TO HAVE A REALLY GREAT CONFERENCE
SPEAKING CAREER AND HOPEFULLY TURN IT INTO QUITE
A BIT OF MONEY BUT, IN PRACTICE, CURRENTLY, THE
APPLICATION LAYER HAS TO KNOW ABOUT IT, SO WHAT'S
THE EXPECTED WAYS OF DEALING WITH THIS WILL BE TO
ADD EXTRA HEADERS THAT YOUR SERVER INTERCEPTS
THAT SAY THINGS LIKE THIS OTHER RESOURCE IS
RELATED, PLEASE PUSH IT.
SO THAT'S THE CURRENT EXPECTATION OF THE FLOW.
WE'LL GET THAT RIGHT FIRST AND THEN WORRY ABOUT
BEING SMART.
>> AUDIENCE:  OKAY, GREAT, THANKS.
GREAT TALK.
>> THANK YOU.
>> I WANTED TO ASK IF THERE'S ANYTHING ON THE
ROAD --
>> THE ANSWER IS CURRENTLY NO.
THERE ARE A COUPLE OF LAYERS TO THIS QUESTION,
SO, FIRSTLY, THE WORKING GROUP IS EXHAUSTED.
HTTP2 WAS A BATTLE, A BATTLE FOR TWO YEARS, THERE
WAS A LOT OF CONTENTION ABOUT IT, A LOT OF BACK
AND FORTH AND A LOT OF PEOPLE NEED SOME TIME TO
NOT DO THAT.
ARGUMENTS ON THE MAILING LIST GET TIRING AFTER A
WHILE.
THAT SAID, THERE HAS BEEN LOTS OF EXPLICIT
DISCUSSION ABOUT HTTP3.
WE'RE NOT PROPOSING TO DO IT RIGHT NOW, NO ONE
PANIC BUT IT'S THE KIND OF THING THAT WE'RE
PREPARED TO TALK ABOUT, WE'RE GOING TO LET THE
STANDARD KIND OF BOIL -- KIND OF SIMMER FOR SIX
MONTHS, LET PEOPLE IMPLEMENT, LET PEOPLE FIND THE
ACTUAL PROBLEMS THEY HIT IN THE WILD AND THEN
WE'LL COME BACK TO THE TABLE, I THINK, AND LOOK
AT WHETHER OR NOT WE CAN ADDRESS THESE WITH
EXTENSIONS OR WHETHER OR NOT WE REALLY HAVE TO
RE-SPEC.
ONE OF THE GOOD THINGS THAT CAME OUT OF THIS, WAS
A WHOLE INFRASTRUCTURE FOR TRANSPARENTLY ADDING
EXTRA PROPERTY TO COMES THAT YOU CAN UPGRADE TO
SO HOPEFULLY FURTHER HTTP VERSIONS SHOULD BE
EASIER TO HANDLE THAN THIS ONE.
THIS ONE REQUIRED A LOT OF EXTRA INFRASTRUCTURE.
>> AUDIENCE:  I THINK WE'RE GOING HAVE TO CUT IT
OFF THERE BECAUSE I'M HUNGRY FOR LUNCH, SO THANK
YOU, CORY, AND GET SOME LUNCH, FOLKS.
[ Applause ]
[ LUNCH BREAK ]
[ ENDED AT 12:47. ]
