LIMB'S TALK ON REACT.JS IS
CANCELED.
WE HAVE A REPLACEMENT TALK.
LUKE SNEERINGER IS GONNA GIVE A
TALK IN THREE MINUTES.
>> MOON LIMB'S TALK ON REACT.JS
IS CANCELED.
LUKE SNEERINGER IS GONNA BE HERE
ANY MINUTE.
SO JUST HANG ON.
>> CHECK, CHECK.
HEY, I AM ON.
HELLO, EVERYONE.
I'M GOING TO BE TALKING ABOUT
HOW TO IMPROVE DEVELOPMENT
ENVIRONMENTS WITH
VIRTUALIZATION.
AS A MINOR SIDE NOTE, I WILL
ALSO BE TALKING ABOUT -- THAT
DOESN'T WORK.
I'LL ALSO BE TALKING ABOUT HOW
TO IMPROVE SLIDE LAYOUTS WITH
SHORTER TITLES, BECAUSE IF IT
TAKES THREE LINES, IT REALLY
DOESN'T LOOK VERY GOOD,
SOMETHING I LEARNED AS I WAS
MAKING THE SLIDES FOR THIS
PRESENTATION.
AS A QUICK NOTE, I AM NOT THE
SPEAKER ON THE SCHEDULE.
I AM NOT MOON LIMB.
THOSE RESPONSIBLE HAVE BEEN
SACKED AND A NEW TALK HAS BEEN
PUT TOGETHER.
WHO I ACTUALLY AM, I AM A
SOFTWARE DEVELOPER AT ANSIBLE.
WE DO SERVER ORCHESTRATION.
YOU MAY HAVE HEARD OF US.
THERE WAS A TALK ON ANSIBLE
YESTERDAY.
I'M MARRIED TO MEGAN, WHO IS
SITTING IN THE SECOND ROW AND IS
ALSO THE BEST WIFE EVER, AND I
LIVE IN TEXAS.
THERE WE GO.
OKAY, SO I'M GONNA TALK REAL
FAST ABOUT THE LANDSCAPE, WHAT
IS -- WHERE ARE WE?
WHAT AM I TALKING ABOUT HOW WE
CAN IMPROVE?
SO THE LANDSCAPE.
SADLY, IT'S NOT THAT ONE.
DIFFERENT KIND OF LANDSCAPE.
HOW MANY OF YOU HAVE STARTED A
NEW TECH JOB IN THE LAST FEW
YEARS?
ALMOST EVERYBODY.
OKAY.
SO YOU GO TO YOUR NEW JOB AND
WHAT IS YOUR FIRST WEEK LOOK
LIKE?
IT PROBABLY LOOKS LIKE GETTING
YOUR COMPUTER, FILLING OUT YOUR
H.R. FORMS AND AT SOME POINT,
YOU ARE ASSIGNED TO WORK ON A
PROJECT.
AND YOU GO TO YOUR COWORKERS,
PEOPLE THAT ARE ALREADY THERE,
AND YOU SAY, I NEED TO SET UP A
DEVELOPMENT ENVIRONMENT FOR THIS
NEW PROJECT.
AND WHAT YOU OFTEN GET KIND OF
LOOKS LIKE THE HOMESTAR RUNNER
VERSION OF TECHNOLOGY.
LIKE, "YOU WILL NEED A FEW DAYS
TO GET YOUR DEVELOPMENT
ENVIRONMENT UP."
OR... "OH, DOCUMENTATION?
WE NEED THAT?"
IT'S JUST BAD.
IT'S AMAZING HOW MUCH TIME CAN
BE WASTED AS YOU TRY TO JUST GET
GOING.
AND THEN YOU GO AND LOOK AT YOUR
GITHUB TICKETS, AND SOMEONE
SAYS, IT WORKS ON MY MACHINE.
AND IT JUST -- NONE OF THESE
THINGS REALLY WANT TO MAKE YOU
BLAST OFF FIREWORKS AND SING THE
HALLELUJAH CHORUS AND BE LIKE,
YEAH, THIS IS AWESOME!
THAT'S NOT HOW THINGS SHOULD BE.
AND SO WE SHOULD FIX IT.
WE SHOULD MAKE IT BETTER.
AND WHEN IT COMES TO MAKING
DEVELOPMENT ENVIRONMENTS,
THERE'S A FEW -- THERE'S A FEW
STANDARDS THINGS THAT IT SEEMS
LIKE WE OUGHT TO HAVE FOR THINGS
TO BE WORKING WELL.
WE SHOULD BE HAVING DEVELOPMENT
ENVIRONMENTS THAT MIRROR
PRODUCTION AS MUCH AS IS
REASONABLY POSSIBLE.
IT SHOULD BE THAT OUR
DEVELOPMENT ENVIRONMENTS LOOK
AND RUN A WHOLE LOT LIKE OUR
SERVERS, OUR PRODUCTION
MACHINES.
IF WE'RE MAKING A DESKTOP
APPLICATION OR A SCRIPT OR AN
EXECUTABLE OR WHATEVER, THERE
SHOULDN'T BE ANY FACTORS THAT
MAKE THE DEVELOPMENT RUN
DIFFERENTLY, EXCEPT FOR THINGS
THAT ARE INTENTIONALLY
DEVELOPER-SPECIFIC, AND WE'LL
GET BACK TO THAT.
IT SHOULD BE LOW COST.
IF YOU DO SOMETHING TO SCREW UP
YOUR DEVELOPMENT ENVIRONMENT,
YOU SHOULD BE ABLE TO JUST BLOW
IT AWAY AND MAKE A NEW ONE.
AND THE LAST THING, HAS ANYONE
EVER TRIED TO DEVELOP ON
MACHINES THAT ARE EXACTLY LIKE
YOUR PRODUCTION MACHINES?
YOU CAN GO MAKE A CLOUD SERVER
THAT LOOKS EXACTLY LIKE YOUR
PRODUCTION MACHINE, CAN BE IN
THE SAME PLACE, YOU KNOW, NYC2
OR WHATEVER, WHATEVER LOCATION
ON THE SAME PROVIDER, IT CAN
LOOK EXACTLY LIKE IT, BUT YOU
KNOW WHAT?
IT REALLY, REALLY, REALLY STARTS
TO SUCK TO DEVELOP THAT WAY.
I'M GOING TO SSHN, AND THEN I'M
GOING TO DO ALL OF MY DEVELOP IN
VIM AND KEEP EVERYTHING TOGETHER
IN LS, AND IT'S JUST NOT REALLY
VERY FUN.
AND OF COURSE EVERY SINGLE TIME
YOU MAKE A CHANGE, YOU HAVE TO
RIGHT QUIT OUT OF VIM, OR
WHATEVER SERVER YOU HAPPEN TO BE
USING, IF IT'S A SCRIPT, THEN
IT'S A MATTER OF RUNNING IN THE
ENVIRONMENT AND RESETTING YOUR
ENVIRONMENT VARIABLES.
AND WHEN DO WE WANT IT?
NOW.
WHY?
BECAUSE THAT'S THE MEME.
WHAT'S THE PURPOSE OF DOING
THIS?
AND AS I THOUGHT ABOUT THAT
QUESTION, I REALLY CAME UP WITH
THREE THINGS:  PORTABILITY,
CONSISTENCY, AND REUSABILITY.
I'M GONNA TALK VERY BRIEFLY
ABOUT EACH ONE.
PORTABILITY, THAT'S THAT NEW
HIRE SITUATION.
YOU COME AS A NEW HIRE TO A NEW
COMPANY -- WOULD BE NICE IF YOU
COULD JUST HAVE A SETUP, AND IT
WOULD JUST WORK.
AND PORTABILITY IS WHAT GIVES
YOU THAT.
IT'S, YES, WE ALREADY WROTE THIS
CODE TO SET UP A DEVELOPMENT
ENVIRONMENT, AND ALL YOU HAVE TO
DO IS INSTALL THIS PROGRAM AND
RUN THIS.
AND RUN THIS THING.
AND YOU, TOO, CAN START ACTUALLY
WORKING.
CONSISTENCY, WE'VE ALREADY
TALKED ABOUT.
CONSISTENCY IS, THERE SHOULDN'T
BE DIFFERENCES THAT MAKE IT SO
THAT IT WORKS WHEN I'M WRITING
IN DEVELOPMENT AND BREAKS WHEN
IT'S RUNNING ON PRODUCTION
MACHINES, WHEN IT'S THE THING
THAT THE CUSTOMER'S USING.
AND REUSABILITY IS, I SHOULD BE
ABLE TO DO THIS OFTEN.
I SHOULD BE ABLE TO BLOW UP A
BOX AND MAKE A NEW ONE.
I SHOULD BE ABLE GET INTO A
PRISTINE STATE BECAUSE WHEN
YOU'RE HACKING ON THINGS, YOU
GET OUT OF A PRISTINE STATE.
YOU HAVE TO DO THINGS
DIFFERENTLY TO SEE WHAT WORKS.
REUSABILITY LETS YOU PULL BACK
INTO A PRISTINE STATE.
AND THIS CONCEPT IS REALLY
USEABLE EVERYWHERE.
IT'S USEABLE -- MOST OF MY
EXAMPLES ARE ON SERVER SIDE
APPLICATIONS BECAUSE THAT'S
WHERE I'M THE MOST FAMILIAR,
BUT, REALLY, THIS ISN'T A
CONCEPT THAT'S RESTRICTED TO
THAT.
A DESKTOP APPLICATION CAN RUN
OFF THIS TYPE OF APPLICATION.
THERE ISN'T REALLY A CASE WHERE
A VIRTUAL ENVIRONMENT DOESN'T
MAKE SENSE.
AND SO I'M GONNA TALK ABOUT HOW
TO USE THEM.
SO A QUICK BIT ON TOOLS.
THERE'S QUITE A BIT OF TOOLS TO
DO THIS KIND OF THING, AND WHAT
EXAMPLE COULD I HAVE, I PICKED A
COUPLE TO EXPLAIN.
BUT I AM NOT TRYING TO PUSH THAT
THIS IS THE ONLY TOOLS TO USE.
I'M TRYING TO PUSH THE CONCEPT.
WHICH IS WHY WE'RE AT 10 MINUTES
INTO THE TALK AND I REALLY ONLY
TALKED ABOUT CONCEPTUAL --
TRYING TO SELL THE CONCEPT TO
YOU.
PROBABLY THE MOST POPULAR TOOL
FOR ACTUALLY DOING
VIRTUALIZATION FOR DEVELOPMENT
WORK SPECIFICALLY IS A TOOL
CALLED VAGRANT.
VAGRANT IS A WRAPPER AROUND
OTHER TOOLS, MOST NOTABLY
VIRTUALBOX AND VMWARE.
THERE'S A COUPLE OF COMPETITORS.
THERE'S ONE CALLED BOX CLIFF AND
ANOTHER CALLED VORTEX.
I DIDN'T KNOW ABOUT THE FORMER
OF THOSE WHEN I WROTE THESE
SLIDES, SO I ENDED UP WITH A
SLIDE WHERE EVERY SINGLE THING
JUST STARTS WITH A V, WELL,
WHICH, FINE.
IT'S CONVENIENT.
I FIGURED I WOULD GET AT LEAST A
GOOD LAUGH FOR THAT.
THANK YOU IN THE BACK.
THERE'S A LOT MORE PROVISIONING
TOOLS AVAILABLE.
SO THERE WERE SEVERAL TALKS
YESTERDAY ON VARIOUS DIFFERENT
PROVISIONING TOOLS.
JAMES GAVE A TALK ON ANSIBLE.
NOAH LAST YEAR GAVE A TALK ON
CHEF.
THERE WAS A TALK THIS YEAR ON
DOCKER.
THERE WAS A TALK LAST YEAR ON
SALTSTACK.
THE PURPOSE OF A PROVISIONING IS
TO GET THINGS INTO A PARTICULAR
STATE.
I'M GONNA COME BACK TO THIS IN
JUST A MOMENT BUT JUST SAY THERE
ARE SEVERAL TOOLS TO USE.
YOU ARE HOPEFULLY ALREADY USING
THIS CONCEPT IN YOUR PRODUCTION
ENVIRONMENTS FOR ACTUALLY GIVING
YOUR CODE TO THE ULTIMATE
CLIENT, TO THE ULTIMATE
CUSTOMER.
AND SO, REALLY, IT SHOULD JUST
BE A MATTER OF TAKING THIS AND
MAKING IT USEFUL FOR DEVELOPMENT
AS WELL.
I'M OPERATING UNDER THE
ASSUMPTION THAT MANY, IF NOT
MOST OF YOU, HAVE ALREADY GOTTEN
INTO THE WORLD OF PROVISIONING
FOR PRODUCTION USE.
IF YOU HAVEN'T, I HIGHLY
RECOMMEND LOOKING AT SOME OF THE
TALKS THAT WERE GIVEN YESTERDAY
AND LAST YEAR ON THIS TOPIC,
BECAUSE I DON'T HAVE TIME TO DO
ANYTHING OTHER THAN BARELY
SCRATCH THE SURFACE.
AND BY THE WAY, THE ONLY REASON
THE KING OF TOWN IS ON THIS
SLIDE IS BECAUSE I FELT LIKE I
NEEDED A PICTURE.
SO AGAIN, TRYING TO PITCH
PROVISIONING, THE PURPOSE OF
PROVISIONING IS TO GET A MACHINE
INTO A DEFINED STATE.
IT SAYS I DON'T REALLY CARE
ABOUT ALL THESE OTHER ASPECTS OF
A MACHINE; HOWEVER, THESE THINGS
ARE THE THINGS THAT A MACHINE
MUST HAVE.
THIS IS THE STATE IT MUST BE IN.
HOW DO WE DEFINE THE STATE IN
PRESENCE OF THE CODE TO RUN?
PRESENCE OF OBJECTS INSTALLED?
CERTAIN CONFIGURATION BEING SET,
ALL THOSE THINGS.
IT SHOULD MOSTLY MATCH HOW YOU
DEFINE STATE IN PRODUCTION.
AND THEREFORE, IN ORDER TO GET A
LOT OF VALUE OUT OF WHAT I AM
TALKING ABOUT TODAY, PROBABLY
YOU ALREADY NEED TO HAVE
PRODUCTION PROVISIONING DONE.
IT DOESN'T REALLY MAKE SENSE TO
HAVE DEVELOPMENT PROVISIONING IF
YOU DON'T HAVE PRODUCTION
PROVISIONING, EXCEPT FOR THE
FACT THAT IF YOU ARE JUST TRYING
TO GET INTO THIS WORLD, USING
DEVELOPMENT PROVISIONING CAN BE
A VERY LOW RISK, LOW COST WAY TO
GET YOUR FEET WET, AND THEN
AFTER THAT'S BEEN ESTABLISHED
AND WORKING, THEN IT CAN BE
PORTED TO PRODUCTION.
THAT IS A VALID AND SENSIBLE WAY
TO GO.
SO WHAT DO WE NEED TO JUST RUN A
GENERIC SERVER SIDE APPLICATION?
WELL, YOU PROBABLY NEED THREE
BASIC THINGS.
YOU NEED TO INSTALL SOFTWARE
THAT'S NOT PYTHON BASED.
YOUR WEB SERVER, IF YOU'RE A WEB
PERSON, YOUR, YOU KNOW, WHATEVER
ELSE.
YOUR FIREWALL, YOUR BLAH, BLAH,
BLAH.
YOU PROBABLY NEED TO INSTALL
PYTHON PACKAGES BECAUSE ONE OF
THE REASONS WHY YOU USE PYTHON
IS NOT TO REINVENT THE WHEEL.
AND THEN CONFIGURING ALL OF THE
ABOVE IS THE LAST THING YOU NEED
TO DO.
PRETTY MUCH NO MATTER WHAT YOUR
APPLICATION LOOKS LIKE, YOU
PROBABLY ARE DOING ALL OF THESE
THINGS.
EVEN IF YOU'RE CREATING A
DESKTOP APPLICATION OR A SCRIPT,
YOU'RE PROBABLY DOING ALL OF
THESE THINGS.
AS FAR AS VIRTUALIZATION IS
CONCERNED, IT'S REALLY, REALLY,
REALLY, EASY TO MAKE A CLOUD
SERVER AND PROVISION IT.
THERE'S A BUNCH OF THEM.
THAT WILL LET YOU DO SOMETHING
LIKE THAT.
I'LL PAY $5 A MONTH FOR IT AND
LOOK, I HAVE ROOT ON A VERY TINY
BOX.
AND I CAN DO ALL MY DEVELOPMENT
ON THAT.
BUT IT'S REALLY PAINFUL TO
ACTUALLY DO WORK ON THOSE
THINGS.
IT CAN BE DONE.
YOU CAN USE NFS TO SYNC FOLDERS
AND ALL THAT KIND OF STUFF.
IT CAN BE DONE.
BUT IT'S NOT FUN.
IT'S PRETTY PAINFUL.
AND THE PROBLEM IS, WORKING IN
PRODUCTION ENVIRONMENTS IS
PAINFUL.
AND IT ACTUALLY SHOULD BE
BECAUSE WE DON'T WANT TO BE
HACKING IN PRODUCTION.
BUT IF WE'RE TRYING TO TAKE
THESE PRODUCTION CONCEPTS AND
PORT THEM TO A DEVELOPMENT
ENVIRONMENT, USING ENVIRONMENT
KIND OF IN A DOUBLE WAY THERE,
THEN WE HAVE TO GET RID OF THAT
PAIN.
AND IN REALITY, AS MUCH AS I
SAID THAT DEVELOPMENT SHOULD
MIRROR PRODUCTION AS MUCH AS
POSSIBLE, THERE MUST BE SOME
DIFFERENCES.
REALLY, AT LEAST THREE.
ONE, YOU NEED TO BE ABLE TO CODE
LOCALLY.
BECAUSE UNLESS YOU ARE VERY,
VERY LOOSE ABOUT WHAT YOUR
PERSONAL, YOU KNOW, PREFERENCE
ENVIRONMENT LOOKS LIKE, YOU
PROBABLY ARE VERY PICKY ABOUT
HAVING YOUR MACROS SET UP IN A
PARTICULAR WAY.
AND SO YOU NEED TO WORK LOCALLY.
YOU NEED YOUR DEVELOPMENT
ENVIRONMENT TO KNOW THAT IT'S A
DEVELOPMENT ENVIRONMENT.
AN ERROR THAT GIVES YOU LOTS OF
INFORMATION INCLUDING YOUR
DATABASE CREDENTIALS AND WHATNOT
IS REALLY BAD FOR A PRODUCTION
SYSTEM, BUT IT'S REALLY GOOD FOR
A DEVELOPMENT ONE.
HAVE ALL THE INFORMATION GO TO
THE LOGS OR TO SOMEBODY'S EMAIL.
IF SOMETHING GOES WRONG IN YOUR
DEVELOPMENT SYSTEM, YOU WANT IT
IN YOUR FACE WITH AS MUCH
INFORMATION AS POSSIBLE SO YOU
CAN SOLVE THE PROBLEM AS QUICKLY
AS POSSIBLE.
AND THE LAST THING IS
RESPONSIVENESS OF TOOLS TO
CHANGES.
WHEN YOU ACTUALLY SAVE A NEW
FILE, YOU WANT YOUR SERVERS TO
RELOAD AND GET THOSE CHANGES.
AND THERE'S A FEW OTHER NICE
THINGS THAT ARE GOOD TO HAVE.
FLEXIBILITY OF ENVIRONMENTS.
IF YOU'RE WORKING ON A TOOL THAT
RUNS IN MULTIPLE STATES, SAY, AN
EXECUTABLE THAT NEEDS TO RUN IN
MULTIPLE DIFFERENT DISTRIBUTIONS
OF LINUX, THAT'S ABSOLUTELY
SOMETHING THAT YOU WANT YOUR
VIRTUAL ENVIRONMENTS TO BE ABLE
COVER.
YOU WANT TO BE ABLE TO MAKE A
VIRTUAL ENVIRONMENT IN EVERY
NECESSARY DISTRIBUTION.
AND THE ABILITY TO SHARE.
SO I SHOULD SHOW YOU SOME CODE.
SO FIRST OF ALL, THE TOOLS THAT
I'M CHOOSING TO DISCUSS ARE
VAGRANT AND VIRTUALBOX.
THEY'RE NOT THE ONLY TOOLS.
VAGRANT PROJECTS USES A VAGRANT
FILE.
THIS IS SPECIFIC TO DEVELOPMENT.
IT DOESN'T HAVE ANY MIRROR
AGAINST PRODUCTION, WHICH IS
VERY USEFUL, AND IF YOU'RE SMART
ABOUT THE WAY YOU WRITE YOUR
VAGRANT FILE, THERE'S NO REASON
WHY YOU CAN'T COMMIT IT TO
VERSION CONTROL.
IT DEFINES ONE OR MORE MACHINES,
AND IT DEFINES A PROVISIONER.
A MACHINE IS BASICALLY A VIRTUAL
MACHINE THAT IT SHOULD CREATE,
AND THE PROVISIONER IS A TOOL,
THE THIRD-PARTY PROVISIONER THAT
YOU'RE GOING TO USE AT YOUR SHOP
SUCH AS ANSIBLE OR CHEF OR
FABRIC OR WHATEVER ELSE.
SO LET'S LOOK AT WHAT DEFINING A
MACHINE LOOKS LIKE.
I'M NOT GONNA KEEP THIS CODE UP
ON THE SLIDES FOR A SUPER LONG
TIME.
MOSTLY THIS IS A CONCEPTUAL
TALK.
YOU CAN LOOK AT VAGRANT.COM TO
GET THE -- WE NEED TO KNOW WHAT
OPERATING SYSTEM IT NEEDS TO
RUN.
WE NEED TO KNOW WHAT IP ADDRESS
IT'S GONNA HAVE WITHIN OUR LOCAL
ENVIRONMENT WORLD AND THEN HOW
MUCH MEMORY IT'S GOING TO HAVE.
PROVISIONING LOOKS SIMILAR.
I'M GONNA SPEND A LITTLE BIT
LONGER HERE.
SO YOU SAY WHAT PROVISIONER YOU
NEED TO USE WITH THIS FUNKY RUBY
DSL.
AND ONE OF THE NICE THINGS YOU
CAN DO IS, YOU CAN DO THINGS
LIKE DEFINE A COUPLE OF EXTRA
VARIABLES.
AND THIS IS A PLACE WHERE YOU
CAN START TO TELL YOUR SYSTEM
THAT THIS IS A DEVELOPMENT BOX.
IT SHOULDN'T ACT QUITE LIKE A
PRODUCTION BOX.
NOTICE I HAVE AS PART OF MY
ANSIBLE EXTRA BARS DEVELOPMENT
EQUALS TRUE.
WELL, NOW, WHENEVER I'M RUNNING
MY ANSIBLE PLAYBOOKS, WHICH
OBVIOUSLY ARE ABLE TO CREATE A
PRODUCTION SYSTEM, ONE OF THE
THINGS THEY CAN DO IS, IN ANY
TEMPLATE, THEY CAN SAY, WELL, IF
DEVELOPMENT, DO THIS SLIGHTLY
DIFFERENT THING.
I WANT ALL MY PRODUCTION STUFF.
I WANT EVERYTHING TO BE WORKING
THE SAME WAY IT'S WORKING IN
PRODUCTION EXCEPT THIS ONE SPOT.
THIS ONE SPOT SHOULD BE
DIFFERENT BECAUSE I REALLY DON'T
WANT TO SHOOT MYSELF IN THE HEAD
OVER THE PAIN.
WELL, WHERE DO WE STAND AT THIS
POINT?
WELL, NOW YOU CAN VAGRANT UP AND
PROVISION A PRODUCTION MACHINE.
AND THEN YOU'RE SAD.
SO LET'S TALK ABOUT HOW TO DO
DIFFERENTIATION.
MOST LIKELY YOU PROBABLY DON'T
WANT TO BE SHELLING TO YOUR
VIRTUAL ENVIRONMENT TO DO YOUR
WORK.
BECAUSE THAT'S THE KIND OF PAIN
THAT YOU WANT TO GET AWAY FROM.
VAGRANT PROVIDES A WAY TO
SYNCHRONIZE A FOLDER BETWEEN THE
HOST MACHINE, YOUR DESKTOP THAT
YOU'RE SITTING AT, AND YOUR
GUEST MACHINE, WHICH IS
VM.SYNCED FOLDER.
SO THIS IS ONE WAY THAT YOU CAN
NOW HAVE A LOCAL CODE ON YOUR
VIRTUAL ENVIRONMENTS.
YOU USE WHATEVER EDITOR, IEE
TYPE OF THING THAT YOU WANT TO
USE, AND AS SOON AS YOU MAKE A
SAVE, THAT SAVE IS REFLECTED ON
THE VIRTUAL MACHINE.
FOR DEVELOPMENT AWARENESS, THE
EASIEST WAY I FOUND IS PROVIDE A
DEVELOPMENT FLAG TO YOUR
PROVISIONER, AND THEN IT'S
REALLY EASY IN YOUR PROVISIONER
TOOL, WHEN YOU'RE CONFIGURING
YOUR TOOLS SAY I NEED TO
CONFIGURE THIS TOOL TO BE IN A
DEVELOPMENT STATE.
THE EXAMPLE I USED IS JUST
SOMETHING THAT COMES OUT OF A
DJANGO SETTINGS FILE.
IF I'M IN DEVELOPMENT, THEN I
WANT TO SET DEBUG TO TRUE.
RESPONSIVENESS TO CHANGE RUNS ON
THE SAME PRINCIPLE.
IF YOU HAVE A SERVICE TYPE TOOL,
MOST OF THEM HAVE MECHANISMS TO
RELOAD THEMSELVES IF SOMETHING
CHANGES.
YOU JUST HAVE TO TURN THAT
CONFIGURATION ON.
ALL THAT IS REQUIRED FOR TURNING
THAT CONFIGURATION ON IS
CONFIGURING IT SLIGHTLY
DIFFERENTLY IF YOU'RE ON YOUR
DEVELOPMENT MACHINE RATHER THAN
YOUR PRODUCTION MACHINE AND MAKE
IT RESPOND TO THAT DEVELOPMENT
STATE.
AND THERE'S SEVERAL ADVANTAGES
TO THINKING THROUGH IT THIS WAY.
AGAIN, IF YOU HAVE A SYSTEM THAT
RUNS IN LOTS OF ENVIRONMENTS,
VIRTUALIZATION IS GREAT FOR
THAT.
IF YOU WANT TO TEST HOW YOUR
SYSTEM WILL RUN IN A LOW MEMORY
ENVIRONMENT, VIRTUALIZATION IS
FANTASTIC FOR THAT.
IF YOU ARE TRYING TO TEST AND
FIGURE OUT WHAT CHANGES ARE
GOING TO HAVE DIFFERENT EFFECTS
FROM THE OPERATING SYSTEM TO
YOUR PROGRAM, VIRTUALIZATION IS
GREAT FOR THAT.
AND IT'S A VERY LOW RISK, LOW
COMMITMENT WAY TO DO IT BECAUSE
AT ANY POINT, YOU CAN JUST
DESTROY WHAT YOU'VE DONE AND
START OVER.
AND ANOTHER ADVANTAGE IS IF
YOU'RE WILLING TO SPEND SOME
MONEY, VAGRANT MAKES IT VERY
EASY TO SHARE YOUR BOX WITH
OTHER PEOPLE.
SO I'M GONNA COME BACK TO A
PHILOSOPHICAL POINT THAT I'VE
BEEN DRIVING REPEATEDLY, WHICH
IS DEVELOPMENT SHOULD BEHAVE
EXACTLY LIKE PRODUCTION.
THERE SHOULD BE NO DIFFERENCES
BETWEEN DEVELOPMENT AND
PRODUCTION WHEN POSSIBLE.
EXCEPT WHEN IT'S TOO PAINFUL.
AT WHICH POINT IT SHOULD BE
DIFFERENT, BUT ONLY THERE.
AND THE REASON WHY YOU ONLY WANT
IT TO BE DIFFERENT THERE IS
BECAUSE ANY DIFFERENCE IS A
POSSIBILITY FOR AN INCONSISTENCY
IN YOUR WORK.
HOWEVER, SOMETIMES IT REALLY IS
TOO PAINFUL AND IT SHOULD BE
DIFFERENT.
AND SINCE THIS IS PUT TOGETHER
AT GREAT EXPENSE AND AT THE LAST
MINUTE, THAT'S ALL I HAVE, BUT I
WOULD BE HAPPY TO TAKE QUESTIONS
FOR A FEW MINUTES.
I WILL NOTE THAT MORE LUKE
EQUALS LESS GUIDO, AND THEN I
WILL TRY TO LET YOU ALL OUT
EARLY.
[ Applause ]
>> IF YOU HAVE A QUESTIONS,
PLEASE COME TO THE MICROPHONE.
AS ALWAYS, YOUR RESPONSE MUST BE
IN THE FORM OF A QUESTION.
>> SO COULD YOU GIVE ME AN
EXAMPLE OF WHAT'S TOO PAINFUL?
>> SO THE QUESTION FOR THE VIDEO
IS, GIVE ME AN EXAMPLE OF WHAT'S
TOO PAINFUL.
MY BIGGEST PAIN POINT IN THAT
KIND OF SITUATION IS THINGS THAT
DON'T AUTO RELOAD.
IT'S REALLY PAINFUL TO HAVE A
SITUATION WHERE I NEED TO SAVE
MY FILE, GO RELOAD MY SERVER,
RUN THE THING TO CHECK IT, GO
MAKE A CHANGE, SAVE THE FILE,
RELOAD THE SERVER, RUN THE THING
TO CHECK IT.
THAT RELOAD THE SERVER STEP
SHOULDN'T BE THERE.
THAT'S AN UN-OBVIOUS EXAMPLE.
ANOTHER ONE IS, I KNOW THAT
THERE ARE SOME GURUS, BUT I
DON'T DO ALL OF MY DAY-TO-DAY
EDITING IN SOMETHING THAT WILL
RUN IN A SHELL PRONG.
HOWEVER, THAT'S NOT MY PERSONAL
PREFERENCE.
I WANT TO BE ABLE TO USE MY
LOCAL DESKTOP TOOLS AGAINST MY
VM.
YES.
>> CAN YOU MAKE A COMMENT ON
PERFORMANCE OF VAGRANT VERSUS
NATIVE?
>> MY EXPERIENCE IS THAT I HAVE
NOT DONE ANYTHING THAT'S BEEN
INTERESTING ENOUGH TO DO
PERFORMANCE TESTING ON.
USUALLY THE -- USUALLY WHAT I'M
AFTER IS MAKING IT CLOSER TO MY
PRODUCTION ENVIRONMENT.
SO MY DESKTOP HAS 32 GIGS OF
RAM.
WHICH IS VERY DIFFERENT THAN ANY
OF MY SERVERS.
SO -- BUT I'M SURE THAT NATIVE
IS A LITTLE BIT BETTER.
BUT I DON'T HAVE A LOT OF
EXPERIENCE ON HOW MUCH.
YES.
>> SO I KNOW YOU CAN MAP
DIRECTORIES FROM OUTSIDE TO
INSIDE THE VM, LIKE YOUR SOURCE
DIRECTORY INSIDE THE VAGRANT
MACHINE SO YOU CAN WORK ON IT
LIVE.
WHAT ABOUT WHEN YOU NEED TO GO
THE OTHER WAY?
AND THAT WOULD BE INSIDE THE VM?
>> SURE, SO THE QUESTION THAT HE
ASKED IS, WHAT ABOUT WHEN YOU
NEED TO GO THE OTHER DIRECTION?
WHAT IF YOU -- WHAT ABOUT THINGS
INSIDE THE VM THAT YOU WANT TO
PULL OUT?
THE ANSWER IS THAT THAT GETS
REALLY TRICKY, ESPECIALLY IF YOU
HAVE A DIFFERENCE IN THE OS, BUT
INSIDE VERSUS OUTSIDE THE VM.
YOU CAN'T JUST PULL SOMETHING
FROM SITE PACKAGES ON TO YOUR
MASK.
NOW IF IT'S UBUNTU TO UBUNTU,
THAT'S BETTER.
BUT IT'S TRICKY.
IT ALSO GETS TRICKY WHEN YOU
NEED TO RUN SCRIPTS THAT CREATE
FILES LIKE, SAY, MAKE
MIGRATIONS.
THAT KIND OF SITUATION CAN GET
REALLY HAIRY.
>> GREAT.
LET'S THANK LUKE AGAIN FOR THAT
LAST-MINUTE SAVE.
[ Applause ]
   9
  10
  11
  12
  13
  14
  15
  16
  17
  18
  19
  20
  21
  22
  23
  24
  25
