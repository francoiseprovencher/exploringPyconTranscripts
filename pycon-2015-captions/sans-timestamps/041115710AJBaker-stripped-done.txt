SOUNDS LIKE YOU CAN HEAR ME.
TODAY I HAVE THE PLEASURE OF INTRODUCING JIM
BAKER FROM THE SUNNY STATE OF COLORADO.
HE'S AN AVID SKIER, A RACKSPACE EMPLOYEE AND A
CORE JTHON DEVELOPER AND TODAY HE WILL BE
SPEAKING ON HOW TO MAKE YOUR CODE MORE ROBUST.
TAKE IT AWAY, JIM.
>> THANKS.
[ Applause ]
>> I THINK THERE ARE PEOPLE OUT THERE, I CAN'T
QUITE SEE YOU BUT I'M GLAD TO HEAR THE CLAPS SO
ANY EVENT, SOME POSSIBLE QUESTIONS THAT YOU MIGHT
HAVE COMING INTO THIS TALK ARE, WHAT EXACTLY ARE
WEAK REFERENCES, ANYWAY?
HOW DO THEY DIFFER FROM STRONG REFERENCES?
WHEN WOULD I USE THEM?
MENTION CORE DOLOR JTHON, I ALSO WROTE A BOOK.
I DO LOTS OF COOL THING AT RACKSPACE INCLUDING
WORK ON JTHON.
I TEACH PRINCIPALS OF PROGRAMMING LANGUAGE AT THE
UNIVERSITY OF COLORADO-BOULDER, SO LOVE ALL THE
SORT OF FUN THINGS I GET TO DO.
FOR INSTANCE, IN THAT PARTICULAR CLASS I TEACH
THE FUNCTIONAL IDIOM WHILE WE'RE GOING THROUGH
FORMAL OPERATIONAL SEMANTICS, THAT SORT OF THING.
SO, YOU KNOW, YOU CAN READ THIS.
THIS COMES FROM OUR DOCUMENTATION, WEAK REFERENCE
TO AN OBJECT IS NOT ENOUGH TO KEEP THE OBJECT
ALIVE.
WHEN THE ONLY REMAINING REFERENCES TO A REFERENCE
ARE WEAK REFERENCES, GARBAGE COLLECTION IS FREE
TO DESTROY THE REFERENT RENT AND REUSE THE MEMORY
FOR SOMETHING ELSE.
HOWEVER, UNTIL THE OBJECT IS ACTUALLY DESTROYED,
THE WEAK REFERENCE MAY RETURN THE OBJECT EVEN IF
THERE ARE NO STRONG REFERENCES TO IT.
SO YOU -- IF YOU LOOKED AT THIS OR LOOKED AT THE
DEFINING PIP ON THIS THIS MIGHT NOT BE SATISFYING
IN TERMS OF UNDERSTANDING WHAT A WEAK REFERENCE
IS.
IT WAS INITIALLY PROPOSED IN PIP 205, IT WAS 'EM
MEANTED IN PIP 2.1, WHICH WAS RELEASED 14 YEARS
AGO SO THAT'S THE FLIP SIDE OF THIS, SHOULD WE BE
USING THIS IF IT'S SUCH A POWERFUL STRATEGY AS I
TRY TO CONVINCE YOU FOR THE TITLE OF THIS TALK.
SO I'M GOING TO SUGGEST PUT TOGETHER A LITTLE...
I'M GOING TO GO OVER TO A CONSOLE, SOME LIVE
DEMO -- LOOKS LIKE I'VE ALREADY STARTED SOMETHING
HERE.
SO I'LL JUST CLEAR IT OUT.
USING PYTHON 3.4 BECAUSE IT HAS BUILT-IN TAB
COMPLETION, WHICH IS SUPER HANDY.
SO LET'S SAY I WANTED TO FIND SOME CLASS THAT I'M
GOING TO REFERENT TO.
I'M JUST GOING TO DO A STRING...
SCROLL IT UP.
LET'S SEE HERE.
NO, THAT DOESN'T DO WHAT WE WANT.
HOLD ON.
WE'LL START FROM THE TOP.
BETTER?
OKAY.
SO WE'LL HAVE A CLASS LIKE THIS.
THIS IS BECAUSE STRINGS IN CPYTHON CANNOT BE JUST
WEAK-REFERENCED.
WE MADE IMPORT FROM WEAK REFERENCE -- LET'S JUST
DO IT THE EASY WAY.
AND WE'LL SAY THAT WE HAVE A WEAK REFERENCE SET.
OKAY.
SO WE'VE CREATED THIS COLLECTION.
BY THIS NATURE, YOU'RE GOING TO THINK I'M GOING
TO HAVE A WEAK REFERENCE TO ANY OF ITS ELEMENTS,
ANY OF ITS MEMBERS.
OKAY, SO WHAT DOES THAT MEAN?
I'M GOING TO JUST CREATE ONE, CREATE A FOO
OBJECT.
I WAS ABLE TO ADD IT.
I HAVE THIS SET, LET'S LIST IT.
WAIT, WHERE DID IT GO?
SO IMPORTANT THING TO KNOW IS THAT, THAT GC IS
NOW POSSIBLY GOING TO JUST -- I'M SORRY, YOU MAY
SEE THIS THING JUST IMMEDIATELY GO AWAY.
BECAUSE THE REFERENCE COUNTING FOR THAT FOO
OBJECT, THAT MY STREAMFOO OBJECT WENT TO ZERO,
THE WEAK REFERENCE WAS CLEARED OUT AND IT MOVED
OUT OF THAT SET.
IN SOMETHING LIKE JTHON IT WOULD ACT DIFFERENTLY,
HAVE TO WAIT FOR THE GARBAGE COLLECTOR TO CLEAR
THAT UP BUT IN CPYTHON IT COULD BE ALMOST
IMMEDIATE, DEPENDING UPON THE WAY REFERENCES ARE
HELD.
SO IN ORDER TO ACTUALLY HOLD ON TO THIS, MAYBE IT
TO HAVE TO GO AND CREATE SOME -- A -- SO I HAVE
THIS A OBJECT.
I COULD IMPORT SYS, DO A ROUGH COUNT ON THAT.
I WOULD SEE THAT'S ACTUALLY THREE, WHICH IS GOING
TO BE ONE MORE THAN IT ACTUALLY IS.
IT'S POSSIBLE THAT ACTUALLY THERE IS A FOOM
THAT'S ALREADY OUT THERE THAT'S ALREADY BEEN
IMPORTED, AND HOLDING THAT ADDITIONAL
REFERENCE -- IF YOU ACTUALLY -- YOU CAN DO THINGS
LIKE THIS, LIKE HOW MANY REFERENCES ARE THERE TO
ONE?
715 REFERENCES TO ONE.
HOW ABOUT ZERO?
579, EVEN 42 HAS A LOT OF REFERENCES TO IT.
IT'S ONLY WHEN YOU GO UP TO, LIKE, SOMETHING LIKE
THIS, THAT YOU WOULD ACTUALLY SEE, OH, THERE'S
JUST THIS ONE REFERENCE APPARENTLY OUTSTANDING
THAT'S REAL.
SO IF I DIDN'T ADD THAT TO MY SET -- SORRY,
PEOPLE, WHO ARE GOING TO NOT SEE THAT.
OOPS, LOOKS LIKE I...
OOPS.
HELPS IF I DO IT THE RIGHT WAY.
AND I DID LIST S, OBVIOUSLY IT'S GOING TO HOLD IT
BECAUSE THERE IS SOMETHING THAT IS HOLDING THAT
REFERENCE.
IF I DELETE A FROM THE -- MYNAME SPACE AND I LIST
S AGAIN, WELL, LOOKS LIKE IT POSSIBLY IS STILL
THERE.
LET'S DO IMPORT GC.
AND DO THAT AGAIN, AND IT'S GONE.
ALL RIGHT?
SO JUST SOME SIMPLE THINGS THAT WE'RE ADDING
INTUITION TOO.
STRONG REFERENCES, INCLUDING SOMETHING, A NAME
LIKE THAT A DO HOLD THAT OBJECT AND PREVENT IT
FROM, REMOVED FROM THAT WEAK SET.
BUT IF WE JUST ADDED IT WITHOUT ANY STRONG
REFERENCE WHATSOEVER, IT COULD JUST BE
IMMEDIATELY CLEARED OUT.
OKAY.
SO S WILL BE EVENTUALLY EMPTY IN THE CONTEXT OF
POTENTIALLY SOME GARBAGE COLLECTION.
SO WE'VE BUILT SOME INTUITION AND THE THING THAT
I WANT YOU TO JUST THINK ABOUT IS WHAT DO WE DO
WITH WEAK REFERENCES IN GENERAL?
IT'S TO PREVENT MEMORY AND RESOURCE LEAKS.
WE DON'T WANT TO BE HOLDING ON TO OBJECTS
UNNECESSARILY.
AND OF COURSE WE KNOW ABOUT THIS IN OTHER
CONTEXTS, SO, FOR EXAMPLE, IF I JUST WRITE CODE
LIKE THIS, YOU KNOW, I OPEN UP SOME FILE, AND I
DON'T EXPLICITLY CLOSE IT, DOES IT GET CLOSED?
WELL, AT SYSTEM SHUTDOWN IT WOULD BUT NOT
NECESSARILY WITHOUT GOING AND CAUSING RESOURCE
EXHAUSTION.
SO GARBAGE COLLECTION IS NOT MAGICAL, IT'S NOT
GOING TO JUST SAY, OH, THIS IS -- I KNOW YOU
DON'T NEED THIS.
INSTEAD IT'S GOING TO WORK ON SOME PRINCIPLES
AROUND HOW REFERENCES WORK.
SO DOESN'T MATTER IF IT'S REFERENCE COUNTING OR
SOME VARIANT OF MARK AND SWEEP, LIKE YOU SEE IN,
SAY, JAVA-BASED JTHON OR IN PYPY, OR SOME
COMBINATION AS WE CPYTHON WHICH ACTUALLY DOES DO
A FULL MARK AND SWEEP OCCASIONALLY.
SO GK CANNOT READ YOUR MIND.
YOU MAY BE A DEVELOPER, IT CANNOT DO THAT.
IT'S NOT SUFFICIENT.
NOW, YOU CAN GO AND DO MANUAL CLEARANCES, THIS IS
VERY MUCH LIKE IF YOU WERE WRITING C-CODE.
YOU COULD USE TRY FINALLY, THIS SORT OF PATTERN,
RIGHT?
YOU CAN APPLY SOME DEEPER KNOWLEDGE OF YOUR CODE,
OR YOU CAN DO SOME CLEAN-UP BY SOME OTHER SCHEME.
SO YOU MAY GO AND USE DUNDER DEL AS A FINALIZER.
SO, FOR EXAMPLE, SOCKET MAKE FILE DOES DO THIS.
SO IF YOU ARE GOING AND CREATING WHAT APPEARS TO
BE A FILE OBJECT ON A SOCKET, SOCKET MAKE FILE
WILL DO THIS FOR YOU AND ALLOW TO YOU RETURN SOME
NUMBER OF OBJECTS.
IT'S USED BY A NUMBER OF PRIMITIVES IN THE SOCKET
LIBRARY.
AS WELL AS TOOLS OUT THERE LIAR URL LIB IF I
REMEMBER PROPERLY.
BUT THE PROBLEM IS, IF IT DOESN'T LINE UP, AS I
MENTIONED EARLIER, WHO HAS SEEN TOO MANY OPEN
FILES?
OKAY.
THAT'S WHY YOU CAME TO THIS TALK.
YOU WANTED TO SOLVE YOUR PROBLEM.
SO THIS IMPLEMENTATION IS DONE THROUGH A SEPARATE
COUNTING THEME SO SOCKET MAKE FILE IS TRYING TO
DO THE RIGHT THING FOR YOU AND IF YOU LOOK AT IT,
IT'S GOING AND PREVENTING RESOURCE LEAKS ALONG
THESE LINES.
I THINK WE'VE PROBABLY SEEN DUNDER DEL BEFORE.
I HAVEN'T MENTIONED WEAK REFERENCES YET AFTER
THAT QUICK DEMO.
YOU MIGHT USE THE WIF STATEMENT WITH AUTOMATIC
RESOURCE MANAGEMENT.
YOU SHOULD BE DOING THIS.
SO, AGAIN, NO WEAK REFERENCES YET.
WE'RE KEEPING IT SIMPLE.
YOU DON'T HAVE TO BE IN THIS TALK BUT WHAT IF AN
OBJECT IS A CHILD IN A PARENT-CHILD RELATION, YOU
HAVE SOME SORT OF TREE.
YOU NEED TO TRACK ITS PARENT AND THE PARTICIPATE
WANTS TO TRACK ITS CHILD.
YOU MIGHT BE DOING IN FOR AN XPAT READER, NO,
YOU'RE NOT DOING AN XPAT READER BECAUSE YOU NO
LONGER USE THAT OLD LEGACY STUFF.
BUT I THINK YOU SEE THE POINT, IT DOES HAPPEN.
I'M GOING TO MAKE THAT EXAMPLE EVEN SIMPLER.
LET'S IMPLEMENT A DOUBLY LINGED LIST.
MAKE SOME PREFERENCE REFERENCES.
WE'LL ALSO ADD DUNDER DEL TO CLEAN UP SOME
RESOURCES, SOUNDS LIKE A GOOD COME THANKS.
AND WE MIGHT SEE THIS IN ORDERICT, WHICH IS A
GREAT COLLECTION IN THE COLLECTIONS LIBRARY.
SO PRESERVES THE WORD OF INSERTION.
YOU CAN GET THAT OUT WHEN YOU ITERATE IT OR
INDEX.
IT HAS GREAT PERFORMANCE WITH THE PERFORMANCE
BEING THE SAME AS RELEVANT DIX.
AND USES THIS DOUBLY LINKED LIST TO PROVE
INSERTION ORDER.
SO WHY IS AVOIDING STRONG REFERENCE CYCLES SO
IMPORTANT?
AGAIN, I'M TRYING TO MOTIVATE THIS WEAK REFERENCE
HAVE THE AGAIN, CPYTHON CG DOES BREATH COUNTING
BUT IT CANNOT GO TO ZERO IN THE PRESENCE OF THAT
CYCLE -- SORRY, A CYCLE CANNOT GO TO ZERO.
SO THE -- IN CONTRAST, WHAT WE CAN DO WITH
CPYTHON IS USE ITS SUPPORT FOR WEAK REFERENCES,
AND IN THAT CASE, IT STORES A LIST OF CONTAINERS
TO BE CLEARED OUT INCLUDING PROXIES.
THAT'S PERFORM WHEN THE PREFERRED OBJECT IS
DEALLOCATED WHICH OCCURS WHEN THAT REF COUNT GOES
TO ZERO.
NO WAITING ON THE GARBAGE COLLECTOR AND WE CAN
SEE THAT IN THIS CODE HERE.
FOR INSTANCE, IF I'M DEALLOCATING A SET, FOR
EXAMPLE, I ALWAYS ENCOURAGE IF YOU REALLY WANTS
TO SEE WHAT'S GOING ON, LOOK AT THE SOURCE, LUKE,
USE THE SOURCE.
SO IF THERE IS A WEAK REFERENCE LIST, THERE IS A
LIST OF REFERENCES THAT ARE REFERRING TO THIS
OBJECT.
THIS WILL BE FILLED IN.
WHEN THIS IS SEEN AS BEING DEALLOCATED, WHEN ITS
REF COUNT GOES TO ZERO, THIS WILL CLEAR IT OUT.
ONE THING I DIDN'T TELL YOU IS WHEN YOU ADD A
WEAK REFERENCE TO SOMETHING, WE DID SEE IT IN
THAT ONE EXAMPLE WHEN I ADDED THAT AS A MEMBER.
THE REF COUNT FOR THAT OBJECT IS NOT INCREMENTED.
ANOTHER THING THAT'S A LITTLE TAKE-AWAY HERE IS
THAT THERE ARE A LOT OF OBJECTS IN CPYTHON THAT
ARE NOT WEAK REFERENCABLE, AND THIS IS BECAUSE
THIS DOES ADD SOME OVERHEAD IN TERMS OF ADDING
POTENTIALLY THIS EXTRA LIST.
OKAY.
SO WHY DO YOU WANT TO AVOID THOSE STRONG
REFERENCE CYCLES?
WELL, THEY HAVE TO WAIT FOR MORE -- CGC.
CPYTHON'S CG IS UNFORTUNATELY STOP THE WORLD AND
IF YOU LOOK AT THE DECISION CRITERIA IN GC SET
THRESHOLD, EVEN THOUGHT IT'S GENERATIONAL, YOU
CAN SEE IT'S SOMEWHAT PROBLEMATIC TO RELY ON NOT
EXHAUSTING, SAY, FILES, OR OTHER EXPENSIVE
RESOURCES OR EVEN MEMORY.
YOU KNOW, MY EXPERIENCE WITH GARBAGE COLLECTOR IS
THAT THEY WORK WELL EXCEPT WHEN THEY DON'T.
THAT MAY BE YOUR EXPERIENCE, TOO.
ESPECIALLY AROUND SOME SMALL OBJECT THAT LAPSE TO
BE POINTING TO SOME EXPENSIVE EXTERNAL RESOURCE.
ESPECIALLY, AGAIN, WITH SOMETHING WHERE YOU MIGHT
RUN OUT OF FILES.
ANY EVENT, THERE WAS A BUG IN ORDER DICT AROUND
THIS VERY ISSUE.
NOW, FOR 2.7 THEY REMOVED THE DUNDER DEL.
I'LL EXPLAIN WHY IN JUST A MOMENT.
FOR 3.2, THEY REPLACED DEL WITH WEAK REFERENCES,
AND FOR 3.4, USING DUNDER DEL, THIS FINAL EASIER
NO LONGER MEANS REF CYCLES OR UNCOLLECTIBLE
GARBAGE, WHICH IS WHY THEY HAD TO DO THIS.
SO WE SEE IN ISSUE 9.25, AND AGAIN MAYBE IT'S
JUST MY -- AS A DEVELOPER HERE OF PYTHON, BUT I
LIKE TO READ THE BUGS.
I LIKE TO SEE WHAT'S GOING ON.
AND WE SEE THIS ISSUE 9.825, THE REASON WHY.
WE HAD TO REMOVE DUNDER DEL FROM THE DEFINITION
OF ORDEREDDICT BECAUSE THIS PRESENTS USER
CREATE-SELF-REFERENCING DICTIONARIES FROM
BECOMING PERMANENTLY UNCOLLECTIBLE GC GARBAGE.
AND POTENTIALLY ALSO HAVING STRONG REFERENCES TO
OTHER THINGS WHICH COULD BE PROBLEMATIC.
DON'T WANT UNCOLLECTIBLE GARBAGE.
SO THE OTHER THING IN 3.2, WE REPLACED DEL WITH
WEAK REFS, AND AGAIN THERE IS THIS FURTHER POINT
THAT WE NO LONGER HAVE TO WORRY ABOUT
UNCOLLECTIBLE GARBAGE.
SO LET'S LOOK AT THE IMPLEMENTATION OF ORDER
DICT.
SO, WHAT I FIND INTERESTING ABOUT STUFF LIKE THIS
IS, AGAIN, YOU CAN -- YOU CAN LOOK INTO THE CODE.
THIS IS ACTUALLY HOW YOU MIGHT, YOU KNOW -- YOU
WOULD SEE, FOR EXAMPLE, THIS ONE USE OF THE PROXY
MECHANISM, THOUGH WHAT'S NICE WITH WEAK REFERENCE
PROXY, IS IT BASICALLY CREATES A WEAK REFERENCE
AND DOES ALL THE WORK IN TERMS OF MAKING IT LOOK
LIKE THE OBJECT THAT'S REFERENCING.
SO YOU DON'T HAVE TO GO AND DO ADDITIONAL STEP,
ADDITIONAL FUNCTION CALL IN ORDER TO GO AND
DE-REFERENCE THAT WEAK REFERENCE.
IT SETS UP PREVIOUS, TO POINT TO THIS, BECAUSE
NOW WE'RE GOING AND ADDING THIS TO THAT LIST AND
THE WAY THIS IS DONE IS DOUBLY LINKED LIST WITH
THE ROOT POINTING TO THE END.
AFTER THAT POINT, OUR PREVIOUS ALWAYS HAS A
WEAK -- IS ALWAYS WEAK-REFERENCING THE PREVIOUS
ITEM.
OUR FORWARD LINK IS JUST A STANDARD LINK, A
STANDARD STRONG REFERENCE.
WHY WOULD WE WANT TO DO THAT?
BECAUSE IF WE HAVE WEAK REFERENCES ON BOTH SIDES,
AND NOTHING ELSE IS REFERENCING IT, WE'LL SEE
WHAT WE SAW WITH THAT INITIAL EXAMPLE WITH WEAK
SET, THE OBJECT IS SIMPLY POTENTIALLY IS JUST
GOING TO GO AWAY AT ANY TIME.
NOW HERE ARE SOME OTHER INTERESTING THINGS.
YOU SEE THERE IS THE USE OF SLOTS TO MINIMIZE
OVERHEAD.
BECAUSE YOU'RE USING SLOTS, YOU HAVE TO GO AND
ACTUALLY PUT WEAK REF IN IT AS ONE OF THE SLOT
NAMES.
BY THE WAY, THESE ARE NO-OPS AND IMPLEMENTATIONS
LIKE JTHON.
I DON'T KNOW WHAT THE CASE IS IN PYPY, PROBABLY
SIMILAR.
SO THE CRUX OF THIS CODE IS SIMPLY GOING AND
DOING THIS WEAK REFERENCE PROXY.
AND THAT'S REALLY IT.
I -- WE WENT THROUGH SO FAST THERE, I'M NOT
CERTAIN THAT REGISTERED.
THERE WASN'T A LOT OF WORK NECESSARY IN ORDER TO
GET THIS WITH THE DESIRED BEHAVIOR.
OKAY?
ALL WE HAD TO DO WAS COME UP WITH THIS SCHEME
WHERE WE RECOGNIZED THAT ONE SIDE OF THE
RELATIONSHIP WE WERE GOING TO GO AND USE A STRONG
REFERENCE.
ARBITRARILY WE JUST SIMPLY USED THE NEXT
REFERENCE AS A STRONG REFERENCE.
ON THE FLIP SIDE, WE WANTED TO GO AND MAKE
CERTAIN THAT THERE WASN'T A REFERENCE CYCLE.
WELL, THAT WAS EASY ENOUGH TO DO.
THE PREVIOUS WOULD BE A WEAK REFERENCE.
YOU LINE THOSE TWO TOGETHER AND NOW WE DON'T HAVE
THE SCENARIO WHERE THIS -- REMOVING AN ITEM FROM
THIS ORDERED DICTIONARY MIGHT TAKE SOME TIME FOR
IT TO BE REMOVED JUST BECAUSE THE -- WE HAVE THIS
GARBAGE OR EVEN WORSE, UNCOLLECTIBLE GARBAGE.
ALL RIGHT.
SO THAT'S SOME MOTIVATION BUT THE REALITY IS
WE'RE NOT NORMALLY WRITING ORDEREDDICT.
WE'RE GOING TO BE DOING THINGS LIKE A LOOK-UP
TABLE, WHERE WE'RE GOING TO WANT TO PROVIDE MORE
INFORMATION ABOUT SOME OBJECT.
WE DON'T WANT TO EXTEND OR MUCKY PATCH IT SO FOR
THOSE OF YOU WHO LIKE DOING THIS AND I UNDERSTAND
WHY, YOU'RE LIKE, HEY, THERE IS THIS FANTASTIC
DID YOU UNDERSTANDER DICT AROUND FOR THIS OBJECT
AND I'LL JUST NAME SOMETHING WITH -- PUT IT IN
THERE AND THERE WON'T BE ANY COLLISION OR WE'LL
EVEN ADD IT TO THE CLASS AND THERE WON'T BE ANY
COLLISION BECAUSE I'M JUST ADDING METHODS TO IT,
SO WHO HAS DONE THAT?
WHO'S MONKEY PATCHED OR USED DUNDER DICT IN INTH
WAY?
NO ONE, REALLY?
YOU'RE NOT FESSING UP.
NO, YOU ALREADY ARE USING THIS MECHANISM, RIGHT?
SO YOU COULD USE A DICTIONARY AS THE LOOK-UP
TABLE, WHERE YOU USE THE OBJECT AS A KEY, BUT NOW
YOU NEED TO MANUALLY CLEAN UP THAT DICT WHEN THE
OBJECT IS NO LONGER NEEDED.
AND MAYBE YOU KNOW WHEN IT NEEDS TO BE CLEANED UP
OR MAYBE YOU DON'T BECAUSE YOU'RE DOING IT IN THE
CONTEXT OF SOME LIBRARY.
SO IT'S ESPECIALLY USEFUL FOR LIBRARIES.
WE CAN USE A WEAK KEY DICTIONARY.
VERY SIMILAR SORT OF IDEA THAT WE SAW WITH THE
ORDER DICTONE SIDE IS GOING TO BE WEAK AND THE
OTHER HAS A STRONG REFERENCE.
IN THIS PARTICULAR CASE, IT'S THE KEY THAT IS
WEAK.
WE INSERT THE OBJECT AS THE KEY.
WE CAN ASSOCIATE ANYTHING WE WANT AS THE VALUE.
A LIST OF PROPERTIES, SOME OTHER OBJECT, SO ON,
SO FORTH.
WHEN THE OBJECT IS REMOVED, I MEAN, IT'S -- IT
GOES AWAY BECAUSE IT'S NO LONGER IN USE SOMEWHERE
ELSE.
NOTHING ELSE IS HOLDING A STRONG REFERENCE TO IT.
NOW, THE CLEAN-UP OF THAT DICTIONARY WILL OCCUR.
OKAY, SO THAT KEY, THE ITEM FOR THAT KEY WILL BE
REMOVED AND IF THERE'S NOTHING HOLDING ON TO
THOSE ASSOCIATIVE VALUES IN, SAY, THAT LOOK-UP
TABLE, THAT WILL ALSO BE CLEANED UP.
SO WE HAVE A LOOK-UP TABLE THAT WORKS THE WAY WE
WANT IT.
THE OBJECT IS GONE, THIS -- THESE INTERESTING
ADDITIONAL PROPERTIES THAT WE WERE ASSOCIATING
WITH IT ARE GONE NOW, AS WELL, BECAUSE NOTHING
ELSE IS HOLDING ON TO IT.
SO LET'S LOOK AT ONE EXAMPLE.
DJANGO SIGNALS.
SO DJANGO INCLUDES THE SIGNAL DISPATCHER, ALLOWS
FOR DE-COUPLED APPLICATIONS.
TO GET NOTIFIED WHEN ACTIONS OCCUR ELSEWHERE IN
THE FRAMEWORK.
THIS IS EXACTLY THE SORT OF THING WHERE YOU DON'T
KNOW IN ADVANCE NECESSARILY WHO'S TALKING TO YOU.
THE REALITY LOOKS LIKE I GOT A LITTLE BIT CUT OFF
HERE IS THAT IT'S REALLY JUST A COUPLE LINES TO
DO THIS SET-UP.
YOU HAVE TO STILL SET UP WHAT THAT CACHE IS BUT
THE CHOICE OF USING A WEAK KEY DICTIONARY HERE IS
JUST A COUPLE LINES WHERE, REALLY, THE ONLY EXTRA
LINE HERE IS ARE WE USING CACHING OR NOT, AND IF
WE'RE NOT USING CACHING, WE'LL JUST HAVE THIS
EMPTY DICTIONARY THAT WE WON'T USE AT ALL.
JUST TO HAVE SOMETHING AS A PLACEHOLDER.
SO THAT'S PRETTY USEFUL.
BUT THEN YOU LOOK AT THE WEAK REF -- WEAK VALUE
DICTIONARY AND YOU WONDER, WELL, WHAT IS THAT
GOOD FOR?
WHY IS THAT THERE?
SO IF YOU GO AND DO SOME TECH SEARCH IN THE
CENTERED -- STANDARD LIBRARY OR GO OUT TO PYPY,
DO SOMETHING SIMILAR, YOU'LL SEE IT BEING USED IN
A NUMBER OF PLACES.
BEING USED BY MULTI-PROCESSING, BY THE LOGGING
MODULE, SO ON, SO FORTH, BUT, AGAIN, WHY WEAK
VALUES?
WELL, IT'S USEFUL WHEN YOU WANT TO TRACK THE
OBJECT BY SOME I.D., ITS NAME, A NUMBER AND SOME
TABLE, IT'S PROCESS I.D.
OKAY?
BUT YOU DON'T WANT THE FACT THAT IT'S -- THAT YOU
HAVE A PROCESS I.D. TO A PROCESS MAPPING TO NOT
SUPPORT GARBAGE COLLECTING THAT PROCESS.
I MEAN, YES, IT IS EXPENSIVE RESOURCE IS GOING TO
GO AWAY IN THE CASE OF A PROCESS BUT YOU'RE STILL
HOLDING ON TO IT UNNECESSARILY.
SO MAYBE THERE IS SOME OPERATING SYSTEM CLEAN-UP
THAT YOU CAN DO OR EXPECT BUT, AGAIN, NOT ALWAYS.
ALL RIGHT.
SO ONCE THAT OBJECT IS GONE, ONCE WE NO LONGER
NEED TO HOLD ON TO THAT WEAK VALUE, IT'S GOING TO
GO AWAY.
NOW, INTERESTINGLY ENOUGH, WHILE THAT OBJECT IS
AROUND, YOU'RE GOING TO BE HOLDING ON TO THAT
SMALL INTEGER OR STRING BUT GENERALLY WE DISCOUNT
THAT.
ONE PLACE THAT MIGHT HAPPEN IS YOU START UP LOTS
AND LOTS OF THREADS.
AND YOU MAY JUST SEE THAT, YOU KNOW, THIS -- I'M
NOT GOING TO SEE THOSE THREADS' I.D.s GO AWAY
UNTIL THAT PARTICULAR THREAD ITSELF IS NO LONGER
DE-REFERENCED -- NO LONGER REFERENCED, RATHER.
OKAY.
SO HERE'S A LITTLE BIT OF GUIDANCE IN TERMS OF
THINKING ABOUT WHY YOU MIGHT GO AND USE A WEAK
REFERENCE IN ONE PLACE OR ANOTHER.
AND IT'S REALLY THE CONSIDERATION OF WHAT IS THE
OBJECT LIFE CYCLE INDEPENDENCE?
SO ONE SIDE MAY DEPEND ON THE OTHER BUT NOT VICE
VERSA.
SO YOU'RE DOING TO USE WEAK REFERENCES FOR THE
INDEPENDENT SIDE.
THE PROCESS IS TERMINATED.
WELL, YOU NO LONGER NEED TO LOOK IT UP BY PROCESS
I.D., NO LONGER MATTERS, RIGHTS?
JUST LIKE THE WEAK VALUE DICTIONARY, ALL RIGHT?
COULD YOU COMBINE BOTH IDEAS TOGETHER?
WELL, YEAH, BOTH SIDES COULD BE INDEPENDENT.
SO GYTHON IMPLEMENTS THIS INTO THE HINDER
PATTERN, YOU MAY WANT TO WRAP THE JTHON CLASS TO
ITS PYTHON WRAPPERS, INCLUDING FOR SUPPORT FOR
SUBCLASSING THAT JAVA CLASS.
YOU MAY BE THAT PYTHON CLASS MAY BE USED BY JAVA
CLASSES SO, AGAIN, THERE WILL BE -- I'M SORRY,
PYTHON CLASSES USING JAVA CLASS SO THERE WILL BE
SOME STRONG REFERENCE FROM THAT PYTHON CODE SO IN
BOTH CASES, YOU MAY HAVE STRONG REFERENCES BUT
THE FACT THAT THERE IS THIS MAPPING, THIS
ONE-TO-ONE MAPPING, YOU JUST WANTS TO ENSURE
THERE CAN ONLY BE ONE AND WHEN EITHER SIDE GOES
AWAY, IT SHOULD ALSO GO AT THAT POINT.
SO YOU DON'T UNNECESSARILY HOLD ON TO SOME
RESOURCE AND LEAK.
SO EITHER MIGHT GO AWAY.
THE JAVA CLASSES IN THIS PARTICULAR CASE WILL BE
GARBAGE COLLECTED IF NO CLASS LOADER OR THE
OBJECTS OF THAT CLASS EXIST.
BUT THE PYTHON USAGE OF THIS CLASS -- IF THERE'S
NO USAGE ON THE PYTHON SIDE, SO YOU DON'T WANT
THAT MAPPING TO UNNECESSARILY HOLD THINGS.
IF THEY ARE STILL IN USE, YOU WANT IT TO BE HELD
BUT IF THEY GO AWAY, THEN THERE'S NO POINT FOR
THIS MAPPING AT THAT POINT.
THERE IS A PURE PYTHON RECIPE AVAILABLE FOR THIS.
I HAVEN'T REALLY EVALUATED THIS.
THERE IS AN EASY JTHON VERSION BECAUSE I LIKE TO
SHOW OFF GYTHON OCCASIONALLY, AND HERE WE HAVE
IT, A WEAK KEYED VALUE DICTIONARY, IT'S SUBCLASS
IS DICT SO WE CAN GET ITS CAPABILITIES.
WE USE A BUILDER, OH, GOSH, I DIDN'T CHECK THIS
ONE PIECE BUT IT REALLY IS JUST ARG S AND KEYWORD
ARGS.
FOR COMPLETENESS, YOU NEED TO ADD THESE METHODS
BUT THESE ARE TRIVIAL AND THERE IS A THING IN THE
GYTHON LIB MODULE THAT YOU CAN IMPORT THAT ALLOWS
TO YOU BUILD DICTIONARIES WITHOUT ANY JAVA
COMPATIBLE CONCURRENT MAP THAT YOU WANT.
AND ASSIGN IT TO BEING OF A CERTAIN CLASS, THIS
WOULD KEY VALUE DICTIONARY AND YOU'RE DONE AND
NOW YOU HAVE A WEAK KEY VALUE DICTIONARY FOR
REAL.
THAT IS CONCURRENT AND SAFE.
AND I AM DONE.
ANY QUESTIONS?
[ Applause ]
>> AUDIENCE:  IF THERE ARE ANY QUESTIONS FOR JIM,
THERE IS A MICROPHONE RIGHT THERE.
WE HAVE TIME FOR ONE QUESTION, PROBABLY.
OTHERWISE I'M SURE YOU'LL BE ABLE TO GRAB HIM IN
THE HALL AFTERWARDS.
>> GREAT.
ALL RIGHT.
THANK YOU VERY MUCH.