MIGUEL GRINBERG.
HE IS AN ENGINEER AT RACKSPACE.
HE ALSO QUITE LITERALLY WROTE THE BOOK ON
FLASK DEVELOPMENT, SOMETHING THAT'S BEEN
EXTREMELY HELP ME TO ME AS I'VE BEEN WORKING
ON PYTHON WEB ENGINEERING.
IT'S VEIL FROM O'REILLY.
REALLY IMPROVING THE QUALITY OF YOUR REST
APIS SO I'LL LET MIGUEL TAKE IT FROM THERE.
[ APPLAUSE ]
>> THANK YOU.
OKAY.
FIRST OF ALL, I WANT TO SAY SOMETHING REALLY
QUICK.
THIS IS SUPPOSED TO BE A GOOD DAY FOR ME BUT
I JUST LEARNED THAT MY MOM PASSED AWAY TODAY
UNEXPECTEDLY.
SO I'M GOING TO DEDICATE THIS TALK TO HER.
THANK YOU.
[ APPLAUSE ]
THAT WAS A GREAT INTRODUCTION.
THANK YOU.
SO MOST OF THIS IT'S ALREADY, YOU KNOW,
DUPLICATION.
BUT YES, I WORK FOR RACKSPACE ON OPENSTACK.
I HAVE A BUNCH OF EXTENSIONS FOR FLASK.
OPENSOURCE FOR GITHUB, AND I HAVE A BLOG THAT
MANY OF YOU FOUND ME AND TOLD ME THAT YOU
FOUND IT USEFUL, SO THAT MAKES ME VERY HAPPY.
AND THEN THERE'S THE BOOK AND A BUNCH OF
OTHER THINGS THAT I DID WITH O'REILLY.
SO BASICALLY, IF I CAN SUMMARIZE THIS, I LIKE
FLASK.
THAT'S HOW I'LL PUT IT.
SO TODAY I'M GOING TO TALK ABOUT RESTFUL
APIS.
THIS IS A TOPIC THAT YOU'RE GOING TO FIND
PLENTY OF PEOPLE THAT ASK I WANT TO DO THIS
OR THAT AND HOW DO I DO IT IN AN API, AND
THEN ALWAYS SOMEONE COMES UP AND SAYS NO,
THAT'S NOT RESTFUL, DON'T DO IT.
AND THEN, YOU KNOW, THE PERSON THAT ASKED THE
QUESTION IS LEFT WITH NOTHING.
HOW DO I DO IT?
SO IT'S REALLY VERY CONFUSING.
AND ONE OF THE PROBLEMS IS THAT THE REST
PAPER, THE PAPER THAT INTRODUCED EVERYTHING
WHICH WAS PUBLISHED IN THE YEAR 2000 BY ROY
FIELDING IS VERY HIGH LEVEL.
IT DOESN'T TALK ABOUT DOING REST OVER HTTP.
IT JUST DESCRIBES AT A VERY HIGH LEVEL HOW
REST SERVICE SHOULD BEHAVE, BUT IT DOESN'T
SAY HOW TO MAP THAT INTO HTTP, WHICH IS WHAT
WE ALL USE TO IMPLEMENT OUR APIS.
SO THE OTHER THING THAT WILL BE USEFUL IS IF
THERE WAS GOOD EXAMPLES, REFERENCE
IMPLEMENTATIONS THAT WE CAN ALL FOLLOW.
AND TO MY KNOWLEDGE, THERE ARE NONE.
I DON'T KNOW ANY API THAT I CAN SAY THAT IS
100% RESTFUL, NOT EVEN THE BIG ONES.
SO ANOTHER PROBLEM, I'M SAYING I DON'T THINK
THEY'RE RESTFUL, BUT IT'S ME THINKING THAT
THEY'RE NOT RESTFUL.
THE REST PAPER DOESN'T REALLY SAY HOW HTTP
SHOULD IMPLEMENT THESE APIS, SO IT'S REALLY
MY OPINION, AND THERE'S A LOT OF PEOPLE
MAKING OPINIONS.
PEOPLE GO MAKE OPINIONS ON THE INTERNET, OR
THEY GO TO CONFERENCES AND VOICE THEIR
OPINIONS.
AND HERE I AM.
I'M DOING THE SAME THING.
SO, YOU KNOW, IT'S KIND OF A MESS.
SO SOMETHING THAT I HEARD MENTIONED A LOT IN
THE OPENSTACK ENVIRONMENT IS THAT PEOPLE SAY
WE'RE DOING PRAGMATIC REST.
AND BASICALLY, THAT'S AN EXCUSE TO SAY WE ARE
TAKING THE PARTS OF REST THAT WE LIKE, AND
WE'RE IGNORING THE REST OR WE'RE IGNORING THE
PARTS THAT WE DON'T UNDERSTAND.
AND IS THAT A PROBLEM?
I DON'T THINK IT IS A PROBLEM.
THE PURISTS SAY YOU SHOULD NOT CALL YOUR API
A REST API, BUT WHO CARES, RIGHT?
YOU CAN BENEFIT FROM THE REST PRINCIPLES EVEN
IF NOT ALL OF THEM, JUST SOME.
SO IT'S STILL A GOOD THING TO -- YOU KNOW, TO
FOLLOW AS MANY AS YOU FIND USEFUL.
SO TO BE RESTFUL ACCORDING TO THE PURISTS,
YOU SHOULD ABIDE BY SIX RESTFUL CONSTRAINTS.
THESE ARE THE SIX THAT ARE SPECIFIED IN THE
ORIGINATING PAPER.
SO THESE ARE THE SIX LISTED HERE IN THE ORDER
THEY APPEAR ON THAT PAPER, ON THAT DOCUMENT.
IT'S REALLY AMAZING THAT SOMETHING THAT CAN
BE LISTED SO CONCISELY IS SO COMPLEX.
SO WHAT I DID WITH THESE SIX IS I RATED THEM
FROM EASY, MEDIUM OR HARD.
SO I'M GOING TO GO OVER SIX OF THEM SORTED BY
COMPLEXITY.
AND THEN AFTER I'M DONE WITH THIS, WHICH
SHOULD BE -- IT'S A BRIEF OVERVIEW.
I'M NOT GOING TO GO INTO A LOT OF DETAIL.
AFTER I'M DONE WITH THIS, I'M GOING TO SHOW
YOU AN EXAMPLE.
THAT'S ANOTHER PROBLEM.
A LOT OF PEOPLE, PURISTS, THEY SAY YOU SHOULD
NOW DO THIS, YOU SHOULD DO THAT.
BUT THEY DON'T HAVE ANYTHING TO BACK IT UP.
SO WHAT I'M GOING TO DO HERE IS I'M GOING TO
SHOW YOU WHAT I THINK IS A DECENT MODEL.
IT'S REASONABLY RESTFUL.
THE PURISTS WOULD SAY THAT IT'S NOT QUITE.
I THINK IT'S CLOSE IF IT'S NOT RIGHT THERE ON
THE MARK.
SO LET'S START.
SO THE FIRST ONE IS OPTIONAL.
SO YOU CAN IGNORE IT.
DON'T READ THIS.
JUST GO ABOUT THINGS WITHOUT KNOWING THIS,
AND YOU'RE FINE BECAUSE YOU CAN DO IT OR
DON'T, AND IT'S FINE ANYWAY.
AND IT'S CODE-ON-DEMAND.
WHAT THIS MEANS IS THAT YOU CAN HAVE THE
SERVER CAN PROVIDE THE CLIENT CODE TO
EXECUTE.
SO WE SEE THIS EVERY TIME IF WEB
APPLICATIONS, RIGHT?
YOU GO TO TWITTER.COM, FACEBOOK.COM, OR
ANYTHING.COM AND YOU DON'T ONLY GET HTTP OR
JAVASCRIPT, YOU GET A BUNCH OF SCRIPTS AND
THEN THAT RUNS IN THE BROWSER.
FOR APIS, I DON'T THINK THIS IS THAT USEFUL,
SO I'VE NEVER SEEN IT DONE SUCCESSFULLY.
AND APIS, THE RESTFUL APIS ARE ALL ABOUT
SCALABILITY.
IF YOU WANT TO SUPPORT AS MANY CLIENTS AS YOU
CAN YOU CAN'T A LEE RELY ON THE BROWSER TO BE
THE ONLY TYPE OF CLIENT.
WHAT WOULD YOU SEND?
IF YOU SEND JAVASCRIPT, WHAT IF IT'S AN
IPHONE RUNNING OBJECTIVE C OR THRIFT.
IT KIND OF CREATES A PROBLEM.
SO I CAN DO THIS.
AND IF YOU KNOW OF ANYTHING, ANY PRODUCT THAT
DOES THIS SUCCESSFULLY, I WOULD LIKE TO KNOW
BECAUSE I HAVEN'T SEEN ANY.
SO THE NEXT I'M GOING TO USE PICTURES, SO
THIS WILL BE EASIER.
SO THE SECOND ONE, WHICH IS IN THE EASY
CATEGORY IS CLIENT-SERVER.
AND THIS SHOULD BE -- EVERYBODY GETS THIS.
THIS IS SUPER EASY.
THE IDEA HERE IS THAT YOU SHOULD HAVE THE API
SEPARATED FROM THE CLIENT, AND THAT DOESN'T
MEAN THAT THEY NEED TO BE PHYSICALLY IN
DIFFERENT MACHINES, DIFFERENT POSTS.
THEY NEED TO BE A DIFFERENT PROCESS.
THE API SHOULD BE A DIFFERENT PROCESS AT
LEAST.
IT CAN BE POSTED ON THE SAME MACHINE AS THE
CLIENT.
AND THE IMPORTANT THING IS THAT THE CLIENT
AND THE SERVER TALK OVER A NETWORK PROTOCOL.
BUT WHY?
REMEMBER, I SAID I WAS GOING TO HAVE TO
REPEAT SCALABILITY A LOT.
SO IF YOU DO IT THIS WAY, THEN IT'S SUPER
EASY TO GO TO THIS.
NOW, YOU HAVE ONE API SERVING THE CLIENTS.
SO THIS IS ONE ASPECT OF SCALABILITY THAT IS
BASICALLY, IF YOU FOLLOW THIS PRINCIPLE, YOU
GET IT FOR FREE.
OKAY?
SO NEXT WE'RE GOING INTO THE MEDIUM
COMPLEXITY ONES.
THE NEXT ONE IS CALLED LAYERED SYSTEM.
WHAT THIS SAYS IS THAT THE CLIENT AND THE
SERVER MAY NOT TALK DIRECTLY, THAT THERE
MIGHT BE SOME MYSTERIOUS BLOCKS THAT NOBODY
KNOWS WHAT IT DOES IN THE MIDDLE.
THE CLIENT DOESN'T KNOW IT'S NOT TALKING TO A
SERVER.
THE CLIENT TALKS TO AN INTELLECTUAL PROPERTY
ADDRESS AND A PORT.
IT DOESN'T KNOW IF IT'S A REAL SERVER OR
INTERMEDIATE SERVER, AND THE SAME THING ON
THE OTHER SIDE.
THE SERVER GETS REQUESTS AND IT DOESN'T KNOW
IF IT'S GETTING THEM FROM REAL CLIENTS OR
FROM SOME BOX THAT IS IN THE MIDDLE.
SO THE ONLY ASPECT OF THIS IF YOU'RE
DEVELOPING AN API IT'S IMPORTANT TO KEEP IN
MIND THAT IS ON THE SERVER THIS PREVENTS YOU
FROM IDENTIFYING YOUR CLIENTS, YOU SEE
HEADERS IN THEIR REQUESTS.
RIGHT?
THIS GUY, THIS SERVER HERE IS GOING TO GET
ALL REQUESTS FROM THE SAME CLIENT.
THERE'S NO WAY IT CAN TELL WHO IS THE CLIENT.
RIGHT?
THERE ARE OTHER WAYS.
I'M GOING TO SHOW YOU OTHER WAYS TO IDENTIFY
CLIENTS.
SO THAT'S THE ONLY LIMITATION.
AND ONCE AGAIN, IF YOU DO THIS, YOU GET THIS
FOR FREE.
SO NOW THAT BOX IN THE MIDDLE THAT I DIDN'T
TELL YOU WHAT IT IS, ONE OF THE POSSIBLE
FUNCTIONS IS THAT THIS GUY IS A LOAD
BALANCER.
SO YOUR API STARTS TO BECOME SUCCESSFUL, AND
YOU GET LOAD.
THE SERVER BECOMES SLOW.
JUST THROW MORE SERVERS TO THE CLIENT.
THERE'S ABSOLUTELY NO DIFFERENT.
THEY KEEP SENDING THEIR REQUEST TO THE SAME
API REPORT AND THE ONLY DIFFERENCE IS THE
RESPONSES COME BACK QUICKER.
THE SERVER RESPONSE IS FASTER, RIGHT?
AND YOU CAN KEEP SCALING THIS WAY FOR CENTRAL
SCALING.
NEXT IS CACHE.
WHAT THIS ONE IS SAYING IS THAT THE API
SERVER SHOULD PROVIDE CACHING DIRECTIVES SO
THAT CACHISTS ARE IN THE MIDDLE.
SO FOR EXAMPLE, THAT BOX IN THE MIDDLE COULD
ALSO BE A CACHE.
COULD CACHE THE RESPONSES.
SO THAT IF THE SAME REQUEST COMES OVER AND
OVER, IT CAN PROVIDE A RESPONSE WITHOUT DOING
A TRIP TO THE ACTUAL SERVER.
15:27:31BUT GOING BACK TO TIE INTO THE LAYERED SYSTEM
THAT WE'VE SEEN BEFORE, YOU CAN ALSO HAVE
CACHES IN THE CLIENTS, AND IN FACT, IF YOU
HAVE WEB BROWSERS AS CLIENTS, YOU DO HAVE A
CACHE.
ALL OUR BROWSERS HAVE A CACHE.
SO YOU MAY NOT EVEN NEED TO GO OUT OF YOUR
CLIENT MACHINE TO ANSWER A REQUEST THAT'S
FREQUENTLY USED.
SO THIS IS CACHE.
OKAY?
UNFORTUNATELY, THE NEXT TWO, THE HARD ONES, I
COULDN'T COME UP WITH PICTURES.
I'M SORRY.
THESE ARE HARDER TO REPRESENT.
SO I DON'T HAVE PICTURES FOR THESE.
THIS GIVES A LOT OF ANGST TO DEVELOPERS, TO
WEB DEVELOPERS, PEOPLE THAT ARE USED TO
CREATE WEB APPLICATIONS, TRADITIONAL WEB
APPLICATIONS.
THEY EXPECT THE API WILL LOG USERS IN AND
THEN REMEMBER THEM.
AND STATE LESS SAYS, THIS CONSTRAINT SAYS
THAT YOU CAN'T DO THAT.
AND THE PROBLEM IS THAT WHEN YOU HAVE
SESSIONS, IT COMPLICATES SCALING.
IMAGINE BEFORE WE WERE SEEING THAT WE CAN GO
FROM ONE TO THREE SERVERS.
IF YOU'RE STORING SESSIONS IN THE ONE SERVER
THAT YOU HAVE, WHEN YOU GO TO THREE, WHAT DO
YOU DO?
WHERE DO YOU PUT THE SESSIONS?
RIGHT?
HOW DO YOU KNOW THAT THE CLIENT WILL GO
ALWAYS TO THE SERVER THAT HOLDS THAT SESSION?
SO IT COMPLICATES THINGS.
IT CAN BE SOLVED BUT IT MAKES THINGS MORE
COMPLICATED.
SO REST IS SAYING DON'T DO IT.
SOME PEOPLE MAY CLAIM THAT COOKIES ARE KIND
OF A LOOPHOLE.
THAT YOU CAN USE COOKIES BECAUSE THE
DIFFERENCE IS THAT YOU CAN STORE STATE
COOKIE, AND THAT GOES TO THE CLIENT, SO THE
CLIENT STORES IT, NOT THE SERVER, AND THEN
EVERY TIME THE CLIENT SENDS A NEW REQUEST IT
SENDS THE COOKIE BACK TO THE SERVER.
SO I THINK COOKIES ARE IN A GRAY AREA.
THEY ARE MAYBE RESTFUL BUT PROBABLY NOT.
MY OPINION IS THAT IT'S NOT A GOOD IDEA TO
USE THEM, AND I'M GOING TO GIVE YOU AN
EXAMPLE.
LET'S SAY THE CLIENT CONNECTS TO THE SERVER
AND GETS A COOKIE AND THEN IT GOES AWAY FOR
ONE MONTH.
DURING THAT MONTH, YOU MAKE UP [INAUDIBLE] TO
YOUR SERVER, AND YOU CHANGE THE FORMAT OF
YOUR SESSIONS.
SO A MONTH PASSES, AND NOW YOU GET A REQUEST
FROM THIS CLIENT THAT HAS AN OLD SESSION IN
AN OLD FORMAT THAT YOU DON'T UNDERSTAND
ANYMORE. SO YOU GET A PROBLEM.
SO AGAIN, IT'S A PROBLEM THAT CAN BE SOLVED
BUT IT'S A COMPLICATION SO IT'S BETTER NOT TO
DO IT.
SO THE WAY TO DO THIS IS TO HAVE CLIENTS SEND
AUTHENTICATION WITH EVERY REQUEST.
SO THE SERVER GETS A REQUEST, AUTHENTICATES
THE USER, CARRIES OUT THE REQUEST, AND THEN
FORGETS COMPLETELY ABOUT THAT CLIENT.
AND THEN WHEN THE CLIENT NEEDS TO SEND
ANOTHER REQUEST, IT REPEATS THE WHOLE THING.
OF COURSE, YOU'RE SENDING AUTHENTICATION
SENSITIVE INFORMATION OVER THE NETWORK EVERY
TIME, SO IT'S VERY, VERY IMPORTANT THAT YOU
USE A SECURE HTTP FOR EVERY END POINT IN YOUR
API.
OKAY.
SO I TOLD -- THESE ARE SIX, AND I CHEATED.
THE SIX-TO-ONE INTERFACE, IT'S REALLY LOADED,
SO IT'S DIVIDED INTO FOUR SECTIONS.
I HAVE FOUR SLIDES FOR JUST THIS.
IT'S SUPER COMPLEX.
AND THIS IS THE ONE THAT BASICALLY GIVES THE
BASIC IDENTIFICATION TO REST THAT WE ALL KNOW
ABOUT REST, WHICH IS TO SEND A REQUEST TO
RESOURCES, AND ALL THAT STUFF IS HERE.
SO THE FIRST PART, 5.25 OUT OF SIX IS THAT
RESOURCES, YOU NEED TO IDENTIFY THEM.
SO RESOURCE WILL BE ANY ENTITY IN YOUR API.
SO IT COULD BE CUSTOMER PRODUCTS AND VOICES.
IF YOU'RE DOING AN API FOR THE DEVICE I TEND
TO DO A PROJECT CAMERAS, I LIKE CAMERAS.
SO WHEN I CREATE AN API FOR A CAMERA, THAT'S
A RESOURCE TOO EVEN THOUGH IT'S A PHYSICAL
ENTITY.
I HAVE EVERY SOURCE FOR IT.
SO FOR EACH RESOURCE, YOU HAVE TO PROVIDE AN
IDENTIFIER, AND THAT'S A URL.
IT DOESN'T MATTER HOW THAT URL LOOKS.
YOU MAY THINK THAT YOU HAVE TO USE THE
STANDARD SLASH, RESOURCE NAME, SLASH ID.
YOU DON'T HAVE TO.
IF YOU WANT TO DO THEM CRYPTIC, THAT'S FINE.
THEY CAN BE UGLY AND CRYPTIC, AND THAT'S
FINE.
IF YOU'RE DEVELOPING A SERVER YOU WANT TO
HAVE THEM IN A WAY THAT YOU UNDERSTAND SO YOU
CAN USE YOUR OWN ORGANIZATION TO CREATE THESE
URLS, BUT THEY CAN BE HOWEVER YOU WANT.
THEY DON'T HAVE TO BE SOMETHING THAT THE
CLIENT UNDERSTANDS.
SECOND PART OF THESE FOUR SUBPARTS IS THE
REPRESENTATIONS.
THIS IS SAYING THAT THE RESOURCES ARE NOT
ACCESSIBLE TO THE CLIENT.
ALL THE CLIENTS SEE ARE REPRESENTATIONS OF
THEM.
SO THIS MEANS THAT YOU DON'T HAVE TO MAP --
SAY YOU HAVE A RESOURCE THAT REPRESENTS A
DATABASE TABLE.
HOW TO REPRESENT AND TRANSFORM THE ENTITIES
OF THESE SOURCES IN A WAY THAT YOU THINK IS
MORE CONVENIENT FOR YOUR API.
IT'S GOING BACK TO THE EXAMPLE OF HAVING THE
CAMERA.
OBVIOUSLY I CANNOT SHIP A CAMERA IN A
RESOURCE BECAUSE IT'S A PHYSICAL OBJECT, SO I
INVENT SOME REPRESENTATION THAT I THINK IS
USEFUL, AND THAT'S MY REPRESENTATION.
REPRESENTATIONS CAN COME IN DIFFERENT
FORMATS.
AND WHEN YOU'RE DOING THIS OVER HTTP, THERE
IS ALL THIS MECHANISM WHERE THE CLIENT AND
THE SERVER CAN AGREE ON THE BEST FORMAT.
THEY NEGOTIATE THE FORMAT.
SO TYPICALLY, YOU SEE JSON, THAT'S THE ONLY
ONE, THAT'S ACTUALLY WHAT I'M GOING TO SHOW
YOU IN THIS EXAMPLE.
BUT, YOU KNOW, IF YOU WANT TO SUPPORT THE
PERFORMANCE, YOU CAN, AND HTTP ALLOWS IT.
IT'S VERY EASY TO DO.
THE CLIENT NEEDS TO MAKE A REPRESENTATION TO
THE RESOURCE.
IT NEVER GETS ACCESS TO THE RESOURCE
DIRECTLY.
IT SHIPS IT TO THE SERVER AND THE SERVER
LOOKS AT THE SOURCE REPRESENTATION AND MAPS
THAT INTO THE RESOURCE.
THE PRESENTATION IS SEPARATE FROM THE ACTUAL
RESOURCE.
SELF DESCRIPTIVE MESSAGES, THE THIRD ONE.
THIS IS SAYING THAT THE MESSAGES OF THESE
REQUESTS AND RESPONSES THAT THE CLIENT AND
SERVER EXCHANGE ARE SELF CONTAINED.
THERE'S NO SIDE INFORMATION.
IT ONE IT'S KIND OF DIFFICULT TO INTERPRET.
IT'S SUBJECT TO INTERPRETATION IF YOU COMPLY
WITH THIS OR NOT.
YOU CAN GET CRAZY AND YOU CAN SAY THAT
NOTHING COMPLIES OR YOU CAN BE RELAXED AND
SAY THAT MOST THINGS COMPLY.
BUT BASICALLY, WHAT MOST PEOPLE DO, AND I DO,
TOO, IS BASICALLY DEFINE ALL THE THINGS THAT
YOU WANT DONE ABOUT THIS REQUEST IN THE
REQUEST AND THE RESPONSE.
SO YOU SEND THE OPERATION IN THE REQUEST
METHOD, WHICH COULD BE GET POST, PUT, AND
DELETE, OR OTHERS.
THERE ARE OTHERS THAT SOME PEOPLE USE BUT
THESE ARE THE FOUR THAT ARE THE MOST USED.
YOU ALWAYS OPERATE ON THAT RESOURCE.
SO THAT'S YOUR URL.
THE URL, YOU SEND THE REQUEST TO.
YOU NEED TO AUTHENTICATE ALWAYS AS I SAID
BEFORE, SO YOU USE THE HEADERS FOR, FOR
EXAMPLE, BASIC AUTHENTICATION IN HTTP.
CONTENT TYPE AND ACCEPT HEADERS ARE FOR
CONTENT NEGOTIATION IF YOU DO THAT.
IF YOU NEED TO USE REPRESENTATIONS, THOSE GO
IN THE BODY.
EITHER THE REQUEST OR THE RESPONSE.
AND WHEN THERE IS A RESULT COMING BACK FROM
THE SERVER, YES, FROM THE SERVER, YOU GET IT
IF THE STATUS QUO OF THE HTTP RESPONSE.
THE LAST ONE, THIS ONE NOBODY DOES THIS.
YOU CAN LOOK AT THIS, GO FIND ANY APIS
NOBODY -- I REALLY LOVE IT.
I WOULD LOVE TO BE WRONG ABOUT THIS.
BUT I DON'T THINK I AM.
SO LET ME KNOW.
NOBODY DOES THIS.
THE IDEA HERE IS SO IT'S SAYING HERE THAT THE
API SHOULD WORK WITH HYPER MEDIA, SO YOU
SHOULD HAVE LINKS, AND THE CLIENT, THIS
COVERS RESOURCES THROUGH LINKS THAT IT GETS
FROM PREVIOUS RESOURCES IT KNOWS ABOUT.
SO BASICALLY, AT THE BEGINNING THE CLIENT
KNOWS NOTHING.
ONLY KNOWS THE URL OF THE API, THE MAIN URL.
AND FROM THERE, IT STARTS DISCOVERS ALL THE
THINGS THAT ARE THERE.
THIS IS  ANOTHER ONE THAT IS SUBJECT TO
INTERPRETATION.
YOU CAN GET CRAZY, AND THEN IT'S REALLY
IMPOSSIBLE TO IMPLEMENT THIS, OR YOU CAN BE
PRAGMATIC AND IMPLEMENT A REASONABLE -- HAVE
ORIGINAL IMPLEMENTATION OF IT THAT
ESSENTIALLY IS USEFUL AND THAT'S WHAT I'M
GOING TO SHOW YOU TODAY.
OKAY.
SO I THINK I'M GOING TO STOP HERE.
I'M GOING TO SHOW YOU THE EXAMPLE.
SO THIS IS OPEN SOURCE, SO YOU CAN WRITE DOWN
THE REPOSITORY FOR THIS.
IT'S PYTHON.
I'M SURE YOU CAN GET GUESS THIS.
IT'S WRITTEN IN FLASK.
I'M NOT USING ANY EXTENSIONS FOR REST.
I DID THE REST BY HAND USING NATIVE FLASK.
IN FACT, EVEN IF I WANTED TO USE A FRAMEWORK,
I DON'T THINK ANY FRAMEWORK IN PYTHON OR ANY
OTHER LANGUAGE WILL ALLOW ME TO GET TO THIS
LEVEL OF RESTFULNESS.
I THINK I WOULD NEED TO JUMP THROUGH HOOPS TO
GET, ESPECIALLY THE HYPER MEDIA PART DONE.
SO I FOUND IT WAS EASIER TO DO IT IN FLASK
NATIVE.
LET'S SEE HOW THAT WORKS.
I'M RUNNING IT HERE.
I HAVE THREE WINDOWS.
NUMBER ONE IS RUNNING THE SERVER.
AND I HAVE REDIS RUNNING ON NUMBER TWO.
BEFORE I START I'M GOING TO TELL YOU A LITTLE
TRIVIA.
ONE OF THE THINGS I'M GOING TO SHOW HERE IT'S
KIND OF NOT RESTFUL.
LET'S SEE IF YOU CAN SPOT IT.
I'LL TELL YOU AFTER I'M DONE WITH THE DEMO.
I'M GOING TO USE A MIDLINE CLIENT.
SO THIS IS HTTP REQUEST TO THE TOP URL.
YOUR URL OF THIS API IS RUNNING ON THE FLASK
DEVELOPMENT SERVER, SO IT'S LOCAL HOST FIVE
THOUSAND.
I'M NOT USING HTTPS HERE BECAUSE IT'S RUNNING
ON MY MACHINE.
IF I WOULD WANT TO DEPLOY THIS I WOULD HAVE
TO USE HTTPS OF COURSE.
SO I KNOW I CAN'T.
I CANNOT GET ACCESS.
NOW, TAKE A LOOK AT THIS.
MEDIA.
LOCATION HEADER TELLS ME WHERE SHOULD I GO TO
GET MY TOKEN.
I'M GOING TO USE TOKEN AUTHENTICATION HERE.
SO LET'S GO THERE.
THIS IS TELLING ME PHOTO FIVE METHOD NOT
ALLOWED.
SELF DESCRIPTIVE MESSAGES AGAIN.
THIS IS SELF CONTAINED.
I EXACTLY KNOW WHAT'S GOING ON HERE.
THIS IS TELLING ME THAT A GET REQUEST TO THIS
URL IS INVALID.
SO LET'S TRY OPTIONS.
THE OPTIONS REQUEST TELLS ME WHAT REQUESTS
THIS URL SUPPORTS, AND HERE I CAN SEE --
OKAY.
SO IT'S A POST REQUEST.
THIS GUY WANTS A POST REQUEST.
SO I'M GOING TO DO A POST REQUEST.
AND THIS IS TELLING ME I NEED TO AUTHENTICATE
TO GET MY TOKEN.
SO I'M GOING TO SEND AUTHENTICATION.
AND I HAVE AN ACCOUNT ON THIS.
SO I'M GOING TO SAY MY USER NAME.
IT'S GOING TO ASK ME FOR MY PASSWORD, AND
THAT'S MY TOKEN.
OKAY?
SO NOW I HAVE A TOKEN.
I'M GOING TO HAVE TO USE THIS ON EVERY SINGLE
REQUEST.
SO I'M GOING TO SAY THAT ON THE VARIABLE.
OKAY? AND NOW I CAN GO BACK TO THE VERY FIRST
ONE AND I CAN AUTHENTICATE WITH MY TOKEN.
HERE, I GET THE FIRST THING.
THIS IS ALL I KNOW IS THAT THE ONLY URL I
KNOW AS A CLIENT.
AND THIS HAS GIVEN ME A CATALOG WHERE I SEE
ALL THE RESOURCES THAT I CAN ACCESS AND ALL
THE VERSIONS THAT THIS API SUPPORTS.
RIGHT NOW THERE'S ONLY ONE, AND THERE ARE
THREE RESOURCES.
MOST PEOPLE SAY, WELL, OKAY, YOU'RE A HUMAN.
YOU HAVE A BRAIN, YOU CAN READ THIS AND
UNDERSTAND IT.
HOW CAN SCRIPT AND APPLICATION CAN UNDERSTAND
THIS IF IT DOESN'T KNOW ANY PREVIOUS
KNOWLEDGE.
AND THAT'S TRUE.
I AGREE WITH THAT VIEW.
THE RESOURCES IN AN API NEED TO BE
DOCUMENTED.
SO THE CLIENT KNOWS WHAT RESOURCES SHOULD
EXPECT TO FIND.
WHAT IT DOESN'T KNOW IS WHERE THEY ARE
LOCATED.
AND THIS IS GOOD BECAUSE WHEN YOU IN THE
SERVER NEEDS TO -- IF YOU NEED TO REORGANIZE
YOUR RESOURCES, YOU'RE FREE TO DO IT.
SO THIS EXAMPLE IS BASED ON THE EXAMPLE I
SHOWED LAST YEAR AT THE API TALK I DID.
SO YOU CAN GO SEE THE BY VIDEO OF IT IF YOU
WANT TO FIND OUT MORE.
IT'S BASICALLY ALLOWS STUDENTS AND CLASSES TO
REGISTER, SO STUDENTS REGISTER TO CLASSES.
SO LET'S SEE WHAT CLASSES WE HAVE.
SO I STAKE THAT URL AND SEND A GET REQUEST.
SO HERE -- I'M NOT SEEING THE WHOLE THING.
SORRY.
SO WE HAVE HEADERS.
THERE'S CAPTION HEADERS, CACHE CONTROL AND
ETAG ARE FOR CACHING.
SO I'M NOT GOING TO GO INTO DETAILS BUT THOSE
ARE AN HTTP CACHE WOULD UNDERSTAND THOSE AND
WE WOULD BE ABLE TO INTERPRET THOSE AND APPLY
CACHING TO THIS REQUEST.
WHAT ELSE WE HAVE?
WE HAVE THREE RIGHT LIMITING HEADERS.
THOSE ARE PRETTY STANDARD IN APIS THESE DAYS.
THEY ARE TELLING ME HOW MANY REQUESTS I CAN
DO IN A SHORT AMOUNT OF TIME.
AND THEN WE HAVE CLASSES, WHICH IS THE LIST
OF CLASSES.
AND WE HAVE META.
SO MET A IS PAGINATION INFORMATION.
AND THE IDEA HERE IS THAT I DON'T KNOW HOW
MANY CLASSES I HAVE IN THIS DATABASE.
IT COULD BE A REALLY LONG LISTING, SO THE
SERVER ENFORCES PAGINATION, AND THE
INFORMATION THAT YOU GET INCLUDES PAGE
NUMBER, NUMBER OF PAGES, FIRST, LAST, NEXT,
AND PREVIOUS URLS, ALL THAT STUFF, SO HYPER
MEDIA ONCE AGAIN.
THE CLASSES LIST IS A LIST OF URLS.
AND PEOPLE DON'T SEEM TO LIKE THIS.
THE REASON I DO IT THIS WAY IS BECAUSE BY
PUTTING THE URLS HERE, THE LINKS, I IMPROVE
CACHING EFFICIENCY.
THE RESPONSES TO ALL THESE REQUESTS MIGHT BE
CACHED.
SO IT MAY BE PRETTY CHEAP TO ISSUE THESE
REQUESTS AND GET A RESPONSE.
NOW, YOU MAY NOT LIKE THIS, AND I AGREE,
SOMETIMES THIS IS NOT -- I MEAN, IT'S GOING
TO BE A PAIN TO HAVE TO GO AND GET ALL THESE
TEN REQUESTS SEPARATELY, AND YOU END UP
ISSUING A LOT OF REQUESTS.
SO I'M GOING TO SHOW YOU OTHER WAYS TO DEAL
WITH THIS.
BUT FIRST, THIS IS A COLLECTION.
SO THERE ARE A NUMBER OF FUNCTIONS
THAT ARE DOCUMENTED, SO THIS IS NOT -- THE
CLIENT NEEDS TO KNOW THIS.
SO ONE THING YOU CAN DO IS YOU CAN SAY FOR
PAGE -- LET'S DO IT.
AND THAT CHANGES THE PAGE SIZE.
I CAN SAY -- I CAN LEAVE THAT AND ADD FILTER.
I CAN SAY NAME, GREATER/EQUAL TO P, A
NAMELESS THAN Q.
THIS WILL GIVE YOU ME ALL THE CLASSES THAT
START WITH P, AND I CAN ALSO SAY SORT BY NAME
ASCENDING.
SO I GOT TWO.
IT TELLS ME DOWN THERE -- THIS IS IN THE DARK
WHERE YOU, THE BOTTOM NOTE SAYS THERE ARE
THREE.
SO THERE'S ONE MORE.
HOW DO I GET TO THE NEXT PAGE HERE AND I
DON'T HAVE TO GO BACK TO THAT AND EDIT THE
URL.
I GET THE NEXT HYPER MEDIA AGAIN.
I'M SORRY.
AUTHENTICATION.
AND JUST COPY AND PASTE THAT, AND -- WHAT DID
I DO WRONG HERE?
I'M SORRY, I CAN'T HEAR YOU.
OH, I'M SORRY.
METHOD.
YES.
GET.
YOU'RE SHARP TODAY, I'M NOT.
HERE YOU GO.
OKAY.
SO HERE'S MY THIRD ONE.
I HAD THREE.
NOW, LET'S USE THIS ONE, AND LET'S SAY YOU
DON'T REALLY WANT THIS GETTING URLS.
IT'S REALLY HAVING A SECOND STEP TO GET URLS.
IT'S KIND OF A -- IT'S PAINFUL.
SO I CAN DO EXPAND EQUALS ONE.
AND THAT BASICALLY REPLACES THE URL WITH THE
ACTUAL REPRESENTATION FOR THAT RESOURCE.
OKAY?
SO THIS IS PYTHON PROGRAMMING.
SO HOW CONVENIENT.
I'M GOING TO SAVE THIS.
WE ARE GOING TO USE THIS.
SO I'LL SAVE IT IN A VARIABLE.
LET'S GO BACK TO THE BEGINNING.
SO WE WERE PLAYING WITH CLASSES.
SO NOW LET'S LOOK AT STUDENTS.
SO LET'S GET A LIST OF STUDENTS.
I COPY/PASTE THIS ADDRESS.
SO THIS DATABASE I HAVE NO STUDENTS.
SO I'M SURE YOU KNOW THIS.
TYPICALLY, WHEN YOU WANT TO CREATE A
RESOURCE, YOU SPEND A POST REQUEST TO THE
COLLECTION URL, THIS URL HERE.
SO I'M GOING TO GO AHEAD AND CHANGE THIS TO
POST AND SEE WHAT HAPPENS.
OOPS.
BACK REQUEST.
SELF DESCRIPTIVE MESSAGES.
SO DO YOU KNOW WHAT HAPPENED HERE?
THERE'S NO DATA.
THAT'S THE PROBLEM.
SO DOCUMENTATION SAYS THAT THE STUDENT
RESOURCE HAS ONE FIELD.
IT'S CALLED NAME.
SO I'M GOING TO SAY NAME, SUSAN.
AND THAT WORKED.
AND HYPER MEDIA AGAIN.
THIS IS THE ADDRESS FOR THE NEW RESOURCE.
SO IF I SEND A GET REQUEST TO THIS ONE, I GET
SUSAN.
IT'S LOWER CASE, SO THAT SHOULD BE UPPER
CASE.
SO I'M GOING TO GO AHEAD AND MODIFY THIS, AND
YOU PROBABLY KNOW THIS, TOO.
PUT REQUEST TO A RESOURCE URL MODIFIES IT.
SO NAME, PROPERLY UPPER CASES.
AND IT SAYS OKAY.
SO I'M GOING TO REGISTER SUSAN TO A CLASS.
YOU CAN SEE HERE IN THE REPRESENTATION FOR
SUSAN THERE'S THIS REGISTRATION URL.
ONCE AGAIN, HYPER MEDIA THIS.
THIS IS A LINK TO THE LIST OF -- THE
COLLECTION OF REGISTRATIONS, CLASS
REGISTRATIONS FOR THIS ONE STUDENT, FOR
SUSAN, WHICH, IF I SEND A REQUEST, THIS IS
EMPTY.
SUSAN IS A NEW STUDENT, SO -- SO I'M GOING TO
CREATE A REGISTRATION BY SENDING A POST
REQUEST, AND I'M GOING TO SAY CLASS URL.
REMEMBER, I SAVED THE URL FOR THE PYTHON
CLASS?
SO THERE IT GOES.
AND NOW I HAVE ANOTHER LINK FOR THIS
ASSOCIATION BETWEEN A STUDENT AND THE CLASS.
SUSAN REGISTERED TO PYTHON CLASS.
OOPS, I MISSED ONE.
SO I CAN GET THIS.
I KEEP DOING THAT.
AND THIS ONE HAS THE CLASS AND SELF URL.
I DIDN'T MENTION THIS.
ALL THE RESOURCES THAT I HAVE HAVE A SELF
URL.
THEY BASICALLY REFER TO THEMSELVES.
SO YOU HAVE THE CLASS, THE STUDENT, AND ALSO
LET'S SAY SUSAN CHANGED HER MIND.
SHE KNOWS ENOUGH PYTHON SO SHE DECIDED NOT TO
TAKE THIS CLASS.
SO THE WAY I DO THAT IS BY SENDING A DELETE
REQUEST TO THE REGISTRATION.
AND THAT TAKES CARE OF THAT.
AND IF I NOW GO BACK TO GET THE REGISTRATIONS
FOR SUSAN, NOW IT'S EMPTY AGAIN.
SO DID YOU FIND WHAT'S NOT -- ON PURPOSE, I
DIDN'T MENTION -- I BRIEFLY MENTIONED, YOU
KNOW, -- NO, SIR.
SO HE'S SAYING THAT WHEN I UPDATED THE
STUDENT, I SHOULD HAVE USED A PATCH.
NORMALLY, IT'S NOT A PARTIAL UPDATE.
THIS IS A VERY -- THIS IS A VERY SIMPLE
PROJECT, SO NAME IS ALL THERE IS.
SO THAT WAS CORRECT.
EVEN IF I LIKE PATCH, NO.
VERY LIMITING.
REMEMBER, NOW I TOLD YOU WHAT'S THE PROBLEM.
SO THINK, WHICH OF THE PRINCIPLES OF THE
CONSTRAINTS THIS IS BREAKING.
IS IT BREAKING THE STATELESS CONSTRAINT?
YOU CANNOT REMEMBER USERS COUNTING HOW MANY
TIMES THEY USE THEIR CONTEXT SERVER, IT'S A
VIOLATION.
UNFORTUNATELY, LIMITING IS A MUST.
YOU HAVE TO HAVE IT.
SO THAT'S WHY I PUT IT IN HERE.
THE WAY MOST PEOPLE DO LIMITING IS BY
CHECKING THE REMOTE ADDRESS.
AND THAT WOULD BE REALLY BAD BECAUSE AS I
MENTIONED BEFORE, WHEN I SHOWED PICTURES, THE
REMOTE ADDRESS MIGHT ALWAYS BE THE SAME ONE.
YOU REALLY CANNOT TRUST THAT.
THAT'S REALLY -- IT'S SOMETHING THAT YOU
CANNOT TRUST.
SO THE WAY I'M DOING HERE, AND YOU CAN LOOK
AT IT IN THE PROJECT IS BY USING THE
AUTHENTICATION INFORMATION.
SO UNAUTHENTICATED USERS CANNOT BE VERY
LIMITED WITH THIS SOLUTION THAT I IMPLEMENTED
HERE.
BUT SINCE ALL THE END POINTS ARE
AUTHENTICATED IT'S NOT A BIG DEAL FOR THIS
PARTICULAR PROJECT.
SO ANYWAY, THAT'S THE DEMO PART.
SO YOU PROBABLY THINK I'M CRAZY THAT MAYBE I
SPENT MONTHS, A YEAR CREATING ALL THIS BY
HAND ON FLASK WITHOUT ANY EXTENSIONS, NO
RESTFUL SUPPORT, I JUST DID IT ALL BY HAND
AND CREATED ALL THIS SORTING, FILTERING,
EXPANSION, ALL THAT STUFF.
SO MAYBE YOU'RE SAYING THAT, YOU KNOW, IT'S
NOT WORTH IT.
I DON'T KNOW.
LET'S GIVE UP ON REST.
LET'S GO BACK TO SOAP.
I DON'T KNOW.
SO I'M REALLY KIDDING.
IT'S EASY.
AND YOU'RE WELCOME TO LOOK AT THE PROJECT AND
LOOK AT THE VIDEO OF THE -- I EXPLAINED
BETTER -- A SIMILAR PROJECT, A LITTLE SIMPLER
THAN THIS ONE, BUT THE VIDEO FROM LAST YEAR
WILL BE, YOU KNOW, INFORMATIONAL.
BUT JUST SO THAT I WHET YOUR APPETITE, I'M
GOING TO SHOW YOU ONE OF THE ROUTES.
REMEMBER WHEN I OBTAINED ALL THE CLASSES THAT
START WITH P?
SO HOW LONG IS THAT DO YOU THINK?
THE TOP LEVEL, YOU KNOW, THE END POINT FOR
THAT, I'M GOING TO GIVE YOU A CLUE, FITS
HERE.
OKAY AND ANOTHER CLUE, HELLO,.
THAT'S IT.
SO THIS IS A DATABASE QUERY.
OKAY?
THIS IS THE ONLY END POINT SPECIFIC CODE THAT
I NEED FOR A COLLECTION.
ALL I NEED TO DO IS WRITE A FUNCTION AND
RETURN A DATABASE QUERY.
THIS IS A DATABASE QUERY THAT HASN'T RUN YET.
IT'S A QUERY THAT IS STILL YET TO RUN THAT
CURRENTS THAT -- THAT RETURNS THAT
COLLECTION.
USING ALCHEMY CLASS QUERY.
OKAY?
SO WHAT DO I DO WITH THIS?
I DECORATE THIS FUNCTION WITH A GENERIC
DECORATOR.
THIS WORKS FOR EVERY COLLECTION, AND IF YOU
WORK WITH FLASK SQL IT WILL PROBABLY USE ON
YOUR CHANGE PROJECT AS WELL.
SO THIS DECORATOR TAKES THE QUERY THAT THE
FUNCTION RETURNS AND LOOKS AT THE QUERY
STRING OF THE URL AND THEN APPLIES A SORTING,
FILTERING, PAGINATION, ALL OF THAT.
THEN RUNS THE QUERY, GETS THE RESULTS.  IT
LOOKS AT THE QUERY STRING AGAIN TO SEE IF YOU
WANT EXPANDED OR NOT EXPANDED RESULTS.
AND BASED ON THAT, IT GENERATES A PYTHON
DICTIONARY WITH THE DATA.
SO THERE ARE REPRESENTATIONS AS A PYTHON
DICTIONARY.
SO NOW YOU HAVE A LIST.
IT'S A LIST INSIDE A PYTHON DICTIONARY, THE
WHOLE THING.
THAT GOES TO ANOTHER DECORATOR.
THIS GUY TAKES THE DICTIONARY AND RENDERS IT
ADJACENT.
I COULD IMPROVE THIS AND MAKE IT A PROPER
CONTENT NEGOTIATION.
IT COULD SUPPORT XML AND WHATEVER, HTML, WHO
KNOWS.
AND THEN THE DECORATOR ADDS THE CACHING.
THE CACHING REQUIRES AN MT5 HASH TAG.
SO IT LOOKS AT THE RESPONSE THAT THE JSON
DECORATOR PUT AND CREATES THE MT5 FOR THE
CASH TO WORK PROPERLY.
AND THEN, FINALLY, I TAKE THIS WHOLE THING,
THE FUNCTION AND ALL THE DECORATORS AND I
REGISTER WITH FLASK UNDER THE URL FLASK
CLASSES FOR MET A GET.
AND IF YOU LOOK AT THE CODE, THE HIGH LEVEL
CODE, IT'S PRETTY MUCH ALL LIKE THIS.
IT'S ALL SUPER SIMPLE AND BASICALLY IT MADE
WRITING THIS PROJECT REALLY, REALLY FUN FOR
ME:  THAT'S ALL I HAVE.
THANK YOU.
[ APPLAUSE ]
>> ALL RIGHT.
FOLKS.
WE HAVE ABOUT FIVE MINUTES LEFT FOR
QUESTIONS.
THE MICROPHONE IS RIGHT BACK ALMOST IN THE
CENTER OF THE ROOM, SO IF YOU HAVE ANY
QUESTIONS, PLEASE FEEL FREE TO LINE UP.
>>  CAN I POSE A HYPOTHETICAL?
I'VE GOT A BUNCH OF MICRO SERVICES.
WOULD I WANT TO HAVE A BUNCH OF INDIVIDUAL
FLASK CONTAINERS, ONE PER RESOURCE?
>>  ONE PER RESOURCE?
WHY WOULD YOU DO THAT?
WHAT'S THE BENEFIT?
>>  IN CASE I WANT TO REDEPLOY ONE OF THEM,
CHANGING THAT CLASS OF RESOURCES.
NOT ONE PER RESOURCE INSTANCE.
I MEAN ONE PER CLASS OF RESOURCE, SO I'VE GOT
A FLASK CONTAINER THAT HAS CLASSES AND A
FLASK CONTAINER THAT HAD STUDENTS, AND A
FLASK CONTAINER THAT HAS REGISTRATION.
>> OKAY.
SO YOU CAN HOST SEPARATE SERVERS AND THEN PUT
THEM BEHIND A PROXY SERVER THAT FINDS WHICH
ONE TO TALK TO.
BE FAIRLY SIMPLE TO ARCHITECT.
AND IT DOESN'T CHANGE ANYTHING FOR FLASK.
>>  SORRY.
WERE THOSE DECORATORS STANDARD WITH FLASK?
I DON'T HAVE MUCH FAMILIARITY WITH FLASK.
>> NO.
DECORATORS, THIS IS A FEATURE OF PYTHON.
IT'S A --
>>  NO.
NO.
I MEAN THE ONES YOU WERE USING.
>>  THE DECORATIONS I USED ARE MINE.
SO I CODED THEM.
ACTUALLY, I CAN TELL YOU A LITTLE BIT MORE.
THE COLLECTION ONE -- YOU PROBABLY THINK I'M
CHEATING BECAUSE I SAID THAT THIS IS SIMPLE,
AND OF COURSE, YOU KNOW, ALL THE COMPLEXITY
ISN'T ALL -- IT'S ABOUT A HUNDRED LINES OF
WELL COMMENTED CODE FULL OF WHITESPACE, SO
IT'S REALLY NOT THAT DIFFICULT.
I WROTE IT IN ONE DAY.
SO --
>>  BUT THEY'RE AVAILABLE FOR US TO LOOK AT?
>>  YES.
THEY HAVE ADDRESS, IT'S ALL THERE.
SO FEEL FREE TO LOOK AT IT, AND IF YOU HAVE
ANY QUESTIONS I'LL BE MORE THAN HAPPY TO
ANSWER THEM.
>> THANK YOU VERY MUCH.
>>  YEAH.
>>  YOU MENTIONED THAT YOU DON'T LIKE USING
COOKIES AND THAT CLIENTS SHOULD
REAUTHENTICATE WITH EVERY REQUEST.
>> YES.
>>  I'M NOT ENTIRELY CLEAR THAT I UNDERSTAND
THE DISTINCTION BETWEEN USING THE OFF TOKEN
LIKE YOU DID IN YOUR EXAMPLE VERSUS HAVING AN
OFF TOKEN IN A COOKIE THAT YOU SENT
>>  I AGREE THAT THERE'S A LOT OF
SIMILARITIES.
THE PROBLEM I HAVE WITH COOKIE S IS THAT
THEY'RE NOT PART OF THE CORE HTTP PROTOCOL.
SO NOT ALL HTTP CLIENTS IMPLEMENT COOKIES.
SO, FOR EXAMPLE, LET'S SAY IF YOU WANT TO
SUPPORT ADUENOS AS CLIENTS.
THIS IS A VERY CONSTRAINED PLATFORM FOR A 2K
OF RAM.
IT'S LIKE WE'RE GOING BACK TO THE 80S WITH
THE COMMODORES AND THAT SORT OF THING.
IT'S A CONSTRAINED THING.
SO HAVING TO SUPPORT COOKIES MIGHT BE A
BURDEN FOR THAT.
I MEAN, THE WHOLE THEME OF REST IS TO SCALE
AND SUPPORT, YOU KNOW, AS MANY VARIANTS OF
CLIENTS AS POSSIBLE.
SO I AGREE WITH THAT TOKENS AND COOKIES, AND
THAT'S WHY I SAID COOKIES ARE A GRAY AREA.
BUT, YOU KNOW, IT'S REALLY NOT THAT -- IT'S
NOT MORE COMPLICATED TO USE TOKENS.
SO.
>> THANK YOU.
>>  YEAH.
>> AUDIENCE:  I HAVE USED DJANGO RESTFUL BOOK
TO BUILD A RESTFUL A COUPLE TIMES.
AND I SAW YOUR PRESENTATION LAST YEAR AS
WELL, AND I SEE THAT YOU USE FLASK AND SQL
ALCHEMY.
I JUST WAS WONDERING IF YOU HAVE AN OPINION
ON WHICH ONE IS BETTER OR WHAT'S THE
DIFFERENCE, OR, YOU KNOW,.
>> I THINK YOU KNOW WHICH ONE I THINK IS
BETTER.
>>  AUDIENCE:  WHY?
>>  THAT'S A DIFFICULT QUESTION.
I THINK WE'RE ALL DIFFERENT.
AND I'VE BEEN DOING SOFTWARE FOR MANY YEARS.
SO WHEN I GO TO A FRAMEWORK THAT TELLS ME HOW
TO DO THINGS, I KIND OF FEEL CONSTRAINED.
I LIKE TO FIND MY OWN WAYS TO SOLVE PROBLEMS.
AND YOU KNOW, I FIND FLASK THE PERFECT, YOU
KNOW, VEHICLE FOR ME TO FIND THE SOLUTIONS
EXACTLY THE WAY I WANT THEM.
IT'S A FRAMEWORK THAT WILL LET YOU DO THIS.
RIGHT?
YOU'RE GOING TO HAVE TO START JUMPING THROUGH
HOOPS TO FIGURE OUT HOW TO DO THIS HYPER
MEDIA THING.
WITH FLASK, I MEAN, IT'S -- FLASK DOESN'T
CARE.
SO I JUST DO WHATEVER I WANT.
SO THAT'S WHAT I LIKE.
>>  AUDIENCE:  THANK YOU.
>>  YES.
YOU'RE WELCOME.
>> AUDIENCE:  I NOTICE YOU CHOSE TO VERSION
YOUR API VIA YOUR REQUEST URL, WHY DID YOU
CHOOSING TO THIS WAY USING THE REQUEST HEADER
FOR THE VERSION ITSELF
>>  YEAH, SO SOME PEOPLE LIKE TO PUT IT IN
THE HEADERS.
REALLY, WHEN YOU WRITE APIS THIS WAY, IT'S
REALLY UNLIKELY THAT YOU'RE GOING TO HAVE TWO
VERSIONS OF API.
IF YOU NEED TO DO A NEW VERSION IT'S PROBABLY
GOING TO BE A REALLY MAJOR DIFFERENT VERSION
WHERE YOU'RE GOING TO CHANGE THINGS IN A
DRASTIC WAY.
THIS WHOLE THING ABOUT USING HYPER MEDIA
REALLY REDUCES THE RISK OF YOU HAVING TO
CREATE A NEW VERSION.
SO I DON'T THINK I'M GOING TO NEED TO DO NEW
VERSIONS.
IF I NEED TO DO A COMPLETELY NEW THING, I
WOULD PROBABLY BE -- IT WILL BE A DIFFERENT
API.
>>  AUDIENCE:  I JUST KNOW THAT I'M WORKING
ON A REST API NOW, AND I KNOW THAT SOME OF
THE OBJECTS THAT I'M GOING TO BE RETURNING
LATER ARE GOING TO INCLUDE MORE COMPLICATED
VALUES OR DIFFERENT ONES.
AND I KNOW THAT I WANT TO VERSION THAT FOR
LATER, SO I'M STRUGGLING TO DECIDE WHETHER I
SHOULD BE INCLUDING THAT IN THE URL OR IN THE
ACTUAL ACCEPT HEADER
>>  SO RIGHT.
FOR CLIENTS, IT'S EASIER TO PUT IT IN THE
URL.
RIGHT?
AND IN THIS CASE, EVEN MORE BECAUSE THE
CLIENT DOESN'T EVEN KNOW THAT THE V2 OR V1 IS
THERE.
RIGHT?
BECAUSE IT'S ALL HYPER MEDIA BASED.
>>  AUDIENCE:  RIGHT.
>> IF YOU HAD TO PUT IT IN THE HEADERS, YOU
NEED -- YOU KNOW, THE CLIENT NEEDS TO WRITE
THAT HEADER GENERATED.
SO IT'S A LITTLE BIT MORE BURDEN.
BUT IT'S FINE.
I THINK IT WORKS.
I MEAN, PEOPLE DO IT.
SO I HAVE NOTHING -- I CAN'T REALLY TELL YOU
THAT IT'S WRONG BECAUSE IT'S NOT.
>> Audience:  THANK YOU.
>>  YES.
>> THANKS, EVERYBODY, FOR COMING OUT.
ENJOY YOUR PYTHON.
THANK YOU.
[ APPLAUSE ]
