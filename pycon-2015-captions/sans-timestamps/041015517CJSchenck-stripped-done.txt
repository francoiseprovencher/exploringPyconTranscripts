HI.  MY NAME IS JOE, ONE OF THE SESSION
CHAIRS HERE.
AND IT IS MY PRIVILEGE TO INTRODUCE JEFF
SCHENCK TO YOU.
HE IS A CTO AS SAN FRANCISCO BASED CHEWSE,
WHICH IS AN OFFICE CATERING COMPANY.
HE HAS A LOT OF THINGS TO SAY TO YOU ABOUT
REST TODAY.
SO PLEASE ENJOY THE TALK, AND HAVE A GREAT
TIME.
[ APPLAUSE ]
>> HELLO.
THANK YOU SO MUCH FOR COMING.
I HOPE YOU ENJOY WHAT YOU'RE ABOUT TO SEE.
I HOPE IT BUILDS ON THE LAST TALK.
UNFORTUNATELY I WASN'T ABLE TO SEE IT.
I KNOW IT WAS ALSO ABOUT REST SO I HOPE THIS
ISN'T REDUNDANT.
I HOPE IT'S ADDITIVE AND EXCITING.
I WANT TO TALK TO YOU TODAY ABOUT THE REST
THE WAY THAT WEB DEVELOPMENT IS STARTING TO
SHIFT.
ASCENDANCY OR WHAT IS BASICALLY IN MY MIND
I'M SORT OF SEEING THIS SHIFT.
I THINK A LOT OF US ARE WITH JAVASCRIPT
TAKING A BIGGER AND BIGGER ROLE, AND WHAT
THAT DOES TO THE TOOLS THAT WE HAVE TO BUILD
WEBSITES OUT OF AND HOW OUR TOOLS, I THINK,
NEED TO DO A LITTLE BIT MORE WORK TO KIND OF
KEEP UP WITH WEB DEVELOPMENT.
SO AN OUTLINE OF WHAT WE'RE GOING TO TALK
ABOUT.
FIRST I'M GOING TO TALK ABOUT WHY THAT'S THE
CASE.
WHAT ARE THESE BIG TECTONIC SHIFTS THAT ARE
LEADING US INTO THIS WORLD.
TWO, I'M GOING TO TALK ABOUT WHAT IS THE
STATE TODAY OF REST.
WHAT REST TOOLS DO WE HAVE.
AND HOW DO THEY BASICALLY WORK, BECAUSE FOR
ALL THE BASICS, THEY WORK GREAT, SO I'LL SHOW
YOU.
THEN I'M GOING TO TALK ABOUT AT LEAST WHAT MY
PINPOINTS ARE.
AND I'VE CORROBORATED THESE WITH A LOT OF
WHAT ARE THESE PINPOINTS THAT WE'RE STARTING
TO SEE GIVEN THESE SHIFTS IN THE WAY WEB
OTHER PEOPLE, SO I DON'T THINK IT'S JUST ME.
DEVELOPMENT HAPPENS AND THEN HOW ARE WE GOING
TO FIX THESE, HOW ARE WE GOING TO HELP OUR
TOOLS HELP US, WHAT CAN WE DO TO MAKE THE
FUTURE A BETTER PLACE FOR PYTHON AND FOR THE
WEB SO I CAN KEEP PROGRAMMING PYTHON FOR THE
WEB WHICH IS SOMETHING I REALLY ENJOY DOING.
SO LET'S TALK ABOUT WHY REST AND REST APIS
ARE SUCH AN IMPORTANT PIECE OF THIS.
AND THE SHORT ANSWER IS THESE GUYS.
ANGULAR, BACKBONE, EMBER, SOME OF THESE VERY
HEAVY, VERY BIG FRONT END FRAMEWORKS ARE
STARTING TO TAKE SOME OF THE LOAD FROM WHAT
WE TRADITIONALLY USED TO DO AS WEB
DEVELOPERS, WHICH IS ALL ON THE BACK END.
SO IF YOU TAKE A LOOK AT KIND OF THE LONGER
ANSWER, THE FRONT END CODE HAS ALWAYS BEEN,
YOU KNOW, TRADITIONALLY DISPLAY LOGIC,
INTERACTIONS, AND THE BACK END WAS YOUR
APPLICATION LOGIC, DATABASE, CACHE, OTHER
SERVICES, AT A VERY ROUGH LEVEL.
THAT'S KIND OF THE BREAKDOWN WE'VE HAD.
AND THE WAY WE TALKED BETWEEN THEM WAS HTML
SOME OF THESE OTHER GOOD TOOLS THAT WE HAVE.
AND THAT WORKED PRETTY WELL FOR A WHILE.
ALONG WITH, YOU KNOW, CSS AND JAVASCRIPT AND
AND THEN WE WANTED TO DO A LITTLE BIT MORE ON
THE FRONT END.
WE WANTED THINGS TO BE REALLY RESPONSIVE.
WE WANTED PEOPLE NOT TO HAVE TO WAIT FOR A
WHOLE PAGE TO LOAD, AND WE KIND OF JAMMED IN
THIS AJAX THING, AND, YOU KNOW, GENERALLY, AT
FIRST IT WAS KIND OF LIKE THESE ONE-OFF AJAX
THINGS THAT YOU WOULD WRITE IN J QUERY.
AND, YOU KNOW, I WANT THIS TO HAPPEN ON THE
SERVER, AND THEN IT WOULD RESPOND, AND IT WAS
ALL KIND OF A ONE-OFF HACKY MESS FOR MOST
APPLICATIONS AT THE TIME.
AND THAT HELD US OVER FOR A LITTLE WHILE.
BUT WITH ANGULAR AND BACKBONE AND EMBER AND
THESE GUYS, WHAT I SEE IS A PRETTY
FUNDAMENTAL SHIFT TO WHERE THE FRONT END HAS
NOW TAKEN OVER A BIG CHUNK OF WHAT USED TO BE
DONE ON THE BACK END, THIS APPLICATION LOGIC.
AND SO NOW YOU'RE SEEING APPLICATION LOGIC
HAPPEN ON BOTH SIDES OF THE EQUATION.
AND WE NEEDED SOMETHING NEW.
BECAUSE YOU'RE NOW DOING APPLICATION LOGIC IN
FRONT END.
THE FRONT END NEEDED A WAY TO TALK TO THESE
A MUCH BIGGER, MORE SUBSTANTIAL WAY ON THE
SERVICES THAT YOU HAVE TRADITIONALLY ON THE
BACK END ON KIND OF A MUCH MORE LOW LEVEL
SYSTEM, YOU KNOW, GET CLOSER TO THE RAW DATA.
AND SO YOU KNOW WHAT WE NEED?
REPRESENTATIONAL STATE TRANSFER, WHICH IF YOU
DIDN'T KNOW IS WHAT REST STANDS FOR.
SO REST GIVES YOU A REALLY EASY AND SIMPLE
WAY TO COMMUNICATE WITH YOUR DATA.
USUALLY IN A DATABASE, BUT ANY OTHER
DATASTORE IS FINE.
AND LIKE I SAID, THIS HELPS A LOT WHEN YOU'RE
DOING ALL THIS APPLICATION LOGIC IN THE FRONT
END.
COOL.
SO LET'S TALK ABOUT WHERE REST IS AND WHERE
OUR TOOLS ARE FOR BUILDING THESE REST APIS
THAT UNDERPIN SOME OF THESE NEW FRONT END
TECHNOLOGIES.
SO AS YOU ALL KNOW, GOOGLE TRENDS IS THE
CANONICAL SOURCE FOR ANYTHING LIKE THIS,
TOTALLY, TOTALLY MAKES A -- OKAY.
SO YOU'LL SEE SOMETHING INTERESTING HAPPEN
FRAMEWORK HAS COMPLETELY BROKEN AWAY FROM
EVERYTHING ELSE, AND THAT INCLUDES
OVER THE LAST COUPLE OF YEARS IS DJANGO REST
FLASK-RESTFUL, DJANGO TASTYPIE.
DJANGO [INAUDIBLE] IS DEAD.
DON'T USE IT.
THERE'S LOTS OF GOOD THINGS TO USE FROM THESE
TOOLS.
THERE SEEMS TO BE A TON OF MOMENTUM IN THE
COMMUNITY AROUND DJANGO REST FRAMEWORK.
SO THAT'S -- I HOPE I'M NOT DISAPPOINTING
ANYONE.
A LOT OF MY EXAMPLES ARE GOING TO BE IN THE
CONTEXT OF DJANGO REST FRAMEWORK.
BUT A LOT OF THESE PROBLEMS I'M GOING TO TALK
ABOUT APPLY EQUALLY WELL TO THE OTHER
FRAMEWORKS THAT WE HAVE.
AND FOR A LITTLE MORE CONTEXT, DJANGO REST
FRAMEWORK HAD A KICKSTARTER JUST A FEW MONTHS
AGO, I BELIEVE, TO DO KICKSTARTER 3.0 --
SORRY-- REST FRAMEWORK 3.0, WHICH INCLUDED
SOME SERIALIZERS, NESTED RIGHTS, AND BETTER
VALIDATION.
HE HAD TO HIT 800% OF ITS FUND-RAISING GOAL,
WHICH IS 32,000 POUNDS, AND I HAVE NO IDEA
MONEY.
SO THERE'S A LOT OF SUPPORT FOR THIS TOOL.
HOW MANY CANADIAN DOLLARS THAT IS, BUT GOOD
SO I WANT TO GIVE YOU EXAMPLES OF WHAT DJANGO
REST FRAMEWORK WOULD DO WITH A REST API AND
WHAT A REALLY BASIC REST API LOOKS LIKE SO
THAT WE CAN BUILD ON TOP OF THAT KNOWLEDGE
AND START TO TALK ABOUT SOME OF THE ISSUES.
SO SERIALIZERS.
THE FIRST THING YOU NEED TO THINK ABOUT WHEN
YOU'RE DOING A REST API IS SERIALIZATION AND
DESERIALIZATION.
YOU HAVE THIS DATA WHICH IS, SAY, IN THE
DATABASE.
AND YOU NEED TO PULL IT OUT AND REPRESENT IT
AS SOMETHING THAT CAN THEN BE SENT OVER THE
WIRE BY YOUR API AND CONSUMED BY A JAVASCRIPT
FRAMEWORK.
SO IT NEEDS TO BE ABLE TO TRANSLATE BACK AND
FORTH BETWEEN JSON, XML AND YOUR KIND OF
NATIVE PYTHON FORMATS.
ALL OF THE TOOLS, ALL OF THE REST APIS DO
THIS SUPER, SUPER WELL, IT'S KIND OF A CORE
COMPETENCY OF THESE THINGS.
YOU GET THAT MORE OR LESS FOR FREE.
A CAT, WHICH I DO ALL THE TIME.
THE NEXT THING YOU NEED IS VIEWS IN AT LEAST
YOU CAN SEE IT'S FOUR LINES HERE TO SERIALIZE
THE DJANGO REST FRAMEWORK WORLD.
BASICALLY, WHAT THIS DOES IS IT WIRES UP THE
ACTUAL DATA THAT YOU'RE ACCESSING AND THE
SERIALIZER THAT YOU'RE USING TO REPRESENT IT.
SO THIS IS AGAIN JUST THREE LINES, AND YOU
GET A LOT FOR FREE HERE.
SO YOU'RE TELLING IT WHICH CATS TO SERIALIZE
AND HOW TO SERIALIZE THEM WITH THE SERIALIZER
WE JUST DEFINED.
THEN THERE'S KIND OF A QUICK ONE-LINER TO
TURN THAT INTO A URL END POINT, AND SUDDENLY
YOU'VE GOT A REST API.
YOU CAN HIT THAT CAT END POINT AND GET A LIST
OF CATS, YOU CAN HIT THAT CAT END POINT AND
CREATE A NEW CAT, ALL KINDS OF THINGS.
SO YOU CAN SEE FOR THE REALLY SIMPLE STUFF
THIS WORKS SO, SO WELL.
IT'S REALLY VERY STRAIGHTFORWARD TO CREATE
THESE BASIC APIS, WHICH IS AWESOME.
I WANT TO TEASE ONE OF THE -- I'LL WARN YOU.
IT TURNED OUT THAT A GOOD CHUNK OF WHAT I
HAVE TO SAY ABOUT THIS NEW WORLD AND WHERE WE
PERMISSIONS.
AUTHENTICATION AND PERMISSIONS.
NEED TO TAKE REST FRAMEWORKS HAS TO DO WITH
AND SO I WANTED TO TEASE KIND OF WHAT DO
PERMISSIONS LOOK LIKE TODAY IN DJANGO REST
FRAMEWORK AT LEAST.
AND YOU KNOW, THE OTHER FRAMEWORKS HAVE --
THERE ARE DEFINITELY DIFFERENCES IN HOW THEY
REPRESENT THIS BUT ROUGHLY SIMILAR CONCEPTS.
AND BASICALLY, WE'VE GOT A PERMISSION
SUBCLASS THAT DEFINES HAS OBJECT PERMISSION
OR HAS PERMISSION.
AND THIS BASICALLY YOU CAN WRITE YOUR CUSTOM
LOGIC INSIDE OF THERE TO SAY BASED ON THIS
REQUEST I KNOW IT'S THIS PERSON.
THEY HAVE ACCESS TO THIS THING.
SO YES, NO, THEY DO OR DO NOT HAVE
PERMISSION.
AND THAT'S IT.
THEY WILL EITHER GET A 401 ACCESS DENIED OR
WHATEVER IT IS, OR THEY WILL GET THE OBJECT.
GREAT.
SO LET'S TALK A LITTLE BIT ABOUT THE
PINPOINTS THAT ARE INVOLVED.
SO LIKE I SAID, THERE ARE A COUPLE OF BIG
DEVELOPMENT HAS BEEN TRENDING OVER THE LAST
FEW YEARS, AND I WANT TO TALK ABOUT KIND OF
TECTONIC SHIFTS I THINK IN THE WAY WEB
THE BIG TECTONIC SHIFTS THAT ARE AFFECTING
THE WAY APIS ARE BUILT.
THE FIRST IS TO THINK ABOUT WHO IS THE
CONSUMER OF YOUR API.
YOU KNOW, TRADITIONALLY, I THINK IF YOU GO
BACK, IT WAS VERY COMMON TO SEE
DEVELOPER-FACING APIS RIGHT AND YOU WANT
OTHER DEVELOPERS TO BE ABLE TO HACK ON YOUR
TOOL TO BE ABLE TO BUILD COOL STUFF ON TOP OF
YOUR THING AND LIKE MAKE THESE -- YOU KNOW,
COMPOSE THE FLOWS OF COOL STUFF AND THE
INTERNET WAS GOING TO BE GREAT.
AND IT'S STILL COOL, AND YOU CAN DO COOL
THINGS WITH DEVELOPER FACING APIS.  BUT I
THINK IT IS NOT ANY LONGER THE PRIMARY USE
CASE FOR BUILDING A REST API.
I THINK THE PRIMARY USE CASE FOR A LOT OF US
ANYWAY IS YOUR OWN APP.
YOU'RE WRITING THIS REST API FOR YOU TO USE
IN BUILDING YOUR OWN WEBSITE.
AND SURE, IT'S OPEN TO THE INTERNET BECAUSE
IT HAS TO BE, AND THEORETICALLY, SOMEONE
BUT IT'S NOT DOCUMENTED EXTERNALLY.
IT'S NOT MEANT FOR PEOPLE TO COME IN AND WORK
COULD COME IN AND START USING IT.
ON IT.
IT'S MEANT TO BUILD YOUR APP ON TOP OF IT.
AND I THINK THIS CHANGE IN THE CONSUMER API
HAS IMPORTANT IMPLICATIONS IN TERMS OF WHAT
IT NEEDS TO BE ABLE TO DO.
IT NEEDS TO BE SO MUCH BROADER IN SCOPE
BECAUSE IF YOU THINK ABOUT ALL THE THINGS
YOUR APP NEEDS TO TOUCH AND THINK ABOUT IT
AND WORK WITH IT'S BROADER THAN MOST OF THE
DEVELOPER APIS USED TO BE.
AND I THINK THE [INAUDIBLE] GET MORE COMPLEX
BECAUSE YOU'RE DEALING WITH DIFFERENT KINDS
OF USERS COMING FROM DIFFERENT KINDS OF
PLACES.
IT'S NOT QUITE AS ON RAILS AS A DEVELOPER API
EXPERIENCE MIGHT BE.
SO THE OTHER BIG TECTONIC SHIFTS I WANT TO
TALK ABOUT IS WHAT -- WELL, WHAT WE ALREADY
MENTIONED.
SO YOU REMEMBER THIS SHIFT FROM THE BACK END
AND THE FRONT END.
AND THE FRONT END NOW TAKING UP A PORTION OF
A GOOD CHUNK OF YOUR APPLICATION LOGIC IS NOW
BEING DONE IN THESE FRONT END [INAUDIBLE].
YOUR APPLICATION LOGIC.
I THINK THERE'S ANOTHER IMPORTANT WAY TO
THINK ABOUT THIS SHIFT, WHICH IS YOU USED TO
HAVE UNTRUSTED AND TRUSTED, AND NOW YOU'VE
GOT APPLICATION LOGIC RUNNING IN AN UNTRUSTED
ENVIRONMENT WHERE YOU DIDN'T REALLY HAVE MUCH
OF THAT GOING ON BEFORE.
YOU KNOW, JAVASCRIPT RUNS IN THE BROWSER.
WE HAVE NO CONTROL OVER WHAT HAPPENS THERE.
WE CAN'T GUARANTEE THAT THE CODE THAT'S
EXECUTING IS SECURE.
WE CAN'T GUARANTEE THAT WHAT WE WROTE IN
TERMS OF USING OUR API IS WHAT IS ACTUALLY
HAPPENING.
ANYONE COULD DO ANYTHING WITH THAT API, WHICH
MEANS IT'S MORE -- THE PERMISSIONS AND THE
AUTHENTICATIONS ARE MORE COMPLICATED THAN
THEY WERE, AND GETTING IT RIGHT IS MORE
IMPORTANT THAN IT EVER WAS.
SO I THINK THESE ARE THE KEY SHIFTS THAT HAVE
CAUSED KIND OF THIS EXTRA LAYER OF
COMPLICATION THAT WE NEED TO NOW SOLVE.
SO LET'S TALK ABOUT SOME OF THE KIND OF
PERMISSIONS NOW --
I WANT TO TALK SPECIFICALLY ABOUT THE KINDS
THINGS THAT HAPPENED WITH AUTHENTICATIONS AND
OF AUTHENTICATION JUST TO GIVE YOU AN
OVERVIEW OF WHAT THE TOOLS ARE, WHAT WE'RE
DEALING WITH HERE IN TERMS OF AUTHENTICATION
IN YOUR REST API.
YOU CAN DO SESSION BASED OFF -- WHICH
BASICALLY JUST PLUGS INTO IF YOU'RE USING
REGULAR SESSION BASED OFF IN YOUR REGULAR API
BEFORE A REST API.  YOU CAN KIND OF USE THAT
SAME SESSION BASED OFF.
IT'S A LITTLE BIT HACKY, BUT IT WORKS FAIRLY
WELL.
YOU CAN DO TOKEN-BASED AUTHENTICATION.
THERE ARE THINGS CALLED JWTS, OR JOTS.
IT STANDS FOR JSON WEB TOKEN, AND IT'S
BASICALLY A SIGNED REPRESENTATION OF A CLAIM.
SO LIKE THIS PERSON CAN DO THIS THING WITH
THIS THING.
CAN BE KIND OF COMPACTLY REPRESENTED LIKE YOU
SEE THERE AND SENT BACK AND FORTH ALONG THE
WIRE.
IT'S A FORMAT THAT'S MEANT TO BE PASSED BACK
AND FORTH WITH EVERY REQUEST.
YOU'VE ALSO GOT SIGNED AUTHENTICATION.
SO YOU'VE GOT A URL, AND YOU JUST PLOP A
SO THAT'S AN OPTION.
SIGNATURE ON TOP OF IT TO SAY, YES, THIS
PERSON CAN DO THIS THING.
THIS IS GREAT IF YOU'RE -- YOU KNOW, IF YOU
WANT TO, FOR EXAMPLE, RESET YOUR PASSWORD.
YOU'VE SEEN THOSE SIGNED URLS IN THOSE EMAILS
TO RESET YOUR PASSWORD.
THAT'S THE KIND OF THING THAT THIS IS
TYPICALLY USED FOR.
AND THEN, OF COURSE, MANY OF US WANT TO DO
ALL OF THIS.
OUR APPLICATION USES TWO OF THEM.
WE USE SESSION OFF AND SIGNED OFF.
WE HAVEN'T USED TOKENS, ALTHOUGH WE MIGHT ONE
DAY.
AND SO, OF COURSE, DOING MULTIPLE OF THESE IN
CONCERT ADS EXTRA COMPLICATION AS WELL.
SO LET'S TALK ABOUT SOME OF THE PROBLEMS WITH
PERMISSIONS AND GETTING THOSE RIGHT.
THERE ARE A LOT OF DIFFERENT KINDS OF
PERMISSIONS THAT I THINK APPLICATION LOGIC
HAS TO DEAL WITH THAT WERE REALLY TRIMMED
DOWN WHEN WE WERE JUST DEALING WITH A
YOUR APPLICATION IS GOING TO HAVE ALL KINDS
OF THINGS.
DEVELOPER API.
IT'S GOING TO HAVE TABLE-LEVEL PERMISSIONS
WHICH IS BASICALLY CAN I GET ALL THE CATS OR
CAN I GET ANY CATS, RIGHT?
CAN I REACH THIS END POINT OR NOT.
DO I HAVE PERMISSION ON THAT.
YOU CAN TALK ABOUT COLUMN-LEVEL PERMISSIONS.
SO DO I GET TO SEE THE PASSWORD FIELD.
DO I GET TO SEE THE PRICE FIELD.
DO I GET TO SEE SOME OF THE OTHER SENSITIVE
DATA.
YOU CAN TALK ABOUT ROW-LEVEL PERMISSIONS.
SO WHICH CATS DO I OWN.
AND THEREFORE, WHICH CATS CAN I LOOK AT,
WHICH CATS CAN I EDIT.
WE CAN TALK ABOUT READ VERSUS WRITE
PERMISSIONS FOR ANY OF THOSE THINGS.
CAN I EDIT THE PRICE OF AN ITEM OR CAN I JUST
READ THE PRICE OF AN ITEM.
AND, OF COURSE, MOST OF US ALREADY KNOW
WRITES ARE MORE COMPLICATED THAN JUST WRITES.
YOU CAN CREATE, UPDATE, DELETE.
THERE ARE LOTS OF COMPLICATED WAYS TO THINK
WE MENTIONED A MINUTE AGO THERE ARE MANY
DIFFERENT WAYS TO AUTHENTICATE A USER AND
ABOUT THAT.
MANY OF US, I THINK, WILL USE AT LEAST TWO.
AND SO SUDDENLY, YOU MIGHT HAVE A USER WHO IS
LOGGED IF BY THEIR SESSION BUT ALSO HAS A
SIGNED URL GRANTING THEM CERTAIN OTHER
PERMISSIONS AND HOW DO THOSE TWO WORK IN
CONCERT TO MAKE SURE YOU'RE GETTING THE RIGHT
PERMISSIONS SET UP ON THIS THING.
AND OF COURSE, AGAIN, YOU MIGHT WANT ALL OF
THESE THINGS.
AND IN FACT WE REGULARLY DO ALL OF THESE
THINGS AT THE SAME TIME.
AND I THINK YOU CAN IMAGINE JUST HOW
COMPLICATED THAT GETS.
BUT IF YOU ARE HAVING TROUBLE IMAGINING HOW
COMPLICATED THAT GETS, I'M GOING TO SHOW YOU.
I WANT TO SHOW YOU A REAL WORLD EXAMPLE.
THIS IS VERY LIGHTLY EDITED FROM OUR CODE
BASE, WHAT WE'RE DOING FOR JUST ONE OF OUR
API END POINTS.
AND I WANT TO WALK YOU THROUGH SO YOU GET A
SENSE OF WHAT IT TAKES TO WRITE THE
PERMISSIONS FOR THIS END POINT.
A SPECIAL MIX IN.
WE WROTE THIS THING OURSELVES CALLED A SIGNED
SO RIGHT OFF THE BAT YOU CAN SEE WE'RE USING
VIEW SET MIX IN.
ALLOWS YOU TO DO KIND OF SIGNED URLS.
FROM THERE, WE JUMP DOWN, AND WE SEE
PERMISSION CLASSES.
AND THIS IS WHERE YOU DEFINE WHICH
PERMISSIONS APPLY TO THIS END POINT.
AND THEN YOU SEE IT WEIRD OR THING.
MAYBE A FOURTH PARTY LIBRARY.
OUTSIDE OF DJANGO REST FRAMEWORK CALLED REST
CONDITION, AND IT ALLOWS FOR COMPOSING
VARIOUS PERMISSION CLASSES INTO MORE
COMPLICATED PERMISSION CLASSES.
SO YOU CAN OR, OR AND/OR NOT ANY GIVEN
PERMISSION AND COMBINE THEM ALL TOGETHER INTO
ONE MEGA PERMISSION WHICH IS OBVIOUSLY WAY
MORE MAINTAINABLE THAN IF YOU HAD TO WRITE
EACH ONE OF THESE OVER AND OVER AND OVER
AGAIN.
SO WE'VE GOT THIS OR, WHICH BASICALLY SAYS IS
ANY OF THE FOLLOWING LINES GIVES THIS PERSON
PERMISSION, THEN THEY'RE GOOD TO GO.
SO THIS IS ALL A LITTLE BIT SPECIFIC TO OUR
OBSCENE AMOUNT OF DEPTH BUT I WANT TO GIVE
YOU AN IDEA HOW COMPLICATED THIS GETS.
APPLICATION SO I'M NOT GOING TO GO INTO AN
THE FIRST ONE IS IF THEY ARE A MEMBER OF THIS
ORGANIZATION AND THE OPERATION IS READ ONLY
OR IF THEY ARE AN ADMIN AT THAT ORGANIZATION,
AND THEY'RE NOT TRYING TO PATCH ANY
PARTICULAR FIELDS THAT THEY ARE NOT ALLOWED
TO PATCH, THIS IS ANOTHER THING THAT WE HAD
TO BUILD CUSTOMS, THIS PATCHABLE FIELDS
FACTORY.
SO FOR EXAMPLE, THEY'RE ABLE TO PATCH, YOU
KNOW, THE GUESS COUNT ON THIS MEAL THAT
THEY'RE GETTING.
WE DO FOOD.
SO ON THIS MEAL THAT THEY'RE GETTING, THEY
CAN PATCH THE GUESS COUNT BUT THEY CAN'T
PATCH THE PRICE ON THEIR OWN.
RIGHT?
THEY CAN'T SET ALL THEIR MEALS TO ZERO
DOLLARS.
THE NEXT THING, IS IT A VENDOR ADMIN.
RIGHT?
WE HAVE TWO DIFFERENT PARTIES WHO CAN SEE
THIS, OR THE PERSON SELLING IT OR THE PERSON
SO THE VENDER CAN ALSO SEE THIS ORDER.
OR IF YOU ARE BOTH SIGNED PERMISSION AND READ
BUYING IT.
ONLY, SO THIS IS THAT SIGNATURE WE'RE TALKING
ABOUT.
SO YOU CAN ARRIVE HERE WITH A URL WITH A
SIGNED PERMISSION, AND YOU'RE ONLY TAKING A
READ ONLY ACTION, THEN YOU CAN SEE THIS
ORDER, OR IF YOU'RE AN INTERNAL ADMIN USER,
YOU JUST GET PERMISSION.
SO THAT'S ALREADY PRETTY COMPLICATED.
TAKES A LOT OF WORK TO COMPOSE THESE THINGS
TOGETHER.
BUT WE'RE NOT DONE YET.
SO THAT WAS JUST FOR OBJECT LEVEL
PERMISSIONS.
WE ALSO NEED TO DO LIST LEVEL PERMISSIONS.
THOSE ARE DONE SEPARATELY IN MOST OF THE
FRAMEWORKS THAT I'VE SEEN.
SO IF YOU WANT TO GET A SINGLE ORDER, THAT'S
WHAT WE WERE LOOKING AT BEFORE.
IF YOU WANT TO GET A LIST OF ORDERS, THAT'S
WHAT WE'RE DEFINING HERE NOW.
SO YOU SUBCLASS THIS -- YOU DEFINE A GET
QUERY SET METHOD, AND IF THE USER IS
GET THE -- AND THEY'RE INTERNAL STAFF, THEY
GET THE WHOLE LIST.
AUTHENTICATED AND THEY'RE STAFF, THEN THEY
IF THEY'RE AUTHENTICATED AND THEY'RE NOT
STAFF, THEN YOU DO THIS COMPLICATED QUERY
THAT WE DON'T NEED TO GET INTO THAT HOPEFULLY
DOES ROUGHLY THE SAME THING YOU SAW A MINUTE
A AGO IN THE PERMISSION CLASS LIST.
AND IF THEY'RE NOT AUTHENTICATED, THEY GET
[INAUDIBLE].
OKAY.
SO THAT'S A BASIC EXAMPLE HERE.
I WANT TO TALK REALLY BRIEFLY ABOUT KIND OF
WHAT THAT ALL TOOK.
LET'S RECAP WHAT WE JUST SAW AND KIND OF
BREAK IT DOWN.
WE SAW A NUMBER OF DIFFERENT LIBRARIES BEING
USED.
WE SAW DJANGO REST OF COURSE.
WE SAW REST CONDITION WHICH IS ALSO FORKED
FROM THE ORIGINAL LIBRARY TO FIX A BUG THAT
WE SAW.
SIGNED VIEW SETS WHICH I MENTIONED THAT WE
DO -- WE BUILT IN-HOUSE TO DO SIGNED URLS AND
GET PERMISSIONS THAT WAY, AND THE PATCHABLE
DETERMINES WHICH FIELDS YOU CAN EDIT VERSUS
JUST READ.
FIELDS FACTOR THAT I MENTIONED THAT
SO WE'RE DEALING WITH A LOT OF SPECIFIC CODE
THERE.
BUT ACTUALLY, I THINK MORE IMPORTANT IS LET'S
LOOK AT HOW MAY DIFFERENT PLACES IN YOUR CODE
BASE PERMISSIONS EXIST FOR THIS ONE END
POINT.
PERMISSIONS EXIST IN A LOT OF DIFFERENT
LOCATIONS.
YOU SAW THERE WAS A MIX IN THAT WE HAD TO
PROVIDE ON THE VIEW SET CLASS.
THERE WAS A PERMISSION LIST WE WENT ON OVER
ON THE VIEW SET CLASS.
THERE WAS A GET QUERY THAT YOU HAD TO
OVERRIDE.
THERE'S FIELDS YOU HAVE TO SPECIFY ON THE
SERIALIZER CLASS WHICH I DIDN'T EVEN SHOW
YOU.
AND THERE'S PERMISSION CLASSES WHICH YOU SAW
IN USE BUT YOU DIDN'T SEE THEIR DEFINITIONS.
THAT'S TOO MANY PLACES.
THAT'S TOO MUCH CODE IN TOO MANY PLACES FOR
YOU TO KEEP TRACK OF WHAT'S GOING ON AND BE
I THINK IT IS WAY TOO PRONE TO ERRORS.
I THINK THIS IS SOMETHING THAT IS WAY TOO
SURE THAT THIS IS WORKING.
COMPLICATED TO REALLY PROPERLY MAINTAIN.
AND I WANT TO MAINTAINABLE SET OF PERMISSIONS
AND AUTHENTICATIONS FOR MY APP.
I THINK THAT THIS IS INCREDIBLY IMPORTANT FOR
WHERE WE'RE GOING.
SO LET'S TALK A LITTLE BIT ABOUT THE FUTURE
AND WHAT WE CAN DO BETTER HOPEFULLY.
SO THE THINGS I WOULD LIKE TO SEE -- SORRY.
I SHOULD HAVE WARNED YOU UP FRONT.
THIS IS GOING TO BE ONE OF THOSE TALKS THAT
ENDS WITH ME SAYING THIS IS WHAT WE SHOULD DO
NEXT.
I HAVE SOME IDEAS.
I DON'T HAVE THE SOLUTIONS TODAY FOR YOU.
SO I'M HOPING THAT WE TALK ABOUT THIS, AND
YOU GUYS CAN COME UP TO ME AFTERWARDS.
WE CAN TALK AT THE SPRINTS.
I WANT TO MAKE THIS A BETTER WORLD.
I WANT TO MAKE REST SOMETHING THAT WE CAN DO
EASILY, AND I WANT OUR TOOLS TO WORK FOR US
INSTEAD OF AGAINST US SO THE PYTHON CAN HAVE
A REALLY STRONG PLACE IN THE WORLD OF WEB
I THINK THIS IS REQUIRED FOR IT.
SO ONE THING THAT I WOULD LIKE TO SEE
DEVELOPMENT.
[INAUDIBLE] LIBRARIES TO DO THESE THINGS
INSTEAD OF HAVING TO BUILD THIS CUSTOM EVERY
TIME.
WE'VE DONE A LOT OF WORK ON THIS.
I WOULD LOVE TO GET IT TO A POINT WHERE IT
CAN BE OPEN SOURCED.
A LOT OF YOU PROBABLY KNOW HOW LONG THAT LAST
MILE IS.
WE'RE INTERESTED IF OPEN SOURCING IT.
SO IF YOU'RE INTERESTED IN WORKING ON THIS ON
SOME OF THAT, LET ME KNOW.
I THINK COMBINING OBJECT -- LIST AND OBJECT
PERMISSION S IS REALLY, REALLY IMPORTANT.
ALL THE LIBRARIES THAT I'VE LOOKED AT IF ANY
DEPTH SPLIT THESE UP AT LEAST TO SOME EXTENT.
AND I THINK WRITING THE SAME CONCEPT TWO
DIFFERENT TIMES IN TWO DIFFERENT STYLES IN
TWO DIFFERENT PLACES IN YOUR APPLICATION IS
JUST ASKING FOR PROBLEMS.
WE NEED TO COME UP WITH A UNIFIED DESCRIPTION
FOR WHAT THE PERMISSIONS ARE, WHETHER IT'S A
LIST OR A SINGLE OBJECT.
WHAT YOU'RE DOING.
YOU DON'T ACTUALLY HAVE SEPARATE
BECAUSE I THINK 99 PERCENT OF THE TIME THAT'S
SPECIFICATIONS FOR EACH OBJECT.
AND THEN I THINK ORGANIZING PERMISSIONS BY
WHO IS AUTHENTICATED RATHER THAN BY WHAT END
POINT YOU'RE WORKING WITH HAS A LOT OF
PROMISE.
I'VE DONE A LITTLE BIT OF LIKE SPECCING OUT
WHAT THAT MIGHT LOOK LIKE, AND I'M REALLY
EXCITED ABOUT IT.
LIKE I SAID, I THINK THE MAIN PROBLEM WITH
ALL OF THIS IS THAT THINGS LIVE IN TOO MANY
PLACES AND IT GETS TOO COMPLICATED AND TOO
HARD TO MAINTAIN.
AND IF WE CAN PULL ALL OF THE AUTHENTICATIONS
AND PERMISSIONS INTO ONE CENTRALIZED LOCATION
WHERE YOU DEFINE IT ALL RIGHT THERE, THAT
WILL HELP IMMENSELY.
SO LIKE I SAID, I WANT YOUR HELP.
I THINK THAT THIS WORLD CAN BE SO MUCH BETTER
THAN IT IS.
I WANT US TO MAKE REST BETTER TOGETHER.
YOU GET IT?
YEAH?
KNOW -- LIKE I KEEP HAVING THIS FEELING THAT
WE'RE MISSING SOMETHING FROM SOMEWHERE.
SO IF YOU HAVE EXAMPLES OF PRIOR ART, IF YOU
LIKE THIS IS A COMMON PROBLEM.
SOMEONE SOMEWHERE, WHETHER IT'S, YOU KNOW,
UNIXY THINGS, WHETHER IT'S RUBY OR JAVASCRIPT
EVEN, SOMEONE'S GOT THIS FIGURED OUT REALLY
WELL, I THINK.
AND THEY'RE JUST LAUGHING AT ME RIGHT NOW.
MAYBE YOU ARE, TOO.
AND IF YOU ARE, COME AND TELL ME.
I HAVE TO IMAGINE THERE'S A GOOD SOLUTION TO
THIS SOMEWHERE.
IF YOU KNOW, IF YOU HAVE ANY GOOD IDEAS ABOUT
THIS, I WANT TO HEAR ABOUT THEM.
COME TALK TO ME AFTERWARDS.
I WANT TO MAKE THE WEB BETTER TOGETHER.
I WANT TO BE ABLE TO DO IT IN PYTHON.
AND I THINK THAT WE NEED THIS AS A COMMUNITY
IF WE'RE GOING TO KEEP DOING THAT.
SO LIKE I SAID, I'M JEFF.
I GOT TO PLUG CHEWSE REALLY QUICKLY BECAUSE
THEY PAID ME TO BE HERE.
MY COMPANY CHEWSE IS AWESOME.
THEIR FOOD IS AWESOME.
FIVE MINUTES.
SO YOU GUYS GET TO ASK ME SOME EASY
I'M SORRY, DO WE HAVE A MINUTE AND WE HAVE
QUESTIONS.
[ APPLAUSE ]
>> AUDIENCE:  HEY, JEFF.
>> HI.
>> AUDIENCE:  I'M AN OLD GUY.
AND, YOU KNOW, IT'S LIKE YOU MAKE LUNCHES,
AND I LOVE SALT, YOU KNOW, AND SOMETIMES I
LIKE THE SEA SALT, BUT MOST OF THE TIME, YOU
KNOW, THE OPEN WOUND REALLY DEMANDS SOME
KOSHER SALT AND YOU'RE POURING IT IN.
SO I'M GOING TO START BY SAYING WHAT YOU
DON'T WANT TO HEAR.
>>  OKAY.
>> AUDIENCE:  OKAY?
AND WHAT YOU DON'T WANT TO HEAR IS, HI, I'M
FROM THE GOVERNMENT.
I'M HERE TO HELP YOU.
OKAY?
THOSE WORDS ARE DANGEROUS.
BUT IN THIS CASE, WHAT YOU'RE DOING AND THE
SALT AND WHAT MAKES ME HURT SO MUCH AND MAKES
ME SO BITTER IS YOU KEEP USING THE WRONG
OKAY?
THERE'S THIS NICKEL AND DIME ORGANIZATION UP
WORDS.
IN GAITHERSBERG, MARYLAND.
IT'S CALLED THE NATIONAL INSTITUTES OF
STANDARDS AND TECHNOLOGY.
OR IF YOU'RE COOL, YOU CAN CALL IT NIST.
OKAY?
AND THEY HAVE SOME PEOPLE THERE WHO DO
NOTHING BUT THINK ABOUT THIS CRAP AND THAT
GET PAID WITH --
>>  I'LL WARN YOU.  I'M NOT COOL AT ALL.
>> AUDIENCE:  HUH?
>>  I'M SORRY.
I WANTED TO WARN YOU I'M NOT COOL AT ALL.
SO.
>>  AUDIENCE:  OKAY.
THAT'S COOL.
BECAUSE WHAT YOU'RE DOING, FIRST OF ALL, IT'S
REALLY IMPORTANT TO USE THE RIGHT WORDS.
THE WORDS YOU'RE LOOKING FOR AND THE TERM
YOU'RE LOOKING FOR IS I&A.
OKAY?
IDENTIFICATION AND AUTHORIZATION.
TWO SEPARATE CONCEPTS.
AND YOU WANT TO USE THOSE WORDS.
OKAY?
AND YOU'RE USING DIFFERENT WORDS.
AND THEN WHAT YOU WANT TO DO IS YOU WANT TO
GO TO THE NIST WEBSITE, AND YOU WANT TO SEE
WHAT THE LAST, OH, GOLLY, 40 YEARS OF
INDUSTRIAL AND MILITARY SECURITY HAVE DONE.
OKAY?
THERE'S A LOT OF GOOD STUFF OUT THERE.
AND WHAT YOU'RE DOING HERE IS GERMINATING THE
MOST INCREDIBLE DIFFICULTY FOR SOMEBODY FIVE
YEARS FROM NOW TRYING TO DO SOMETHING WITH,
YOU KNOW, THE PCI STANDARD AND TRYING TO, YOU
KNOW, OH, OKAY, WE WANT TO GET THIS THING SO
WE CAN ACTUALLY RUN CREDIT CARDS THROUGH IT.
YOU KNOW WHAT I'M SAYING.
>>  CAN I ASK YOU A FAVOR, THEN?
>>  AUDIENCE:  AND THE QUESTION IS, DO YOU
THINK YOU CAN MAYBE REWRITE THIS THING TO
HANDLE SOMETHING LIKE THE NIST, YOU KNOW,
STANDARD?
IS THAT SOMETHING --
>>  POTENTIALLY, [INAUDIBLE] CAN YOU COME
TALK TO ME?
BECAUSE LIKE I SAID, I WANT TO KNOW THESE
FOR THE RECORD, I DIDN'T WRITE ALMOST ANY OF
THE TOOLS THAT ARE IN USE HERE.
SORT OF THINGS.
BUT YES, I WANT THEM TO BE BETTER, LIKE I
SAID.
SO COME HELP ME AFTERWARDS.
I WOULD LOVE TO TALK.
>>  AUDIENCE:  I'M JUST A OLD GUY.
SO THAT'S COOL.
>>  ANY OTHER QUESTIONS, AND DO WE HAVE TIME
LEFT?
YOU'RE ALL GOOD.
>> I MADE A TIME.
I DON'T KNOW ABOUT YOU.
>> AUDIENCE:  I'M GOING TO PLAY DEVIL'S
ADVOCATE, AND I DON'T KNOW HOW MUCH I TRUST
WHAT I'M SAYING, BUT IF YOU OPENED UP THE
DATABASE DIRECTLY, AND YOU DIDN'T HAVE REST,
THEN HOW MUCH OF WHAT YOU'RE TALKING ABOUT
CAN BE SUPPORTED?
LIKE IF YOU LOOK AT POSTGRESQL, IT HAS
[INAUDIBLE].
IT HAS LOW LEVEL PERMISSIONS, YOU CAN DO
BUSINESS RULES IN A STORED PROCEDURE.
SO --
KNOW SCHEMA VERSE FROM DEFCON A FEW YEARS
BACK?
>>  I THOUGHT ABOUT BRINGING UP -- DO YOU
>> Audience:  NOT FROM HERE.
>> I'M GOING TO MESS UP SOME PARTS OF IT SO
FORGIVE ME.
THERE WAS A REALLY INTERESTING GAME THAT GOT
CREATED IN POSTGRESQL AT DEFCON THAT SORT OF
TESTED THE LIMITS OF POSTGRESQL'S ABILITY TO
HANDLE THESE SORTS OF PERMISSIONS IN
OBVIOUSLY AN ENVIRONMENT WHERE EVERYONE WAS
GOING TO TRY TO MESS WITH IT.
AND THEY BASICALLY MADE A GAME WHERE YOU
WOULD RUN SQUALL COMMANDS AGAINST IT USING
DDSQL COMMANDS AGAINST IT USING
AUTHENTICATION AND -- I'M SORRY.
ALL THE RIGHT TERMS.
AND THAT YOU WON THE GAME BY EITHER CHEATING
IF YOU COULD PROVE THAT YOU COULD BREAK IT OR
ACTUALLY WORKING WITH IT.
BUT YEAH, I AGREE WITH YOU.
I THINK THERE ARE SOME REALLY INTERESTING
THINGS WE COULD EXPLORE IN TERMS OF EXISTING
SYSTEMS AND HOW THEY WORK WITH THIS STUFF.
AND I THINK POSTGRESQL, YOU'RE RIGHT,
TRIED TO STRESS TEST IT THAT WAY BUT
EVERYTHING I'VE HEARD IT'S BETTER THAN YOU
EVERYTHING I'VE HEARD ABOUT IT, I HAVEN'T
MIGHT THINK OF THIS STUFF.
>>  YEAH, BECAUSE I REALLY LIKE YOUR COMMENT
THAT HAVING ONE THING IN TWO OR THREE OR FOUR
DIFFERENT PLACES IS BAD.
AND THESE REST APPLICATIONS ARE ALMOST ALWAYS
DATABASE BACKED.
SO YOU HAVE TO HAVE DATABASE.
IT HAS TO HAVE ITS OWN PERMISSIONS.
SO TO WHAT EXTENT CAN WE JUST HAVE IT THERE
AND NO WHERE ELSE?
>>  SURE.
>> Audience:  THAT'S ALL I'VE GOT THANK YOU.
>> WE HAVE TIME FOR ONE MORE.
>> OKAY.
>> Audience:  SO I'VE DONE A SIMILAR KIND OF
COMPOSED PERMISSION SYSTEM, AND WE HAVE
PERFORMANCE PROBLEMS AS A RESULT.
WHAT HAVE YOU GUYS DONE LIKE, YOU KNOW, IN
QUERIES TYPE THINGS THAT YOU'RE DOING
[INAUDIBLE] AND PAGINATION AND ALL THAT.
>> WE ARE LUCKY TO BE A RELATIVELY SMALL
START-UP AND DON'T HAPPEN TO HAVE A WHOLE LOT
BUT I LIKE -- SO I DON'T DIRECTLY HAVE THE
ANSWER TO YOUR QUESTION.
OF SCALE ISSUES YET.
I THINK THAT THERE ARE WAYS THAT YOU CAN WORK
WITH CACHING.
I THINK THAT THERE ARE WAYS THAT YOU CAN WORK
WITH STREAMLINING THESE PERMISSIONS.
I WOULD LIKE TO FIND A WAY ALSO -- BECAUSE I
THINK, YOU KNOW, WHEN I LOOK AT THOSE SORTS
OF THINGS, I FALL INTO THE SAME THINKING THAT
YOU SEEM TO HAVE RUN INTO AS AN ACTUAL ISSUE,
WHICH IS ARE WE REALLY GOING TO EXECUTE A
DATABASE QUERY FOR EACH OF THESE THINGS IN
THIS OR AND ISN'T THAT PRETTY AWFUL.
AND I THINK IT IS.
AND I THINK THAT THERE'S A WAY TO BOTH
COMBINE ALL OF YOUR PERMISSIONS INTO ONE
LOCATION AS WELL AS COMBINE THE QUERIES,
COMBINE THE WORK THAT YOU'RE DOING.
SO DEPENDING ON THE SCALE OF YOUR
APPLICATION, THERE MAY BE OTHER THINGS YOU
HAVE TO DO WITH CACHING AND WHATEVER ELSE.
BUT I THINK THAT COMBINING PERMISSIONS CAN
ALSO BE PART OF THE SOLUTION TO THAT, IF THAT
MAKES SENSE.
>>  THANKS, EVERYBODY, FOR COMING OUT.
TALKS ARE HAPPENING NEXT DOOR.
>> Audience:  COOL.
ENJOY YOUR PYTHON.
[ APPLAUSE ]
