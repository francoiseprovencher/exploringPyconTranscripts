FORMATS.
ALWAYS LOUDER THAN YOU THINK IT'S GOING TO BE.
HI.
SO BEFORE I EVEN START, I NEED TO EXPRESS MY
PROFOUND GRATITUDE TO THE PYTHON SOFTWARE
FOUNDATION, BECAUSE WITHOUT THEM, I COULD NOT
HAVE GOTTEN HERE, I COULD NOT HAVE BEEN HERE,
COULD NOT HAVE MET ALL YOU AMAZING PEOPLE.
WHO'S HERE BECAUSE I MET YOU DURING THE WEEK AND
I BROWBEAT YOU INTO COMING TO MY TALK.
YES, PASSIVE AGGRESSION WORKS.
I CAME A LONG WAY TO GET HERE.
I SPENT 38 HOURS ON -- NO, NOT 38 HOURS ON PLANES
BUT SATURDAY WAS 38 HOURS LONG AND THAT'S A
REALLY LONG DAY, WHEN YOU CROSS THE -- SEE THAT
BLUE SPOT IN THE MIDDLE.
THAT LITTLE BLUE -- THAT'S REALLY BIG.
PACIFIC OCEAN IS REALLY BIG.
TAKES A LONG TIME.
SO I'M TOM EASTMAN, A DEVELOPER FROM WELLINGTON,
NEW ZEALAND, WE'RE OPEN SOURCE SPECIALISTS, OPEN
SOURCE IDEALISTS AND ZEALOTS AND FUN AND A GREAT
CROWD OF PEOPLE.
IT'S A PYTHON DEVELOPER, NOT A SECURITY GUY, NOT
A PENETRATION TESTER.
BUT ALL OF MY DRINKING BUDDIES ARE SO I'VE
DEVELOPED A REALLY HEALTHY PARANOID WORLD VIEW
BECAUSE I DON'T LIKE IT WHEN THEY BREAK MY TOYS.
SO WHO HERE TODAY WORKS IN THE SECURITY INDUSTRY
IN SOME FORM OR ANOTHER?
EVERYONE ELSE, KEEP AN EYE ON THESE GUYS BECAUSE
THEY KNOW EVERYTHING I'M GOING TO TALK ABOUT
TODAY AND THEY'LL BE SMILING SMUGLY TO THEMSELVES
AS I GO THROUGH THIS.
AND WHO HERE IS A WEB DEV OR PYTHON DEVELOPER?
YEAH.
IF YOU'RE A DEVELOPER, IT'S ABOUT BEING AWARE
THAT WHAT I'M TALKING ABOUT TODAY IS EVEN A THING
THAT CAN BE DONE.
SOME OF YOU MIGHT FIND WHAT I'M GOING TO TALK
ABOUT SORT OF REMEDIAL, YOU MIGHT ALREADY KNOW
IT, BUT IT'S STUFF THAT EVERYONE NEEDS TO KNOW
AND IT'S STILL CATCHES PEOPLE BY SURPRISE SO
THAT'S WHY I KEEP TALKING ABOUT IT.
SO, IF YOU KNOW THIS STUFF, AND YOU'RE NOT ONE OF
THESE MEAN SECURITY GUYS, SPREAD THE WORD.
RUIN THEIR DAY, MAKE THEIR LIVES HARDER.
SO I'M GOING TO TALK ABOUT SERIALIZATION FORMATS
OR MARK-UP LANGUAGES OR WHATEVER YOU WANT TO CALL
THEM.
I MEAN FORMATS THAT HAVE STRUCTURED DATA THAT YOU
FEED IN SO THAT YOU DON'T HAVE TO INVENT YOUR OWN
DOT-DOC OR FILE FORMAT, WHATEVER.
THERE ARE A BILLION OF THEM IN ALL KINDS OF
LANGUAGES AND USES, AND ALL OF THEM HAVE LITTLE
SURPRISES TUCKED AWAY, ALL OF THEM ARE JUST A
LITTLE TOO SMART FOR THEIR OWN GOOD SOMETIME.
FOR THIS TALK, I'M JUST TALKING ABOUT YAML, XML
AND JSON, BUT THOSE ARE EXAMPLES OF MY LARGER
POINT THAT I'LL BE MAKING.
WHO IN THIS ROOM IS FAMILIAR WITH THE OWASP TOP
10?
THANKS GREAT.
THE OWASP TOP 10 IS A REPORT BY ANALYST OF
SECURITIES PUBLISHED BY THE OWASP GROUP, IT'S
OPEN WEB SECURITY --
AND -- HANG ON A SEC.
SO, IF YOU ARE UNFAMILIAR WITH THE OWASP TOP 10,
GOOGLE IT AND READ IT BECAUSE THIS MIGHT SOUND A
LITTLE HARSH BUT IF YOU'RE A WEB DEVELOPER AND
NOT FARM WITNESS, YOU'RE A LIABILITY TO YOUR
PROJECT AND YOU'RE A LIABILITY TO YOUR COMPANY.
THAT SOUNDS HARSH BUT THE POINT IS THAT THAT'S
FIXABLE.
GOOGLE IT AND READ IT ALL AND MAKE SURE THAT
YOU'RE FAMILIAR WITH THESE THINGS.
I WAS WORKING ON A PROJECT WHERE MITIGATING THE
OWASP TOP 10 VULNERABILITIES WAS A NON-FUNCTIONAL
REQUIREMENT WHICH IS A SMART ANYONE FOR ALL
PRONGS, AS A CHECKLIST TO MAKE SURE YOU'VE GONE
THROUGH.
AND THEN I ATTENDED A TALK BY A COLLEAGUE OF
MINE, MIKE, AND HE SHOWED ME SOME TRICKS IN XML
THAT SCARED THE CRAP OUT OF ME AND THEY WERE NOT
IN THE OWASP TOP 10 AND AFTER THAT TALK, WHICH
WAS AT A PUB AT THE SECURITY INTEREST GROUP IN
WELLINGTON, I WENT BACK TO WORK, TRIED THAT STUFF
OUT ON THE PROJECT THAT I HAD BEEN WORKING ON FOR
TWO YEARS.
THE WHOLE THING BLEW UP AND DIED AND I GOT SCARED
AND THAT'S WHY I STARTED COMPLAINING ABOUT IT A
LOT.
THE PRINCIPLE THAT SECURITY PEOPLE GO UNDER IS
THEY ONLY NEED TO KNOW ONE THING YOU DON'T,
RIGHT?
IF YOU'RE A DEVELOPER, YOU HAVE TO KNOW EVERY
POSSIBLE WAY A SECURITY OR A HACKER OR A BAD
PERSON CAN DO MEAN THINGS TO YOU.
BUT THE SECURITY GUY JUST HAS TO KNOW ONE THING
THAT YOU DIDN'T KNOW WAS A PROBLEM.
AND SO WHAT I'M TACKING ABOUT TODAY, LIKE IF
YOU'VE GOT A BUGGY XML LIBRARY, YOU HAVE A
PROBLEM.
IF YOU'VE GOT BUFFER OVERRUNS IN THE
C-IMPLEMENTATION OF THE JSON PARSER IN THE PYTHON
JSON LIBRARY, THAT'S UNIVERSITY A LIBRARY, THAT'S
WHY JACOB IS PUZZLING IT RIGHT NOW.
I'M NOT TALKING ABOUT FEATURES, I'M TALKING ABOUT
STUFF YAML CAN DO BECAUSE SOMEONE THOUGHT IT WAS
A GREAT IDEA FOR YAML TO DO IT, STUFF THAT XML
CAN DO BECAUSE THEY WERE SURE IT WAS A GREAT IDEA
AT THE TIME.
CAN EVERYBODY READ THAT CODE?
REASONABLY CLEARLY?
HANDS UP IF YOU CAN'T.
OKAY.
SO IT'S PRETTY SIMPLE.
IT'S A BOTTLE WEB APP, THIS IS THE HULL WEB APP
AND JUST DEMONSTRATING SOME REALLY SIMPLE DATA
LOADING STUFF.
THIS IS NOT GOOD CODE THAT YOU SHOULD DO IN YOUR
APPLICATIONS, YOU'LL SEE WHY SOON, BUT THAT FIRST
FUNCTION IS BASICALLY JUST A YAML END POINT.
YOU POST SOME YAML TO IT AND IT PARSES OUT WHAT
IT PARSED.
THE NICKS ONE IS AN XML ENDS POINT.
YOU POST XML TO IT AND IT TELLS YOU WHAT IT
PARSED.
THAT'S USING THE XML LIBRARY WHICH IS THE ONE YOU
OUGHT TO BE USING THE THE THIRD ONE IS THE SAME
THING USING PYTHON STANDARD LIBRARY STUFF.
I JUST USED THIS AS AN EXAMPLE WHEN I WAS PLAYING
AROUND WITH SOME OF THESE FEATURES.
BUT THE POINT -- ONE POINT THAT I REALLY WANT TO
GET ACROSS HERE IS IF YOU HAVE A LOOK AT THAT TOP
ONE, I'M IMPORTING THE YAML MODULE AND THEN JUST
GOING YAML.LOAD AND THE THING I'M LOADING.
SO LOADING DATA INTO YOUR APPLICATION IS THE
LEAST INTERESTING PART OF YOUR DAY.
YOU WANT TO DO STUFF WITH THAT DATA, YOU WANT TO
DO DATA ANALYSIS PROBLEMS SESSION YOUR FORM, RUN
YOUR WEB APP, SATISFY YOUR CUSTOMERS.
AND SO YOU'RE USING AN IDE AND YOU GO I NEED TO
LOADS A YAML FILE,AL.TAB, AUTO COMPLETE, THERE IS
A THING CALLED LOAD, DOES IT DO WHAT I WANT?
IT DOES, I'M DONE, I'LL MOVE ON.
AND SO YOU DON'T THINK ABOUT THIS STUFF, YOU JUST
WANT TO GET FROM OUTSIDE TO INSIDE AS QUICKLY AS
POSSIBLE.
SO I'M GOING TO TALK ABOUT YAML FIRST BECAUSE
THERE'S BEEN SOME HILARIOUS RECENT ISSUES WITH
IT.
WHO USES YAML?
EVERYBODY, BRILLIANT.
I HAVE A LOT OF SLIDES THAT LOOK LIKE THIS.
SO BASICALLY I'VE JUST POSTED A SNIPPET OF TEXT
TO MY LITTLE SERVICE AND THEN IT'S PARSING IT
USING THE PYTHON THING AND I'M GETTING A PYTHON
DICTIONARY BACK.
SO EVERYONE IS WITH ME SO FAR, YOU HAVE A DATA
FILE IN AND A PYTHON DATA STRUCTURE COMING OUT.
AND THIS IS A VERY SIMPLE YAML FILE, JUST KEY
VALUE, LIKE THE DICTIONARY YOU GETS OUT OF PYTHON
LOOKS ALMOST EXACTLY THE SAME BECAUSE YAML IS
THAT STRAIGHTFORWARD, OR TRIES TO BE.
YOU KNOW HOW THEY TRY TO MAKE HUMAN READABLE
MARK-UP LANGUAGES AND IT NEVER IS?
YEAH.
IT GETS UGLIER LATER BUT...
SO THE THING ABOUT YAML IS THAT IT'S NOT ACTUALLY
JUST BASIC DATA TYPES.
YOU CAN DO SOME PRETTY NEAT STUFF WITH IT, SO
THIS IS THE SAME DICTIONARY, BUT THIS TIME IT HAS
MY BIRTHDAY ENCODED, AND THAT LITTLE EXTRA TAG,
THERE I THINK THE TECHNICAL TERM FOR IT IS A YAML
TAG OR OBJECT TAG OR SOMETHING BUT THE EX
EXTRAMATION POINT, PROJECT APPLY, DATE TIME.DATE
AND THE ARGUMENTS THAT YOU WANT TO PASS INTO THAT
THING, AND SO WHAT YOU GET OUT OF IT IS A
DATE-TIME OBJECT WHICH IS REALLY, REALLY HANDY,
GOOD FOR CONFIGURATION FILES, GOOD FOR ALL KINDS
OF STUFF, RIGHT?
WHO'S HAD A SHIVER GO DOWN THEIR SPINE SO FAR
YET?
ONE FUN THING ABOUT THIS IS IF YOU HAVEN'T LOADED
THE DATE TIME MODULE, IT WILL HAPPILY LOAD IT FOR
YOU SO YOU CAN THE DATE TIME.DATE AND IT WILL GO,
OKAY, I DON'T KNOW WHAT THAT IS, SO I'LL IMPORT
THE IT FROM STANDARD LIBRARY AND IT WILL
SUBSTANTIATE THE THING.
SO THIS CAN GO DOWNHILL REALLY FAST.
YAML.LOAD IS VERY, VERY HANDY.
SO PYTHON.OBJECT.APPLY IS A MISNOMER BECAUSE
CHECKOUT IS A FUNCTION, PYTHON IS DUCK-TYPE',
IT'S FINE WITH THIS.
PROCESS CHECK OUT, OH, I'VE SHELLED OUT AND
LISTED THE CONTENTS OF MY HOME DIRECTORY.
OR, RATHER, IF YOU HAVE A YAML END POINT THAT
SOMEONE IS UPLOADING FILES TO, OR ANY KIND OF
USER INPUT THAT IS A PARSED YAML CONFIGURATION
FILE THAT THEY CAN PROVIDE OR A -- I DON'T KNOW,
A TASTY PIE END POINT OR SOMETHING LIKE THAT, YOU
CAN POST YAML TO IT.
SO TAKING IT TO ITS LOGICAL EXTREME, RIGHT?
SO PYTHON OBJECT APPLY OS.SYSTEM, IT WILL LOAD
THE S MODULE FOR YOU, IT SHOULD SHELL OUT AND I
DO THE LISTING THING AGAIN AND ALL MY FILES GONE
AND, TRUE STORY, I HAD TO RESTART WORKING ON MY
TALK.
[ Laughter ]
SO YAML IS EFFECTIVELY -- YAML.LOAD IS
EFFECTIVELY IMMEDIATE SHELL EXECUTION OR
SCRIPTING OR YOU COULD RUN PERL IF YOU WANTED
YOUR CUSTOMERS TO BE ABLE TO INTEGRATE PERL INTO
YOUR APP WHICH YOU PROBABLY DON'T WANT THEM TO
DO.
SURELY THIS DOESN'T HAPPEN IN REAL LIFE.
OKAY IN NOVEMBER, 2011, THIS HIT TASTY PIE AND
PISTON, THEY WERE USING YAML LOAD.
AND THAT MEANT THAT EVERYONE WHO WAS USING IT WAS
EXPOSED SO, THAT WAS NOVEMBER, 2011, A LITTLE
WHILE AGO.
RUBY ON RAILS THIS WAS FAMOUS.
YOU PROBABLY HEARD ABOUT THIS IN THE NEWS BECAUSE
IF YOU'RE A PYTHON DEVELOPER AND IF YOU'RE A
LITTLE BIT MEAN, YOU WERE PROBABLY LAUGHING AT
THE RUBY COMMUNITY FOR WHAT HAPPENED TO THEM
BECAUSE NOT ONLY DID THEY HAVE A REALLY
EMBARRASSING YAML DESERIALIZATION VULNERABILITY
BUT THEN THEY HAD ONE AGAIN FIVE WEEKS LATER.
SO -- AND THEN IT HAPPENED TO PUPPET AND I REALLY
TRUSTED THOSE GUYS.
I WAS REALLY, REALLY, REALLY SAD AND THAT WAS THE
THING THAT MADE ME START YELLING ABOUT THIS.
SO, YEAH, AND THEN -- AND THEN IT HAPPENED TO
NODE AND NOBODY CARED.
[ Laughter ]
INTERESTINGLY ENOUGH, THE NODE ONE IS FUNNY
BECAUSE THERE WAS NO SECURE OPTION UNTIL THEY
REALIZED THAT THIS WAS A BAD IDEA, SO THEY HAD
TO -- THAT THING IN THE CORNER THERE WHICH SAYS,
UPGRADED AND SHOULD STRONGLY CONSIDER -- I CAN'T
REALLY READ IT VERY WELL, I'LL READ IT OUT, MAKE
SURE THEY HAVE UPGRADED AND SHOULD STRONGLY
CONSIDER PORTING THEIR CODES TO USE THE NEW SAFE
LOAD METHOD -- NEW SAFE LOAD METHOD.
THERE WAS NO SAFE LOAD METHOD UNTIL JUNE, 2013.
WITH YAML, HOW DO YOU PROTECT YOURSELF FROM THIS
STUFF?
YOU MAKE YOUR PARSERS STUPIDER.
THESE ARE NOT FEATURES THAT YOU NEED IN SOMETHING
THAT A USER IS SUPPLYING TO YOU, RIGHT?
DO YOU?
NO.
YOU DON'T.
IF SOMEONE WAS GOING TO SAY YES, YOU'RE
PROBABLY -- YEAH, DON'T.
AND IN PYTHON, THAT'S REALLY, REALLY EASY.
SO THANKFULLY, THE YAML LIBRARY, THEY'RE NOT
COMPLETELY SILLILY, THEY HAVE YAML.LOAD, WHICH IS
THE DANGEROUS ONE AND THEN THEY HAVE YAML.SAFE
LOAD.
BUT THIS IS A KEY POINT THAT I WANT TO GET ACROSS
TO YOU WHICH IS WHY WAS IT THAT WAY AROUND?
RIGHT?
LIKE I SAID, IF YOU'RE -- LOADING DATA IS THE
LEAST INTERESTING PART OF YOUR DAY, YOU'RE GOING
TO GO YAML.-- I DON'T KNOW, IS IT CALLED LOAD,
PARSE, I'LL USE LOAD.
IF YOUR AUTO COMPLETE IS IN ALPHABETICAL ORDER,
YOU WON'T HAVE SEEN DOWN IN THE S A THING CALLED
RECEIVE LOAD.
RUBY'S ANSWER IS A LITTLE BIT MORE ANNOYING, YOU
HAVE TO GET AN EXTERNAL GEM, DOWNLOAD THAT,
INTEGRATE IT INTO RUBY AND THAT GOES IN A MONKEY
PATCHES THE ACTUAL YAML LIBRARY TO MAKE IT SAFER,
WHICH REALLY SURPRISED ME UNTIL I WAS TALKING TO
A RUBY DEVELOPER AND THEY TOLD ME THAT'S HOW
EVERYTHING WORKS IN RUBY.
THE RUBY YAML LIBRARY IS A LITTLE BIT SAFER
BECAUSE IT WON'T GO OUT AND LOAD THE MODULE FOR
YOU, THE WAY PYTHON'S WILL, THE RUBY ON RAILS
VULNERABILITY, THEY FOUND THE UNSAFE DESERIALIZER
AND THE ATTACKER HAD TO POUR THROUGH THE DATABASE
TO FIND A MODULE THAT WAS ALREADY LOADED INTO
MEMORY THAT HAD AN EVAL FROM IT AND FROM THERE,
THEY WERE IN.
BUT THE PYTHON ONE WILL HAPPILY LOAD WHATEVER
MODULE YOU WANT.
WHO WORKS WITH XML?
WHO ALREADY KNOWS NOT TO TRUST XML?
EVERYBODY IS GOING TO -- EVEN IF YOU DON'T WORK
WITH XML, YOU ALREADY KNOW THAT, BUT YOU MIGHT
NOT KNOW WHY, YOU MIGHT THINK IT'S ANNOYING
SYNTAX OR WHATEVER.
I WANTED TO PUT SOMETHING LIKE O, NO, XML OR
SOMETHING IN THIS SLIDE BUT I THOUGHT HAVING A
BIG FONT THERE WOULD BE SCARY ENOUGH.
SO IF YOU'VE WORKED WITH XML AT ALL, THIS SHOULD
BE FAMILIAR.
THIS IS A SIMPLE XML FILE AND THE ONLY
INTERESTING THING IN THERE IS IT'S GOT AN ENTITY
FOR A UNCOULD I HE HAD CHARACTER WHICH IS A
SMILEY FACE.
I DON'T KNOW IF THEY HAVE THE FULL EMOJI SET BUT
THAT WOULD BE COOL.
THAT'S AN AMPERSAND ENTITY JUST LIKE YOU'VE
ALWAYS SEEN IN HTML OR ANY OF THE SGML DERIVED
MARK-UP LANGUAGES.
BUT XML IS A DOCUMENT LANGUAGE AND WHAT DOES THE
X STAND FOR AGAIN?
[ Audio Indiscernible ]
>> WENT TOO FAR.
IT'S EXTENSIBLE.
SO YOU CAN DEFINE YOUR OWN DOCUMENT TYPES AND
DEFINE YOUR OWN ENTITIES.
THAT'S PRETTY COOL, HANDY AT TIMES.
SO I'VE CREATED AN ENTITY HERE, THAT'S A DOC-TYPE
DEFINITION AT THE TOP OF MY XML FILE, AND RATHER
THAN HAVING TO REMEMBER THE NUMBER 9876, I'VE
CREATED AN ENTITY CALLED SMILEY AND YOU CAN GO
AMPERSAND SMILEY AND MOVE ON FROM THERE AND
THAT'S -- YOU CAN DO THAT WITH A LOT OF DIFFERENT
THINGS.
YOU CAN DEFINE AN ENTITY THAT'S MADE OUT OF OTHER
ENTITIES.
SO I'VE DEFINED AN ENTITIES CALLED S-TOWER, WHICH
IS A BUNCH OF ENTITIES CALLED S-3, AND THEN I'VE
DEFINED AN CENTER CALLED S-3 WHICH IS A BUNCH OF
S-AND I'VE DEFINED -- SO FORTH, UNTIL I HAVE A
LOTT WHOLE LOT OF SMILEYS.
SO MY XML PARSER WILL REBUILD ALL OF THAT, AND
THAT'S SUPER CONVENIENT.
YOU CAN DO STRING INTERPOLATION IF YOU REALLY
WANT TO BUT YOU DON'T BECAUSE WHO KNOWS THE NAME
OF THIS?
WHO'S HEARD OF THIS?
SOMEONE YELL IT OUT.
WRONG.
THIS IS THE 168 MILLION LAUGHS ATTACK BECAUSE
I -- IN ORDER TO FIT IT ON THE PAGE, I WOULD HAVE
TO CHOP ONE LULL OFF THE END OF EACH LINE.
SO THIS IS -- YES, SO THIS IS THE BILLION LAPS
ATTACKS, BEEN AROUND FOR A LONG TIME, HAS ITS OWN
WIKIPEDIA PAGE AND JUST AN EXAMPLE OF YOU THROW
THIS AT A PARSER, YOUR PARSER FALLS OVER AND
DIES.
A MEMORY ATTACK, SO IF YOU WERE TO -- WHO HERE
WHEN THEY WERE A RAMBUNCTIOUS YOUNG CHILD MADE A
ZIP FILE OF TEN GIGABYTES OF ZEROS AND THEN
EMAILED IT TO THEIR FRIENDS?
SO MEAN.
WHO DID THAT LAST WEEK?
YES!!
[ Laughter ]
BUT THIS IS THAT, RIGHT?
THIS IS A MEMORY BLOW-OUT.
YOUR PARSERS WILL TRY TO BUILD THIS AND IT WILL
FALL OVER AND DIE.
FUNNY STORY, MY LITTLE PARSING AS A SERVICE PIECE
OF CODE, I WAS GOING TO TEST THIS OUT ON THAT AND
SEE WHAT HAPPENED, RIGHT?
SO I COPIED IT FROM THE WIKIPEDIA PAGE AND I WAS
ABOUT TO PASTE IT INTO MY WEB SERVICE, INTO CURL
AND THEN MY COMPUTER EXPLODED AND DIED, SOME
PASTED IT INTO MY EDITOR AND MY EDITOR WAS REALLY
FRIENDLY AND WAS LIKE, OH, YOU'VE PASTED XML IN
HERE, LET'S MAKE SURE IT'S WALD.
[ Laughter ]
SO WHO USES E-MAX?
E-MAX IS REALLY HELPFUL LIKE THAT.
[ Laughter ]
SO THIS NEVER MADE IT AS FAR AS MY LITTLE TEST
SERVICE.
OKAY.
SO THAT'S JUST -- THAT'S JUST LIKE BEATING YOUR
PARSERS WITH A CLUB, RIGHT?
THAT'S A DENIAL OF SERVICE ATTACK, IT'S BORING.
LET'S DO SOMETHING MORE INTERESTING.
YOU CAN DEFINE AN ENTITIES TO BE A FILE.
AND IT WILL JUST BE DEFINE THIS ENTITY TO BE THE
CONTENTS OF ETSY PASSWORDS.
NOW, IF THAT'S A WEB SERVICE, AND THEN THERE'S
SOMETHING ELSE WRONG WITH THE XML FILE AND SO
YOUR WEB SERVICE, LIKE SOAP SERVICE OR WHATEVER,
SAYS, HEY, THERE WAS SOMETHING WRONG WITH YOUR
XML FILE, HERE'S -- AND IF IT SHOWS YOUR XML
FILE, IT WILL HAVE THE CONTENT OF THAT FILE
EMBEDDED IN IT.
IT WILL ALREADY BE EXPANDED, RIGHT?
SO IF YOU SEND INVALID XML TO A WEB SERVICE AND
IT FOR WHATEVER REASON DECIDES TO GIVE YOU YOUR
XML BACK, IT MIGHT HAVE THE CONTENTS OF THE STYLE
IN IT.
AND OF COURSE WE'RE TALKING ABOUT YOUR APP
SERVER.
THAT HAS ACCESS TO POSSIBLY NOT EVERY FILE ON
YOUR SYSTEM BUT HAS TO HAVE ACCESS TO ITS OWN
CONFIGURATION FILE AND THAT WILL HAVE THE
DATABASE PASS WORTH.
ETSY PASSWORD IS BORING, SHADOW IS PROTECTED BUT
YOU CAN LOOK AROUND AND FIND YOUR THING AND
BECAUSE XML IS OFTEN USED IN ENTERPRISE, AND
BECAUSE ENTERPRISE OFTEN USES JAVA, I HAVE
TROUBLE BELIEVING THIS BUT MY FRIENDS IN THE
SECURITY INDUSTRY ASSURE ME THAT OFTEN THEY FIND
XML PARSE RUNNING AS ROOT SO THEY CAN READ
WHATEVER FILE THEY WANT OFF THE SYSTEM LIKE THIS.
YEAH.
BUT YOU SEE HOW THAT'S LIKE A URI, A URI SPACE
THING RIGHT THERE SO YOU DON'T HAVE TO STOP
THERE, YOU CAN JUST USE HTTP.
WHAT'S FUNNY ABOUT THAT IS THE PARSER IS BEHIND
THE NETWORK, BEHIND THE FIREWALL BECAUSE IT'S
PART OF YOUR WEB APP, RIGHT?
SO, HAVE A LITTLE BIT OF FUN AND START LOOKING
AROUND BEHIND -- SORRY, LET ME REPHRASE, UNDER NO
CIRCUMSTANCES, UNDER NO CIRCUMSTANCES DO THIS AND
LOOK AROUND AT SOMEONE'S INTERNAL NETWORK BEHIND
THEIR DMZ.
LITERALLY, DON'T DO THAT BECAUSE I WANT TO BE
ALLOWED BACK HOME.
I AM NOT CONDONING ANY OF THIS STUFF OF THE
PEOPLE WHO DO THIS ARE PENETRATION TESTERS WHO
HAVE BEEN SIGNED UP TO DO IT.
DISCLAIMER, DISCLAIMER, DISCLAIMER.
NO WARRANTIES EXPRESSED OR IMPLIED.
YOU DON'T HAVE TO SETTLE FOR AN HTTP PORT, IT'S.
IF YOU'RE USING HTTP AS URI SPACE, YOU WOULD
HAPPILY GO COLON 110 AND SEE HOW LONG IT TAKES
FOR AN ERROR TO HAPPEN.
AND THAT WAY YOU COULD PROBABLY TELL -- YOU WON'T
BE ABLE TO GET ACCESS TO THEIR POP SERVER OR SMPT
SERVER BUT YOU'LL KNOW IF ONE IS LISTENING THERE
AND YOU CAN BASICALLY MAP UP THEIR INTERNAL
NETWORK.
SO YOU CAN USE SOMEONE'S XML PARSER TO PORT-SCAN
THEIR OWN INTERNAL NETWORK AND UNDER NO
CIRCUMSTANCES DO SUCH A THING.
SURELY THIS DOESN'T HAPPEN IN REAL LIFE, RIGHT?
I'M NOT GOING TO GIVE YOU A MONTAGE BUT IT
HAPPENS ALL THE TIME.
I'M TOO SCARED THAT I'LL FIND OUT IT HAPPENS MORE
OFTEN THAN IT NOT HAPPENS AND IT'S JUST AN
EDUCATION PROBLEM, RIGHT?
PEOPLE JUST XML AND THEY MIGHT NOT REALIZE THAT
THIS STUFF COMES PART AND PARCEL WITH XML.
A FULLY COMPLIANT XML PARSER HAS TO DO THIS STUFF
BECAUSE IT'S FULLY COMPLIANT AND IF YOU MARKET
THE PARSER, YOU WON'T MARK IT AS SAYING OUR XML
PARSER DOESN'T DO LOTS OF THINGS.
SO HOW DO YOU PROTECT YOURSELF FROM THIS ONE?
UNFORTUNATELY, UNLIKE THE YAML ONE, XML IS KIND
OF COMPLICATED AND SO THIS -- I USED TO HAVE
SPACE ON THIS SLIDE FOR THE LINK TO IT BUT I CAN
POST THE LINK TO THE DOCUMENT THAT THIS CAME
FROM, BUT THESE ARE ALL THE STEPS THAT YOU WOULD
HAVE TO TAKE TO PROTECT YOURSELF FROM BAD XML AND
THERE'S A LOT OF SCOPE FOR ANNOYING THINGS TO
HAPPEN.
DON'T USE X-PATH EXPRESSIONS FROM UNTRUSTED
SOURCES, THAT'S BECAUSE X-PATH EXPRESSIONS ARE
ACTUALLY JUST AS USEFUL AS XQL SNIPPETS FOR DOING
INJECTION ATTACKS, YOU CAN USE THE X-PATH
INJECTION ATTACKS, WHICH YOU DON'T HEAR IN THE
OWASP TOP 10 BECAUSE THE TOP 10 ARE MORE
IMPORTANT BUT THERE'S MORE THAN TEN WAYS OF DOING
BAD THINGS.
BUT THE ANSWER COMES DOWN TO THE SAME THING,
YOU'VE JUST GOT TO MAKE YOUR PARSER STUPIDER.
AND IN PYTHON, YOU DO ACTUALLY HAVE A SOLUTION TO
THIS.
IT'S CALLED DIFFUSED XML, AND THINGS LIKE TASTY
PIE AND THE DJANGO REST FRAMEWORK AND I THINK
OTHER THINGS RUN EVERYTHING THROUGH DIFFUSED XML
NOW AND THAT'S A REASONABLY GOOD FILTER FOR
GETTING GOOD OF THE WORST STUFF WITH XML THAT'S
COMING IN BECAUSE -- THERE SHOULD BE NO
CIRCUMSTANCES UNDER WHICH YOU CAN ACCEPT
UNTRUSTED DDSS FROM XML, SO YOU SHOULD BE ABLE TO
REMOVE THAT OUTRIGHT.
ONE THING THAT I SHOULD MENTION IS THE TWO
DIFFERENT XML LIBRARIES ARE A LITTLE BIT
VULNERABLE TO DIFFERENT THINGS, LIKE THE STANDARD
LIBRARY ONE WILL HAPPILY DO THAT FILE EXPANSION
STUFF BUT IT DOESN'T DO THE EXTERNAL HTTP
EXPANSION STUFF BECAUSE IT'S NOT QUITE CONFORMANT
ENOUGH BUT THAT'S BESIDES THE POINT BECAUSE THE
POINT I'M TRYING TO MAKE IS USE DIFFUSED XML.
FINALLY I'LL TALK ABOUT JSON.
IS THAT FINALLY A SIMPLE ENOUGH SERIALIZATION
FORMAT THAT YOU'RE SAFE?
HANDS UP IF YOU THINK IT IS.
ALL THE WAY IN THE BACK I HAVE ONE HAND.
ACTUALLY, IT ALMOST IS.
IT'S DUMB ENOUGH THAT YOU CAN GENERALLY TRUST IT.
LIKE THERE MIGHT BE BUGS IN THE PARSER BUT IT
DOESN'T HAVE ANY OF THIS CLEVER OBJECT
DESERIALIZATION STUFF UNLESS YOU ASK IT TOO, LIKE
THE PYTHON JSON PARSER WILL LIT YOU DO THAT BUT
YOU HAVE TO ADD IT TO IT AND IT WON'T GO LOADING
MODULES FOR YOU AND STUFF LIKE THAT.
BUT, AGAIN, ONLY IF YOU USE A STUPID ENOUGH
PARSER.
[ Laughter ]
SO IF YOU'RE WRITING JAVASCRIPT, EVAL IS ONE WAY
OF PARSING YOUR JSON AND IN FACT, IF YOU GO TO
DOUBLE 3 SCHOOLS.COM, THEIR INTRODUCTION TO JSON
SAYS IT RIGHT, THERE THESE ARE HARD TO READ,
SINCE THIS IS A SUBSET OF JAVA SCRIPT, THE
EVAL...
[ Audio Indiscernible ]
SO RIGHT THERE AT THE TOP OF THE PAGE.
BUT NOBODY LISTENS TO W3 SCHOOLS, RIGHT?
SO JSON.ORG, THE TOP PAGE OF THEIR JAVASCRIPT
ONE.
TO CONVERT JSON TEXT INTO AN OBJECT, YOU CAN USE
THE EVAL FUNCTION.
THAT INVOKES THE COMPILER.
SINCE THAT'S AN -- THE COMPILER WILL PROPERLY
PRODUCE THE TEXT.
BUT WHAT ELSE WILL EVAL DO?
EVERYTHING.
I'M BEING A LITTLE UNFAIR SO IF WE GO BACK TO
THIS SLIDE, RIGHT DOWN AT THE -- WHERE THE BOTTOM
OF THE CURRENT TAKEN IS, THERE IS A LITTLE LINE
THAT SAYS, OH, BY THE WAY, MAYBE YOU SHOULDN'T
USE EVAL BUT FURTHER DOWN THE PAGE, NOBODY IS
READING DOWN THAT FAR, THEY'VE WORKED OUTS THE
ANSWER TO THEIR QUESTION, HOW DO YOU PARSE
JAVASCRIPT AND THIS ONE I'M BEING MORE UNFAIR
BECAUSE IT SAYS IT'S ABOUT OPEN SOURCE
TECHNOLOGISTS ON THAT FAR.
SO FARTHER DOWN IT SAYS...
[ READING ]
BUT THEY'VE ALREADY GIVEN AWAY THE GAME, ALREADY
SAID THE HORRIBLE DANGEROUS THING.
IF YOU'RE A DOCUMENTATION WRITER, DON'T DO THAT.
DON'T TEACH PEOPLE THE REALLY, REALLY BAD IDEA
FIRST.
SO THE LESSON THAT I'M TRYING TO GET ACROSS TO
YOU IS THAT FIRST OF ALL, NONE OF THIS STUFF IS
SECRET, NONE OF THIS STUFF IS A BUG, THIS IS ALL
JUST FEATURES OF THESE MARKUPS THAT YOU USE AND
THAT'S COOL, IF YOU WANTED TO USE THEM.
AND THAT'S COOL IF YOU DIDN'T WANT TO USE THEM
AND THEY WERE TURNED OFF BUT THEY'RE ON BY
DEFAULT, RIGHT?
AND YOU DON'T WANT THEM TO BE.
SO WATCH OUT FOR FLEXIBLE INPUT THINGS.
WATCH OUT FOR OUR MARK-UP LANGUAGE IS SUPER
FLEXIBLE AND YOU CAN DO ALL KINDS OF STUFF WITH
IT BECAUSE THAT PROBABLY INCLUDES STUFF THAT YOU
DID NOT WANT TO DO.
DISABLE ABSOLUTELY EVERYTHING YOU POSSIBLY CAN
THAT YOUR CUSTOMERS OR CLIENTS OR SYSTEM THAT
YOU'RE INTEGRATING WITH DOESN'T REQUIRE TO GET
ITS JOB DONE.
JUST, YEP, KEEP IT SIMPLE.
THANK YOU SO MUCH FOR YOUR TIME.
[ Applause ]
AND YOU SHOULD COME TO KIWI PYCON THIS SUMMER,
IT'S REALLY COOL.
THERE'S MORE DIRECT FLIGHTS, IF YOU BOOK FAR
ENOUGH OUT.
>> AUDIENCE: THANK YOU, TOM.
THAT WAS A REALLY GREAT PRESENTATION.
WE HAVE A FEW MINUTES FOR ONE OR TWO, MAYBE THREE
QUESTIONS, IF ANYBODY WOULD LIKE TO COME UP?
AND JUST A REMINDER TO ASK A QUESTION AND TRY TO
BE RELATIVELY CONCISE.
>> AUDIENCE: DO YOU KNOW IF BINARY SERIALIZATION
FORMATS LIKE BSON AND MESSAGEPAC HAVE SIMILAR
PROBLEMS?
>> I DO NOT.
I DO -- LIKE I'VE LEFT OUT SOME OF MORE SIMPLE
THINGS LIKE MARSHAL AND PICKLE, EVERYBODY ALREADY
KNOWS THAT THOSE ARE DIRECT DESERIALIZATIONS OF
PYTHON OBJECTS AND ARE CODE EXEC IF YOU DO THEM.
AS IMPLICIT TO THIS TALK IS THINGS LIKE PICKLE
AND C-PICKLE AND MARSHAL MUST NEVER BE USER
INPUT.
BUT I THINK -- BUT, YEAH, PEOPLE DON'T REALIZE
THAT ABOUT SOME OF THESE MORE HUMAN READABLE ONES
AND SO THE BINARY ONES, BASICALLY, NO, I DON'T
KNOW BUT THE QUESTION JUST COMES DOWN TO, DO THEY
LET YOU DESERIALIZE OBJECTS AND WHAT ARE THE
SAFEGUARDS THERE.
IF THEY LET YOU DO THAT BUT YOU HAVE TO TURN IT
ON, I'M HAPPY WITH THAT.
IF IT'S ON BY DEFAULT THEN LET'S INSTANTIATE A
DATE POINT, THAT'S WHAT YOU NEED TO LOOK OUT FOR.
>> AUDIENCE:  THANKS FOR THE TALK.
BROWSERS THE IMPLEMENTATIONS OF ALL THESE OF XML
AND JSON, IS THERE ANYTHING WE SHOULD BE AWARE OF
THOSE IMPLEMENTATIONS, LIKE JSON THE CLOSING
SCRIPT TAG INSIDE OF IT CAN BREAK WINDOWS IN THE
BROWSER, SO ANYTHING ELSE FOR XML THAT WE SHOULD
BE AWARE OF?
>> I DON'T -- I GUESS IF YOU'RE IN A BROWSER
CONTEXT, XML AND YAML AT LEAST ARE A LITTLE LESS
RELEVANT.
BUT, YEAH, I'M NOT SURE.
SO THE JSON THING THAT YOU'RE REFERRING TO, IS
THAT ACTUALLY LIKE A BUG THAT MAKES IT CRASH OR
IS IT JUST IT DOESN'T PARSE CORRECTLY?
>> AUDIENCE: SO IF YOU DO AN AJACKS CALL AND IT
HAS A CLOSING SCRIPT TAG, THE BROWSER WILL FINISH
THE SCRIPT SO YOU HAVE TO ESCAPE THE SLASH WITH A
BACK SLASH, SO THAT'S ONE VULNERABILITY BUT I WAS
JUST WONDERING IF THERE'S OTHERS FOR XML
SPECIFICALLY.
>> I COULDN'T TELL YOU.
SORRY.
>> AUDIENCE:  SO AS PERSON NUMBER TWO OF THE TWO
PEOPLE WHO RAISED THEIR HANDS AND SAID JSON IS
STUPID ENOUGH, I JUST WANTED TO CLARIFY, IF
YOU'RE NOT USING JAVASCRIPT OR NOT USING
JAVASCRIPT'S EVAL, LIKE YOUR API WRITTEN IN
PYTHON AND YOU'RE USING JSON.LOADS, JSON IS
REALLY STUPID ENOUGH AS LONG AS YOU HAVEN'T GONE
OUT OF YOUR WAY TO ENABLE SOMETHING SMARTS.
>> THE JSON PARSER WILL ALLOW TO YOU ADD MORE --
LIKE WHEN YOU INSTANTIATE A PARSERS IN YAML, YOU
CAN ADD A DATE-TIME FEATURE TO IT WHICH WILL LOOK
FOR A STRING OF A CERTAIN CONSTRUCTION AND GO I
KNOW THAT'S A DATE TIME AND IT WILL DO IT BUT YOU
HAVE TO ADD THOSE TO IT.
THEY'RE NOT THERE BY DEFAULT.
I THINK I HAVE THAT RIGHT?
DO I?
SO JSON IN PYTHON IS A PRETTY GOOD OPTION EXCEPT
FOR THE FACT THAT IT CLAIMS TO BE HUMAN READABLE
AND IT'S REALLY NOT.
LIKE, I THINK OF ALL THE HUMAN READABLE PARTS OF
IT, YAML IS PROBABLY THE BEST BUT MAKE SURE YOU
USE SAFE LOAD.
>> AUDIENCE:  AN EXCELLENT TALK.
THANK YOU.
>> THANK YOU.
[ Applause ]
01:39:1401:39:1401:39:1401:39:1401:39:1402:08:50