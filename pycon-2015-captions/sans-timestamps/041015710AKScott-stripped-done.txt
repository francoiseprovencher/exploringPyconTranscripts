WE'RE A LITTLE BIT BEHIND AT THE MOMENT.
HOPEFULLY IT WON'T BE MORE THAN A FEW MORE
MINUTES.
SORRY ABOUT THAT.
THANKS.
>> HELLO, EVERYONE.
THANK YOU FOR COMING.
I'M ISAAC RICHIE, THE CHAIR FOR TODAY.
OUR FIRST SPEAKER IS KATHERINE SCOTT AND SINCE
WE'RE A LITTLE BIT LATE, WE'LL ASK FOR NO
QUESTIONS AT THE END BUT YOU CAN MEET HER AT THE
BACK.
SHE ALSO HAS TO KIND OF CLEAN EVERYTHING UP, SO
SHE'LL BE AT THE BACK AT THE END OF HER TALK, SO
IF YOU WANT TO ASK ANY QUESTIONS OR CONTINUE THE
DISCUSSION A LITTLE BIT, OKAY?
SO KATHERINE SCOTT.
[ Applause ]
>> HI, GUYS.
OKAY.
SO LET ME JUST SET THIS UP REAL QUICK.
IS EVERYONE HAVING FUN THIS MORNING?
EXCELLENT.
WONDERFUL.
ALL RIGHT.
SO I'M HERE -- FIRST OFF, I'M KATHERINE SCOTT,
HERE TO TALK TO YOU GUYS ABOUT ROBOTS AND
SPECIFICALLY ROS.
SO WHY SHOULD YOU LISTEN TO ME.
SO I'VE BEEN DOING THIS FOR GOING ON 15 YEARS NOW
AND I STARTED OFF WORKING ON THIS ROBOT, A
LEGGED-ROBOT, CALLED REX.
WENT TO A DEFENSE CONTRACTOR WHO DID ROBOTICS
WORK AND AUTOMATION WORK.
OOPS.
YES, KEEP THIS CONFIGURATION.
ALL RIGHT.
AND THEN WENT ON TO BUILD A ROBOTIC CAR AND ALSO
HANG OUT AND DID SOME POST-ROBOTICS WORK.
PRESENTLY, I'M ACTUALLY BUILDING A ROBOT THAT
DOES QUICK TURN PICK AND PLACE FOR PSB ASSEMBLY
SO THIS ROBOT, WHAT IT DOES IS IT BASICALLY HAS
THESE LITTLE TINY, TINY COMPONENTS RIGHT HERE AND
PLACES THEM ON CIRCUIT BOARDS, SO THE ROBOTS DO
THIS ALREADY BUT THEY'RE ALL OPTIMIZED TO BUILD
LIKE A MILLION OF SOMETHING.
SO I'M BUILDING A ROBOT THAT'S SMARTER THAN THOSE
ROBOT AND TAKES, YOU KNOW, ONLY A FEW MINUTES TO
SETS UP VERSUS A FEW DAYS SO YOU CAN DEVELOP
PROTOTYPES A LOT FASTER.
AND SO THE SHAMELESS PLUG HERE IS THAT I BUILD
THESE BOARDS, IF YOU HAVE BOARDS, LET ME KNOW, I
MIGHT BE ABLE TO MAKE THEM FOR YOU AND I'M ALSO
LOOKING FOR ENGINEERS.
SO, BEFORE WE TALK ABOUT ROBOTICS, LET'S TALK
ABOUT THE WEB.
SO MOST OF YOU, WHEN YOU WANT TO GO BUILD A
WEBSITE OR DO SOMETHING LIKE THAT, YOU DON'T GO
AND TRY TO DO EVERYTHING WITH FORCED PRINCIPLES,
YOU DON'T STARTS LOOKING AT SOCKET IO AND HOW DO
I TALK OVER THE INTERNET AND EVERYTHING LIKE
THAT, YOU JUST SORTS OF POP INTO FLASK AND DO
WHAT YOU WANT TO DO.
SO WHEN I TALK TO PEOPLE ABOUT ROBOTICS, I WHAT I
HEAR IS I WROTE THIS FROM SCRATCH OR I WROTE THIS
FROM SCRATCH OR FIGURED THAT OUT FROM PRINCIPLES.
WE SHOULDN'T HAVE TO DO THIS.
WE SHOULDN'T HAVE TO REINVENT THE WHEEL TO DO
ROBOTICS WORK.
TURNS OUT, YOU REALLY DON'T HAVE TO.
THERE IS THIS AWESOME ROBOTICS PACKAGE, CALLED
ROS.
AND WHAT ROS IS BASICALLY ROBOT-OPERATING SYSTEM,
A SET OF PACKAGES PRIMARILY FOR LINUX, WORKS
REALLY WELL ON OPEN-- AND ARM, THAT ALLOWS YOU TO
EASILY AND QUICKLY BUILD ROBOTS FROM SCRATCH.
HAS A HUGE AND WONDERFUL OPEN SOURCE COMMUNITY.
IT IS REASONABLY MATURE AND BATTLE-HARDENED.
BEEN RUNNING ON ROBOTS LIKE BAXTER AND ALL SORTS
OF DIFFERENT RESEARCH ROBOTS BUT ALSO THINGS IN
PRODUCTION AND IT'S REALLY, REALLY LIGHT AND
FLEXIBLE.
SO ALLOWS YOU TO INTERSPEARS C PLUSPLUS, AND ALSO
ALLOWS YOU TO ADD IN SOME JAVA AND JAVASCRIPT
SUPPORT.
SO WHAT IS IT INTERNALLY?
SO INTERNALLY ROS IS BASICALLY A PACKAGE MANAGER,
AND A LOT OF THAT'S APPED, SO I CAN APP IT TO ONE
OF THOUSANDS OF ROBOTICS PACKAGES FOR CAMERAS,
CAMERA DRIVERS, ALL SORTS OF STUFF LIKE THAT.
IT IS ALSO A BUILD SYSTEM CALLED CAT AND THAT
ALLOWS YOU TO DO ALL THE CPLUSPLUS, PYTHON
INTERSPERSION AND ALSO A DEPLOYMENT SYSTEM, SO I
HAVE THIS BIG HUGE ROBOT SYSTEM, ALLOWS ME TO
BRING STUFF UP, BRING IT DOWN, RESTART IT, ALL OF
THAT.
UNDERNEATH ALL THAT, I LIKE TO THINK OF IT AS A
PUBLISH SUBSCRIBE, SYSTEM, BASICALLY A MESSAGING
BOSS.
IT ALLOWS LITTLE INDEPENDENT NODES INSIDE THE
ROBOT TO TALK TO EACH OTHER BY EITHER PUBLISHING
OR SUBSCRIBING TO A MESSAGE.
ON TOP OF ALL THIS, WHAT YOU GETS FOR FREE IS
BASICALLY EVERY UTILITY YOU COULD EVER IMAGINE,
LOGGING, YOU CAN LOG JUST ABOUT EVERYTHING, AND
LOG DATA, LOTS AND LOTS OF DATA, I'VE LOGGED
TERABYTES AND TERABYTES OF DATA IN A SINGLE
EVENING ON ROS.
YOU CAN INTERSECT THAT DATA, YOU CAN -- OH, GEEZ,
GO THROUGH LOG FILES.
IT'S TONS AND TONS OF TOOLS THAT YOU CAN USE
EVERY DAY.
AND FINALLY, THERE'S JUST LOTS OF STANDARD
LIBRARIES ALLOWING TO YOU DO SO MANY THINGS, SO
THERE'S LIBRARIES FOR HANDLING IMAGE PROCESSING,
FOR HANDLING INVERSE KINEMATICS, FOR 3D MODELING,
FOR RUNNING VARIOUS SERVERS.
SO I CAN SIT HERE AND TALK ABOUT EVERYTHING ALL
DAY OR WE CAN DO SOME FUN ROBOTIC STUFF WHICH I
THINK YOU GUYS WOULD RATHER SEE SOME CODE BEING
WRITTEN AND DEPLOYED RATHER THAN ME CHATTING.
SO IF YOU IT IS UP HERE, I HAVE THIS LITTLE GUY.
THIS IS TWITCHEE.
I PICKED HIM UP FOR LIKE A HUNDRED BUCKS ON
AMAZON.
EASY A FOUR-ACTION EX ARM, A PALLETIZING ROBOT.
SO TWITCHEE IS JUST A MINIATURE MODEL OF
SOMETHING LIKE THIS KUKA ARM HERE THAT'S USED IN
MANUFACTURING SETTINGS TO DO PALLETIZATION, SO
PALLETIZATION IS LIKE WHEN YOU GET THIS GIANTS
PALLET OF SERIAL, THIS ROBOT PUTS ALL THE SERIAL
ON THAT PALLET BEFORE IT GETS SHIPPED OUT.
SUPER COOL.
SO WHAT IS RUNNING MY FRIEND TWITCHEE HERE.
SO UNDERNEATH, NOT A WHOLE LOT OF MAGIC HERE,
JUST AN ARDUINA, AND BASICALLY A LITTLE TINY
SHIELD AND ALL THE SHIELD IS DOING IS GIVING ME A
PLACE TO PLUG MY MOTORS INTO AND SHUNTING CURRENT
FROM A HIGHER VOLTAGE SOURCE.
THAT'S IT.
ALSO A KILL SWITCH SWITCH AND IT'S NOT BECAUSE
THE ROBOTS ARE GOING TO TAKE OVER, I DON'T CARE
HOW BIG OR LITTLE THEY ARE, THEY CAN ALWAYS HURT
YOU SO ALWAYS, ALWAYS, ALWAYS PUT A KILL SWITCH
ON YOUR ROBOT.
SO YOU GUYS WANT TO SEE ROS IN ACTION AND SEE HOW
IT PLAYS OUT?
OKAY.
SO, ALL THE PREREQUISITES I DID TO GET THIS
RUNNING, I INSTALLED ROS INDIGO ON DESK TOP, I
INSTEAD SOMETHING CALLED ROS SERIAL, WHICH WILL
ALLOW ME TO TALK TO THIS GUY.
I SET UP A CATKIN WORK SPACE AND THERE ARE
TUTORIALS THAT WILL WALK YOU THROUGH THAT.
I DOWNLOADED THE ARDUINO R.D. AND SET UP FOR ROS
WHICH MEANS RUNNING A PYTHON SCRIPT TO COPY FILES
OVER TO THE ADUINO R.D., AND LOADED SOME SOURCE
CODE.
SO FOR THIS FIRST STEP, WHAT WE'RE GOING TO DO IS
WE'RE GOING TO HAVE THE ARDUINO LEARN TO TALK TO
ROS.
AND SO WHAT THE ARDUINO WILL DO IS PUBLISH A
TOPIC, SO IT WILL PUBLISH A TOPIC CALLED STATE
AND STATE IS JUST FOUR INTEGERS, ONE
CORRESPONDING TO EACH MOTOR'S POSITION ON HERE.
AND THEN IT WILL ALSO LISTEN, LISTEN ON A TOPIC
FOR MESSAGES THAT ARE CALLED ROBOT, AND THAT'S
JUST WHERE WE SAY, ROBOT, I WANT YOU TO GO TO
THESE FOUR POSITIONS.
SO JUST TO MAKE THIS PERFECTLY CLEAR, ROBOT
LISTENS FOR STATE, UPDATES STATE, SENDS OUT A
MESSAGE ECHOING THE SAME THING.
I ADDED A SECOND NODE THAT PUBLISHES A HUMAN
READABLE MESSAGE.
AND SO WHAT'S GREAT ABOUT ALL THIS, ROS WILL
HANDLE ALL THAT MESSAGING PASSING FOR ME, I DON'T
HAVE TO THINK ABOUT IT, JUST DO IT AS A GIVEN.
ALL RIGHT.
SO IF YOU GUYS WILL BEAR WITH ME, ARE WE OKAY
LOOKING AT A LITTLE BIT OF C FOR ONE MINUTE?
I'LL SOMEHOW HOW THIS WORKS, LAST BIT OF C,
EVERYTHING ELSE WILL BE IN PYTHON AND XML.
SO HERE WE GO, BASICALLY IMPORTS FROM ROS
LIBRARIES, IMPORT AN N16 MULTI-ARRAY MESSAGE
WHICH WILL HOLD THE INTEGERS THAT WE MOVE BACK
AND FORTH.
AND THEN ALSO A STREAM MESSAGE WHICH IS A MESSAGE
IN A STREAM.
ALL I DO INSIDE THIS ARDUENO, SAY, ROS, THERE
WILL BE A NODE WHICH WILL WRAP THIS STUFF, THERE
WILL BE MESSAGES OF THAT FOUR IN KIND AND ALSO OF
A STRING AND I SAY, HEY, I'M GOING TO PUBLISH
THIS STATE MESSAGE, PUBLISH THE STATUS MESSAGE,
SO THEN YOU SPIN UP YOUR SERVEOs RIGHTS HERE,
CLIP THE VALUES CONNING IN AND OUT OF THAT AND
THEN SETS UP A CALL-BACK, AAND THIS CALL-BACK IS
BASICALLY WHENEVER YOU GET THIS ROBOT MESSAGE,
YOU GET THIS THING THAT SAYS "GO HERE," YOU MAKE
THE SERVOS GO HERE AND THAT'S WHERE THIS
CALL-BACK SETS GET AND WE DO IT IS STANDARD
ARDUENO THING WHERE YOU SET UP AND ATTACH THE
SERVEOs AND THEN WE INITIALLY EVERYTHING TO 90
DEGREES, MAKE THE SERVEOs GO THERE AND SPIN UP
ALL OF OUR ROS STUFF.
SET THE BAUD RATE, INITIALIZE THE NEED AND
ADVERTISE THAT WE ARE PUBLISHING A STATE AND
STATUS TOPIC.
NOW THEN AND FINALLY IN ARDUENO UPDATE LOOP, WE
GO THROUGH AND STAY, OH, THE STATUS OF THE ROBOT,
MAKE THIS A STRING AND PUBLISH IT OUT.
SO YOU GUYS GOT THAT?
DOES THAT MAKE SENSE?
KIND OF?
ALL RIGHT.
SO WE'LL SPIN THIS UP.
PLUG THIS IN.
IF WE WANTED TO LAUNCH THIS AND HAVE ROS ON MY
DESK TOP CONNECT TO WHAT'S RUNNING ON HERE, WE
HAVE TO RUN ROS ON MY MACHINE.
SO TO DO THAT, WHAT WE USE IS CALLED A LAUNCH
FILE.
SO LAUNCH FILES ARE BASICALLY PILES OF XML THAT
ALLOW TO YOU DEPLOY BITS OF CODE.
IT ALLOWS YOU TO START NODES, CHANGE NODES NAMES,
CHANGE TOPIC NAMES, SET PARAMETERS, ALL THE SORT
OF STUFF THAT YOU WOULD PUT IN A BASH SHELL TO
START UP A PROGRAM.
AND SO YOU CAN ALSO SORT OF BUILD HIERARCHIES OF
THESE SO IF YOU HAVE A WHOLE CAMERA SUBSYSTEM ON
YOUR ROBOT, YOU COULD DEPLOY THE CAMERA SUBSYSTEM
AS A SINGLE FILE IN A LAUNCH FILE.
IN THIS CASE, WHAT WE SEE HERE IS THE LAUNCH FILE
FOR THE SERIAL CONTROLLER, HEY, THERE IS A THING
CALLED ROS SERIAL PYTHON, I WANT YOU TO START THE
SERIAL NODE, ARDUINO SERIAL, IT WILL BE ON THIS
PARTS AND HAVE THIS BOT.
WHAT WE CAN DO IS DO ROS LAUNCH.
SERIAL CONTROLLER, AND SURPRISINGLY, NOTHING WILL
HAPPEN.
BECAUSE WE HAVEN'T TOLD THE ROBOT TO DO ANYTHING
YET.
BUT WHAT WE CAN DO ASK WE CAN WRITE A LITTLE
PROGRAM THAT SAYS, OH, HEY, I KNOW THAT THERE'S
THIS ROBOT CONTROLLER OR NOT SERIAL CONNECTION,
TELL IT TO DO SOMETHING MUCH SO THIS IS PYTHON,
BACK TO PYTHON.
WHAT WE DO HERE IS WE IMPORT THE SORT OF ARRAY
MESSAGE, YOU SEE THE N16 MULTI-ARRAY, SAME THING
WE USED ON THE CPLUSPLUS SIDE, WE CAN IMPORT THAT
AS AN OBJECT AND SPIN UP THIS PYTHON PROGRAM.
SAY I'M GOING TO CALL THIS SIMPLE PUBLISHER.
I'M GOING TO PUBLISH TO THE ROBOT, SO THIS IS ON
THE ROBOT, THIS IS WHAT TAKES IN THOSE FOUR Ns,
I'M GOING TO PUBLISH TWO SO THE ROBOT CAN HEAR
IT.
I'M GOING TO CREATES THIS MESSAGE AND THEN I'M
GOING TO GO BASICALLY STEP THROUGH A COUPLE OF
DIFFERENT JOINT ANGLES AND MAKE THE ROBOT GO TO
THOSE.
SO LET'S GIVE THIS A SHOT.
OOPS.
SO IT'S JUST GOING TO MOVE AROUND A LITTLE BIT.
NOTHING BIG HERE, RIGHT?
YOU'RE NOT -- THIS IS NOT IMPRESSIVE, LIKE, OKAY
THE ROBOT JUST MOVED AROUND.
BIG DEAL, RIGHT?
SO, YES, THIS IS TRUE.
WE CAN ACTUALLY MAKE THIS A LOT MORE INTERESTING
VERY, VERY QUICKLY WITH ROS.
SO LESSON TWO.
LET'S WIRE THIS PUPPY UP, SO INSTEAD OF JUST
SENDING IT MESSAGES TO MOVE AROUND, TO MOVE TO
THESE DIFFERENT JOINT AGE HE IS, WHAT IF WE
ACTUALLY RUN IT OFF OF ONE OF THESE THINGS
ANYTHING YOU'RE ALL FAMILIAR WITH THESE FROM
PLAYING WITH PLAY STATION SO ROS HAS A PACKAGE
THAT WILL ALLOW YOU TO SET UP A JOY PARTICULAR
AND WHAT THIS PACKAGE WILL DO IS YOU SPIN IT UP,
IT WILL PUBLISH JOY STICK MESSAGES TO A TOPIC.
I'M GOING TO WRITE A NODE THAT READS THE JOY
STICK TOPIC AND PUBLISHES TO THE ROBOT TOPIC AND
SAYS WHENEVER YOU HEAR THIS, MOVE THE ROBOT LIKE
THIS.
AND YOU CAN DO THAT REALLY, REALLY QUICKLY IN
ROS.
SO TO GIVE YOU AN EXAMPLE HERE, ALL I'M DOING IS
I'M PULLING IN THAT -- I'M GOING TO CREATE
ANOTHER NODE AND SO THIS NODE IS GOING TO USE THE
SAME MESSAGE AND WILL USE THE NEW MESSAGE CALLED
"JOY."
SO THIS NEW NODE IS ACTUALLY A CLASS VERSUS A
LITTLE TINY SCRIPT BECAUSE IT WILL BE RUNNING
SORT OF INDEFINITELY.
AND SO ALL I DO IS SET UP BASICALLY THIS THING
RUNS INDFL, HERE'S THE SHUTDOWN METHOD.
SO WHEN YOU SHUT DOWN, BRING THE ROBOT TO A NICE
NEUTRAL STATE.
SUBSCRIBE TO BOTH JOY STICK STATE OR THE JOY
STICK MESSAGE TOPIC, AND ALSO TO THE ROBOT STATE
TOPIC, THAT IS TO SAY, WHENEVER THE ROBOT'S
POSITION CHANGED, JUST MAKE SURE YOU CHECK WHAT
IT IS.
AND THEN BASICALLY YOU SEND THIS THING INTO AN
INFINITE LOOP WAITING FOR THE CALLBACKS ON BOTH
THE JOY STATE, RIGHT HERE, AND OF THE ROBOT
STATE.
SO IF WE LOOK DOWN HERE, IN THIS METHOD, THE
ROBOT WILL BASICALLY GET THE UPDATE STATE, AND
OVER HERE, THIS IS WHAT HAPPENS WHEN YOU ACTUALLY
TELL IT TO MOVE VIA COMMAND FROM THE JOY STICK.
BASICALLY, I LOOK AT THE CURRENT STATE OF THE
ROBOT, IF IT'S NOT THERE, I SET IT.
I CREATES THE VARIABLES FOR EACH OF THE MOTORS,
ONE, TWO, THREE AND FOUR, AND EVERY TIME THE
MOTOR GETS AN UPDATE, I BASICALLY INCREMENT THE
POSITION OF THE MOTOR.
SO IF I HIT "UP" OVER HERE, BASICALLY WHAT
HAPPENS IS I GET A LITTLE "UP" SIGNAL OR JUST
MOVE ONE OF THESE SERVEOWES JUST A LITTLE BIT AND
THEN DO SOME BOOK CLEANING TO CLEAN EVERYTHING UP
HERE, CHECK TO SEE FOR CHANGES IN THE ROBOT
STATUS.
ON THE DON'T MOVE THE ROBOT IF THERE'S NO CHANGES
TO BE DONE, DON'T SEND A MESSAGE.
AND IF THERE IS A CHANGE, I BASICALLY PUBLISH
THAT POSITION OUT JUST LIKE THE LAST EXAMPLE I
GAVE YOU.
AND THEN I WRAP UP WITH A LITTLE BOOKKEEPING,
SAY, HEY, IF YOU SHUT DOWN, SEND THE ROBOT TO A
NEUTRAL STATE AND IF THIS IS AN EXECUTED NODE,
SPIN UP THE NODE.
THEN WHAT I HAVE TO DO IS ADD A COUPLE OF LINES
TO THE LAUNCH FILE I SHOWED YOU BEFORE.
HERE I HAD ANOTHER NODE CALLED "JOY," AND RUNS
THE JOY STICK, AND I SET UP THE PARAMETERS TO RUN
THE JOY STICKS WHERE THE DEAD ZONE IS ON THE JOY
STICK AND REPEAT.
THEN I SPIN UP THE NODE WE JUST WROTE.
SAY "START THIS NODE."
SO LET'S GIVE THIS A SHOT.
KILL THIS.
ROS LAUNCH.
ALL RIGHT.
IS NOW WE CAN MOVE IT AROUND WITH THIS THING.
OKAY.
SO THAT WASN'T TOO BAD, RIGHT?
NOT BAD FOR 15 MINUTES OF CODING OR SOMETHING.
BUT THIS IS STILL ONLY KIND OF INTERESTING.
SO LET'S KEEP PUSHING IT A LITTLE BIT AND WE'LL
GET TO SOMETHING INTERESTING BY THE END.
ALL RIGHT.
SO I'M SHOWING YOU PUBLISH AND PRESCRIBE
PRIMITIVES BUT ROS HAS DIFFERENT ONES FOR DOING
DIFFERENT BEHAVIORS.
SO THERE ARE BUILT INTO ROS SORT OF BUILT ON TOP
OF THE PUBLISHED SUBSCRIBE MODEL ARE BASICALLY
SERVICES AND ACTIONS.
SO A SERVICE IS SOMETHING WHERE YOU GO AND SEND A
MESSAGE, SOMETHING HAPPENS, USUALLY FAIRLY
QUICKLY AND THEN A RESPONSE COMES BACK.
THAT'S IT.
YOU ONLY NEED TO DO IT ONCE OR EVERY ONCE IN A
WHILE.
AN ACTION IS A FAIRLY MORE COMPLEX THING SO YOU
CAN THINK OF THIS AS YOUR ROBOT DOING SOME
INTERESTING BEHAVIOR AND IN ACTION, YOU SEND A
GOAL.
YOU SEND, ROBOT, I WANT YOU TO MOVE OVER HERE, I
WANT YOU TO DO THIS THING.
THE ROBOT WILL SEND YOU PERIODIC UPDATES WHILE
IT'S DOING THAT AND THEN SEND YOU BASICALLY THE
END STATE AND YOU'RE ALSO -- YOUR NODE CAN
PREEMPT THAT GOAL BEHAVIOR, SO IF THE ROBOT IS
MOVING TOWARD SOME GOAL AND GOING TO CRASH INTO
SOMEBODY AND FLAIL AND BURN UP, YOU CAN HIT
"CANCEL" AND IT WILL GO AWAY AND STOP DOING WHAT
IT'S DOING.
BOTHER OF THESE USE THE ROS GENERATOR WHICH IS
THIS CODE THAT ALLOWS YOU TO USE CPLUSPLUS AND
PYTHON CODES.
SO FOR THIS EXAMPLE, WHAT I'M GOING TO DO IS
BASICALLY GOING TO TEACH THE ROBOT HOW TO --
WHENEVER I TOUCH A BUTTON ON THE JOY STICK, HOW
TO GO A PARTICULAR POSITION AND RECORD THAT
POSITION AND THEN FOR ANOTHER BUTTON ON THE JOY
STICKS I'LL CREATE AN ACTION.
WHEN I HIT THAT ACTION, IT WILL PLAY ALL THESE
AWAY POINTS THAT I WILL GIVE THE ROBOT AS IT'S
GOING ALONG.
THE BIT TO KNOW HERE IS I HAVE TO DEFINE MY
MESSAGES IN A LITTLE BIT OF YAMMEL.
SO FOR THE SERVICE, ALL I'M SAYING IS TAKE IN A
STRING, THE STRING WILL BE THE FILE THAT YOU WANT
TO SAVE EVERYTHING TO.
AND THEN RETURN RESULT, JUST TELL ME WHAT
HAPPENED, AND FOR THE ANIMATION PLAYER ACTION,
WHAT I'LL TAKE IN IS A FILE NAME AND A STEP SIZE,
WHICH IS BASICALLY HOW LONG TO WAIT BEFORE
PLAYING EACH COMMAND.
IT WILL RETURN A RESULT, RIGHT, WHICH IS JUST THE
STRING, HEY, I DID IT, NO, I DIDN'T DO IT, THIS
THING HAPPENED ALONG THE WAY.
AND THEN DURING THE COURSE OF THE PROCESS OF
PLAYING THE ANIMATION, I'LL BASICALLY GET AN
UPDATE STRING OF WHAT THE ROBOT'S CURRENTLY
DOING.
TO MAKE ALL THIS WORK, I THEY HAD TO DO A LITTLE
BIT OF MODIFICATION TO MAKE SURE CPLUSPLUS KNOWS
ABOUT IT, BASICALLY SETTING UP A COUPLE OF LINES
IN A MG FILE AND I NEED TO RUN CAT SCAN WHICH I
WON'T DO BECAUSE IT TAKES A SECOND BUT FAIRLY
STRAIGHTFORWARD.
LET'S LOOK AT THAT CODES FOR THIS ARM CONTROLLER,
SO THIS IS GOING TO BE EXACTLY LIKE THE THING WE
JUST WROTE.
IT'S GOING TO BE THE PYTHON CLASS THAT'S RUNNING
AND THAT IS HAAS THIS RUNNING PROCESS AND WHAT
YOU DO IS ROS BASICALLY IMPORTS THIS ARM MESSAGE,
THE SERVICE MESSAGE, WHICH IS GOING TO BE THE
SERVICE, THE WAY POINT SERVICE.
AND THEN IT WILL ALSO, FROM THIS OWI ARM MESSAGE
WILL INPUT THE ACTION MESSAGES.
AND SO HERE WE CREATE OUR NODE, ON
INITIALIZATION, WE GET SOME PARAMETERS.
THIS IS ONE OF THE UTILITIES IN ROOST, BASICALLY,
TO GET PA RAMS FROM THE ROS SYSTEM PLUS.
SO ONE OF THE PARAMS I'M SETTING IS WHERE I'M
SAVING IT AND I'M SAVING IT ON MY DESKTOP.
NEXT THING UP IS WHEN YOU GET A WAY POINT, WHEN
IT STARTS, IT WILL BE CALLED A WAY POINT, YOU'LL
GET A WAY POINT MESSAGE AND YOU WILL MAKE A CALL
BACK TO THIS FUNCTION.
YOU WILL ALSO SUBSCRIBE TO THE ROBOT'S STATE AND
POSITION STUFF, JUST LIKE WE DID BEFORE, JUST
LIKE WE DID IN THE LAST NODE, AND FINALLY, YOU'LL
CREATE WHAT'S CALLED AN ACTION SERVER AND THE
ACTION SERVER WILL ACTUALLY REPLAY THE
ANIMATIONS, AND ALL THIS SAYS IS YOU'RE GOING TO
HAVE SOMETHING CALLED PLAY ANIMATION, IT WILL
TAKE A PLAY ANIMATION ACTION OBJECT, IT WILL
EXECUTE THIS CALLBACK.
SO HERE WE GO IN A STATE UPDATE, LIKE WE SAW
BEFORE, COMING FROM THE ROBOT.
A SPIN UTILITY WHICH BASICALLY KEEPS THIS PROCESS
GOING THE ENTIRE PERIOD.
AND FINALLY, A HANDLE SAFE STATE -- THIS IS WHERE
WE ACTUALLY SAVE THE STATE TO THE FILE.
SO ALL THIS IS IS GETTING THE INPUT MESSAGE,
LOOKING FOR THE FILE NAME INSIDE THIS REQUEST
THING WHICH IS PASSED IN.
SAVING THAT FILE OUT, OR CREATING THAT FILE IF WE
NEED TO AND THEN CREATING RETURN MESSAGE.
THE PLAY ANIMATION STATE WILL ALSO JUST BE ALMOST
NEARLY IDENTICAL, RIGHT?
I HAVE THIS GOAL MESSAGE THAT COMES IN, FROM THAT
GOAL MESSAGE I GET A FILE NAME AND A STEP SIZE
AND I BASICALLY PLAY THE RESULT.
AND WHAT I DO IS JUST CHECK, SO IF I CHECK AND
THE FILE'S NOT THERE, I CREATE THIS RESULT
MESSAGE AND SAY I COULD NOT FIND THE FILE, PASS
IT BACK TO THE ROBOT, THE THING THAT CALLED ME.
OTHERWISE, I CONTINUE.
I LOAD UP THAT FILE AND THEN I START PLAYING ALL
THE WAY THROUGH.
SO ONCE I PLAY IT, I JUST SAY, GO HERE, GO HERE,
WAIT, GO HERE, WAIT.
OKAY.
SO TO DEPLOY THAT ON TO THE JOY STICK, IT'S VERY,
VERY SIMPLE, VERY SIMILAR TO CREATING THE MAIN
NODE.
IF THERE'S TIME, I MIGHT SKIM OVER THIS A ALSO
BIT BUT I BIND THESE METHODS THAT CALL THESE
FUNCTIONS.
AND I CREATE THE MESSAGES THAT GO WITH THEM.
AND THEN I JUST ADD THIS ONE LINE BACK INTO MY
LAUNCH FILE, SO ALL OF THIS ENDS UP LOOKING LIKE
THIS.
SO NOW WHAT I CAN DO IS IF I PUSH HERE, I'LL
RECORD A WAY POINT, RECORD A WAY POINT, RECORD A
WAY POINT, AND THEN I CAN GO AND PLAY THEM BACK.
RIGHT?
ALL RIGHT.
SO WE'VE BUILT UP SOME PRIMITIVES, THE ROBOT IS
MOVING AROUND, WE'RE ABLE TO DO SOMETHING
SLIGHTLY MORE COMPLEX BUT THE ROBOT HAS NO
FEEDBACK.
THE ROBOT IS JUST FLAILING AROUND IN THE MIDDLE
OF SPACE, HAVE NO IDEA WHERE IT'S GOING OR WHAT
IT'S DOING.
SO WE'RE DOING TO ADD CAMERAS TO THIS ROBOT.
OH, ONE LAST THING.
I KNOW THIS LOOKS COOL RUNNING IN THE SHELL BUT
WE WANT ALL THIS STUFF TO RUN ON THE WEB, SO
THERE IS THERE IS SOMETHING TO CHECK OUT WHEN
THIS IS ALL OVER CALLED ROBOT WEB TOOLS,
BASICALLY A BRIDGE BETWEEN THE ROS MESSAGE BOX
THAT I'VE BEEN PLAYING ON AND JAVASCRIPT, SO YOU
CAN BUILD ALSO JAVASCRIPT APPS THAT RUN ON TOP OF
YOUR ROBOT.
LOTS OF FUN, CHECK IT OUT.
SO NOW WE'RE GIVING THE ROBOT SOME INFORMATION,
SOME FEEDBACK.
WE'LL GIVE IT A CAMERA.
AND IN ROS, RUNNING CAMERAS IS LIKE THE EASIEST
THING IN THE WORLD.
LIKE YOU HAVE RUN EVERYTHING FROM $10,000 FLOOR
CAMERAS ALL THE WAY DOWN TO $20, THIS LITTLE
PIDDLY CAMERA UP HERE.
THEY ALMOST ALL WORK, THEY GENERALLY WORK PRETTY
WELL OUT OF THE BOX AND I'VE NEVER SEEN SUCH A
LARGE DIVERSITY OF HARDWARE THAT YOU CAN SORT OF
PLUG AND PLAY.
BALLADINES, LASER SCANNERS, ALL THE COOL TOYS
THAT YOU COULD EVER WANT ARE IN THERE.
ROS CAMERAS TALK OF A MESSAGE IMAGE AND BASICALLY
PUBLISHED OVER THE MESSAGE BUS AND YOU CAN
BASICALLY MARSHAL THEM IN AND OUT OF OPEN CV AND
THEY USE NO LIDS, WHICH ARE SORT OF LIKE ROS
NODES BUT BASICALLY ALLOW TO YOU DO ALL YOUR
PROCESSING WITHOUT MOVING WHOLE CHUNKS OF MEMORY
AROUND, YOU JUST MOVE A POINTER AROUND.
SO TO DO THIS, YOU BASICALLY DO -- INSTALL, ROS
INDIGO CAM AND IMAGE PROC.
THAT GIVES YOU ALL THE TOOLS TO DO ROTATION,
SCALING, THAT SORT OF THING.
YOU CAN ALSO SET UP A DIFFERENT KIND OF CAMERA.
SO HERE IS WHAT LAUNCHING A CAMERA LOOKS LIKE IN
ROS.
BASICALLY, YOU CREATES A CAMERA OBJECT, YOU TELL
IT I WANT IT TO BE THIS BIG, THIS WIDE, GO THIS
FAST, I WANT IT TO USE THIS CALIBRATION FILE AND
RIGHT HERE IS SOME CODE THAT SPINS UP A COUPLE OF
VIEWS OF THE CAMERA.
SO LET'S...
IF I COULD SPELL.
ALL RIGHT.
SO IF YOU GUYS CAN SEE HERE, THIS IS MY CAMERA
OVER HERE.
AND SO IT'S JUST STREAMING AUTOMATICALLY, YOU
KNOW, SIMPLE LAUNCH FILE, WORK RIGHT OUT OF THE
BOX.
I HAVE GOT NO PYTHON HERE BUT WE HAVE A CAMERA,
IT'S RUNNING.
SO I WOULD BE REMISS IF I DIDN'T SHOW YOU HOW TO
DO SOME PROCESSING ON THIS IN PYTHON, SO LET'S
TAKE A LOOK AT THAT.
TO GET IMAGES INTO PYTHON FROM THIS BUS, WHAT
YOU'RE GOING TO USE IS SOMETHING CALLED THE OPEN
CV BRIDGE IN ROS AND WHAT IT DOES IS BASICALLY
TAKES IT OFF THE BRIDGE, MARSHALS IT INTO WHAT'S
CALLED A CV 2 NON-PI ARRAY, AND THAT'S IT.
SO WHAT I'M GOING TO DO HERE JUST AS A TOY
EXAMPLE, I HAVE THIS RED MILK CAP THAT I BROUGHT
IN FOR MY MILK CAP EARLIER, SO I'M GOING TO TEACH
THE ROBOT TO FIND THE MILK CAP, IT WILL FIND THE
IMAGE, FIND THIS AND OUTPUT ITS PIXEL POSITION
AND SIZE.
SO THIS IS A SUPER EASY PYTHON SCRIPT TO WRITE IN
ROS.
ALL I NEED TO DO IS INPUT THIS CV BRIDGE, IMPORT
THE POINT IN IMAGE MESSAGES WHICH ARE ROS
STANDARD MESSAGES, SO ROS HAS ALL THESE GAME FREE
MESSAGE AND BASIC WRAP-AROUND SENSOR MESSAGES AND
SOME OTHER BOOKKEEPING.
I'M GOING TO USE SIMPLE CV BECAUSE I WROTE IT AND
I LIKE USING IT SO HERE'S OUR IMAGE PROCESSING
EXAMPLE CLASS.
ALL THIS IS, SAME STRING, CREATES A CV BRIDGE,
SETS UP MY INPUT TOPICS WHICH I'LL LOOK FOR
MESSAGES IN CAMERA IMAGE REC COLOR, IMAGE REC
COLOR MEANS I WANT THE COLOR RECTIFIED IMAGE,
WHICH IS IF YOU HAVE A FISH-EYED CAMERA MAKES ALL
THE LINES LOOK STRAIGHT AGAIN.
I'M ALSO GOING TO GET A PARAMETER SAYING WHERE I
WANT YOU TO OUTPUT MY POSITION STUFF.
AND THEN I'M BASICALLY GOING TO CREATES A
PUBLISHER, WHICH IS IT IS OUTPUT IMAGE AND
ANOTHER ONE WHICH IS THE OUTPUT POSITION.
I'M GOING TO SAY, I'M GOING TO PUTS POSITIONS ON
THIS TOPIC, IT WILL BE A POINT TYPE AND THEN I'M
GOING TO SUBSCRIBE TO THE INPUT CAMERA MESSAGE.
SO I WANT TO SAY, I WANT TO LOOK AT THIS INPUT
TOPIC, IT WILL BE AN IMAGE AND WHEN I GET AN
IMAGE, SHOW COLORED STUFF.
SPIN MY NODE UP TO RUN AND THEN OUR ONLY
CALL-BACK IS THIS SHOW-COLORED STUFF.
SO WE DO BASICALLY THE MESSAGE MARSHALING.
THEN WE MOVE ALL THE THIS INTO SIMPLE CVISM AGE,
I DO A COPY.
HERE IS ALL OF MY IMAGE PROCESSING, SO WHAT ALL
I'M DOING IS BASICALLY HUE DISTANCE, LOOKING FOR
COLOR, FIND SOMETHING RED.
I DO A CONNECT COMPONENT, WHICH IS BASICALLY
THRESHOLD INTO A TWO-TONE IMAGE.
FIND THE BIGGEST THING THAT IS REDS AND GIVE ME
THE POSITION OF IT.
DRAW THAT THING THAT YOU FOUND WITH THE YELLOW
OVERLAY.
RIGHT HERE.
I BASICALLY TAKE THE POSITION OF THE THING THAT
CAME OUT OF SIMPLE CV, GIVE IT A POSITION AND A
SIZE AND THEN I PUBLISH IT.
AND SO -- AND A LITTLE BIT OF BOILER PLATE SO IF
YOU WATCH THIS...
SO NOW GOING TO SPIN UP ONE WINDOW AND I MIGHT
NEED THE LIGHTS FOR THIS, WE'LL SEE.
HERE'S MY RED BOTTLE CAP AND HERE, HOPEFULLY,
PLEASE WORK...
MIGHT GET IT.
MIGHT NEED THE LIGHTS.
I'LL USE MY FLASHLIGHT.
FIND IT.
HERE IT IS.
SO IF I GO SWITCH OVER HERE, I CAN ACTUALLY TAP
DIRECTLY INTO THE ROS MESSAGE BUS...
OH, NO.
SO HERE I'M GOING TO HAVE ROS ACTUALLY TELL ME
EVERY SINGLE TOPIC THAT'S BEING PUBLISHED RIGHT
NOW AND I CAN SEE DOWN HERE IN THE BOTTOM, HEY,
HERE'S A POSITION MESSAGE.
WONDERFUL.
SO IF I GO ROS TOPIC, ECHO, FLASH POSITION, IT
WILL ACTUALLY GIVE ME THE CENTROID OF MY RED
THING.
I GRAB THIS -- SEE IF WE CAN DO A SIDE-BY-SIDE
HAVE THE HERE WE GO.
SO I CAN GET THE POSITION OF THIS THING RUNNING
AROUND AND IT'S A MESSAGE, SO IF YOU'RE BUILDING
A ALSO TOY ROBOT AT HOME, THIS IS GREATS, RIGHTS?
YOU CAN GIVE THIS TO A KID AS A PACKAGE AND SAY,
GO LEARN TO TEACH YOUR ROBOT TO FOLLOW A RED BALL
OR SOME SORT OF TRIVIAL TEST LIKE THAT.
SO WE'VE GOT SOME BASICS, SOME INPUT, SOME
OUTPUT, WE CAN CONTROL THE ROBOT.
WOULD YOU GUYS LIKE TO START DOING SOMETHING
INTERESTING LIKE HAVING A ROBOT FIGURE OUT WHAT
IT LOOKS LIKE?
ALL RIGHT.
SO I'M GOING TO TALK ABOUT WHAT IS CALLED IN ROS
AND SOME OTHER SORT OF PARADIGMS, IT'S CALLED AN
URDF, RIGHT?
IT'S SWEDISH, STANDS FOR UNIVERSAL ROBOT
DESCRIPTION FORMAT.
WHAT THAT IS IS BASICALLY A PILE OF XML THAT
DEFINES THE GAME FREE OF YOUR ROBOT.
SO IT SAYS, HEY, THE ROBOT HAS AN ARM HERE, HEY,
IT'S GOT A MOTOR HERE, THIS IS WHAT MY ROBOT
LOOKS LIKE, THE JOINT UPON WHICH IT MOVES, IT
ALLOWS IT TO DO THOUGHTFUL GAME FREE ABOUT HOW
THIS STUFF WORKS AND WHAT'S GREAT ABOUT ROS IS
THERE'S EXPORTERS IN CAD FOR THIS, SO I CAN GO TO
SOLID WORKS AND TAKE MY ROBOT MODEL AND EXPORT
IT.
I DID NOT DO THAT FOR THIS ROBOT.
I DID THIS BY HAND BUT I DID IT BY HAND SO I CAN
SHOW YOU WHAT IT LOOKS LIKE REALLY, REALLY
QUICKLY.
SO ROBOTS ARE MADE OUT OF JOINTS, THESE RIGID
BOTS AND JOINTS WHICH ARE THESE THINGS WHICH ARE
MOVING AROUND ABOUT AN AXIS, SO WHAT THE URDF
DOES IS BASICALLY ALLOW YOU TO DEFINE YOUR JOINTS
AND YOUR LINKS.
SO IT LOOKS JUST LIKE THIS, SO JUST A PILE OF
XML, SAY, HEY, THE ROBOT'S BOTTOM BASE HERE IS
JUST ABOUT THIS BIG.
THEN THERE'S ANOTHER LINK RIGHT HERE, WHICH IS
THE FIRST PIECE OF THE ARM.
THERE'S ANOTHER LINK UP HERE WHICH IS THE SECOND
PIECE OF THE ARM.
AND THEN THERE'S ANOTHER LINK UP HERE, WHICH IS
THE THIRD PIECE OF THE ARM.
AND THEN THERE ARE JOINTS WHICH ARE THE JOINT
RIGHT HERE, THE JOINT RIGHT HERE, THE JOINT RIGHT
HERE, AND THE JOINT RIGHT HERE.
AND I JUST DEFINE THESE IN XML, KIND OF TEDIOUS,
WON'T GO THROUGH IT BUT YOU CAN GO THROUGH AND DO
THAT AND WHAT YOU END UP WITH IS BEING ABLE TO
RENDER A MODEL OF YOUR ROBOT BY JUST ADDING A FEW
SIMPLE LINES BACK TO YOUR LAUNCH FILE.
SO WHAT I SAY IS, HEY, I WANT TO YOU TAKE THIS
ROBOT DESCRIPTION FORMAT THAT I JUST LEARNED AND
SPIN IT UP AND PUT IT INSIDE THIS VISUALIZATION
FRAME CALLED ARVIS.
SO IF YOU DO THIS RIGHT, AND YOU MAKE YOUR
PERFECT INCANTATION, IT WILL START LOOKING LIKE
START LOOKING LIKE THIS, SO I HAVE A MODEL -- NOT
PERFECT BUT AN APPROXIMATION, RIGHT?
SO I CAN MOVE HIM AROUND, DO THIS, I CAN GO LIKE
THIS, ACTUALLY LOOK AT WHERE ALL THE JOINTS ARE.
SO THAT'S COOL, RIGHT?
WE CAN SEE OUR ROBOT.
WE THINK WE CAN PROBABLY PICK OUT SOME REALLY
COOL STUFF FOR THIS BUT WE NEED TO WIRE IT UP TO
TWITCHEE, RIGHT, SO YOU WANT TO MIRROR IT UP SO
IT MATCHES WHAT'S GOING ON HERE?
YAY.
ALL RIGHT.
SO THE WAY YOU WIRE THIS UP IS YOU CREATES WHAT'S
CALLED A JOINT STATE PUBLISHER.
SO A JOINT STATE PUBLISHER BASICALLY IS SAYING,
HEY, YOU NAMED ALL THESE JOINTS HERE SO I'M GOING
TO PUBLISH THEIR POSITION AND I WILL ACTUALLY
MAKE THE MODEL MATCH WHAT YOU TELL ME TO.
I DON'T NEED TO KNOW WHERE EVERYTHING IS, JUST
THE KEY PARTS THAT MOVE ARE.
TO DO THIS, I CREATE ANOTHER NODE, THIS IS CALLED
JOINT STATE REPUBLISHER.
IT'S GOT A COUPLE LITTLE PARAMETERS IN HERE THAT
I USE TO TWEAK STUFF AND ALSO GOT WHAT'S CALLED A
T.F. LISTENER.
AND IT BASICALLY LISTENS TO THE ROBOT OUTPUT, THE
ROBOT STATUS OUTPUT AND ALSO LISTENS TO CONSENT
MESSAGES TO WHERE THE ROBOT SHOULD BE.
AND IT ALSO HAS ANOTHER TOPIC CALLED THE JOINT
TOPIC AND WE PUBLISH TO THE JOINT TOPIC.
WE SAY EVERY TIME THE ROBOT UPDATES, YOUR JOINTS
ARE HERE, YOUR JOINTS ARE HERE, YOUR JOINTS ARE
HERE AND BASICALLY ORVIS IS LISTENING TO WHERE
THE JOINTS ARE AND RENDERING THAT.
MAKE IT LOOK LIKE THIS MY JOINTS ARE HERE, MAKE
IT LOOK LIKE THIS.
SO TO DO THIS, YOU BASICALLY WAIT AND YOU CREATE
A CALL-BACK METHOD FOR EVERY TIME THE ROBOT
PUSHES ITS JOINT STATE.
AND HERE IS WHERE THAT HAPPENS.
SO ALL I DO IS -- SO THIS IS A ALSO BIT OF CODE,
THIS IS A LITTLE BIT MORE EXPANSIVE, I'M GOING TO
SKIP OVER IT BUT WHAT IT DOES IS MAKES SURE THE
HEAD IS ALWAYS FACING DOWN BUT WHAT I DO IS TAKE
THE INPUT MESSAGE POSITION, I CONVERTS IT FROM
GRADIENTS -- FROM DEGREES TO GRADIENTS, I DO A
LITTLE BIT OF MATH ON IT.
I SET THAT UP.
AND I BASICALLY CREATE THIS JOINT STATE MESSAGE
HERE AND I GIVE IT EACH OF THE JOINT NAMES AND I
SET EACH OF THE JOINT VALUES AND THEN I JUST
PUBLISH THAT, AND THAT'S IT.
AND THEN TO CONSTRUCT THIS INTO A LAUNCH FILE, WE
JUST ADD A COUPLE MORE LINES, RIGHTS?
SO WE ALREADY HAVE THE ARE ADVICE STUFF IN HERE,
THE OTHER STUFF WE'VE WRITTEN, I JUST SPIN UP
THIS NODE WHICH IS RIGHT DOWN HERE, WHICH IS THE
ARM CONTROLLER -- WAIT.
A JOINT STATE PUBLISHER.
SO LET'S SEE THIS RUNNING.
GOOD MORNING.
SO, NOW WE CAN ACTUALLY HAVE A ROBOT THAT MATCHES
WHAT IT'S DOING IN HERE.
[ Applause ]
01:05:17>> THANK YOU.
NOW IT'S GETTING IMPRESSIVE.
ALL RIGHT.
SO THE GUY UP FRONT IS GOING TO TELL ME I AM
RUNNING A ALSO BIT LATE SO THE NEXT BIT OF THIS
IS HOW ABOUT WE WIRE UP THIS CAMERA THAT I SET UP
TO DO SOMETHING ACTUALLY INTERESTING WITH THIS?
SO LET'S PUT ALL THIS TOGETHER.
SO WE HAVE THIS LIKE INTUITIVE NOTION THAT IF I
HAVE A CAMERA UP HERE AND I HAVE A ROBOT AND I
KNOW IN THE -- AND THE ROBOT KNOWS WHERE THE
CAMERA IS AND WE KNOW WHERE THE ROBOT'S ARM IS,
WE CAN KINDS OF, LIKE, FIGURE OUT WHERE EACH
PIXEL MAPS TO, THERE'S ALWAYS A BUNCH WHERE YOU
CAN'T DO THAT QUITE CORRECTLY, BUT YOU HAVE SORT
OF AN INTUITIVE NOTION AND YOU WOULD LIKE TO BE
ABLE TO TELL THE ROBOT WHERE IT IS IN THE WORLD.
AND SO WHAT I'VE DONE HERE IS I WOULD LIKE TO BE
ABLE TO TELL THE ROBOT WHERE IT IS WITH RESPECT
TO MY WHOLE WORLD AND TELL IT WHERE CERTAIN
THINGS ARE.
SO ONE SOLUTION TO THIS IS I COULD SIT HERE ALL
DAY WITH A YARDSTICK AND A TAPE MEASURE AND
FIGURE OUT WHERE ALL THESE THINGS ARE AND MEASURE
LIKE HOW FAR THIS CAMERA IS FROM THIS JOINT AND
ALL THAT KIND OF STUFF.
BUT WE'RE LAZY SOFTWARE ENGINEERS, I DON'T WANT
TO DO THAT, EVER, RIGHT?
SO THERE'S ACTUALLY A COUPLE OF PACKAGES I CAN
LEAN ON TO SOLVE ALL THESE PROBLEMS FOR ME.
SO WHAT EERIE GOING TO USE ARE CALLED
A.R. MARKERS, SO WHAT EAR WE' GOING TO DO IS USE
THE CAMERA TO FIND THE A.R. MARK YEARS SO THESE
ARE LIKE SUPER HIGH CONTRAST, BIG PATTERNS THAT
YOU CAN DO IMAGE PROCESSING ON PRETTY QUICKLY,
YOU KNOW, HOW BIG THEY ARE.
YOU HAVE A BUNCH OF POINTS ON THERE, AND SO YOU
CAN ACTUALLY FIGURE OUT WHERE THE CAMERA IS
POSITIONED WITH RESPECT TO ONE OF THESE.
SO IF THE CAMERA SEES THIS AND THE CAMERA IS
CALIBRATED, CAN SAY, OH, I'M HERE WITH RESPECT TO
THAT.
AND I CAN ALSO SAY, OH, THE CAMERA'S WITH RESPECT
TO THIS IS OVER HERE, SO I CAN DO THE INVERSE
TRANSFORM AND I CAN ALSO TIE THAT TRANSFORM TO
OTHER BITS IN THE SCENE SO I CAN ACTUALLY TIE
THIS GUY TO SORT OF THIS A.R. MARKER THAT'S
HOLDING OFF BEHIND THE ROBOT.
AND THIS IS JUST A PACKAGE IN ROS, LIKE THIS IS,
LIKE -- OKAY, THIS ONE I INSTALLED FROM SOURCE,
BUT WASN'T A BIG DEAL, USED WHAT'S CALLED A
W.S. TOOL, SO YOU SAY TOOL, GET THIS PACKAGE FROM
GET AND BUILD IT AND YOU DO SOME CONFIGURATION.
SO I ADDED A COUPLE OF LINES HERE TO MY LAUNCH
FILE.
GOING TO SAY, HEY, ROBOT, T.F., BETWEEN YOU AND
THIS MARKER IS THIS BAR AND THE ROTATION FROM
THIS MARKER TO YOU IS LIKE THIS.
AND THEN I FIRE UP THIS A.R. TOOL KIT MARKER,
PACKAGE AND IT JUST RUNS, BASICALLY SUCKS OFF ALL
OF THE DATA FROM MY CAMERA, GOES THROUGH, FIGURES
OUT WHERE ITS POSITION IS WITH RESPECT TO THE
MARKER AND SHOOTS THAT TO RBUS TO SAY YOU'RE
HERE.
A LITTLE BIT OF CONFIGURATION I HAVE TO DO WHERE
I'M GOING TO SAY HERE I HAVE THREE MARKERS.
LET'S TAKE A LOOK AT THIS.
I'M GOING TO NEED THE HOUSE LIGHTS FOR THIS, IF
THAT'S POSSIBLE.
SO THIS WON'T ACTUALLY SPIN UP BECAUSE -- IF I
CAN GET THE LIGHTS HERE, HOPEFULLY THIS WILL
WORK.
SINCE IT WON'T SPIN UP UNTIL IT ACTUALLY SEES THE
MARKER BUT IF I USE THIS -- THERE IT GOES.
LET'S TAKE A LOOK AT THIS.
SO YOU CAN SEE, I KNOW WHERE THE IMAGE S I KNOW
WHAT'S IN THE IMAGE AND I HAVE A MODEL OF MY
ROBOT -- THERE WE GO.
NOW WHAT I CAN DO, I CAN ACTUALLY PROJECT MY
ROBOT MODEL ON TO MY IMAGE RIG, WHICH YOU CAN SEE
WHERE THIS COULD GET KIND OF USEFUL, RIGHT,
BECAUSE NOW I CAN FIND THE OTHER LITTLE MARKERS
IF I WERE TO PUT THEM ON BOXES OR OTHER THINGS MY
ROBOT WANTED TO PICK UP.
CAN WE FIND IT?
MAYBE.
SO IF WE HAVE A MARKER FOR HERE, RIGHT, AND I
HAVE A MARKER FOR THE ROBOT AND I KNOW WHERE THIS
IS TO HERE AND I KNOW WHERE THIS THING IS IN MY
ENTIRE SCENE, ROS MAKES IT SUPER SIMPLE TO FIGURE
OUT THE MATH HERE.
SO I CAN BASICALLY SAY THE POSITION DIFFERENTIAL,
THE DIFFERENCE IN POSITION BETWEEN THE TIP OF MY
ROBOT RIGHT OUT HERE AND THIS THING THAT I LAID
IN THE SCENE, I CAN FIGURE THAT OUT ALL IN A
FUNCTION CALL WHICH IS PRETTY SWEET.
JUST TAKE A LOOK AT THIS A LITTLE BIT MORE
BECAUSE YOU GUYS DIDN'T SEE THIS.
IT'S MOVING AROUND AND SO IN ROS, WHAT I CAN DO
IS I CAN MAKE A SINGLE FUNCTION CALL HERE TO
T.F., AND SO T.F. IS THIS LIBRARY THAT SAYS GIVE
ME THE POSITION FROM A TO B, SO FOR A MARKER IN
THE SCENE, ALL THE WAY TO THE ROBOT, SINGLE
FUNCTION CALL TO NOTE THE POSITION DIFFERENCE.
SO IN PYTHON, IT LOOKS JUST LIKE THIS.
AND WE CAN ALSO RUN IT -- RUN IT IN THE COMMAND
LINE, SO I'LL DO THAT REALLY QUICK.
HOPEFULLY THIS WORKS, HOPEFULLY YOU CAN SEE THE
RIGHT MARKER.
SO THIS IS ACTUALLY THE POSITION DIFFERENCE
BETWEEN THIS MARKER AND THE -- OF THIS ROBOT AND
THAT'S A FUNCTION CALLED IN-PYTHON.
AND THAT'S IT.
PRETTY POWERFUL.
SO LAST LITTLE BIT HERE AND I WON'T SHOW ALL OF
THIS BUT JUST AS A TASTE OF WHAT'S AVAILABLE TO
YOU, THERE IS FINALLY A ROS PACKAGE CALLED "MOVE
IT."
WHAT THAT DOES IS REVERSE KINEMATIC SOLVER FOR
THIS.
SO IF I HAVE THIS POSITION RIGHT HERE AND I KNOW
WHAT MY ROBOT LOOKS LIKE AND WHERE THIS IS HERE,
THIS INVERSE KINEMATICS PACKAGE, THE HARD JOB OF
THE MATHEMATICS, IS GO FROM HERE TO HERE.
SO I RAN A LITTLE BIT LATE SO I HAVE TO WRAP UP
HERE BUT IF YOU GUYS ARE INTERESTED, COME TALK TO
ME.
THANK YOU.
[ BREAK ]
01:45:34