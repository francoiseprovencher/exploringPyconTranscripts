  >> Hello.  Good evening.  How are you guys?
  Whoo!
  I have my little awesome cats on my dress, pretty cute.  The reason I'm dressed up I'm going to the PyLadies auction right after this which I should see every single one of you there.  All right.  So, to be on time we're going to jump right in with Meenal pant.  Automatic documentation and multiple formats.
  >> so, I talk about a common problem we all face, we all develop our code but documentation is the last thing on our minds.  So, I attempted a talk yesterday, lightning talk the documentation page was blank.  Which is the state for most of us.  Who write code.  So, one of my projects is a UI application that we build a desktop client we have to provide a lot of training material and end user documentation.  And it is always the last on our list.  We are just trying to busy finishing our releases.  So, the current flow we have is the document is written in Microsoft word it is outdated with every release we have to play catch up all the time.  The screen shots are collected manually there's room for error.  And there is request to support multiple formats we are supposed to provide PDFs and we're always trying to play catch up and always trying to do double work.  So, I want to show what you we did with trying to automate our documentation.  So, the whole goal was to keep the document with the code, the way we do coding, let's start documenting our -- document the documentation as well.  We kept it simple, use single source the formate, we picked was markdown.  The version control it, do Diffs and tests.  We review have it edited by the technical writers.  Automate the screen shots and create build environment for our documentation.  So, the tools that we use are Python, markdownu pandoc and Docbook.
  I'll show you a demo how we achieve that.  So, here is -- if you can see that.  Here is what we have.  So basically all of our documentation is in a markdown file.  It's very long file it has a place holders for images.  And then there is make file that actually does all of the translation.  And then we wrote a script called screen shot.py so since my application is Python I'm QT and Pyct based we created a script that runs, opens up every window, grabs that window and captures a screen shot on the fly.  So each time we do build we run the script and get a whole new set of images with our code.  Now I will just show you what -- how we build it I.T. I say, "Make clean" come on.  It's taking awhile.  All right.  It starts building the documentation right now.  So, and the resulting files are hear with this one markdown file I have now created a PDF file, complete with images and complete with content.
  And this shows all of the screen shots which are the most recent one that came with the code.  And we also happen to create the web help, which has all the contents here, has all the screen shots.  And this is what -- then it has a cool search feature where I go search for the bag that it gives me the hits, all the pages, would this key word appears.  And this web help we actually go and ship it with our product to the end user.  So, this is a way to go ahead automate your documentation not fall behind.  And leave it to the technical writers.  That's all I have.  Thank you.
  [ Applause ]
  78.
  [Applause]
  >> Awesome, thank you so much.  Next up.  Larry hastings, I learned actually a new word today eschew, the extraneous Else.
  >> Highway many people were in Dana's talk yesterday.  This was David's first slide so to speak he did a live demo he typed this in live on the screen.  I saw that code, Oh!
  Because there's thing that I hate when people write code a particular construction that I dislike.  Consider this, if statement.  If you enter this if statement you'll never leave or rather never leave in the context of this function because you returned unambiguously out of the function.  You don't need this else.  You will never reach the code underneath the else unless you have already skipped over that "If" statement.  My rule.  Allow the extraneous else, let's take David's code, boom.  Every time I do this transformation I like the code better.  It works.  Thank you.
  [ Applause ]
  This is also true of "while" statements or other looping constructs if you have continues or breaks you don't need this LF, don't need the else, boom, I like this better.  The final imaginary bad example if you have an if statement that does continue but else statement returns, swap them, and now, boom, you can get rid of the else statement.  That's it.  Go forth and clean up your code.
  [Applause]
  >> Awesome.  That was like super quick.
  [ laughter ]
  Lightning, lightning talk.
  [ not audible ]
  >> Lot of people want more than five it seems like.  All right.  Jackie, are you almost set up?
  >> Is this on?
  >> Up next is Jackie Kazil, which talks, privacy, identity and user trust.
  >> Great.  So just quick disclaimer, in my professional capacity I work for the U.S. government.  I'm not representing the U.S. government today I'm representing myself in my personal capacity.  Moving on.  I started working on this project, and you can go GitHub find this, so I learned a lot about identity and trust.  It's entirely possible that I hack up something that I say today because I'm not an expert.  I'm having a little imposter syndrome right now.  So, this is my mom.  She's from east Europe, both my parents are.  And so I grew up with a very distinct mistrust of like everything.  And so she would say something along the -- I told her I was work on this project, like, what are you doing with my information?
  And so when you build a system you really want the think about putting your user first and who is your user.  And understanding that user.  That doesn't mean turning around to your co-worker asking them "Does this make sense?"
    So, let's build a system together really quickly.  Show up hands, how many -- between e-mail and third party authentication how many would choose e-mail.  You enter new e-mail.  Google, Twitter, Facebook?
  Okay.  So systems that have -- for trust of your users systems especially startups, sometimes use third party authentication as a default because it's easy they don't have to build anything.  And you lose -- you can lose like half your population with that.  Use.  How many yous? Me, there is work me, professional me, personal me, PyLadies me.  There's me who does stuff for my mom.  Many me's to the world.  How many you's there are.  How many different Google accounts or e-mail accounts do you have?
  And with people who might want to interact with your system how many different accounts might they be using?
  So, thinking about those, accounts as profile, then you have identities.  Many profiles, many you's you have one identity.  Identity is your legal identity.  So basically with respect to profiles that's called level of assurance 1 that's the official term.  And that is a level of confidence that the person who created the account is the same person who returns another time over and over again.  But you don't necessarily have the same -- don't have any illegal attachment to that person.  As identity gets into attribute verification from some sort of official source.  So, for the second part of this let's do quick raise of hands.  How many of you would want your identity verified by a bank?
  Okay.  Government?
  Okay.  Or other private identity entity that is not a bank or government?
  See.  This would be like something along the lines of, let's say, mortgage applications, this could be your taxes, this could be a variety of things.  Which involves passing attributes such as your Social Security number, your address and on a higher level would include doing verification from your credit report.  Which is called LOA 2.  LOA, in my professional capacity which I'm in the here today as, we love our acronyms.  Just remind you LOA is level of assurance.  2 and 3, 2 being some confidence, being high confidence all just attribute clarifications.  If you think, I could be my husband because I know all of his information.  So I could be my husband at LOA3.  What I can't be my husband as is LOA4 which is step up where you actually have to go somewhere.  So I'm going to propose something to you today.  What if we lived in a world where we had some sort of identity verification where we had to go in person and we had a bunch of places that existed where we could do that and that was the U.S. postal service possibly.  So think about how users are going to use your site how they might interact with your materials and sort ever what do you need to give them at what time to be able to make sure they trust the experience.  Other things to consider.  Are passwords.  We have too many of them.
  We don't need another one.  Sometimes relying off of another like e-mail or two factor off could be easy way to get around a pass ward without having to create another one.  Frequency of which someone interacts with your site and that's it.  Here are some resources I'll tweet this out later.
  [ Applause ]
  >> Thank you.  Awesome.  Reminds me that the PyLadies is having a GPG key signing tomorrow at open space, some time in the afternoon, I don't know where.  But I'll tweet it from the PyLadies Twitter handle.  All right.  Next up we have Greg ward.  Talking that one weird thing about English.
  >> All right.  Those of you, there are couple people in this room have worked with me in the past or work with me currently you already know what I am about to confess publicly.  You already know that I am a grammar geek.  Now the rest of you know my confession.  Oh, dear.  The secret is out.  I'm here to share with you one of my pet grammatical peeves, something that makes me eyes bleed when I see it.  Before I get to it I need a quick review.  Because based on the man pages, read me files, doc strings I read every day there's a lot of programmers who don't realize that the sentence in English begins with a capital letter ends with a period.  In between the capital letter and the period we almost always find a subject, and a verb and we often find an object.  Here are two simple examples.  Jane followed the dog.  Good basic clean simple English, no problem there.  It's just fine.  You can get fancy, you can add things like, subordinate clauses,adjectives, adverse, yadda, yadda, yadda.  Spot ran quickly after the stick is a nice little elaboration that throws in adverb.  I got really fancy.  There's a subordinate clause and something that I know that threw the stick at the dog "At what the dog is" I'm sure grammarian would know I just threw this talk together this afternoon.  Sorry.  Anyway, it's a nice sentence.  It's fun.  It sparkles.  It jumps off the page because it uses some fancy stuff.  Now there's one thing about English that a lot of people don't know, almost as many, even more people don't know this than don't know about periods and capital letters.  There's a rule in English that you can't just jam two sentences together with a comma.  Please keep that in mind when writing documentation because I'm afraid it's wrong.  Various points in time, the Wikipedia claimed that in Bulgarian and Ukrainian it is not merely acceptable it is encouraged to jam two sentences together with a comma.  I don't know the rules for any other languages I'm sure it's wrong in French which is the only other language I know, have any familiarity with.  So, please don't do it.  Here is an example of how not to write English you cannot take these two simple straight forward sentences, Jane followed the dog she saw her brother.  No, please don't do that.  It makes my eyes bleed.  There's a nice article on Wikipedia all about this, the same of the sin is the comma supplies, good to know.  Take my fancy elaborate example take those two sentences together it's so wrong it hurts.  Because there's always a clause surrounded by commas, lots of verbiage in there, if you jam those two sentences together just know a million times, no.  Now the good news is, by the way, I forgot to mention -- this violates the grammar of the English language.  And all of us have natural language parsers as software enter our brain.  The parser for English in my brain is very good because I grew up speaking English, it's my mother tongue I'm sure that's true for a lot of you.  And for a lot of you it's not true.  You grew up speaking some other language and you've picked up some English along the way.  If the parser, the software in your brain does not -- especially fit doesn't flag this as problematic, there's a bug in the software in your brain and I'm here to provide the patch.  Please download it and apply it today.  So, it's really easy to fix these incorrect sentences.  Jane followed the dog and saw her brother.  Nice.  I like it.  The last one is really nice because it turns out even though you cannot jam two sentences together with a come a, it is perfectly legal to jam sentences with a semicolon all you have to do is add one dot and you're good.  The fancier example, the one that made my really eyes bleed is also easy to fix although to do it reasonably nicely I had to tweak the wording a little bit.  And to be honest, this sentence is grammatically absolutely fine but it's a little bit artless, a little too wordy, a little clunky but needs more work I threw this talk together in half an hour, give me a break.  Now, I told you a simple version of the rule.  The reason this is one weird thing about English is because the real rule is that you can't just jam sentences together with a comma, unless you're famous.  Julius Caesar can do it, I same, I saw, I conquered.  He did it in Latin, yes.  There is only one way to translate that famous sentence of Julius Caesar into English, I came, I saw, I conquered.  That is not really  a comma slice but he can get away with because he's famous.  The Bible can get away with it.  That is a sentence of awesome power and terror.  If that doesn't fill you with the fear of God, nothing will.  And it is a comma supplies.  I've never read that sentence before today.  I just found it in the Wikipedia article on comma slices.  It is a beautiful and terrible sentence, in the sense of awe-inspiring, God-fearing I've never read it before.  Yet the parser in my brain accepts it.  Somehow the poetry of the sentence transcends the comma supplies or maybe just the fact that it's in the Bible, which is an ancient and famous book they can get away with it, weird, Eh?
  Sorry?
  Okay.  Final words.  Or from a wonderful book by Lynne truss.  Just find the book.  Thank you.
  [Applause]
  >> All right.  Next up.  We have Scott Sanderson speaking on interactively visualizing CProfile output.
  >> Hello?
  Awesome.  Cool.  So my name is Scott, I work for company we have people basically doing financial simulations almost all of our back send built on top of things like panda and Nuppi doing numerical computing we spend a lot of time staring at CProfile outputs trying to figure out why our code is slow.  After spending enough time playing with the command line interface I decided to say they must be better way.  So, if you haven't used pandas or something like that mayor basically fancy 2D array, is that provide cool slicing syntax and ways to have more fancy labels than just numbers.  You can look at them sort of think about them like 2D tables like this.  So I very common operation you might want to do something like concatenating them.  I've got two data frames here DF1 and 2 and I want to take them and squish them into one data frame that is them added up on one axis.  Pandas provides a great function for that it's called Concat.  Now if you do that a lot especially in nested loops with data frames that are nicely structured it turns out that it's not the most efficient way that you can do it.  And so also if you haven't used CProfile the way you use it just use CProfile.run it spits out a file, use PSTATS to interactively use that in the terminal.  What I wanted to do have a little bit more of interactive layer on top of that.  So we built this cool called Pstats viewer, let's you construct the viewer, couple different ways of viewing the data that come out of Pstats or CProfile.  If I execute this construct a stats viewer object then do my slow stats viewers, I get this grid that is actually doing Javascript, stuff I can do things like sort by particular column I can see that 102,000 times.  Which is taking up a good chunk of my time, also calling Numpy.ravel is sub class a whole bunch in here it's nice because I can very quickly sort by different things get a sense of what might be the cause of my code being slow.  I can also scroll up and down interactively here and particularly slick I can filter by this.  And sort of get a nice like interactive way of exploring this profiling data that I have.  This is actually just a generic view that lets you explore data frames all like this but one particular useful thing I found it for is Pstats data.  The other view that I have for this is using IPython widget system if I do dot chart it pulls up use Cborne and map plot to generate bar charts.  I can sort by different total times, different call counts, different cumulative time.  Also control how many function calls it let's me look at.  These are all telling me how many calls there were, how much time I spent in different functions, and how much time I spent in functions or something underneath it.  That's the difference between cumulative time and total time.  So now I'm going to go -- I see -- I called instance 100,times what could be.  Panda's Concat method is fancy and powerful it allows to you pass it a lot of like weirdly structured arguments it will figure out what you mean and align all of your data.  That's really convenient and useful but the cost that have is that it has to do a lot more error checking and introspection.  If you know you have nicely arranged data you can use the Num-pi like this to reach into the internal arrays, restructure how you want then reconstruct your data frame.  So the two sort ever most common tasks that I have interacting with profiling data is one I just want to look at my code see why it's slow which is what we just did.  The other is now I've reimplemented, did I make it better, how do I compare the two different runs that I did.  The other sort of interesting feature this has is comparison function.  So I can say compare grid, basically do a SQL style join now I can say, I used to be spending a whole bunch of time here, it's gotten about seven times faster how about that instance call I was looking at I've gone from 102,000 calls to his instance to 11,000.  I've cut that by roughly an order of magnitude.  I'm now only calling anything 25,000 times.  So this is really nice way to get a quick sense of what I actually improved here.  I can do the same thing with the chart view and get side-by-side views and get a visual sense of how much time I was spending.  So, very briefly how this works is, CProfile loaded into a data frame, chart view is provided by IPython, table view is also powered by Javascript views then Javascript called slick grid.  You can find the code here.
  [Applause]
  >> Thank you.
  >> In a previous life I was classically trained as bassist I'm excited to here Jean Francois speak on classifying pro versus mediocre viola players.
  >> My partner is violin player and I'm not.  And I'm not a musician either.  So when you listen to music I often hear, that's good, that's bad, very fast and I can tell.  I feel like there's this world of beauty that I don't have access to.  So, I guess a way to listen to this -- to get -- to fix this I guess this lack of understanding would be to listen to music.  But maybe computer can do it for me.
  [ laughter ]
  So, I use this very nice library called Essentia a C++ open source library.  And it has a Python -- if anybody used it please try to talk to me when we meet in the halls somewhere, because I have many questions.  I'm just a newcomer in this.  I'll use the very basic functionality in it.  So, I'm going to look at two kinds of data.  So my partner, Myrna and me you see JFRJ when you see this you have to associate with mediocrity and Myrna is professionalism.  Here is the signal that I would get so this is the audio signal just pressure in the air translated into some electronic signal then with the -- in this case it's a sampling of 44,000 hertz.  So of course, all this data is compressed you don't see everything, but you still have this global view here.  But that's almost like a big data problem from my perspective.  Or at least if you have many more strokes but not that much.  Anyway, I have two symbols.  You see signs of mediocrity on the lower side, but what I want to know is what is inside the stroke.  So, first I want to isolate the stroke signal and for this I combine the two signals into just one array to do it just once.  Then essential the tool that tells you the onset, whenever the sign changes, it's not working perfectly but it's sensible because the signal is never completely smooth.  So there could be way to correct it but for this talk I corrected by hand.  I removed the ones that I don't like.  Or that don't fit that beginning of a stroke.  So I have those strokes, then they are isolated so you can see them more clearly but still the information is too compressed.  So, out of this now, I can try to analyze them what is inside this using the feature.  That's when the power of Essentias is coming in.  I use two features, so for now I use them blindly I don't have to know what they are.  I can tell you their names, zero crossing rates, but using them blindly so I extract just two features.  Let's see if I can see a difference from the two types of strokes.  Here it is.  I separate them into blue, blue is mediocrity, me.  Red is the professional player.
  You can see a clear distinction with only those five.  Now let's go back to one of those feature called zero-crossing rate.  What is actually the zero-crossing rate?
  When the pressure goes from positive or negative, with respect to baseline and here to have better idea of what it is so I just took two strokes, one good, one bad and while you can see already that one is crossing the zero lines, crossing the middle more often.  Where did this come from?
  It's actually the creation of the overtone so professional players practice for years just to have their playing to resonate with the body of their instrument and also let's say for the viola and the bow also and everything in their environment.  That's something that I couldn't pull off with my playing.  And that's a mix of what I do, I'm a physicist.  My partner who is a player and then there's the signal.  I guess from this I feel like I have this glimpse of the beauty that I have, so actually I see my partner even more beautiful just by looking at this.  I could talk more about this but time is on the end.  Maybe I can close on this sentimental note.  Here it is.  Thank you.
  [ Applause ]
  >> Thank you very much.  Awesome.  I think now I would probably fall into the mediocre area.  All right, next up we have Karen talking about quick design wins.
  >> Hi.  I'm Karen.  So -- it would be a bit ambitious to say I'm going to teach you how to be designer in five minutes.  Given that I've tried for hours or semesters and had variable success.  But in the era of Twitter bootstrap which gives mean non-design orient people a lot of sensible defaults there's still a lot of things left uncovered I'm going to cover just a few of them in the five minutes I have here.  So the first is this concept of line-height.  The CSS line-height property is what determines the distance or spacing between the lines of text on a page.  And in the default styling it's a multiplier usually 1.2, it depends a bit on the font.  Some fonts are taller than others.  But it's a little tight.  It's not that pleasant to read.  It's actually a better default would be somewhere between 1.5 and 1.8.  So you'd have some CSS code that looks something like this and you would suddenly have slightly fancier paragraph text.  Another thing to look out for is text width.  From before something that goes across the entire width of the page is not generally readable.  But columns less wide are much more digestible so you can accomplish that with something like this.  You've got a fixed width on your encompassing container Div the trick at the end, will automatically horizontally center your Div in the middle of the page, that's cool.  Contrast.  So, important design concept.  The default headers that you get with just your client's built-in style sheet in your browser don't actually differentiate that much between headers.  In H1 and H2 and H3, so forth.  The default sizes are 32 pixels versus 24.  Versus 16 for regular text.  And you probably need that to be at least be doubled.  You get something like this.  Then you -- this is a bit exaggerated you have much clearer hierarchy once you exaggerate that.  Something like this, you have a set font size and the 4 and 2EM syntax, whatever the base font size is, I'm going to multiply it by two or four.  Fonts.  Type faces.  For the -- so, if you have just worked with Microsoft word you might think that, you have plain text, you have bold, you have italic, some time bold italic those are your options in topography land.  But, no.  Welcome to the big leagues.  A decent font, a decent type face that you'd like to use for website should have something along the lines of this level of selection of weights, everywhere -- from numbers 100 to 900.  Some will even have 200, 500, 600 which weren't included here and italic variance of all of the above.  And this website has a sub set of the free fonts available on Google fonts that meet these criteria have a sufficient number of choices in terms topography or similarly on Google fonts there's a sorting option number of styles.  That I would recommend you take a look at if you want a fully operational type face.  We can see that affect on our text as well.  Grids.  You know about bootstrap, it's cool.  But one pit fall I see people falling into is they build a brick wall, which is to say, they're building Div -- sections within their rows of variable widths and have like three sets of four in one and four sets of three in another and there's really no sense, something is offset suddenly looks like a giant mess.  So just because the grid makes it easy to make Divs of all different sizes doesn't mean you should.  You should probably have some sort of standard layout, for instance, you have a side bar that is with column 2 and the rest of your content is 10 or 4 and 9, whatever works for you.  A browser plug in that is useful for looking at the box model and grid on your site.  On this page look something like.
  This when something is out of alignment this makes it super obvious.  Finally, color.  Hue contrast, blah, color theory, don't care.  Value contrast.  Way better.  Besides many people in our community are color blind so value contrast something you care about more.  Black and white is okay.  A gentle monochrome is the hip look like now so you can see the difference here everything is in like slight shade of green from almost black to almost white everything in between.  And you'd implement that in processor by using variables, just pick your favorite color use lighten and darken all over the place.  And everything will look more or less like it goes together.  That's what I got.  Thank you.
  >> Thank you.
  >> Fun tidbit, I myself am a bit color blind thank you for pointing that out.  Next up is Clara talking about comments, what are they good for?
  >> Hello.  I'm Clara this is my Twitter handle going to talk about comments.  To start if there are any beginner programmers in the room everything that I'm going to say after this slide does not apply to you yet.  When you're a beginner commenting everything is great.  It's a good way to learn because you're still at that stage where you need to like learn how to see your four loops and understand what that means if you want to have code like this I encourage you when you are still figuring out how to write code.  For everyone else, if you're writing a code comment, you should take moment to stop and think about why.  Because comments go stale much faster than code. We can change the code have it go out of sync it makes no difference to how our program runs.  I notice in my experience that most comments try to either explain what the code is accomplishing, that is to what end are we affecting the steps.  Sometimes it explains what the code is actually doing, what the steps mean.  And sometimes there are comments that explain why the code isn't doing something that a reader of the code might reasonably expect it to do.  Minor point of clarification I'm talking about code comments like, hash tag style not the doc strings.  The code comments are things that the audience are people who are reading your code so other developers, a doc string written so they don't have to read your code to use your stuff.  Doc strings be go steal but they have -- stale, but they don't read your code whole different set of constraints.  Okay, so, let's take an example of comments that explain what the code accomplishes.  I'm sure many of you have seen examples of codes like this probably a lot longer it has like long list of imperative statements, the author has realized it gets a little confusing where you are.  So they have nicely blocked them and put a comment at the top to tell what you is going on.  Which is nice of the author but wouldn't it be lot nicer if we just extracted those things into other functions or methods that have really nice clear names.  Instead of seeing details of how I'm extracting the raw data about this particular puppy I might want to adopt, I just make a function with that name.  And in this case here why I say, add shelter code, there's only one line that is self explanatory that was not necessary at all.  Bigger problem are comments that explain what code does.  That is trying to explain what the steps are doing because if this is a sign that your code is too obscure, have to explain to the reader of the code what the step is doing, you've made your code too hard to follow.  It's a crutch to avoid refactoring you should consider just refactoring it already.  This is a very simple example, but as an example of something that I've seen, you see here we've got a bouillon argument, someone is helpfully added comment to tell you, when of course this is what key word arguments are for.  This is a more complex version also inspired by something I've actually worked with.  I think we can all agree this is not a great structure, we have nested four loops, all these "If" statements there's all of these comments to help you keep track of what is going on.  Because you have to load in so much context into your head to understand this.  And like why are we getting this header here?
  And you have to put a comment on the break because with three continues and a break in two nested four loops it's hard to tell which loop you're actually affecting with that comment.  I'm not going to go into how to refactor this if you have code that looks like this you should really refactor it those comments are just barely a crutch.  The last category I'm going to talk about is code that explains -- sorry comments that explain why code isn't doing something.  And this sort of comment I thinking be okay.  It's something that you may see like in a library that has to support a range of different versions of Python or different versions of other dependencies, in this case, for example, I have this nested try statement I want to support Python 2.4, I can't do the try except finally.  I probably could figure out a way to do this in code but probably involve duplicating the functional.  This is not a good idea.  So if you do have a comment that is explaining this sort of thing, why we're not doing something that you expect it might be okay.  But consider whether you're covering up a hack that you did or responsible for elsewhere.  And whether refactoring might be better solution than adding this explanatory comment.  In conclusion instead of code comments consider refactoring.
  [ Applause ]
  >> Lately my comments are pretty much just like, "Fix me" and "to do".  All right.  Next up we have Aleks talking about how dolphins and whales hear.
  >> Thank you.  Just want to donate this is my late advisor Dave Mountain who is shown in the picture right here.  To get started, marine environment typically has low light, very deep depths, so also three dimensional environment.  Which is relevant to this because hearing is a three dimensional sense.  In other words, I can hear where things are behind my head, underneath me as opposed to vision where it's just in the field of view.  And sound travels faster in water in sea water than it does in air.  One of the reasons that I do this research, shy probably say, I study marine mammal hearing at B. U.  We're concerned that the noise from the marine environment from things like shipping noises and Naval exercises is preventing whales from being able to communicate and hear and capture food, which are some of the things I have on this slide right here.  So now get to prototypical mammalian hearing system which most of us have is the first thing in the system are the pinna or external ears.  And the function of those is to collect sound from the environment and they're asymmetrical they have directionality associated to them.  So something in front of me is  going to sound different than something in back of me.  The next stage is the middle ear which has the ear drum, the little ossicles, the bones.  Those transfer the sound pressure to vibrations.  And those vibrations, is then go on to the cochlea, the cool part, I think, and it transforms all the vibrations into neural signals.  And the neural signals leave the cochlea and go to the brain, I guess, for this audience right here.  Cool thing is this connection right here, is you could say massively parallel say synchronous, bi-directional communication from the cochlea to the brain.
  That is also repeated on the right side.  I guess if you can think of this in terms of objects and stuff.  This could be an instance of a left ear and right ear.  So I'm just going to move on a little bit because I'm running out of time here.  We can compare our anatomy to marine mammal anatomy.  First thing that is obvious is whales and dolphins don't have a pinna, I have one, the doggy has one or two you can see there but the while pinna is right here it's pretty much absent which we think is for a few reasons.
  One being drag and the other reason is that in water the sound is emitting or coming in if you can imagine a plane wave coming in like in water you don't have what we call impedence mismatch.  All the acoustic energy comes through the surface of the skin into the animal's head as opposed to in air where we have the obvious ear hole in our ear and the sound enters into the ear hole there.  This right here is a CT image of the hearing apparatus anatomy in a bottle nose dolphin.
  This is the beak of the animal we're looking at the bottom of it here.  The interesting thing about these animals you have these large fat bodies here, which we theorize might replace our external ears.  I got some pointers right there.  Which the -- there are little external ears right here but these fat bodies have similar acoustic properties to water and the speed of sound they terminate on the ear capsules which are right here.  Those hold the middle ear bones and then the cochlea.  Which sends the signals to the brain.  Let's see here.  Moving into the ear right here this is CT reconstruction of a harbor Porpoise ear, these are the middle ear bones, there's ear drum connected to this which is very close to that fat body.  And so we theorize that the ear drum moves and then it's connected to these middle ear bones by linkages so the bones move.  And that causes the pressure in this thing right here called the cochlea change, as the pressure changes there's frequency selective response which is Tonotopic one part of the cochlea responds to high frequencies then there's whole spectrum of low frequencies at the other end there.
  Is a neuron, I have another picture this is the same type of image.  The neurons come out of the cochlea go to the brain.  And I have 20 seconds left.  I don't have much more to say just want to thank you for the talk.
  [ Applause ]
  >> Awesome.  Thank you so much.  Anything with pictures of cute animals is pretty awesome.  Next up we have Nicola talking about C3 under control scalable MRO's for large hierarchies of classes.
  I'm doing research in France in mathematician.  I love to play.  But not what I'm going to speak about today the reason I'm here I'm using lot of computer to do experimentation and I need to do all of calculations I need software for this.  And am I going to use maple, mathmatica I'm going to use sage.  The reason is that I love nice feature one of them being it's open source and it's in Python.  Anyway, I'm not going to speak about sage today.  Because if you want to learn more about it should you come to the sage days next week during the -- what I'm going to speak about is small technical issue while implementing sage which we fixed maybe some of you had same problem would be interested by the fix.  So, one of the main focus to try to model mathematics as closely as possible, and we do this by modeling the concept by class.  This is small piece of a class hierarchy but the richness of mathematics come from combining concepts many different ways which means that actually hierarchy of classes is larger, actually, it's a bit larger.  Many people my fellow computer scientists, it's impossible to maintain hierarchy of classes of this size.
  A, I'm not crazy I'm a mathematician.  Is there any difference?
  Okay.  It's actually relatively viable for two reasons.  First because it relies on strong mathematical foundations.  We did -- made the hierarchy of classes.  I.T. exists in math at that time particulars first we did build some infrastructure to make it possible to maintain.  The thing I'm go to speak about is the C3 under control.  So what is it about?
  Multiple inheritance from this picture we do multiple in hire tans rather heavily.  Multiple inheritance works in Python.  Hierarchy of classes like this is from A&B you look for method.  Python going to look in C then in A, then in B.  So C, A, B is called method resolution order.  And of course you want C to come first but depends on which order you specify the classes are.  In this case it would be D, B, A.  So far so good.  And as by algorithm which is C3.  Now what happens if I do E, and C and D then this is not consistent because in one case I want A to be before B.  And in the case B to be before A.  What is going to happen you get this dreaded error message.  So, who got this error message in this room?
  How many people?
  Okay.  Who got really annoyed by them?
  I did.  I did really.  So the obvious thing is, okay, we just have to be careful not to have inconsistencies let's just choose a global order in the classes then be consistent locally.  We tried this.  It failed.  Each time we're adding new classes, something wrong was going on.
  The reason for this is that even if choices are consistent with the global choice, C3 may not follow the order we want to.  In this case use E, D, B, A, C.  Not the converse.  So when starts to be bigger it gets painful we could say, okay, maybe enough to just take -- find some order that would work.  What we tried.  We tried, okay, I'm going to choose said this convention in the developer's manual that, classes should be ordered in this way.
  We tried, it failed.  We tried another order, it failed.  Yet another order it failed.  I was starting to pull my hair think, if I cannot fix this, imagine a new developer that wants to have a little class and has to fix the global order, just going to be a nightmare.  So, what to do.  That was second thing.  When you start getting stressed you should just relax and do the math.  Hierarchy of classes where it just doesn't exist global order works.  We run a big calculation computer and Ta-da, no.  You won't be able to do this hierarchy of classes in Python.  Annoying, isn't it?
  I was starting to pull my hair even more.  Just fix Python?
  Just switch to some other lack?
  What?
  Well, what should you do, relax, no math this time.  But think outside of the box.  The trick is, that usually when E and D and C just say D and C but actually you can put everything in whatever order you want.  This works.  I'm forcing C3 to follow my order that I want.  This works, yeah!
  But it doesn't scale.  Luckily you can have it be advertised, it works, the overhead is negligible it's completely automatic and transparent, new users don't even know it's there.  If you want to learn more about this, just get in touch with me.  Come next week or Google C3 under control.  Thank you.
  [Applause]
  >> Thank you.  Awesome.  All right.  Next up is James Powell talking about symbolic.
  >> High name is James.
  >> Hi, James!
  >> I think we dock better than that.  Hi, everyone.
  >> Hi James!
  >> Very good.  Those of you in the audience who recognize the common response may know me from NNCY CPython we have the world largest, most active meetup group.  We have almost 7,000 members we have a lot of events.  So, if any of you find yourself in New York please stop by we have events all the time.  We want to see as many fresh faces as we can.  One of the biggest events that NY CPython runs every year is Py Gotham.  We'll run it again this year around the same time in August.  So watch out we'll have the CFP out very shortly.  In addition to NY CPython and Gotham I organize bye data, events in Berlin, London, Seattle, Dallas, I also help organize open data science conference on the 30th and 31th of May in Boston.  I am known on Twitter as don't use this code.  I used to have a blog at seriously.dontusethiscode.com.  I think that would be sufficient disclaimer if that's not sufficient let me show you one thing that I am known for.  Which is, this is a pure Python module that embeds pie interpreters into themselves.  So if you look at this you can see I have 16 Python interpreters embedded into themselves all in the same process space they can all share memory and look at each other.  It keeps embedding them until it runs out of space.  Pretty wild.  What I'm going to show you something that I put together as a very simple example for a talk that I gave just to show how easy tots change the Python -- CPython interpreter I thought it was fun didn't think it would be useful few people have convinced me that this might be something that people might actually want to do.  I'll start with some very basic code.  Let's Say we have X and Y and add them together, nothing fancy.  We want to represent the symbolic impression of X plus Y.  We can do that with my little patch.  You can see now we're representing just X and Y being added to each other.  We combined X and Y's values and perform the computation.  If we want to do a slightly more complicated example like this.  We combined X, you can see replaces all the X's in the expression, we combine positionally.  And we combine it positionally and Y then evaluate that.  Couple of neat and kind much cute things fall out of this.  One example is, we can do something like this, or add Sub and truediv and say, this is an expression that represents a function being called with arguments of one direction, the function being called at the arguments swapped.
  We combined values X and Y.  And make another expression.  Now the only thing that's unbound is the function itself.  So combine the function and call it.  We get different results.  Now you might wonder what is a possible use case for that.  Well I think one interesting use case, the reason why some people have told me that they might like this is in libraries like Num Py, pandas pass around strings to represent computations.
  This is future in our programming language able to represent these ASTs, these symbolic literals in Python you can so you pass around strings.  At some point in the future might be able to do this.  And then you can do something like this.  And create some LVM optimized version that have computation that makes use of all of your cores and is aware of the computation environment.  So, that said I hope you find that interesting.  If you're interested in maybe trying to make this a real thing, come find me.  I'll be with Mike Mueller probably tomorrow and Monday at a sprint, he wanted spring, if you're interested in that I'm in the front row.  Remind you, don't use this code on Twitter.  And you can choose if you want the use it or not I thought it was something kind of cool.  Thank you.
  [Applause]
  >> Thank you.  As I was telling James I think he was like only one that like easily set up his machine for presentation.  Last talk for tonight.  We have Joe talking about playing with Python ByteCode.
  >> Hi, I'm Joe.  I'd like to talk about playing with Python ByteCode and manipulating it to generate some new constructs.  First what is Python ByteCode?
  When Python imports a module first it compiles it into a lower level stack-based language so that it can evaluate your code more quickly.  This is simple function, we've got add where we take A and B and return the sum of them.  What this needs to do is it's going to need to load the name "A" and "B" add these things together then return it.  When you look at Dis which is disassemble function it takes ByteCode returns a symbolic form.  You see it does exactly that.  It loads the name at index zero which is A.  Loads B, adds them, returns it.  But what happens if you want to change this.  So there's some tools that you can use to generate some cool Python.  You have common features like metaclasses, descriptors, Exec and Eval.  Common in the sense of terms of this kind of stuff.  Then you have exotic things like AST transformers, templating and now ByteCode transformation.  I was working on something where I wanted to do things that you cannot do without touching the byte code.  So this function uses the Na operator which is own Op code.
  You cannot overwrite not -- I can't do that with not.  So, with my library code transformer I can define a class that takes a function, and returns -- uses that function instead of not.  When I say "Not A" it says "Function of A" which is something you can't do normally in Python.  So, I can take a new function called my "not" function, I can't use not it's a key word.  If it doesn't exist it uses the default behavior.  It does it will call that function.
  I will take the F function here, transform it with my code transformer to get a new function entirely.  So, when I do that, you can see that I have the disassembly of F.  Same as before, I can't change it I now have a new function called "Transformed F" the ByteCode for this function is load the name, then load a constant which is like a literal that you would see in code but here it's actually a function, where then going to rotate them to put the argument of above the function, then we're going to call it.  And return that value.  So, if I define an object like C, that uses this not method, to print hello world when I call not, then I can use my new F function so when I call not in F, it actually is going to print hello world first then return false.  But because the false object does not override it does the default behavior.  Probably wondering why do you want to do this, what is an actual use case for this.  I worked on a library called lazy Python, where I have a lazy execution model and I needed to override things like "Is" and "Not" so my deferred computation had proper semantics.
  Here is example of an interpreter session where I have a lazy function which is using the code transformer under the hood.  It overwrites a lot more of the operators but -- or of the ByteCode but does very similar thing.  It calls return print test, normal Python when I call this function it's going to print test.  But in lazy Python it waits until I strictly ask for the result.  So, there is all kinds of things you can do with the ByteCode transformations and you can do all kinds of non-actual Python syntax things with this.  So if you're interested in using that you can find it on GitHub.  For code transformer they're on Pypi yes that is ten lower case L's, thank you.
  [Applause]
  >> Thank you very much.  That concludes today's -- tonight's lightning talks you can come back tomorrow at 8:30.  Now I expect you all to go to room 516 spend all your monies at the Pyladies auction.
  Thank you.  
