  >> Not San Francisco.  Apparently I haven't had enough coffee today.  Bear with me.  The Saturday morning talks.
  So I promised yesterday that I would have like some jokes maybe.  And I don't have a lot of time so I can give you one joke.  A story more like.  So, lot of people when they first meet me, is your last name really root, of course, why would I change my last name, right?
  So my father he's actually an engineer and he went -- he studied computer science in the Air Force when he joined the Air Force in like the early '80s.  They're like, hey, you're already in our system.  All right.  Let's go.  It's true.  They really gave him root.  The Air Force gave him root.  I hear some Groans.  I'll just jump right into it.  Thank you.  I think that was a pity clap, that's okay.  First up we have Frederico.  Taking about matPlotib.
  >> Good morning.  Most of you know this one way or another.  I love it, but I hate the way you cannot tweak the toolbar or the shortcuts easily.
  You can, but you have to build a freakin' back end.  What I did was to get in touch with the guys and say, I have a proposal I want to change that to be able to take the actions, even shortcuts or bottoms or whatever.  Take the actions output into special place that we will call tool manager.  Let's start with -- Matplotlib -- too many things in there, you hate those kind of things that happened from time to time.
  Now, if -- I want to make a simple tool because I've been working so hard, I say I need some encouragement.  And my boss doesn't give it to me so I'm going to encourage myself.  I'm going to do a simple tool that would just tell me that I'm doing great.  I add it, I create a tool and I added as short cut with upper case C. 
  Let's see what happened if I -- I'm doing great.  You see in the little -- in the little message box.  Shortcuts are for geeks.  Oops, I have a bottom that says, simple, I'll doing great, you see, so far I'm doing great.  Now, that's not that useful I need it for myself, for myself esteem but not that useful.  Let's try something else.  I have too many lines on that plot so I'm going to create set on and off the different lines.  For example, here, and just add it.  I add and I got shortcuts, I made the five or seven groups of lines, the data and the model.  I just -- with a touch of a button.  One I turn off on, two, three.  You see?
  So, it becomes easy to add functionality without having to recall your application or your screen.  Sometimes you are there.  Just one these two graphics I don't want to touch -- those colors, did you see those colors?
  Come on.  That yellow is pretty -- no.  It doesn't cut it.  Let's make a simple tool to be able to tweak the colors.  And I add it.  Let's say.  I have here now I have a little down here, it's color.  Let's hope it works.
  I know what's happening.  I have many lines in the visible -- come on.  No, don't -- this is demo time!
  You're supposed to work!
  Okay.  Let's try it again just to make sure everything works.  I still have time.  50 seconds I can do it.  I can do it, guys, I can do it.  Don't worry.  I'm there.  Of course.  Come on!
  Now, color.  Change this red.  I say I want some purple.  And it did it.
  [ Applause ]
  Okay, guys.  And actually this is how I got into the Matplotlib team.  I'm very happy.  This just was merged two days ago if you have any questions, if you see the functionality is not quite there yet please let me know and GitHub I will change whatever it is to change.  Thank you very much.
  [ Applause ]
  >> Thank you.  Awesome.  I think your plot needed some coffee, too, just like me.  All right.  Moving on we have Jeff meadows talking about automatic test with Flaky.
  >> I chose no live code for this morning's talk I'll get right to it.  Today introduce you to a library called Flaky.  A plug in for two of the most popular testing.  Have you ever been tempted to do something like this?
  Remove a test just because it's failing?
  There's lots of wrong reasons to do something like that.  But when it's crunch time you have one of those tests that just only fails every once in awhile it can sure be really tempting.  So what is a Flaky test?
  We call a test Flaky when couple of these conditions are met.  Usually only fail every once in awhile.  Sometimes one percent of the time or less.  Oftentimes got failure mode that's hard to fix.  But the that test that failed the first time is going to past this time.  These tests put us in awkward spot and there's really not a perfect fix.  Reiterate how bad of a problem this can be we're going to do a little bit of math.  I know it's early.  Given 50 Flaky tests that fail 1% of the time, any ideas how often the test run is going to fail or with a hundred Flaky tests.  It's scary.  Turns out that just 50 Flaky tests can make you are entire test run fail 40% of the time it gets worse the more Flaky tests that you have.
  Let's say we have example Flaky test.  This one is not actually Flaky it fails the first time every time and then passes every time thereafter but it's a nice example.  What happens if we run the test?
  It fails.  This stinks.  What do you do in this situation?
  You have a few options.  This test in particular probably be really easy to fix but imagine one that depends on some external component would be really difficult to fix.  What do you do?
  You have a few options?
  What is the first one this is common, comment the test out maybe leave yourself a comment that you'll fix it later.  Built let's be honest with ourselves we're probably not going to come back fix this later.  In addition you lose code coverage not good.  May be forget that using methods on a test.  Slightly better maybe you can skip the test, again leaving yourself a nice optimistic note but you're probably not going to come back and fix this either.
  For this purpose, we would like to automatically rerun tests when they fail.  And see if we can get a passing result.  So that's why we wrote Flaky, it's a plug in that works with nodes and Py.test and mark your test with Flaky then run them.  Here is what that would look like just import Flaky and decorate your tests then run nodes test with Flaky the test passed because it runs a second time you get a little bit of output telling you what happened.  So coming back to the math slide from before it turns out that if you retry each of those 50 Flaky tests whenever they fail your pass rate is dramatically in increases.  Flaky is pretty nice, but it does come with a word of advice.  Okay?
  You should use this with caution.  As soon as test fails don't just mark with it Flaky try to fix it you are -- your tests are trying to tell you something.  But for those cases where your tests are very difficult to fix you want to make a smart time trade off, Flaky can be really nice choice.
  In summary, mark your tests with Flaky instead of removing or skipping them.  It's really easy to get started just pip install Flaky.  Just run Py.test once it's installed or pass the with Flaky argument to nose tests.  And I made this presentation with IPython notebook thanks for that great products.
  You can download this.  And there are instructions here to reproduce the notebook in its entirety and follow along make changes.
  Thank you.
  >> Thank you.  Real quickly is Karen Davidson in the room?
  If you are just come up front.  Thank you.  Next up we have Andre.  Talking about Reeborg.
  >> Move, turn left, pickbeeper, putweeper, the people learned programming with that.  Multiple implementations, Pascal, java, C++.  I don't why you write that implementation for something that's supposed to be so simple people did it and use it.  Why Karel?
  Was inspired by the play by a Czech that invented the word robot.  It was first used in 1921.  The name of the play was by Rossum's universal robot, pure coincidence.  Few years back, Jeff and their students the Guido van robot, best name ever.  In 2006 I needed a hobby I started programming the hobby.  I read about what languages I had to learn four tran many years ago with this thing called Python.  I'm going to teach myself Python what I did I wrote program called RUR-ple it's Karel simulator, that you have just static image there is place for tutorials, place for the robot world.  There's editor and Python interpreter all put in there.  Of course it's Python I used the syntax and you have the choice of having using function-based program like move and turn left.  Or at the bottom you see the object programming you can create new robots.  You are using Python because you have flexibility.  Samsung has produced books based on Rur-ple been used in many universities and schools, if you use it stop.  There is a newer version called Reeborg.ca.  Totally free.  Rup-ple was free this does not require downloads.  It's just there.  Let's see how that will show.  If you go to Reeborg.ca that's what you will see.  You can go to the French version if you wanted.  There is tutorial written using Sphinx.  There are other people that wrote better tutorials.  Better design for kids.  Anyway, it's there, it's available.  This is Reeborg's world a newer version.  What it can do why I say it's Karel on steroids this is task driven learning where the program doesn't quite work and we get something that's wrong we had one instruction missing there.  So, we can get our green signal.  We can have multiple robots, the start position is not known every time I will execute the program -- sorry about that, the program, the starting position will be different so you can encode with various number of tasks and it's always different.  You can have a French interface, I'm going to show this quickly.  Main thing there is that I have maybe a bit small to see, I have the possibility to import from a library, this is the French version, you have the same thing in English, all saved in local storage.  And also if you look closely, you at the top from Reeborg, underscores, I don't speak Spanish.  There's three languages.  It would be nice to have more languages incorporated you can create new worlds going to editing mode I can go and change the world.  I won't change anything there.  I can share worlds, this is complete encoding of the situation right now, program, world situation just copy and click and finally I'll just skip to -- this is a recording using -- on another computer, I'm controlling the robot so you can share multiple sections with multiple users remotely.  There's a lot more that I didn't have time to cover.  Thank you very much.
  [ Applause ]
  >> Thank you very much.  Awesome.  Next up we have Chris talking about scraping property tax sites.
  >> My name is Chris.  I want to talk about project that I did last year that I literally had a day to do so I couldn't learn a big module, big framework.  I just had to do with what I had on hand and what I could frantically Google that's why I call this a little Python goes a long ways.
  I was interested in tax defaulted properties in the U.S., when you don't pay your property tax after a certainly time, usually years, the county will come and take your property and auction it off.  If someone comes up to the county says, well, what kind of properties railroad auctioning off this year you're going to get a file that looks like this.  And this one had 5,000 items in it.  And it has a few things, it has a parcel I.D., it has an address, it has the amount due at sale which is the tax amount that points to the auction is going to start at.  But there's a few more things here that I'd like before I'm going to start bidding on them.  One I'd like to know if there is a property -- building on the property.  If it's a vacant lot I want to know if there's going to be opportunity to get water and sewage and gas out to that.  And I'd like a rough idea as to how much this is worth.  Because the beginning amount is never that.  There is vendors that will give you this for a couple hundred dollars but I'm cheap and it's public information so there should be another way around it.  You can go to the assessors' website they will give you this website here, and you enter in the parcel number you hit go, it gives you bunch of information on that you have the information I'm looking for here you have the land value, you have the improved value which is building you have whether water, sewage, natural gas that comes out to this.  This works great if you have one property or two or ten properties.  It doesn't work so great if you have 5,000.  Can't really print out 5,000 spread them over your desk and look through them, see which ones you like.  What I notice for each URL that I did this for the aim URL except for the parcel number that is only thing that changed.  Knowing that, I can do a little script here, I can make a text file of my 5,000 parcel lists then I can use URL to make a URL for each one of these switching just to parcel number.  And write out 5,000 URL files to my drive and most important line here is time.sleep(1) we don't include that, wait a little bit.  Assessor's website gets cranky really fast.
  Now I've got 5,000 HTML sites.  Pages, yeah.  The next thing I do is I need to parse each one of those, I can use glob to get through each one because it's a wonderful module you just give the pattern.  And say -- file is HTML and then it gives you a list of those files.
  Then you can you can use a handy parser that I found, HTML 2csv to go through and parse each one of those to CSV now I've got 5,000 CSV files I'm getting closer to what I want.  Now I can use glob again, I can pick out the information that I want the current land value, current improved value, whether it has access to water and sewage.  And make a line for each one of those properties then I have one big CSV file and I can put that into a spread sheet then once I have that I can make lot better informed choices as to what shy be bidding on.  And what I shouldn't be bidding on.  So with few hours of coding and just a little bit of time you can do a lot.  That's why I say a little bit of Python goes a long ways.  My name is Chris Stehlik if you have questions about tax defaulted properties you can contact me here.
  Thank you very much.
  [ Applause ]
  >> Thank you.  Awesome, nicely done.  All right.  Last call for Cameron Davidson.  Please come to the front if not you're going to lose your lightning talk spot.  Next up Phillip James talking about ducker.  Chat-based docs.
  >> Good morning.  My name is Phillip James I work for -- and like you said I'm here to talk about ducker.  So, I really love documentation I think that well written documentation is both a great resource for advanced programmers and the best way to on board new people.  I hope that most of the people in this room agree with this.
  [Applause]
  The other thing I really love since I had a good mentor when I started engineering is rubber duck debugging this is largest rubber duck I could find because I think it should symbolize the entire field of rubber duck debugging those of you who don't know oftentimes at an inanimate object or friend who is not paying attention. Since I love ducks it seems like might be way to combine these things.  How often have you, as whatever level engineer you are, asked the questions how do I...
  Or, where in the docs is...
  Or better yet, how often have you had a junior engineer come up to you ask those same questions?
  And in perfect world we'd all have the full amount of time to be able to help each person who asks, hey, where do I find this in the docs.  Maybe there's a better way.  What if you were able to talk to a chat Bot that had full knowledge of your docs, knew how to pull out key words could parse them so that you could have conversation with a chat Bot do rubber duck debugging.  That's what ducker is.  It's a combination of man pages and Eliza the chat Bot.  We're hoping to make it something that can process everything from the Python docs, everything from the Django docs plus read Sphinx generated on read the docs, pull that into format that you can few through IRC Bot.  Bot deploy to your team easily.  It's a sentry for human confusion.  If you know what questions are being asked of ducker, you can realize, my docs on this area need to be way better than they are or, Huh, that's obviously less clear than I thought it was.
  Unfortunately ducker does not exist right now, I know I'm disappointing all of you.  But there is a GitHub, we're planning to sprint on these over these coming sprints starting Monday.  A great logo by the person who originally came up with the idea, if you know Karen she might be in the audience today she had the idea in IRC channel couple of weeks ago she did it as a joke, I said that's a great idea let's sprint on it we'll be sprinting  over the next week and continuing development and deploying it.  And that is it.  Thank you very much for your time.
  >> Awesome.  I need this.  It sounds awesome.
  >> That concludes this morning's lightning talks.  If you want to give lightning talk there are still sign ups for tonight and tomorrow morning.  I will be taking away the board around 1:00 p.m. today.  The sign-up boards are by registration like right behind you in registration.  Go check it out.  I guess we got a little bit of break until the first keynote.  Thank you.
  [Applause]
