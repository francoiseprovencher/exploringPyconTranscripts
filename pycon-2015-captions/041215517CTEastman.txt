01:00:57   >> WE CAN HAVE LOTS OF FUN WITH SERIALIZATION
01:04:49   FORMATS.
01:04:49   ALWAYS LOUDER THAN YOU THINK IT'S GOING TO BE.
01:04:57   HI.
01:04:58   SO BEFORE I EVEN START, I NEED TO EXPRESS MY
01:05:01   PROFOUND GRATITUDE TO THE PYTHON SOFTWARE
01:05:04   FOUNDATION, BECAUSE WITHOUT THEM, I COULD NOT
01:05:06   HAVE GOTTEN HERE, I COULD NOT HAVE BEEN HERE,
01:05:08   COULD NOT HAVE MET ALL YOU AMAZING PEOPLE.
01:05:10   WHO'S HERE BECAUSE I MET YOU DURING THE WEEK AND
01:05:12   I BROWBEAT YOU INTO COMING TO MY TALK.
01:05:15   YES, PASSIVE AGGRESSION WORKS.
01:05:17   I CAME A LONG WAY TO GET HERE.
01:05:21   I SPENT 38 HOURS ON -- NO, NOT 38 HOURS ON PLANES
01:05:25   BUT SATURDAY WAS 38 HOURS LONG AND THAT'S A
01:05:28   REALLY LONG DAY, WHEN YOU CROSS THE -- SEE THAT
01:05:31   BLUE SPOT IN THE MIDDLE.
01:05:32   THAT LITTLE BLUE -- THAT'S REALLY BIG.
01:05:35   PACIFIC OCEAN IS REALLY BIG.
01:05:37   TAKES A LONG TIME.
01:05:38   SO I'M TOM EASTMAN, A DEVELOPER FROM WELLINGTON,
01:05:44   NEW ZEALAND, WE'RE OPEN SOURCE SPECIALISTS, OPEN
01:05:47   SOURCE IDEALISTS AND ZEALOTS AND FUN AND A GREAT
01:05:50   CROWD OF PEOPLE.
01:05:51   IT'S A PYTHON DEVELOPER, NOT A SECURITY GUY, NOT
01:05:54   A PENETRATION TESTER.
01:05:55   BUT ALL OF MY DRINKING BUDDIES ARE SO I'VE
01:06:00   DEVELOPED A REALLY HEALTHY PARANOID WORLD VIEW
01:06:02   BECAUSE I DON'T LIKE IT WHEN THEY BREAK MY TOYS.
01:06:04   SO WHO HERE TODAY WORKS IN THE SECURITY INDUSTRY
01:06:10   IN SOME FORM OR ANOTHER?
01:06:14   EVERYONE ELSE, KEEP AN EYE ON THESE GUYS BECAUSE
01:06:16   THEY KNOW EVERYTHING I'M GOING TO TALK ABOUT
01:06:19   TODAY AND THEY'LL BE SMILING SMUGLY TO THEMSELVES
01:06:21   AS I GO THROUGH THIS.
01:06:23   AND WHO HERE IS A WEB DEV OR PYTHON DEVELOPER?
01:06:28   YEAH.
01:06:29   IF YOU'RE A DEVELOPER, IT'S ABOUT BEING AWARE
01:06:32   THAT WHAT I'M TALKING ABOUT TODAY IS EVEN A THING
01:06:34   THAT CAN BE DONE.
01:06:35   SOME OF YOU MIGHT FIND WHAT I'M GOING TO TALK
01:06:38   ABOUT SORT OF REMEDIAL, YOU MIGHT ALREADY KNOW
01:06:41   IT, BUT IT'S STUFF THAT EVERYONE NEEDS TO KNOW
01:06:44   AND IT'S STILL CATCHES PEOPLE BY SURPRISE SO
01:06:46   THAT'S WHY I KEEP TALKING ABOUT IT.
01:06:47   SO, IF YOU KNOW THIS STUFF, AND YOU'RE NOT ONE OF
01:06:50   THESE MEAN SECURITY GUYS, SPREAD THE WORD.
01:06:52   RUIN THEIR DAY, MAKE THEIR LIVES HARDER.
01:06:54   SO I'M GOING TO TALK ABOUT SERIALIZATION FORMATS
01:06:58   OR MARK-UP LANGUAGES OR WHATEVER YOU WANT TO CALL
01:07:01   THEM.
01:07:01   I MEAN FORMATS THAT HAVE STRUCTURED DATA THAT YOU
01:07:03   FEED IN SO THAT YOU DON'T HAVE TO INVENT YOUR OWN
01:07:07   DOT-DOC OR FILE FORMAT, WHATEVER.
01:07:10   THERE ARE A BILLION OF THEM IN ALL KINDS OF
01:07:11   LANGUAGES AND USES, AND ALL OF THEM HAVE LITTLE
01:07:13   SURPRISES TUCKED AWAY, ALL OF THEM ARE JUST A
01:07:15   LITTLE TOO SMART FOR THEIR OWN GOOD SOMETIME.
01:07:18   FOR THIS TALK, I'M JUST TALKING ABOUT YAML, XML
01:07:22   AND JSON, BUT THOSE ARE EXAMPLES OF MY LARGER
01:07:25   POINT THAT I'LL BE MAKING.
01:07:29   WHO IN THIS ROOM IS FAMILIAR WITH THE OWASP TOP
01:07:32   10?
01:07:39   THANKS GREAT.
01:07:40   THE OWASP TOP 10 IS A REPORT BY ANALYST OF
01:07:43   SECURITIES PUBLISHED BY THE OWASP GROUP, IT'S
01:07:46   OPEN WEB SECURITY --
01:07:54   AND -- HANG ON A SEC.
01:07:57   SO, IF YOU ARE UNFAMILIAR WITH THE OWASP TOP 10,
01:08:01   GOOGLE IT AND READ IT BECAUSE THIS MIGHT SOUND A
01:08:04   LITTLE HARSH BUT IF YOU'RE A WEB DEVELOPER AND
01:08:08   NOT FARM WITNESS, YOU'RE A LIABILITY TO YOUR
01:08:10   PROJECT AND YOU'RE A LIABILITY TO YOUR COMPANY.
01:08:13   THAT SOUNDS HARSH BUT THE POINT IS THAT THAT'S
01:08:15   FIXABLE.
01:08:16   GOOGLE IT AND READ IT ALL AND MAKE SURE THAT
01:08:18   YOU'RE FAMILIAR WITH THESE THINGS.
01:08:21   I WAS WORKING ON A PROJECT WHERE MITIGATING THE
01:08:24   OWASP TOP 10 VULNERABILITIES WAS A NON-FUNCTIONAL
01:08:28   REQUIREMENT WHICH IS A SMART ANYONE FOR ALL
01:08:29   PRONGS, AS A CHECKLIST TO MAKE SURE YOU'VE GONE
01:08:32   THROUGH.
01:08:32   AND THEN I ATTENDED A TALK BY A COLLEAGUE OF
01:08:35   MINE, MIKE, AND HE SHOWED ME SOME TRICKS IN XML
01:08:38   THAT SCARED THE CRAP OUT OF ME AND THEY WERE NOT
01:08:40   IN THE OWASP TOP 10 AND AFTER THAT TALK, WHICH
01:08:43   WAS AT A PUB AT THE SECURITY INTEREST GROUP IN
01:08:46   WELLINGTON, I WENT BACK TO WORK, TRIED THAT STUFF
01:08:48   OUT ON THE PROJECT THAT I HAD BEEN WORKING ON FOR
01:08:51   TWO YEARS.
01:08:51   THE WHOLE THING BLEW UP AND DIED AND I GOT SCARED
01:08:55   AND THAT'S WHY I STARTED COMPLAINING ABOUT IT A
01:08:56   LOT.
01:08:56   THE PRINCIPLE THAT SECURITY PEOPLE GO UNDER IS
01:09:01   THEY ONLY NEED TO KNOW ONE THING YOU DON'T,
01:09:03   RIGHT?
01:09:04   IF YOU'RE A DEVELOPER, YOU HAVE TO KNOW EVERY
01:09:06   POSSIBLE WAY A SECURITY OR A HACKER OR A BAD
01:09:08   PERSON CAN DO MEAN THINGS TO YOU.
01:09:12   BUT THE SECURITY GUY JUST HAS TO KNOW ONE THING
01:09:14   THAT YOU DIDN'T KNOW WAS A PROBLEM.
01:09:18   AND SO WHAT I'M TACKING ABOUT TODAY, LIKE IF
01:09:22   YOU'VE GOT A BUGGY XML LIBRARY, YOU HAVE A
01:09:26   PROBLEM.
01:09:27   IF YOU'VE GOT BUFFER OVERRUNS IN THE
01:09:29   C-IMPLEMENTATION OF THE JSON PARSER IN THE PYTHON
01:09:33   JSON LIBRARY, THAT'S UNIVERSITY A LIBRARY, THAT'S
01:09:38   WHY JACOB IS PUZZLING IT RIGHT NOW.
01:09:41   I'M NOT TALKING ABOUT FEATURES, I'M TALKING ABOUT
01:09:44   STUFF YAML CAN DO BECAUSE SOMEONE THOUGHT IT WAS
01:09:46   A GREAT IDEA FOR YAML TO DO IT, STUFF THAT XML
01:09:50   CAN DO BECAUSE THEY WERE SURE IT WAS A GREAT IDEA
01:09:52   AT THE TIME.
01:09:53   CAN EVERYBODY READ THAT CODE?
01:09:54   REASONABLY CLEARLY?
01:09:55   HANDS UP IF YOU CAN'T.
01:09:57   OKAY.
01:09:59   SO IT'S PRETTY SIMPLE.
01:10:01   IT'S A BOTTLE WEB APP, THIS IS THE HULL WEB APP
01:10:04   AND JUST DEMONSTRATING SOME REALLY SIMPLE DATA
01:10:07   LOADING STUFF.
01:10:08   THIS IS NOT GOOD CODE THAT YOU SHOULD DO IN YOUR
01:10:11   APPLICATIONS, YOU'LL SEE WHY SOON, BUT THAT FIRST
01:10:13   FUNCTION IS BASICALLY JUST A YAML END POINT.
01:10:16   YOU POST SOME YAML TO IT AND IT PARSES OUT WHAT
01:10:19   IT PARSED.
01:10:19   THE NICKS ONE IS AN XML ENDS POINT.
01:10:22   YOU POST XML TO IT AND IT TELLS YOU WHAT IT
01:10:25   PARSED.
01:10:26   THAT'S USING THE XML LIBRARY WHICH IS THE ONE YOU
01:10:28   OUGHT TO BE USING THE THE THIRD ONE IS THE SAME
01:10:30   THING USING PYTHON STANDARD LIBRARY STUFF.
01:10:32   I JUST USED THIS AS AN EXAMPLE WHEN I WAS PLAYING
01:10:36   AROUND WITH SOME OF THESE FEATURES.
01:10:38   BUT THE POINT -- ONE POINT THAT I REALLY WANT TO
01:10:43   GET ACROSS HERE IS IF YOU HAVE A LOOK AT THAT TOP
01:10:45   ONE, I'M IMPORTING THE YAML MODULE AND THEN JUST
01:10:48   GOING YAML.LOAD AND THE THING I'M LOADING.
01:10:52   SO LOADING DATA INTO YOUR APPLICATION IS THE
01:10:54   LEAST INTERESTING PART OF YOUR DAY.
01:10:55   YOU WANT TO DO STUFF WITH THAT DATA, YOU WANT TO
01:10:57   DO DATA ANALYSIS PROBLEMS SESSION YOUR FORM, RUN
01:10:59   YOUR WEB APP, SATISFY YOUR CUSTOMERS.
01:11:01   AND SO YOU'RE USING AN IDE AND YOU GO I NEED TO
01:11:06   LOADS A YAML FILE,AL.TAB, AUTO COMPLETE, THERE IS
01:11:11   A THING CALLED LOAD, DOES IT DO WHAT I WANT?
01:11:13   IT DOES, I'M DONE, I'LL MOVE ON.
01:11:15   AND SO YOU DON'T THINK ABOUT THIS STUFF, YOU JUST
01:11:19   WANT TO GET FROM OUTSIDE TO INSIDE AS QUICKLY AS
01:11:22   POSSIBLE.
01:11:23   SO I'M GOING TO TALK ABOUT YAML FIRST BECAUSE
01:11:25   THERE'S BEEN SOME HILARIOUS RECENT ISSUES WITH
01:11:29   IT.
01:11:29   WHO USES YAML?
01:11:30   EVERYBODY, BRILLIANT.
01:11:33   I HAVE A LOT OF SLIDES THAT LOOK LIKE THIS.
01:11:38   SO BASICALLY I'VE JUST POSTED A SNIPPET OF TEXT
01:11:41   TO MY LITTLE SERVICE AND THEN IT'S PARSING IT
01:11:45   USING THE PYTHON THING AND I'M GETTING A PYTHON
01:11:47   DICTIONARY BACK.
01:11:48   SO EVERYONE IS WITH ME SO FAR, YOU HAVE A DATA
01:11:50   FILE IN AND A PYTHON DATA STRUCTURE COMING OUT.
01:11:52   AND THIS IS A VERY SIMPLE YAML FILE, JUST KEY
01:11:56   VALUE, LIKE THE DICTIONARY YOU GETS OUT OF PYTHON
01:11:58   LOOKS ALMOST EXACTLY THE SAME BECAUSE YAML IS
01:12:01   THAT STRAIGHTFORWARD, OR TRIES TO BE.
01:12:03   YOU KNOW HOW THEY TRY TO MAKE HUMAN READABLE
01:12:06   MARK-UP LANGUAGES AND IT NEVER IS?
01:12:08   YEAH.
01:12:09   IT GETS UGLIER LATER BUT...
01:12:11   SO THE THING ABOUT YAML IS THAT IT'S NOT ACTUALLY
01:12:16   JUST BASIC DATA TYPES.
01:12:17   YOU CAN DO SOME PRETTY NEAT STUFF WITH IT, SO
01:12:19   THIS IS THE SAME DICTIONARY, BUT THIS TIME IT HAS
01:12:22   MY BIRTHDAY ENCODED, AND THAT LITTLE EXTRA TAG,
01:12:27   THERE I THINK THE TECHNICAL TERM FOR IT IS A YAML
01:12:29   TAG OR OBJECT TAG OR SOMETHING BUT THE EX
01:12:33   EXTRAMATION POINT, PROJECT APPLY, DATE TIME.DATE
01:12:36   AND THE ARGUMENTS THAT YOU WANT TO PASS INTO THAT
01:12:38   THING, AND SO WHAT YOU GET OUT OF IT IS A
01:12:41   DATE-TIME OBJECT WHICH IS REALLY, REALLY HANDY,
01:12:43   GOOD FOR CONFIGURATION FILES, GOOD FOR ALL KINDS
01:12:46   OF STUFF, RIGHT?
01:12:47   WHO'S HAD A SHIVER GO DOWN THEIR SPINE SO FAR
01:12:49   YET?
01:12:51   ONE FUN THING ABOUT THIS IS IF YOU HAVEN'T LOADED
01:12:54   THE DATE TIME MODULE, IT WILL HAPPILY LOAD IT FOR
01:12:56   YOU SO YOU CAN THE DATE TIME.DATE AND IT WILL GO,
01:13:01   OKAY, I DON'T KNOW WHAT THAT IS, SO I'LL IMPORT
01:13:02   THE IT FROM STANDARD LIBRARY AND IT WILL
01:13:05   SUBSTANTIATE THE THING.
01:13:06   SO THIS CAN GO DOWNHILL REALLY FAST.
01:13:14   YAML.LOAD IS VERY, VERY HANDY.
01:13:18   SO PYTHON.OBJECT.APPLY IS A MISNOMER BECAUSE
01:13:22   CHECKOUT IS A FUNCTION, PYTHON IS DUCK-TYPE',
01:13:26   IT'S FINE WITH THIS.
01:13:27   PROCESS CHECK OUT, OH, I'VE SHELLED OUT AND
01:13:30   LISTED THE CONTENTS OF MY HOME DIRECTORY.
01:13:32   OR, RATHER, IF YOU HAVE A YAML END POINT THAT
01:13:34   SOMEONE IS UPLOADING FILES TO, OR ANY KIND OF
01:13:38   USER INPUT THAT IS A PARSED YAML CONFIGURATION
01:13:41   FILE THAT THEY CAN PROVIDE OR A -- I DON'T KNOW,
01:13:45   A TASTY PIE END POINT OR SOMETHING LIKE THAT, YOU
01:13:50   CAN POST YAML TO IT.
01:13:52   SO TAKING IT TO ITS LOGICAL EXTREME, RIGHT?
01:13:59   SO PYTHON OBJECT APPLY OS.SYSTEM, IT WILL LOAD
01:14:03   THE S MODULE FOR YOU, IT SHOULD SHELL OUT AND I
01:14:07   DO THE LISTING THING AGAIN AND ALL MY FILES GONE
01:14:10   AND, TRUE STORY, I HAD TO RESTART WORKING ON MY
01:14:13   TALK.
01:14:13   [ Laughter ]
01:14:14   SO YAML IS EFFECTIVELY -- YAML.LOAD IS
01:14:24   EFFECTIVELY IMMEDIATE SHELL EXECUTION OR
01:14:27   SCRIPTING OR YOU COULD RUN PERL IF YOU WANTED
01:14:30   YOUR CUSTOMERS TO BE ABLE TO INTEGRATE PERL INTO
01:14:32   YOUR APP WHICH YOU PROBABLY DON'T WANT THEM TO
01:14:35   DO.
01:14:35   SURELY THIS DOESN'T HAPPEN IN REAL LIFE.
01:14:39   OKAY IN NOVEMBER, 2011, THIS HIT TASTY PIE AND
01:14:43   PISTON, THEY WERE USING YAML LOAD.
01:14:45   AND THAT MEANT THAT EVERYONE WHO WAS USING IT WAS
01:14:49   EXPOSED SO, THAT WAS NOVEMBER, 2011, A LITTLE
01:14:52   WHILE AGO.
01:14:52   RUBY ON RAILS THIS WAS FAMOUS.
01:14:54   YOU PROBABLY HEARD ABOUT THIS IN THE NEWS BECAUSE
01:14:56   IF YOU'RE A PYTHON DEVELOPER AND IF YOU'RE A
01:14:58   LITTLE BIT MEAN, YOU WERE PROBABLY LAUGHING AT
01:15:00   THE RUBY COMMUNITY FOR WHAT HAPPENED TO THEM
01:15:03   BECAUSE NOT ONLY DID THEY HAVE A REALLY
01:15:05   EMBARRASSING YAML DESERIALIZATION VULNERABILITY
01:15:08   BUT THEN THEY HAD ONE AGAIN FIVE WEEKS LATER.
01:15:10   SO -- AND THEN IT HAPPENED TO PUPPET AND I REALLY
01:15:17   TRUSTED THOSE GUYS.
01:15:18   I WAS REALLY, REALLY, REALLY SAD AND THAT WAS THE
01:15:20   THING THAT MADE ME START YELLING ABOUT THIS.
01:15:23   SO, YEAH, AND THEN -- AND THEN IT HAPPENED TO
01:15:25   NODE AND NOBODY CARED.
01:15:27   [ Laughter ]
01:15:27   INTERESTINGLY ENOUGH, THE NODE ONE IS FUNNY
01:15:34   BECAUSE THERE WAS NO SECURE OPTION UNTIL THEY
01:15:36   REALIZED THAT THIS WAS A BAD IDEA, SO THEY HAD
01:15:38   TO -- THAT THING IN THE CORNER THERE WHICH SAYS,
01:15:42   UPGRADED AND SHOULD STRONGLY CONSIDER -- I CAN'T
01:15:44   REALLY READ IT VERY WELL, I'LL READ IT OUT, MAKE
01:15:47   SURE THEY HAVE UPGRADED AND SHOULD STRONGLY
01:15:49   CONSIDER PORTING THEIR CODES TO USE THE NEW SAFE
01:15:51   LOAD METHOD -- NEW SAFE LOAD METHOD.
01:15:55   THERE WAS NO SAFE LOAD METHOD UNTIL JUNE, 2013.
01:15:58   WITH YAML, HOW DO YOU PROTECT YOURSELF FROM THIS
01:16:00   STUFF?
01:16:00   YOU MAKE YOUR PARSERS STUPIDER.
01:16:04   THESE ARE NOT FEATURES THAT YOU NEED IN SOMETHING
01:16:06   THAT A USER IS SUPPLYING TO YOU, RIGHT?
01:16:09   DO YOU?
01:16:09   NO.
01:16:10   YOU DON'T.
01:16:11   IF SOMEONE WAS GOING TO SAY YES, YOU'RE
01:16:13   PROBABLY -- YEAH, DON'T.
01:16:15   AND IN PYTHON, THAT'S REALLY, REALLY EASY.
01:16:18   SO THANKFULLY, THE YAML LIBRARY, THEY'RE NOT
01:16:22   COMPLETELY SILLILY, THEY HAVE YAML.LOAD, WHICH IS
01:16:25   THE DANGEROUS ONE AND THEN THEY HAVE YAML.SAFE
01:16:28   LOAD.
01:16:29   BUT THIS IS A KEY POINT THAT I WANT TO GET ACROSS
01:16:31   TO YOU WHICH IS WHY WAS IT THAT WAY AROUND?
01:16:34   RIGHT?
01:16:35   LIKE I SAID, IF YOU'RE -- LOADING DATA IS THE
01:16:38   LEAST INTERESTING PART OF YOUR DAY, YOU'RE GOING
01:16:40   TO GO YAML.-- I DON'T KNOW, IS IT CALLED LOAD,
01:16:46   PARSE, I'LL USE LOAD.
01:16:47   IF YOUR AUTO COMPLETE IS IN ALPHABETICAL ORDER,
01:16:51   YOU WON'T HAVE SEEN DOWN IN THE S A THING CALLED
01:16:55   RECEIVE LOAD.
01:16:55   RUBY'S ANSWER IS A LITTLE BIT MORE ANNOYING, YOU
01:16:58   HAVE TO GET AN EXTERNAL GEM, DOWNLOAD THAT,
01:17:02   INTEGRATE IT INTO RUBY AND THAT GOES IN A MONKEY
01:17:05   PATCHES THE ACTUAL YAML LIBRARY TO MAKE IT SAFER,
01:17:08   WHICH REALLY SURPRISED ME UNTIL I WAS TALKING TO
01:17:10   A RUBY DEVELOPER AND THEY TOLD ME THAT'S HOW
01:17:13   EVERYTHING WORKS IN RUBY.
01:17:14   THE RUBY YAML LIBRARY IS A LITTLE BIT SAFER
01:17:18   BECAUSE IT WON'T GO OUT AND LOAD THE MODULE FOR
01:17:20   YOU, THE WAY PYTHON'S WILL, THE RUBY ON RAILS
01:17:24   VULNERABILITY, THEY FOUND THE UNSAFE DESERIALIZER
01:17:30   AND THE ATTACKER HAD TO POUR THROUGH THE DATABASE
01:17:33   TO FIND A MODULE THAT WAS ALREADY LOADED INTO
01:17:35   MEMORY THAT HAD AN EVAL FROM IT AND FROM THERE,
01:17:37   THEY WERE IN.
01:17:38   BUT THE PYTHON ONE WILL HAPPILY LOAD WHATEVER
01:17:41   MODULE YOU WANT.
01:17:42   WHO WORKS WITH XML?
01:17:45   WHO ALREADY KNOWS NOT TO TRUST XML?
01:17:52   EVERYBODY IS GOING TO -- EVEN IF YOU DON'T WORK
01:17:54   WITH XML, YOU ALREADY KNOW THAT, BUT YOU MIGHT
01:17:57   NOT KNOW WHY, YOU MIGHT THINK IT'S ANNOYING
01:17:59   SYNTAX OR WHATEVER.
01:18:00   I WANTED TO PUT SOMETHING LIKE O, NO, XML OR
01:18:03   SOMETHING IN THIS SLIDE BUT I THOUGHT HAVING A
01:18:05   BIG FONT THERE WOULD BE SCARY ENOUGH.
01:18:06   SO IF YOU'VE WORKED WITH XML AT ALL, THIS SHOULD
01:18:11   BE FAMILIAR.
01:18:12   THIS IS A SIMPLE XML FILE AND THE ONLY
01:18:15   INTERESTING THING IN THERE IS IT'S GOT AN ENTITY
01:18:17   FOR A UNCOULD I HE HAD CHARACTER WHICH IS A
01:18:19   SMILEY FACE.
01:18:20   I DON'T KNOW IF THEY HAVE THE FULL EMOJI SET BUT
01:18:22   THAT WOULD BE COOL.
01:18:24   THAT'S AN AMPERSAND ENTITY JUST LIKE YOU'VE
01:18:27   ALWAYS SEEN IN HTML OR ANY OF THE SGML DERIVED
01:18:32   MARK-UP LANGUAGES.
01:18:33   BUT XML IS A DOCUMENT LANGUAGE AND WHAT DOES THE
01:18:39   X STAND FOR AGAIN?
01:18:41   [ Audio Indiscernible ]
01:18:44   >> WENT TOO FAR.
01:18:46   IT'S EXTENSIBLE.
01:18:47   SO YOU CAN DEFINE YOUR OWN DOCUMENT TYPES AND
01:18:49   DEFINE YOUR OWN ENTITIES.
01:18:51   THAT'S PRETTY COOL, HANDY AT TIMES.
01:18:53   SO I'VE CREATED AN ENTITY HERE, THAT'S A DOC-TYPE
01:18:56   DEFINITION AT THE TOP OF MY XML FILE, AND RATHER
01:19:00   THAN HAVING TO REMEMBER THE NUMBER 9876, I'VE
01:19:04   CREATED AN ENTITY CALLED SMILEY AND YOU CAN GO
01:19:08   AMPERSAND SMILEY AND MOVE ON FROM THERE AND
01:19:10   THAT'S -- YOU CAN DO THAT WITH A LOT OF DIFFERENT
01:19:13   THINGS.
01:19:13   YOU CAN DEFINE AN ENTITY THAT'S MADE OUT OF OTHER
01:19:21   ENTITIES.
01:19:22   SO I'VE DEFINED AN ENTITIES CALLED S-TOWER, WHICH
01:19:24   IS A BUNCH OF ENTITIES CALLED S-3, AND THEN I'VE
01:19:27   DEFINED AN CENTER CALLED S-3 WHICH IS A BUNCH OF
01:19:30   S-AND I'VE DEFINED -- SO FORTH, UNTIL I HAVE A
01:19:34   LOTT WHOLE LOT OF SMILEYS.
01:19:36   SO MY XML PARSER WILL REBUILD ALL OF THAT, AND
01:19:42   THAT'S SUPER CONVENIENT.
01:19:43   YOU CAN DO STRING INTERPOLATION IF YOU REALLY
01:19:46   WANT TO BUT YOU DON'T BECAUSE WHO KNOWS THE NAME
01:19:51   OF THIS?
01:19:52   WHO'S HEARD OF THIS?
01:19:53   SOMEONE YELL IT OUT.
01:19:55   WRONG.
01:19:57   THIS IS THE 168 MILLION LAUGHS ATTACK BECAUSE
01:20:01   I -- IN ORDER TO FIT IT ON THE PAGE, I WOULD HAVE
01:20:05   TO CHOP ONE LULL OFF THE END OF EACH LINE.
01:20:08   SO THIS IS -- YES, SO THIS IS THE BILLION LAPS
01:20:11   ATTACKS, BEEN AROUND FOR A LONG TIME, HAS ITS OWN
01:20:14   WIKIPEDIA PAGE AND JUST AN EXAMPLE OF YOU THROW
01:20:19   THIS AT A PARSER, YOUR PARSER FALLS OVER AND
01:20:22   DIES.
01:20:22   A MEMORY ATTACK, SO IF YOU WERE TO -- WHO HERE
01:20:26   WHEN THEY WERE A RAMBUNCTIOUS YOUNG CHILD MADE A
01:20:31   ZIP FILE OF TEN GIGABYTES OF ZEROS AND THEN
01:20:34   EMAILED IT TO THEIR FRIENDS?
01:20:36   SO MEAN.
01:20:38   WHO DID THAT LAST WEEK?
01:20:39   YES!!
01:20:41   [ Laughter ]
01:20:42   BUT THIS IS THAT, RIGHT?
01:20:46   THIS IS A MEMORY BLOW-OUT.
01:20:47   YOUR PARSERS WILL TRY TO BUILD THIS AND IT WILL
01:20:49   FALL OVER AND DIE.
01:20:50   FUNNY STORY, MY LITTLE PARSING AS A SERVICE PIECE
01:20:56   OF CODE, I WAS GOING TO TEST THIS OUT ON THAT AND
01:20:58   SEE WHAT HAPPENED, RIGHT?
01:20:59   SO I COPIED IT FROM THE WIKIPEDIA PAGE AND I WAS
01:21:01   ABOUT TO PASTE IT INTO MY WEB SERVICE, INTO CURL
01:21:06   AND THEN MY COMPUTER EXPLODED AND DIED, SOME
01:21:11   PASTED IT INTO MY EDITOR AND MY EDITOR WAS REALLY
01:21:14   FRIENDLY AND WAS LIKE, OH, YOU'VE PASTED XML IN
01:21:17   HERE, LET'S MAKE SURE IT'S WALD.
01:21:19   [ Laughter ]
01:21:20   SO WHO USES E-MAX?
01:21:22   E-MAX IS REALLY HELPFUL LIKE THAT.
01:21:25   [ Laughter ]
01:21:26   SO THIS NEVER MADE IT AS FAR AS MY LITTLE TEST
01:21:29   SERVICE.
01:21:30   OKAY.
01:21:33   SO THAT'S JUST -- THAT'S JUST LIKE BEATING YOUR
01:21:35   PARSERS WITH A CLUB, RIGHT?
01:21:37   THAT'S A DENIAL OF SERVICE ATTACK, IT'S BORING.
01:21:39   LET'S DO SOMETHING MORE INTERESTING.
01:21:40   YOU CAN DEFINE AN ENTITIES TO BE A FILE.
01:21:43   AND IT WILL JUST BE DEFINE THIS ENTITY TO BE THE
01:21:47   CONTENTS OF ETSY PASSWORDS.
01:21:51   NOW, IF THAT'S A WEB SERVICE, AND THEN THERE'S
01:21:54   SOMETHING ELSE WRONG WITH THE XML FILE AND SO
01:21:57   YOUR WEB SERVICE, LIKE SOAP SERVICE OR WHATEVER,
01:21:59   SAYS, HEY, THERE WAS SOMETHING WRONG WITH YOUR
01:22:01   XML FILE, HERE'S -- AND IF IT SHOWS YOUR XML
01:22:05   FILE, IT WILL HAVE THE CONTENT OF THAT FILE
01:22:06   EMBEDDED IN IT.
01:22:07   IT WILL ALREADY BE EXPANDED, RIGHT?
01:22:09   SO IF YOU SEND INVALID XML TO A WEB SERVICE AND
01:22:13   IT FOR WHATEVER REASON DECIDES TO GIVE YOU YOUR
01:22:16   XML BACK, IT MIGHT HAVE THE CONTENTS OF THE STYLE
01:22:18   IN IT.
01:22:18   AND OF COURSE WE'RE TALKING ABOUT YOUR APP
01:22:21   SERVER.
01:22:21   THAT HAS ACCESS TO POSSIBLY NOT EVERY FILE ON
01:22:23   YOUR SYSTEM BUT HAS TO HAVE ACCESS TO ITS OWN
01:22:26   CONFIGURATION FILE AND THAT WILL HAVE THE
01:22:28   DATABASE PASS WORTH.
01:22:29   ETSY PASSWORD IS BORING, SHADOW IS PROTECTED BUT
01:22:33   YOU CAN LOOK AROUND AND FIND YOUR THING AND
01:22:35   BECAUSE XML IS OFTEN USED IN ENTERPRISE, AND
01:22:38   BECAUSE ENTERPRISE OFTEN USES JAVA, I HAVE
01:22:44   TROUBLE BELIEVING THIS BUT MY FRIENDS IN THE
01:22:45   SECURITY INDUSTRY ASSURE ME THAT OFTEN THEY FIND
01:22:48   XML PARSE RUNNING AS ROOT SO THEY CAN READ
01:22:52   WHATEVER FILE THEY WANT OFF THE SYSTEM LIKE THIS.
01:22:54   YEAH.
01:22:55   BUT YOU SEE HOW THAT'S LIKE A URI, A URI SPACE
01:22:59   THING RIGHT THERE SO YOU DON'T HAVE TO STOP
01:23:01   THERE, YOU CAN JUST USE HTTP.
01:23:04   WHAT'S FUNNY ABOUT THAT IS THE PARSER IS BEHIND
01:23:07   THE NETWORK, BEHIND THE FIREWALL BECAUSE IT'S
01:23:08   PART OF YOUR WEB APP, RIGHT?
01:23:11   SO, HAVE A LITTLE BIT OF FUN AND START LOOKING
01:23:13   AROUND BEHIND -- SORRY, LET ME REPHRASE, UNDER NO
01:23:17   CIRCUMSTANCES, UNDER NO CIRCUMSTANCES DO THIS AND
01:23:22   LOOK AROUND AT SOMEONE'S INTERNAL NETWORK BEHIND
01:23:24   THEIR DMZ.
01:23:25   LITERALLY, DON'T DO THAT BECAUSE I WANT TO BE
01:23:28   ALLOWED BACK HOME.
01:23:29   I AM NOT CONDONING ANY OF THIS STUFF OF THE
01:23:32   PEOPLE WHO DO THIS ARE PENETRATION TESTERS WHO
01:23:35   HAVE BEEN SIGNED UP TO DO IT.
01:23:37   DISCLAIMER, DISCLAIMER, DISCLAIMER.
01:23:39   NO WARRANTIES EXPRESSED OR IMPLIED.
01:23:45   YOU DON'T HAVE TO SETTLE FOR AN HTTP PORT, IT'S.
01:23:49   IF YOU'RE USING HTTP AS URI SPACE, YOU WOULD
01:23:52   HAPPILY GO COLON 110 AND SEE HOW LONG IT TAKES
01:23:55   FOR AN ERROR TO HAPPEN.
01:23:57   AND THAT WAY YOU COULD PROBABLY TELL -- YOU WON'T
01:24:00   BE ABLE TO GET ACCESS TO THEIR POP SERVER OR SMPT
01:24:04   SERVER BUT YOU'LL KNOW IF ONE IS LISTENING THERE
01:24:06   AND YOU CAN BASICALLY MAP UP THEIR INTERNAL
01:24:08   NETWORK.
01:24:09   SO YOU CAN USE SOMEONE'S XML PARSER TO PORT-SCAN
01:24:12   THEIR OWN INTERNAL NETWORK AND UNDER NO
01:24:15   CIRCUMSTANCES DO SUCH A THING.
01:24:15   SURELY THIS DOESN'T HAPPEN IN REAL LIFE, RIGHT?
01:24:19   I'M NOT GOING TO GIVE YOU A MONTAGE BUT IT
01:24:23   HAPPENS ALL THE TIME.
01:24:26   I'M TOO SCARED THAT I'LL FIND OUT IT HAPPENS MORE
01:24:29   OFTEN THAN IT NOT HAPPENS AND IT'S JUST AN
01:24:31   EDUCATION PROBLEM, RIGHT?
01:24:32   PEOPLE JUST XML AND THEY MIGHT NOT REALIZE THAT
01:24:35   THIS STUFF COMES PART AND PARCEL WITH XML.
01:24:38   A FULLY COMPLIANT XML PARSER HAS TO DO THIS STUFF
01:24:42   BECAUSE IT'S FULLY COMPLIANT AND IF YOU MARKET
01:24:45   THE PARSER, YOU WON'T MARK IT AS SAYING OUR XML
01:24:48   PARSER DOESN'T DO LOTS OF THINGS.
01:24:49   SO HOW DO YOU PROTECT YOURSELF FROM THIS ONE?
01:24:52   UNFORTUNATELY, UNLIKE THE YAML ONE, XML IS KIND
01:24:57   OF COMPLICATED AND SO THIS -- I USED TO HAVE
01:25:01   SPACE ON THIS SLIDE FOR THE LINK TO IT BUT I CAN
01:25:03   POST THE LINK TO THE DOCUMENT THAT THIS CAME
01:25:06   FROM, BUT THESE ARE ALL THE STEPS THAT YOU WOULD
01:25:08   HAVE TO TAKE TO PROTECT YOURSELF FROM BAD XML AND
01:25:13   THERE'S A LOT OF SCOPE FOR ANNOYING THINGS TO
01:25:17   HAPPEN.
01:25:17   DON'T USE X-PATH EXPRESSIONS FROM UNTRUSTED
01:25:21   SOURCES, THAT'S BECAUSE X-PATH EXPRESSIONS ARE
01:25:24   ACTUALLY JUST AS USEFUL AS XQL SNIPPETS FOR DOING
01:25:32   INJECTION ATTACKS, YOU CAN USE THE X-PATH
01:25:36   INJECTION ATTACKS, WHICH YOU DON'T HEAR IN THE
01:25:41   OWASP TOP 10 BECAUSE THE TOP 10 ARE MORE
01:25:43   IMPORTANT BUT THERE'S MORE THAN TEN WAYS OF DOING
01:25:45   BAD THINGS.
01:25:46   BUT THE ANSWER COMES DOWN TO THE SAME THING,
01:25:48   YOU'VE JUST GOT TO MAKE YOUR PARSER STUPIDER.
01:25:51   AND IN PYTHON, YOU DO ACTUALLY HAVE A SOLUTION TO
01:25:54   THIS.
01:25:54   IT'S CALLED DIFFUSED XML, AND THINGS LIKE TASTY
01:26:00   PIE AND THE DJANGO REST FRAMEWORK AND I THINK
01:26:05   OTHER THINGS RUN EVERYTHING THROUGH DIFFUSED XML
01:26:08   NOW AND THAT'S A REASONABLY GOOD FILTER FOR
01:26:12   GETTING GOOD OF THE WORST STUFF WITH XML THAT'S
01:26:16   COMING IN BECAUSE -- THERE SHOULD BE NO
01:26:23   CIRCUMSTANCES UNDER WHICH YOU CAN ACCEPT
01:26:26   UNTRUSTED DDSS FROM XML, SO YOU SHOULD BE ABLE TO
01:26:29   REMOVE THAT OUTRIGHT.
01:26:30   ONE THING THAT I SHOULD MENTION IS THE TWO
01:26:33   DIFFERENT XML LIBRARIES ARE A LITTLE BIT
01:26:36   VULNERABLE TO DIFFERENT THINGS, LIKE THE STANDARD
01:26:39   LIBRARY ONE WILL HAPPILY DO THAT FILE EXPANSION
01:26:41   STUFF BUT IT DOESN'T DO THE EXTERNAL HTTP
01:26:45   EXPANSION STUFF BECAUSE IT'S NOT QUITE CONFORMANT
01:26:47   ENOUGH BUT THAT'S BESIDES THE POINT BECAUSE THE
01:26:50   POINT I'M TRYING TO MAKE IS USE DIFFUSED XML.
01:26:57   FINALLY I'LL TALK ABOUT JSON.
01:26:59   IS THAT FINALLY A SIMPLE ENOUGH SERIALIZATION
01:27:01   FORMAT THAT YOU'RE SAFE?
01:27:02   HANDS UP IF YOU THINK IT IS.
01:27:06   ALL THE WAY IN THE BACK I HAVE ONE HAND.
01:27:15   ACTUALLY, IT ALMOST IS.
01:27:16   IT'S DUMB ENOUGH THAT YOU CAN GENERALLY TRUST IT.
01:27:19   LIKE THERE MIGHT BE BUGS IN THE PARSER BUT IT
01:27:21   DOESN'T HAVE ANY OF THIS CLEVER OBJECT
01:27:23   DESERIALIZATION STUFF UNLESS YOU ASK IT TOO, LIKE
01:27:27   THE PYTHON JSON PARSER WILL LIT YOU DO THAT BUT
01:27:30   YOU HAVE TO ADD IT TO IT AND IT WON'T GO LOADING
01:27:32   MODULES FOR YOU AND STUFF LIKE THAT.
01:27:34   BUT, AGAIN, ONLY IF YOU USE A STUPID ENOUGH
01:27:36   PARSER.
01:27:37   [ Laughter ]
01:27:41   SO IF YOU'RE WRITING JAVASCRIPT, EVAL IS ONE WAY
01:27:47   OF PARSING YOUR JSON AND IN FACT, IF YOU GO TO
01:27:53   DOUBLE 3 SCHOOLS.COM, THEIR INTRODUCTION TO JSON
01:27:57   SAYS IT RIGHT, THERE THESE ARE HARD TO READ,
01:28:01   SINCE THIS IS A SUBSET OF JAVA SCRIPT, THE
01:28:04   EVAL...
01:28:06   [ Audio Indiscernible ]
01:28:06   SO RIGHT THERE AT THE TOP OF THE PAGE.
01:28:07   BUT NOBODY LISTENS TO W3 SCHOOLS, RIGHT?
01:28:12   SO JSON.ORG, THE TOP PAGE OF THEIR JAVASCRIPT
01:28:16   ONE.
01:28:16   TO CONVERT JSON TEXT INTO AN OBJECT, YOU CAN USE
01:28:20   THE EVAL FUNCTION.
01:28:21   THAT INVOKES THE COMPILER.
01:28:23   SINCE THAT'S AN -- THE COMPILER WILL PROPERLY
01:28:27   PRODUCE THE TEXT.
01:28:28   BUT WHAT ELSE WILL EVAL DO?
01:28:32   EVERYTHING.
01:28:33   I'M BEING A LITTLE UNFAIR SO IF WE GO BACK TO
01:28:35   THIS SLIDE, RIGHT DOWN AT THE -- WHERE THE BOTTOM
01:28:40   OF THE CURRENT TAKEN IS, THERE IS A LITTLE LINE
01:28:42   THAT SAYS, OH, BY THE WAY, MAYBE YOU SHOULDN'T
01:28:44   USE EVAL BUT FURTHER DOWN THE PAGE, NOBODY IS
01:28:48   READING DOWN THAT FAR, THEY'VE WORKED OUTS THE
01:28:50   ANSWER TO THEIR QUESTION, HOW DO YOU PARSE
01:28:52   JAVASCRIPT AND THIS ONE I'M BEING MORE UNFAIR
01:28:55   BECAUSE IT SAYS IT'S ABOUT OPEN SOURCE
01:28:57   TECHNOLOGISTS ON THAT FAR.
01:28:59   SO FARTHER DOWN IT SAYS...
01:29:01   [ READING ]
01:29:03   BUT THEY'VE ALREADY GIVEN AWAY THE GAME, ALREADY
01:29:06   SAID THE HORRIBLE DANGEROUS THING.
01:29:08   IF YOU'RE A DOCUMENTATION WRITER, DON'T DO THAT.
01:29:10   DON'T TEACH PEOPLE THE REALLY, REALLY BAD IDEA
01:29:14   FIRST.
01:29:14   SO THE LESSON THAT I'M TRYING TO GET ACROSS TO
01:29:19   YOU IS THAT FIRST OF ALL, NONE OF THIS STUFF IS
01:29:22   SECRET, NONE OF THIS STUFF IS A BUG, THIS IS ALL
01:29:25   JUST FEATURES OF THESE MARKUPS THAT YOU USE AND
01:29:29   THAT'S COOL, IF YOU WANTED TO USE THEM.
01:29:31   AND THAT'S COOL IF YOU DIDN'T WANT TO USE THEM
01:29:34   AND THEY WERE TURNED OFF BUT THEY'RE ON BY
01:29:36   DEFAULT, RIGHT?
01:29:37   AND YOU DON'T WANT THEM TO BE.
01:29:39   SO WATCH OUT FOR FLEXIBLE INPUT THINGS.
01:29:44   WATCH OUT FOR OUR MARK-UP LANGUAGE IS SUPER
01:29:47   FLEXIBLE AND YOU CAN DO ALL KINDS OF STUFF WITH
01:29:49   IT BECAUSE THAT PROBABLY INCLUDES STUFF THAT YOU
01:29:51   DID NOT WANT TO DO.
01:29:52   DISABLE ABSOLUTELY EVERYTHING YOU POSSIBLY CAN
01:29:57   THAT YOUR CUSTOMERS OR CLIENTS OR SYSTEM THAT
01:29:59   YOU'RE INTEGRATING WITH DOESN'T REQUIRE TO GET
01:30:02   ITS JOB DONE.
01:30:05   JUST, YEP, KEEP IT SIMPLE.
01:30:07   THANK YOU SO MUCH FOR YOUR TIME.
01:30:10   [ Applause ]
01:30:14   AND YOU SHOULD COME TO KIWI PYCON THIS SUMMER,
01:30:27   IT'S REALLY COOL.
01:30:28   THERE'S MORE DIRECT FLIGHTS, IF YOU BOOK FAR
01:30:30   ENOUGH OUT.
01:30:31   >> AUDIENCE: THANK YOU, TOM.
01:30:31   THAT WAS A REALLY GREAT PRESENTATION.
01:30:34   WE HAVE A FEW MINUTES FOR ONE OR TWO, MAYBE THREE
01:30:37   QUESTIONS, IF ANYBODY WOULD LIKE TO COME UP?
01:30:40   AND JUST A REMINDER TO ASK A QUESTION AND TRY TO
01:30:45   BE RELATIVELY CONCISE.
01:30:49   >> AUDIENCE: DO YOU KNOW IF BINARY SERIALIZATION
01:30:52   FORMATS LIKE BSON AND MESSAGEPAC HAVE SIMILAR
01:30:55   PROBLEMS?
01:30:56   >> I DO NOT.
01:30:58   I DO -- LIKE I'VE LEFT OUT SOME OF MORE SIMPLE
01:31:03   THINGS LIKE MARSHAL AND PICKLE, EVERYBODY ALREADY
01:31:06   KNOWS THAT THOSE ARE DIRECT DESERIALIZATIONS OF
01:31:08   PYTHON OBJECTS AND ARE CODE EXEC IF YOU DO THEM.
01:31:13   AS IMPLICIT TO THIS TALK IS THINGS LIKE PICKLE
01:31:18   AND C-PICKLE AND MARSHAL MUST NEVER BE USER
01:31:21   INPUT.
01:31:21   BUT I THINK -- BUT, YEAH, PEOPLE DON'T REALIZE
01:31:24   THAT ABOUT SOME OF THESE MORE HUMAN READABLE ONES
01:31:26   AND SO THE BINARY ONES, BASICALLY, NO, I DON'T
01:31:30   KNOW BUT THE QUESTION JUST COMES DOWN TO, DO THEY
01:31:32   LET YOU DESERIALIZE OBJECTS AND WHAT ARE THE
01:31:36   SAFEGUARDS THERE.
01:31:37   IF THEY LET YOU DO THAT BUT YOU HAVE TO TURN IT
01:31:39   ON, I'M HAPPY WITH THAT.
01:31:41   IF IT'S ON BY DEFAULT THEN LET'S INSTANTIATE A
01:31:46   DATE POINT, THAT'S WHAT YOU NEED TO LOOK OUT FOR.
01:31:50   >> AUDIENCE:  THANKS FOR THE TALK.
01:31:51   BROWSERS THE IMPLEMENTATIONS OF ALL THESE OF XML
01:31:55   AND JSON, IS THERE ANYTHING WE SHOULD BE AWARE OF
01:31:58   THOSE IMPLEMENTATIONS, LIKE JSON THE CLOSING
01:32:00   SCRIPT TAG INSIDE OF IT CAN BREAK WINDOWS IN THE
01:32:03   BROWSER, SO ANYTHING ELSE FOR XML THAT WE SHOULD
01:32:05   BE AWARE OF?
01:32:07   >> I DON'T -- I GUESS IF YOU'RE IN A BROWSER
01:32:09   CONTEXT, XML AND YAML AT LEAST ARE A LITTLE LESS
01:32:14   RELEVANT.
01:32:18   BUT, YEAH, I'M NOT SURE.
01:32:22   SO THE JSON THING THAT YOU'RE REFERRING TO, IS
01:32:25   THAT ACTUALLY LIKE A BUG THAT MAKES IT CRASH OR
01:32:28   IS IT JUST IT DOESN'T PARSE CORRECTLY?
01:32:30   >> AUDIENCE: SO IF YOU DO AN AJACKS CALL AND IT
01:32:33   HAS A CLOSING SCRIPT TAG, THE BROWSER WILL FINISH
01:32:36   THE SCRIPT SO YOU HAVE TO ESCAPE THE SLASH WITH A
01:32:38   BACK SLASH, SO THAT'S ONE VULNERABILITY BUT I WAS
01:32:40   JUST WONDERING IF THERE'S OTHERS FOR XML
01:32:43   SPECIFICALLY.
01:32:45   >> I COULDN'T TELL YOU.
01:32:46   SORRY.
01:32:49   >> AUDIENCE:  SO AS PERSON NUMBER TWO OF THE TWO
01:32:51   PEOPLE WHO RAISED THEIR HANDS AND SAID JSON IS
01:32:54   STUPID ENOUGH, I JUST WANTED TO CLARIFY, IF
01:32:57   YOU'RE NOT USING JAVASCRIPT OR NOT USING
01:33:01   JAVASCRIPT'S EVAL, LIKE YOUR API WRITTEN IN
01:33:04   PYTHON AND YOU'RE USING JSON.LOADS, JSON IS
01:33:09   REALLY STUPID ENOUGH AS LONG AS YOU HAVEN'T GONE
01:33:11   OUT OF YOUR WAY TO ENABLE SOMETHING SMARTS.
01:33:13   >> THE JSON PARSER WILL ALLOW TO YOU ADD MORE --
01:33:16   LIKE WHEN YOU INSTANTIATE A PARSERS IN YAML, YOU
01:33:20   CAN ADD A DATE-TIME FEATURE TO IT WHICH WILL LOOK
01:33:22   FOR A STRING OF A CERTAIN CONSTRUCTION AND GO I
01:33:27   KNOW THAT'S A DATE TIME AND IT WILL DO IT BUT YOU
01:33:29   HAVE TO ADD THOSE TO IT.
01:33:30   THEY'RE NOT THERE BY DEFAULT.
01:33:33   I THINK I HAVE THAT RIGHT?
01:33:34   DO I?
01:33:35   SO JSON IN PYTHON IS A PRETTY GOOD OPTION EXCEPT
01:33:39   FOR THE FACT THAT IT CLAIMS TO BE HUMAN READABLE
01:33:40   AND IT'S REALLY NOT.
01:33:42   LIKE, I THINK OF ALL THE HUMAN READABLE PARTS OF
01:33:44   IT, YAML IS PROBABLY THE BEST BUT MAKE SURE YOU
01:33:46   USE SAFE LOAD.
01:33:49   >> AUDIENCE:  AN EXCELLENT TALK.
01:33:50   THANK YOU.
01:33:51   >> THANK YOU.
01:33:51   [ Applause ]
01:39:14
01:39:14
01:39:14
01:39:14
01:39:14
02:08:50


