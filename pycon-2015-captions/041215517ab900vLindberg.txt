  
  So, next up I have the pleasure of introducing the president of the PSF, van Lindberg.
  [ Applause ]
  >> Pycon is my favorite conference all year.  I can't express how happy it is to be here.  Honestly was sort of in a crappy mood right before I came.  And being at PyCon just makes me -- it's a unique place.  Being here with good, smart people is just an amazing things.
  Several months back I put a call out asking for topics for this talk.  What did people want to hear.  I got back a number of responses both on Twitter and e-mail.  So my favorite was actually from David Beazley, he suggested that I do nothing but watch Samuel Beckett plays, then it doesn't matter what I talk about.  David, you'll be happy to know I did watch a lot of Samuel Beckett plays.  The one that I remember most was a Python-themed version "waiting for Godot" called "Waiting for 2.8" I don't want to ruin it for anyone who hasn't seen it, but 2.8 never comes.  I also got one from Nick about, a no holds barred of what we're learning about ranging the PS F this was surprisingly hard question to answer because we do a lot of stuff.  How could I organize, explain what it is that the PSF does, so I thought it would be easiest to explain by comparing the Python community to a corporation.  So, if we have the Python community, that's all of us together, and we would of course have product development and strategy, that's Python Cordev and R&D department.  We have enterprise integration.  We would also have libraries and SDK's, we have Addons and tooling.  Of course all of you are developer advocates and evangelists.  Above this line everything there is generally what you would call capitalizable.  That's a long way of saying in corporate speak, the people who do that stuff above the line build valuable things.  Everything that is going below this line is what we call G&A or general and administrative expense.  This is overhead.  The PSF is what takes care of this stuff.  And you've heard of these groups.  These are the groups that everybody loves to hate.  What are these?
  PSF is I.T.  Pypi, Py.org., finance.  Accounting.  Legal.  Human resources.  Events and logistics.  You're in one of the events that we do logistics for.  Public relations.  Sales and marketing.  This is what the PSF does.  We actually have significant efforts in all these areas and more.  And so, this is supposed to be no holds barred.  I want to talk about not just what we do but what the problems are.  The hard part about being in the PSF to be honest is it's people work.  There are thousands and thousands of people, ultimately you need to be in some sense responsible for trying to help everybody.  And if you get five developers in a room ask them about which editor they should use you'll get six opinions.  I'm going to talk about -- lot of our key issues are about people.  I'm going to tell what you these problem areas are importantly what you can do about them.  So, the first issue is actually time.  The PSF as an organization is strapped for time.  It has exactly one full-time employee.  And three part-time employees.  Everyone else at the PSF and those who are working at PSF-sponsored event like here are all volunteers.  Even for those who are paid those few people who are paid they give way more than they would give for just an ordinary job.  I am not complaining about this.  But on concrete level the people working on SF stuff are limited.  There are far more things we'd like to do that we just don't have time to do.  Even when we have people who step up to help, managing and communicating and overseeing and helping and doing all of those people management things take time.  It's difficult to actually do all those things and get the primary work done as well.  So, what can you do?
  First thing that I'd like each one of you to do to say thanks.
  [Applause]
  Find someone with a staff shirt, buy them a beverage.  Find somebody who has written that library that you just couldn't live without or that you learned from, tell them what that meant to you.  All of us have a human need to be appreciated.  And the people that are in the Python community serve you and they do it just for all kinds of reasons, but reach out and make sure that you say thank you.  The second thing, best thing that you can do individually to help the Python community is to reach out and lift and mentor others.  There isn't time for everybody to -- for the PSF just few people who are in the board or whatever to raise up everybody.  There are always new people.  It doesn't matter if they are new to Python or new to your meetup or mailing list, welcome them in and so them the ropes.  Bonus points if you help someone out who doesn't look like you.  Third for those who are trying to work with others in the PSF, we need you to persevere and to be understanding.  I heard the story of a new contributor yesterday who tried to reach out and make a contribution.  This was in a project basically a contribution to Py.org which we have responsibility for.  And she felt turned off because it was hard to contribute.  Now, no one was mean but no one made the time to go out and help her get over the hump.  Now, the good news that she persevered, she landed some code.  She got over that hump.  It shouldn't be there but it is.  When you're reaching out please make sure you persevere, understand that everybody's trying as hard as they can.  And even if we don't always respond we want you.  The second thing I'd like to talk about is empathy.  May seem strange that I'm talking about empathy but I think the single biggest resource, the thing that we miss the most in the Python community, computing in general, is empathy.  And by empathy I mean willing tons place yourself in another person's shoes and try to see the world through their eyes.  A lack of empathy is expressed through being dismissive of others, for labeling others without understanding their point of view and where they're coming from.  It doesn't matter if you agree or not.  It doesn't matter if that person is wrong.  It only matters if you try to understand that person and where they come from and their context and in the context of their lived experience.  This is one of my favorite quotes from Banksy.  Who knows Banksy?
  As I think about it, every single person is the hero of their own story.  What I mean by that is that each person from in the context of where they are they try to do good.  They are -- they are overcoming their own obstacles, slaying their own dragons trying as hard as they can when something across to you that you think, why are they doing this, this is so wrong headed.  You don't really understand until you can put yourself in their shoes and understand why they think that thing that they're doing is good and it's valuable.  They are the hero of their own story.  You need to understand why they think their contribution is valuable.  Yes, there are trolls.  And we should eject people who are regularly abusive to others from our community.  We don't put up with that.  Those are one in a hundred or one in a thousand.  That's most people.  Let me tell you a true story.  There are few people in every community that I'm in that I just don't agree with.  I cannot -- no matter what they think I'm pretty much sure I'm going to think the opposite.  But behind those few people I realize there are many others who any the same way they do.
  And I am grateful to those people because I learn more from the people who disagree with me than all of the people who agree with me.  So, what can you do to increase empathy?
  First, stop labeling.  Wait before you attach to people -- attach labels to people or to conduct or to arguments that don't take into account the content and context of what that person is saying.  It's okay to have these labels, they're meaningful to you.  But make -- if you want to connect with a person you need to reach out and start from where they are.  Not from where you are.  Always give people the benefit of the doubt.  One of the difficult things in our society is that more and more of what we do comes through pixels and not from people.  People have said that almost 80% or 90% of what we do actually comes through non-verbal communication.
  All of that is cut out when we post things on the Internet or when we send an e-mail.  It's always so easy to misunderstand this doesn't excuse things when people get hurt.  As Jacob Kaplan-Moss correctly pointed out to me, intent isn't magic.  We should always assume that people are trying to do good and strive to understand others in that light.  The third piece is responsibility.  This is a hard one.  Because we have many people who are willing to criticize how something is done.  Many of those criticisms are correct.  But we don't take the time to reach out and figure out how to engage constructively.  And truth be told great value in being told when I'm in the wrong.  But too many of us stop when we raised our voice to complain and we don't take responsibility for the next step.  At a minimum, work out what could be done better.  Does this mean that if you don't like a library that you need to become a core maintainer?
  Of course not.  But it does mean that we need to take responsibilities for the burdens that we put upon others.  There was a thread recently where a long-time prolific contributor to the Python community talked about how people came and insisted that he make changes to thinks library, that he may not agree with, and how he felt put upon, almost angry because these people did not take responsibility for understanding the burdens that they put on him.  They felt entitled to criticize and insist, this is not good enough.  It's a failure of empathy and responsibility and it's got to stop.  So what can you do?
  Number one, it's important that we all do our homework.  Find a way -- people are always trying to do their best.  Is there a problem out there that has prevented someone from doing what you say?
  You should always try and investigate first.  Don't just jump to, hey, can you do this for me?
  Find out first.  Second, take a look, is there a way to engage constructively.  Try to solve the problem yourself, do that.  Third, do you still think you need to speak out?
  Ice plate the change that needs to be made so that your feedback is constructive and actionable.  It doesn't work is not a bug record and "It sucks" is not a feature request.  That was pretty heavy.  We're going to talk right now for a rainbow butterfly unicorn kitten.
  [Applause]
  Okay.  Ready.  What advice do we have for younger open source projects that want to grow to be the PSF.  This is an interesting one I'd say first, don't rush it.  The PSF has had the luxury of growing up incrementally over a long period of time and I think that that is actually the best way to go.  You don't need to over do the processor over do the ceremony very early.
  Yes, you want to set ground rules and expectations early on but make processes as light weight and as informal as possible until they start to strain then you can improve them.  Second thing is default to openness.  But remember the openness is not actually an end in itself.  Openness is simply the beginning of communication.  What you really want to do is understand and empower not just have an openness check box.  Third, culture matters.  If you want to succeed build a great culture.  And culture starts when you were first starting those first interactions on a mailing list, when you're at your first sprint, culture comes -- continues from where it has started.  Now there have been anomalies, technologies that are so attractive or so productive that they have succeeded despite a difficult or toxic culture.  But that time is changing.  We are becoming more and more networked we're becoming more and more community oriented.  So now the best determinate of which technology will succeed is not the technical execution.  It is not the elegance of the technology.  It is how vibrant is the community around it.  If you put obstacles in the path of people participating with you put obstacles in the path of your own success.
  So if you want to grow up to be the PSF you actually need to grow up fob a culture of service.  I observed a conversation on Twitter a couple months ago where there were some people who were angry that a particular conference didn't pay them for the efforts that they put in.  As you know I serve this very carefully because Pycon doesn't pay speakers or the volunteers for their service.  Now I'm going to go out on a limb here because as I observe there are many people who disagree.  I think the culture of service is single things that makes the Python community great.  Now don't mistake me I'm not saying that people should never be paid when they provide valuable services.  I also think it's wrong when commercial interests treat communities as a source of unpaid labor or contractors that they don't need to pay that's not cool.  I also think it's reasonable to have paid positions that empower and help others.  But a group where people only interact when they're paid to do so is not a community.  It's a bunch of mercenaries.  And what we have here are a bunch of friends where you reach out you do a little more and you serve.  A community that reaches out to serve and help others becomes richer and deeper and better over time.  This is the reason why we reach out to others.
  This is the reason why we value inclusiveness is because we know that these people are our friends or at least we hope they will be soon.  I actually hope, I challenge each one of you has found a new friend or deepened a friendship while you've been here.  If you haven't had the chance to do so yet, there's still time.  Somebody serve, serve them, help them.  Say thank you.  And you will come out of PyCon with a better experience.  Reach out and serve another person you find a new friend.  So, I got this question via e-mail.  What is the greatest threat that I see to the Python community and what is our greatest opportunity?
  There are three threats that I worry about most.  And they are all related.  Relate to multicore and mobile and package management.  Now I've talked a lot about community-orient things this morning.  And you might think I'm really worried about these.  Actually the Python community I think is the best community out there.
  I think that we're not perfect.
  [ Applause ]
  Yes!
  We're not perfect but we care and we're trying to get better.  The Python community is actually our greatest strength.  What worries me are technical shortcomings that lead people to choose other technologies because Python doesn't fit.  These are perennial pain points that have become more apparent as technology has advanced.  Not to put too fine a pint on it I'm worry about Javascript and go because they have significant advantages exactly where we are weak.  I don't think so that these other languages have to lose for Python to win.  But every time someone says "I love Python, but I need to do my new project in --" whatever, I get a little worried.  It's because software is an ecosystem and every time our ecosystem shrinks the opportunities that are available to us all get diminished.  The term software ecosystem was coined about teenagers ago in a book ten years ago.  In this book they laid out an extended argument that people and companies as they interact in self interested way can be thought about and reasoned about just the way natural ecosystems can be.  Now, the term "Stuck" the specific roles that they imagined haven't really caught on the concept of a software ecosystem has.  If you're familiar with technology analyst, Steven named his blog Tico systems.  Every technology is an ecosystem.  We can spend time celebrating that our ecosystem has grown over the past 15, 20 years.  It was actually about ten years ago that Paul wrote the Python paradox which he said, I'm going to read this to make it right.  People don't learn Python because it will get them a job they learn it because they genuinely like to program aren't satisfied with the languages they already know.  Which makes them exactly the kind of programmers companies should want to hire.  Hence for what, for lack of better name I'll call the Python paradox.  If the company chooses to write a software in compare stiffly esoteric language they will be able to hire better programmers because they will attract those who cared enough.  The paradox is even more pronounced language to learn if you want to get a good job is a language that people don't learn merely to get a job.  You listen to that today it's funny, isn't it funny that ten years ago Python was esoteric.  It was the unsafe choice.  It was crazy and wild and out there.  It was the underdog.  Today, I swear to you, I saw a ranking in CIO magazine.  Now, CIO magazine, if you ever had chance to read it, these people are like ten or 15 years behind the times.
  [ laughter ]
  And they had a listing of safe software languages to use and evaluate for their next project and, boom, Python was there.  Number three on the list.  You had C++, java then you had Python.
  [Applause]
  The problem is that there is no more Python paradox.  I actually see people if they're looking to engage in a Python paradox-like planning you see a lot more Skala or go or things like that.  Smart people are still choosing Python.  Very much.  But it's not a risky choice any more.  I'll skip over lot of the reasons why Javascript worries me because they're very apparent.  They're easy to see.  It halls the most -- most widely deployed language on the planet other than C and C++ every single person knows how to run it.  It's dynamic, it's getting lots of funding, intrinsic part of the web.  I'm actually if I had to put one thing that I'm most worried about is go.  Go is close to the middle, has easy to understand concurrency model, it's good enough for a lot of things.  So it becomes -- has deployment story which is just wonderful.  Copy binary and it runs.
  We can't do that.  Not yet.  The problem with go is that any code written in go is dead code.  This is because of the static linking because of -- they have a strange calling convention, they use the plan 9 as opposed to the C calling convention.  Any effort that people put into go software is locked within the go ecosystem.  Unlike rust which is also really interesting language, there's no way to use go for the things that it is good at and is use Python for the things that it's good at it choosing go an all or none prop sick.  Why wouldn't we just implement Python interpreter in go.  Could we then take advantage of the work that's been done by others?
  The answer is kind of surprisingly, no.  Without going through not very perform apt not very Idiomatic calling out to C libraries you can't do the dynamic loading things that we value in Python is just not really possible in go.  It would be hard to create an equivalent ecosystem that would allow us to extend a go library in Python.  So, what is our greatest opportunity?
  I think that is easy that's education.  Python either is or is becoming the dominant teaching language across the world.  It's not even as apparent here as overseas in places like the U.K.  How many people have heard of the BBC microbit?
  A few people.  This is a little sized computer programmable in Python 3 that will be handed out to every single U.K. school child next year.  Actually later this year.
  [Applause]
  Especially call out Nicholas Tolevy the U.K. Pythoneers because they opened the door so the PSF is actually helping support this effort with the BBC to allow and to support Python programming for all of these school kids throughout the U.K.  You all know the raspberry Py, universities are switching to it.  This is -- Python is becoming the place where people go to learn programming.  And it doesn't matter if you're a child, doesn't matter if you're an adult.  This gives us the greatest opportunity to grow and expand our community and our ecosystem for years and years to come.  If we are able to address these multicore and mobile and deployment challenges, we can become the dominant language for years and years.  And help lots of people be at ever more pie cons in the few viewer.  Thank you.  Any questions?
  [Applause]
  We have time for two questions.
  >> Audience: Could you talk a little bit more about Javascript specifically as a competitor because I've been running into that, too, where it's like, more recently I was looking at the reason Javascript Specs for Ecma 6 they are absorbing go features.  And they are actually absorbing Python features.  As part of the expansion.  So, that to me looks like a huge threat.  I was really disappointed that the Python in the browser talk got cancelled.
  >> First of all, yes.  Javascript is absorbing features particularly from Python, I hadn't seen the go features.  If you're interested take look at the Pypy.js talk it was recorded.  It was fantastic.  Javascript I hear that it's web scale.
  [ laughter ]
  It really ties into the -- ties into the ubiquity of the web of HTML and HTTP it was built into every single browser.  And the web is becoming the Lingiu for everything that is happening nets worked applications these days.  Even if you think about, we have the Json.lib we are using Javascript serialization.  That is an interesting place where we have actually adopted a Javascript implementation for things that we do in Python.
  >> Audience: Hi.  That was a great talk.  Mine is really just a correction.  It's not every child in the U.K. getting a microbit just all the 11-year-olds.
  [ laughter ]
  That would be chaos.  That's going to be about a million microbits also going to be an open hardware and open platform as well.  You'll be able to purchase it very cheap price as well.
  >> This gentleman is Nicholas.
  [Applause]
  Do you have your microbit on me?
  >> In my hotel room.  I'll bring it over people can have a look at it.
  >> Wonderful.  All right.  Take care everyone.
  Thank you.
  [ Applause ]
    
