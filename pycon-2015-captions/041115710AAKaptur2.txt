01:28:22   >> GOOD AFTERNOON.
01:28:23   WELCOME TO THE SECOND OF TWO TALKS ALLISON KAPTUR
01:28:27   IS GIVING THIS SESSION.
01:28:28   SHE WORKS AT DROPBOX.
01:28:29   PLEASE GIVE HER A WARM ROUND OF APPLAUSE.
01:28:32   [ Applause ]
01:28:36   >> HI, THANKS, EVERYONE, WHO CAME HERE OR STAYED
01:28:39   HERE FOR THIS TALK.
01:28:40   TODAY WE'RE GOING TO TALK ABOUT EXPLORING IS
01:28:42   NEVER BORING, UNDERSTANDING CPYTHON WITHOUT
01:28:44   READING THE CODE.
01:28:47   AS AS THEY ARE MENTIONED, I'M ALLISON KAAP TUSH,
01:28:50   CURRENTLY WORKING AT DROPBOX IN SAN FRANCISCO, I
01:28:53   USED TO WORK AT RECURES SCHOOL, WHICH YOU MAY
01:28:56   KNOW AS HACKER SCHOOL.
01:28:58   RECURS CENTER IS NOT A BOOT CAMP, A WRITER'S
01:29:00   RETREAT FOR PROGRAMMERS, SO IF YOU'VE BEEN TO THE
01:29:04   PY CON SPRINTS BEFORE, IT'S LIKE DOING THREE
01:29:05   MONTHS OF THAT.
01:29:06   THE PEOPLE WHO ALREADY KNOW AT LEAST SOME
01:29:08   PROGRAMMING GET TOGETHER AND WORK ON WHATEVER IT
01:29:09   IS THAT THEY'RE EXCITED ABOUT.
01:29:11   AND I SAY THIS BIT TO GIVE YOU A LITTLE BIT OF
01:29:16   CONTEXT FOR THE PROBLEM THEIR WE GOING TO SOLVE
01:29:18   TODAY, WHICH I BET YOU CAN RELATE TO.
01:29:21   IN THE COURSE OF FACILITY TEENAGE YES AT THE
01:29:24   RECURS CENTER, I TALKED TO A LOT OF PEOPLE IN THE
01:29:26   FOLLOWING SITUATION.
01:29:27   THEY LEARNED A LITTLE BIT OR MAYBE A LOT OF
01:29:29   PYTHON AND THEN YOU HAD TO MAKE THINGS WITH IT,
01:29:31   THEY'VE DONE A BUNCH OF PROJECTS.
01:29:33   AT SOME POINT, THEY STARTED TO WANT TO DIG
01:29:35   DEEPER, SAYING HOW DOES PYTHON WORK UNDER THE
01:29:39   HOOD, THE WORD "REALLY" ANSWER IN THESE
01:29:41   QUESTIONS.
01:29:41   HOW DO LISTS REALLY WORK WHEN YOU APPEND TO THEM
01:29:43   AND SO ON.
01:29:44   AND VERY OFTEN, THEY FOUND IT HARD TO GET
01:29:46   STARTED.
01:29:48   SORT OF STRUGGLED TO GET PURCHASE ON THE GIANTS
01:29:50   SURFACE AREA THAT PYTHON PRESENTS.
01:29:52   SO THIS SOUNDS FAMILIAR, THEN THIS TALK IS FOR
01:29:54   YOU.
01:29:55   AND TODAY I'LL TALK ABOUT SOME STRATEGIES THAT
01:29:56   YOU CAN USE TO DEEPEN YOUR OWN UNDERSTANDING OF
01:29:59   PYTHON, SOME PITFALLS THAT YOU CAN HOPEFULLY
01:30:01   AVOID.
01:30:01   THE GOAL IS TO GIVE YOU A SET OF TOOLS THAT YOU
01:30:04   CAN USE ON YOUR OWN AND WE'LL LAB AT SOME
01:30:06   EXAMPLES IN CPYTHON AND FOR THE MOST PART, THESE
01:30:09   ARE STRATEGIES THAT YOU COULD USE ON ANY CODE
01:30:11   BASE.
01:30:11   SO FIRST A BRIEF WORD ABOUT WHY YOU WOULD WANT TO
01:30:16   SPEND TIME UNDERSTANDING THE INTERNALS OF PYTHON.
01:30:19   I WANT TO SAY EXPLICITLY THAT I DON'T THINK THAT
01:30:21   YOU HAVE TO DO THIS TO BE A GREAT PROGRAMMER OR
01:30:23   EVEN TO BE A GREAT PYTHON PROGRAMMER
01:30:28   SPECIFICALLY.
01:30:29   THE BEST REASON TO DO THIS IS WHAT'S IN THE
01:30:31   TITLE, SOUNDS LIKE FUN TO YOU.
01:30:33   THE IDEA THAT YOU HAVE TO, TO ME SORT OF IS THE
01:30:36   TURTLES ALL THE WAY DOWN APPROACH.
01:30:37   YOU HAVE TO UNDERSTAND THE INTERNALS OF PYTHON,
01:30:39   HALF OF IT IS IMPLEMENTED IN C SO DO YOU HAVE TO
01:30:41   UNDERSTAND C REALLY WELL AND THEN YOU HAVE A
01:30:43   COMPUTER UNDERNEATH THAT SO WHAT ABOUT HARDWARE
01:30:45   AND MEMORY AND...
01:30:46   I'M BASICALLY DON'T THINK THAT'S STRICTLY
01:30:48   NECESSARY.
01:30:48   SO THE MAIN REASON IS THAT THIS IS FUN.
01:30:52   I THINK IT'S REALLY FUN.
01:30:54   HOPEFULLY SOUNDS LIKE FUN TO YOU.
01:30:56   I'VE HAD A GREAT TIME OVER THE LAST YEAR OR SO
01:30:58   ZIGGING IN ON BYTECODE AND THE BYTECODE
01:31:00   INTERPRETER, CAN I GET A QUICK SHOW OF HANDS WHO
01:31:03   WAS IN THE ROOM HALF AN HOUR AGO?
01:31:04   THAT'S LIKE MAYBE HALF OR MORE, GREAT.
01:31:06   SO I FIND IT VERY POWERFUL THAT WE CAN TAKE THIS
01:31:10   REALLY COMPLEX PROJECT THAT YOU'VE BEEN TREATING
01:31:13   AS BASICALLY A BLACK BOX AND YOU CAN START TO
01:31:15   BREAK IT DOWN, YOU CAN UNDERSTAND THE PIECES, YOU
01:31:18   CAN FIGURE OUT WHY CERTAIN DECISIONS WERE MADE
01:31:20   THE WAY THAT THEY WERE, AND WHY CERTAIN
01:31:22   LIMITATIONS EXIST THE WAY THAT THEY DO.
01:31:24   I THINK THAT'S ALL VERY POWERFUL AND COOL.
01:31:26   I'M NOT GOING TO TALK AT ALL TODAY ABOUT
01:31:29   CONTRIBUTE TO PYTHON.
01:31:31   CONTRIBUTING IS GREAT AND YOU SHOULD TOTALLY DO
01:31:34   IT IF IT SOUNDS LIKE FUN TO YOU.
01:31:36   I THINK THAT CORRECTING PRESENTS A DIFFERENT SET
01:31:37   OF CHALLENGES THAN THE ONE THAT I WANT TO FOCUS
01:31:39   ON TODAY WHICH IS UNDERSTANDING CODE BASE.
01:31:43   CONTRIBUTING IS HARDER IN SOME WAYS, PARTICULARLY
01:31:45   TOOLING AND SET-UP, VERY OFTEN YOU ENDS UP IN
01:31:48   SOME SWORD OF BEWILDERING INSTALL HELL THAT YOU
01:31:51   HAVE NO IDEA HOW TO EXTRACT YOURSELF FROM.
01:31:53   ONE OF MY FAVORITE PYTHON MAILING LISTS IS GUIDO
01:31:56   COMPLAINING ABOUT A CHANGE MADE TO A RECENT
01:31:58   MODULE THAT TURNS OUT TO BE A SIDE EFFECTS OF HIS
01:32:01   UPGRADING TO MAVERICKS.
01:32:02   THIS STUFF IS HARD.
01:32:03   THE OTHER PIECE THAT'S HARD ABOUT CONTRIBUTING IS
01:32:07   THAT THERE'S ALL THIS RESTRICTIONS AROUND CULTURE
01:32:10   AND COMMUNICATION AND THAT SORT OF THING THAT
01:32:12   JUST DON'T EXIST IF YOU'RE NOT WORKING WITH OTHER
01:32:15   PEOPLE.
01:32:15   CONTRIBUTING IS EASIER IN SOME WAYS THAN SITTING
01:32:17   DOWN TO UNDERSTAND A CODE BASE, TOO, AND
01:32:19   PARTICULARLY IN SCOPING A PROJECT.
01:32:21   IF YOU'RE CONTRIBUTING TO AN EXISTING PROJECT,
01:32:23   YOU PROBABLY HAVE ONE THING IN PARTICULAR THAT
01:32:25   YOU'RE TRYING TO DO.
01:32:26   AND IF YOU DON'T HAVE ONE THING IN PARTICULAR
01:32:27   THAT YOU'RE TRYING TO DO, THE FIRST THING YOU
01:32:29   WILL DO IS GET ONE THING THAT YOU'RE TRYING TO
01:32:32   DO.
01:32:32   IF YOU'RE SITTING DOWN TO UNDERSTAND A CODE BASE,
01:32:36   IT CAN BE HARDER TO NARROW THE SCOPE.
01:32:38   SO I WON'T TALK TODAY ABOUT THE DEVIN OR BUG
01:32:41   TRACKER OR HOW TO SUBMIT A PATCH.
01:32:43   IF YOU WANT TO FOLLOW UP WITH THAT LATER, HERE'S
01:32:45   THE LINK TO THE INITIAL DEVIN GUIDE AND I THINK
01:32:47   THERE WAS A TALK EARLIER THAT YOU CAN CATCH THE
01:32:50   REPLAY OF AND THAT'S ALL I'LL SAY ABOUT
01:32:51   CONTRIBUTING.
01:32:52   SO YOU'RE SITTING DOWN WITH A NEW CODE BASE AND
01:32:54   SETTING OUT TO UNDERSTAND IT.
01:32:55   I'M GUESSING EVERYONE IN THE ROOM HAS HEARD ONE
01:32:57   PARTICULAR PIECE OF ADVICE.
01:33:01   READ THE CODE.
01:33:01   LOTS OF FOLKS WILL TELL YOU TO READ THE CODE AND
01:33:04   THIS ISN'T NECESSARILY BAD ADVICE.
01:33:07   I JUST THINK IT'S NOT ALWAYS VERY HELPFUL.
01:33:09   YOU MIGHT HAVE TRIED THIS, RIGHT, SO YOU GO TO,
01:33:12   YOU KNOW, PYTHON.ORG AND YOU DOWNLOAD THE SOURCE
01:33:15   AND OPEN IT UP IN YOUR TEXT EDITOR OF CHOICE AND
01:33:18   NOW WHAT?
01:33:20   NOW YOU'RE STARING AT ALL OF THESE FILES AND MANY
01:33:23   OF THEM ARE THOUSANDS OF LINES LONG AND HALF OF
01:33:26   THEM ARE IN C AND YOU HAVE NO IDEA WHERE TO
01:33:27   BEGIN.
01:33:28   IT'S VERY EASY AT THIS POINT TO GET LOST, AND
01:33:30   THIS IS ESPECIALLY TRUE WHEN YOU HAVE A BROAD
01:33:32   SCOPE AND YOU SAY I WANT TO UNDERSTAND MORE, YOU
01:33:35   KNOW, DIG DEEPER, BUT YOU DON'T HAVE ANYTHING
01:33:37   NARROW YET THAT YOU'RE FOCUSED ON.
01:33:39   YOU DON'T YET HAVE PARTICULAR SUBGOALS OR AREAS
01:33:42   OF INTEREST.
01:33:43   IT'S ALSO VERY EASY AT THIS POINT TO WASTE A LOT
01:33:45   OF TIME.
01:33:46   YOU KNOW, YOU'RE LIKE LOOKING OVER DIFFERENT
01:33:47   FILES AND YOU'RE NERVE REALLY GETTING A FOOTHOLD
01:33:50   SO BOTH OF THOSE ARE BAD OUTCOMES.
01:33:52   THIS IS MY OBJECTION TO THE IDEA OF READING THE
01:33:54   CODE.
01:33:54   I THINK IT'S JUST NOT A VERY HELPFUL WAY TO THINK
01:33:56   ABOUT INTERACTING WITH A CODE BASE, PARTICULARLY
01:33:58   ONE THAT'S AS LARGE AS PYTHON HAVE THE IF YOU'RE
01:34:01   THINKING ABOUT READING, IT DRAWS ANALOGIES IN
01:34:04   WAYS THAT ARE NOT CONSTRUCTIVE FOR THE LEARNER.
01:34:06   IN THE READING THAT YOU'RE USED TO, IF YOU'RE
01:34:08   READING AN ARTICLE OR A NOVEL OR TWITTER FEED OR
01:34:11   WHATEVER, THERE IS AN ORDER OF CONTENT, RIGHT?
01:34:12   YOU PROBABLY HAVE TO READ THE THINGS THAT
01:34:14   HAPPENED FIRST TO UNDERSTAND THE THINGS THAT
01:34:16   HAPPENED LATER.
01:34:18   AND FINALLY, THINK ABOUT THIS EXPERIENCE AS
01:34:20   READING I THINK UNDERSELLS IT PRETTY
01:34:23   SIGNIFICANTLY.
01:34:23   YOU SHOULD EXPECT THAT THE FIRST TIME YOU TRY TO
01:34:28   DO THIS IT IS GOING TO FEEL REALLY HARD.
01:34:30   AND IF YOU THINK -- ARE THINKING OF THAT AS
01:34:32   READING, IT'S GOING TO BE REALLY DISCOURAGING FOR
01:34:34   YOU.
01:34:35   NOW, UNDERSTANDING A CODE BASE IN THIS WAY IS A
01:34:38   SPECIALIZED SKILL.
01:34:39   THE GOOD NEWS ABOUT THAT IS IT MEANS YOU CAN GET
01:34:40   BETTER AT IT WITH TECHNIQUES AND PARTICULAR
01:34:42   IMPROVEMENT.
01:34:43   BUT IF YOU'RE THINKING ABOUT THIS AS READING, YOU
01:34:45   SHOULD EXPECT THAT IT WILL BE VERY CHALLENGING.
01:34:47   AND CALLING IT READING REALLY UNDERSELLS THAT.
01:34:50   JUST TO EMPHASIZE THIS POINT A BIT, THERE IS A
01:34:55   GREAT SHORT PAPER CALLED "HOW TO READ A PAPER."
01:34:57   AND SPOILER ALERT, IT DOES NOT SAY IF THE PAPER
01:35:00   IS IN ENGLISH, START AT THE TOP AND GO LEFT TO
01:35:02   RIGHT, TOP TO BOTTOM.
01:35:04   THERE'S A DIFFERENT SET OF STRATEGIES THAN THAT.
01:35:06   AND READING A PAPER, EVEN A TECHNICAL ONE IS A
01:35:08   LOT CLOSER TO THE READING THAT WE'RE USED TO,
01:35:11   LIKE READING A BOOK OR AN ARTICLE THAN READING
01:35:14   CODES IS.
01:35:14   IF YOU BELIEVE THAT READING A PAPER IS A
01:35:16   SPECIALIZED SKILL, AND YOU SHOULD, YOU SHOULD GO
01:35:18   READ THIS PAPER, THEN YOU SHOULD ABSOLUTELY AGREE
01:35:20   THAT READING A CODE BASE IS A SPECIALIZED SKILL
01:35:25   AND INTERACTS IN A DIFFERENT WAY.
01:35:27   SO CONSUMING INFORMATION IN THIS WAY IS A SKILL.
01:35:29   YOU CAN GET BETTER AT WITNESS STRATEGIES AND
01:35:31   TECHNIQUES AND READING IS NOT NECESSARILY A
01:35:33   HELPFUL MENTAL MODEL OF WHAT WE'RE DOING.
01:35:35   TODAY I WANT TO TALK ABOUT A FEW MENTAL MODELS
01:35:37   THAT I BELIEVE ARE HELPFUL FOR DIGGING INTO THE
01:35:40   INNARDS OF PYTHON THAT GO BEYOND READ THE SOURCE.
01:35:43   THESE ARE GUIDING METAPHORS FOR INTERACTION WITH
01:35:53   CODE BOYS AND I'LL SUGGEST SOME TOOLS THAT YOU
01:35:55   CAN USE THAT FIT INTO THAT MODEL AND WE'LL LOOK
01:35:57   AT A BRIEF EXAMPLE OF PUTTING THAT STRATEGY TO
01:36:00   WORK.
01:36:00   THE FIRST WAY THAT WE CAN THINK ABOUT INTERACTING
01:36:04   WITH THE CODE BASE IS DELIBERATE OBSERVATION, AND
01:36:06   THIS WAS REALLY WELL-ARTICULATED BY PETER SEEBOLD
01:36:10   IN A BLOG POST I BELIEVE LAST YEAR AND PART OF IT
01:36:12   READS, CODE IS NOT LITERATURE AND WE ARE NOT
01:36:14   READERS.
01:36:15   RATHER, INTERESTING PIECES OF CODE ARE SPECIMENS
01:36:17   AND WE ARE NATURALISTS.
01:36:19   HE GOES ON TO SAY, INSTEAD OF TRYING TO PICK OUT
01:36:22   A PIECE OF CODE AND READING IT AND DISCUSSING IT
01:36:24   LIKE A BUNCH OF COMP LIT GRAD STUDENTS, I THINK A
01:36:28   BETTER MODEL IS FOR ONE OF US TO PLAY THE ROLE OF
01:36:30   A 19th CENTURY NATURALIST, RETURNING FROM A
01:36:33   TRIP TO AN EXOTIC ISLAND TO PRESENT TO THE LOCAL
01:36:36   SCIENTIFIC SOCIETY A DISCUSSION OF THE BEETLES
01:36:37   THEY FOUND.
01:36:39   LOOK AT THE ANTENNAS ON THIS MONSTER, THEY LOOK
01:36:41   UNGAINLY BUT THE MALE OF THE SPECIES CAN USE THEM
01:36:44   TO KILL SMALL FROGS IN WHOSE CARCASS THE FEMALES
01:36:48   LAY THEIR EGGS.
01:36:49   [ Laughter ]
01:36:49   SO THE NATURALIST MODEL IS VERY DIFFERENT FROM
01:36:52   THE READING MODEL.
01:36:53   MEANS THAT YOU'RE CONSIDERING THE ENVIRONMENT
01:36:54   THAT THE CODE IS INHABITING.
01:36:55   YOU TAKE INTO ACCOUNT, HISTORY, EVOLUTION OF THE
01:36:58   CODE AND YOU REMEMBER THAT NOT EVERYTHING ABOUT
01:37:00   THE CODE IS NECESSARILY DELIBERATE OR
01:37:02   INTENTIONAL.
01:37:02   SO BACK IN COLORADO STATE ASTRO PHYSICS, MY
01:37:07   UNDERGRAD THESIS WAS OBSERVATIONAL ASTRONOMY.
01:37:11   THAT'S INTERESTING TO ME AS A SCIENTIFIC
01:37:13   DISCIPLINE BECAUSE THERE'S NO SUCH THING AS
01:37:14   EXPERIMENTAL ASTRONOMY.
01:37:16   THERE ARE THREE WAYS OF LEARNING ABOUT THE WORLD.
01:37:18   THE FIRST IS THEORY, SOMETIMES AFFECTIONATELY
01:37:21   REFERRED TO AS THE FINEMAN METHOD, YOU WRITE DOWN
01:37:23   THE PROBLEM AND THINK VERY HARD AND WRITE DOWN A
01:37:26   SOLUTION.
01:37:26   [ Laughter ]
01:37:27   THE SECOND WAY OF LEARNING ABOUT THE WORLD IS
01:37:31   THROUGH COMPUTER MODELS, BASICALLY.
01:37:32   AND THEN THE THIRD IS JUST LOOKING AT WHAT'S OUT
01:37:34   THERE IN THE UNIVERSE AND HAPPENS TO BE SENDING
01:37:37   PHOTONS TOWARDS EARTH AND HOPEFULLY HITTING
01:37:40   TELESCOPES, THOSE ARE YOUR ONLY OPTIONS.
01:37:42   IF YOU'RE DOING OBSERVATIONAL ASTRONOMY, THE
01:37:45   SINGLE MOST IMPORTANT QUESTION YOU CAN ASK
01:37:46   YOURSELF IS WHY ARE WE SEEING WHAT WE'RE SEEING.
01:37:49   TO WHY DO WE SEE SUPER MASSIVE BLACK HOLES NEAR
01:37:53   WEIRD-LOOKING GALAXIES.
01:37:55   AND IN THAT CASE, THE ANSWER IS, BECAUSE
01:37:58   WEIRD-LOOKING GALAXIES ARE INTERESTING AND WE'VE
01:38:01   POINTED TELESCOPES AT THEM FOR A LONG TIME AND IF
01:38:04   YOU PUT THE TELESCOPE ELSEWHERE, YOU SEE THE
01:38:07   MASSIVE BLACK HOLES THERE, TOO.
01:38:08   I CAN GO ON FOR QUITE A BIT ABOUT THIS.
01:38:13   THE SCIENTIST IN QUESTION IS HALLTON HARP AND I
01:38:16   WOULD LOVE TO TALK MORE ABOUT THAT.
01:38:18   THIS WAY OF THINKING IS ALMOST THE OPPOSITE OF
01:38:20   READING.
01:38:20   IF YOU'RE READING A TEXT, USUALLY IT IS NOT
01:38:22   DESIGNED TO DECEIVE YOU.
01:38:25   IT WAS PROBABLY BUILT FOR YOU TO READ IT.
01:38:27   THE AUTHOR ISN'T ACTIVELY TRYING TO BE MISLEADING
01:38:29   OR CONFUSING OR ANYTHING ELSE.
01:38:31   BUT CODE IS NOT BUILT FOR YOU TO READ IT, AND I
01:38:34   REALIZE THAT THIS IS A SOMEWHAT CONTROVERSIAL
01:38:36   STATEMENT.
01:38:37   AND I CURRENTLY WORK WITH AND HAVE WORKED WITH
01:38:40   BEFORE A LOT OF GREAT PROGRAMMERS WHO SET OUT
01:38:43   WITH GREAT INTENTIONS AND HAVE GOOD SKILLS AND
01:38:46   THE CODE IS REALLY READABLE AND CLEAN AND
01:38:48   AWESOME, AND THEN REALITY HITS IN SOME MANNER.
01:38:52   YOU EITHER HAVE OPTIMIZATION PROBLEMS, YOU HAVE
01:38:55   TO GET PERFORMANCE UP OR YOU HAVE DEADLINES OR
01:38:59   YOU HAVE ED CASES THAT YOU HAVE TO HANDLE AND
01:39:03   SOMETIMES YOU HAVE ALL THREE OF THOSE AT THE SAME
01:39:05   TIME AND SO THE CODE ENDS UP ARE NOT BEING AS
01:39:08   CLEAN AS YOU WOULD LIKE IT TO BE.
01:39:10   SO WHAT DOES ITS LOOK LIKE FOR YOU TO THINK OF
01:39:12   YOURSELF AS AN EXPERT OBSERVE JURY OF YOUR CODE
01:39:15   BASE.
01:39:15   IT FREES YOU UP TO BE MORE TARGETED, TO LOOK
01:39:19   ACROSS HISTORY AND SEE DIFFERENT LEVELS OF
01:39:21   STRUCTURE.
01:39:21   SO LET'S LOOK AT SOME SPECIFIC TOOLS FOR
01:39:23   ACCOMPLISHING THAT.
01:39:24   ONE GREAT TOOL FOR DIGGING INTO THE PYTHON CODE
01:39:28   BASE IS THE INSPECT MODULE.
01:39:29   THIS TAKES YOU RIGHT TO THE SOURCE CODES OF
01:39:31   ANYTHING THAT'S IMPLEMENTED IN PYTHON WITHOUT YOU
01:39:33   HAVING TO DO A TON OF SEARCHING.
01:39:36   HERE I'M LOOKING AT THE SOURCE CODE FOR
01:39:37   RANDOM.CHOICE, WHICH TURNS OUT TO BE A ONE-LINER
01:39:41   SO THE WAY THIS IS IMPLEMENTED, IT INDEXES INTO A
01:39:44   SEQUENCE USING RANDOM.RANDOM TIMES THE HECKTH OF
01:39:47   THE SEQUENCE.
01:39:48   SO THERE ARE THREE COOL THINGS ABOUT DOING THIS.
01:39:50   THE FIRST ONE IS, A ONE-LINER THAT WE CAN
01:39:54   UNDERSTAND IN LESS THAN A MINUTE WHICH IS
01:39:56   SATISFYING.
01:39:56   THE SECOND THING, THERE IS A COMMENT THAT SAYS,
01:39:57   THIS RAISES INDEX ERROR IF THE SEQUENCE IS EMPTY.
01:40:00   THIS DOES NOT APPEAR IN THE DOCUMENTATION,
01:40:02   ALTHOUGH BE A REASONABLE EXPECTATION GIVEN THE
01:40:06   WAY THE DOCUMENTATION IS PHRASED.
01:40:07   THIS IS GOOD TO KNOW.
01:40:08   THE THIRD THING IS THAT CHOICE APPEARS TO BE A
01:40:12   METHOD, TAKE SELF AS A PARAMETER, EVEN THOUGH
01:40:14   WE'RE CALLING IT LIKE ITS MODULE LEVEL FUNCTION,
01:40:16   SO WHAT'S UP WITH THAT, EXACTLY?
01:40:18   AND THE ANSWER TO THAT QUESTION IS REALLY
01:40:20   INTERESTING AND MAYBE WE CAN COME BACK TO THAT IN
01:40:22   Q AND A, IF YOU WANT.
01:40:23   BUT IN UNDER A MINUTE, WE CAN UNDERSTAND THE
01:40:26   IMPLEMENTATION, WE CAN LEARN ABOUT AN EDGE CASE
01:40:28   AND WE FOUND THIS THREADS THAT WE CAN PULL ON IF
01:40:31   WE WANT TO PURSUE THIS FURTHER.
01:40:32   SO IF YOU'VE TRIED TO USE THE INSPECT MODULE
01:40:38   BEFORE AND GOT THIS SORT OF MYSTIFYING OUTPUT.
01:40:41   THE ONE BUMMER ABOUT THE INSPECT MODULE IN THE
01:40:44   STANDARD LIBRARY IT DOESN'T WORK FOR THINGS THAT
01:40:46   ARE NOT IMPLEMENTSnd PYTHON SO IF YOU CALL ON
01:40:49   A BUILT-IN OR SOMETHING ELSE IMPLEMENTnd C,
01:40:51   IT FALLS DOWN.
01:40:52   AND YOU CAN'T TELL IF SOMETHING'S IMPLEMENTED IN
01:40:55   PYTHON OR C AHEAD OF TIME WITHOUT JUST KNOWING.
01:40:57   SO A FRIEND OF MINE HAS WRITTEN A TOOL CALLED C
01:41:02   INSPECT, WHICH IS A GREAT HACK THAT MAKES INSPECT
01:41:04   WORK FOR ALL C-IMPLEMENTED CODES AND HERE IS A
01:41:09   LINK TO THAT.
01:41:09   I THINK IT'S NOT COMPLETELY POLISHED AT THIS
01:41:12   POINT BUT VERY FINE, WORKS A SURPRISING AMOUNT OF
01:41:14   TIME AND I ALSO TAKE A LOT OF PLEASURE IN MY
01:41:17   PYTHON REBEL SUDDENLY SPITTING C-CODE AT ME.
01:41:21   IF YOU WANT TO CHECK THAT OUT, HERE'S THE LINK.
01:41:23   SO ANOTHER WAY YOU CAN BE AN EXPERT OBSERVER IS
01:41:26   TO LOOK AT HISTORY.
01:41:27   YOU HAVE THE FULL HISTORY OF THE PYTHON CODE BASE
01:41:29   AVAILABLE TO YOU SO YOU CAN USE EARLY CODE TO
01:41:31   UNDERSTAND THE CODES YOU'RE LOOKING AT TODAY AND
01:41:34   THIS IS PARTICULARLY USEFUL IN PYTHON.
01:41:35   PYTHON HISTORICALLY HAS HAD A REPUTATION FOR
01:41:37   BEING REALLY CLEAN AND READABLE C-CODE, SO YOU
01:41:39   CAN SIT DOWN WITH, SAY, THE INTERPRETER AND
01:41:42   FOLLOW ALONG WITHOUT REALLY KNOWING EXACTLY
01:41:44   WHAT'S HAPPENING AHEALED OF TIME.
01:41:45   AND DECADES LATER, THAT THE LESS TRUE THAN IT
01:41:48   USED TO BE, AND TO BE CLEAR, THAT'S PERFECTLY
01:41:50   REASONABLE.
01:41:51   MOST OF WHAT'S GOING ON IS THAT THERE IS SOME
01:41:53   OPTIMIZATION THAT'S GOING TO SPEED UP THE
01:41:55   EXECUTION OF EVERYONE'S PYTHON AT THE COST OF
01:41:57   MAKING THE INTERPRETER MORE COMPLEX, THAT IS
01:41:59   ALMOST ALWAYS THE RIGHT DECISION TO MAKE.
01:42:00   BUT SO TODAY THE RESULT IS THE INTERPRETER IS
01:42:04   MUCH HARDER TO GET A FOOTHOLD ON THAN TEN YEARS
01:42:08   AGO, THAT'S THE REALITY, BUT YOU ARE NOT LIMITED
01:42:10   TO THE COLD IN FRONT OF YOU.
01:42:12   YOU CAN START YOUR EXPLORATION IN AN EARLIER
01:42:13   VERSION, YOU CAN TAKE A FIELD TRIP TO THE LAND
01:42:15   WHERE PYTHON WAS REALLY CLEAN AND READABLE C.
01:42:17   CLOSELILY RELATED TO HISTORY IS LOOKING AT CHANGE
01:42:23   LOGS.
01:42:24   FOR PYTHON IN PARTICULAR, WHICH IS USES MERE CURE
01:42:27   Y'ALL, YOU CAN USE THIS WOULD BE, THIS WILL GIVE
01:42:30   A PATCH TO INTRODUCE THE PARTICULAR LINE OF CODES
01:42:32   AND THE AUTHOR AND COMMIT MESSAGE AND SO ON.
01:42:34   THIS IS REALLY USEFUL TO BE UNDERSTANDING THE
01:42:36   CONTEXT IN WHICH THE CODES WAS INTRODUCED.
01:42:40   WAS THIS LINE OF CODE PART OF A BUG FIX OR PART
01:42:42   OF A NEW FEATURE, WAS IT PART OF REFACTORING,
01:42:46   REARRANGE THINGS AND LOOKING AT THE ENTIRE PATCH
01:42:49   CAN OFTEN BE AN INSTRUCTIVE EXERCISE.
01:42:51   ANOTHER POSSIBILITY IS TO LOOK AT THE INTERNAL
01:42:53   STRUCTURE OF THE CODE.
01:42:54   AND FOR PYTHON THERE ARE LOTS OF DIFFERENT LEVELS
01:42:58   WE CAN LOOK AT THE CODES.
01:42:59   THERE'S THE SOURCE CODE BUT ALSO AT THE AST OR
01:43:02   YOU CAN LOOK WHERE THE GRAMMAR IS DEFINED OR LOOK
01:43:05   AT THE BYTECODE INTERPRETER, AND SOMETIMES ONE OF
01:43:08   THESE VIEWS WILL BE MORE ILLUMINATING THAN THE
01:43:10   ORIGINAL SOURCE CODE.
01:43:11   TO TAKE AN EXAMPLE OF THAT, THIS IS A GREAT BIT
01:43:13   OF PYTHON TRIVIA COURTESY OF A COLLEAGUE OF MINE
01:43:17   AT DROPBOX.
01:43:18   DOES ANYONE WANT TO TAKE A GUESS FOR WHAT THIS
01:43:19   EVALUATES TO?
01:43:21   THIS SAYS FALSE IS FALSE IS FALSE.
01:43:22   I'M HEAR A LOT OF FALSES.
01:43:26   ANYONE WANT TO GIVE AN EXPLANATION FOR WHY FALSE?
01:43:29   >> FALSE IS FALSE IS...
01:43:30   [ Audio Indiscernible ]
01:43:30   >> SO FALSE IS FALSE IS TRUE, TRUE IS FALSE IS
01:43:33   FALSE, THEREFORE, FALSE.
01:43:35   BASICALLY PARSING LIKE THIS, TOTALLY REASONABLE
01:43:38   GUESS.
01:43:38   [ Laughter ]
01:43:39   IN FACT, ADDING PARENTHESES TO THIS EXPRESSION
01:43:44   CHANGES IT COMPLETELY.
01:43:46   WOOPS.
01:43:48   I SEE WHAT HAPPENED HERE.
01:43:51   SO IN FACT THIS VALUE IS TRUE.
01:43:53   SORRY.
01:43:55   THIS EVALUATES TO TRUE.
01:43:56   AND THE REASON WHY IT DOES THAT IS BECAUSE THIS
01:43:59   IS IN FACT A TURNER COMPARISON OPERATION --
01:44:05   RETURN RATE COMPARISON OPERATION, WHICH YOU CAN
01:44:07   SEE HERE IF I HADN'T SCREWED UP THE SYNTAX.
01:44:10   THIS IS EXACTLY THE SAME CODE AS A LESS THAN B
01:44:13   LESS THAN C.
01:44:14   I SEE A LOT OF SKEPTICAL FACES, THAT'S TOTALLY
01:44:17   REASONABLE SO LET'S LOOK AT THE BYTECODE.
01:44:19   SO HERE IS FALSE IS FALSE IS FALSE.
01:44:21   DON'T BLINK WHILE I CHANGE THE SLIDE.
01:44:23   HERE IS A LESS THAN B LESS THAN C.
01:44:24   SO YOU DON'T HAVE TO KNOW ANYTHING AT ALL ABOUT
01:44:28   BYTECODE TO SEE THAT THIS IS EXACTLY THE SAME
01:44:30   STRUCTURE.
01:44:31   EVEN IF YOU'RE NOT USED TO LOOKING AT THIS AT
01:44:33   ALL, IT LEAPS OFF THE PAGE AND SO WE CAN USE THIS
01:44:36   INTERNAL VIEW TO BECOME MUCH MORE CONFIDENT ABOUT
01:44:39   THE WAY THE COLD BEHAVES.
01:44:40   I MENTION THE MODEL IS CORRECT OR AS IT TURNS OUT
01:44:43   BASICALLY HAVING EVERYONE IN THE ROOM GUESS THE
01:44:45   WRONG ANSWER.
01:44:45   BUT HERE'S WHAT'S GOING ON HERE.
01:44:47   I DID THIS, TOOK THE FIRST TIME I SAW THIS.
01:44:49   THE OTHER THING THAT'S KIND OF FUN IS WE CAN SEE
01:44:51   THAT COMPARISON OPERATORS ARE PARAMETERIZED, I'LL
01:44:56   LEAVE THAT AS A LITTLE NUGGET TO COME BACK TO.
01:44:59   LET'S TALK ABOUT THE SECOND STRATEGY
01:45:01   EXPERIMENTATION.
01:45:01   SO WE'VE BEEN TALKING ABOUT LEAVING CODE
01:45:05   SCIENTIFICALLY AND THE TWO EXAMPLES SO FAR ARE
01:45:07   NATURALISTISM AND ASTRONOMY AND THOUGHT TWO
01:45:11   THINGS HAVE IN COMMON IS IT'S HARD TO DO
01:45:13   EXPERIMENTS.
01:45:14   BUT WE'RE PROGRAMMERS SO WE DON'T SUFFER UNDER
01:45:16   THIS RESTRICTION.
01:45:16   THERE ARE LOTS OF WAYS ABOUT LEARNING ABOUT
01:45:18   UNFAMILIAR CODES BASE IN FRONT OF YOU, OTHER THAN
01:45:21   JUST LOOKING AT IT DIFFERENT WAYS.
01:45:22   YOU CAN RUN EXPERIMENTS, YOU CAN MAKE HYPOTHESES
01:45:25   AND TEST THOSE HYPOTHESES.
01:45:27   AND ONE WAY YOU CAN TEST YOUR HYPOTHESES IS WITH
01:45:30   MEASUREMENTS.
01:45:31   THERE ARE A TON OF DIFFERENT MEASURING TOOLS
01:45:33   AVAILABLE, ONE SIMPLE ONE IS TIME IT FOR
01:45:35   MEASURING THE SPEED OF CODE SNIPPETS.
01:45:37   IN THIS EXAMPLE, I'M TESTING WHETHER IT IS FASTER
01:45:40   TO CALL THE METHOD SORT OR CALL THE BUILT-IN
01:45:42   SORTED ON A LIST.
01:45:43   THERE WAS A REALLY INTERESTING EXAMPLE IN DAVID
01:45:47   BEASLEY'S TALK YESTERDAY, WHERE HE WAS TIMING
01:45:50   EXECUTION OF DIFFERENT VERSIONS OF CONCURRENT
01:45:53   CODE, AND THROUGH JUST LIKE SOMETHING THAT WAS
01:45:56   MAKE REQUESTS IN A LOOP AND MEASURING HOW MANY
01:45:59   REQUESTS PER SECOND HE COULD GET, HE LED US TO AN
01:46:02   INTERESTING PIECE OF INFORMATION ABOUT HOW THE
01:46:04   GIL PRIORITIZES TASKS THAT I THINK IS THE
01:46:07   OPPOSITE OF WHAT MOST PEOPLE WOULD EXPECT IT TO
01:46:08   DO AND SO JUST DOING THE SIMPLE MEASUREMENT AND
01:46:11   HAVING A THEORY FOR HOW THE GIL SHOULD BE DOING
01:46:14   PRIORITIZATION, WE CAN ACTUALLY TEST THAT.
01:46:16   I THINK IT'S PARTICULARLY IMPORTANT IN THIS SORT
01:46:18   OF EXPERIMENTATION TO HAVE A HYPOTHESIS THAT
01:46:20   YOU'RE TESTING.
01:46:22   OTHERWISE, IT'S PRETTY EASY TO KIND OF ACCUMULATE
01:46:24   A LOT OF NUMBERS THAT DON'T REALLY MEAN ANYTHING
01:46:27   OR TELL YOU ANYTHING NEW.
01:46:28   AND I DO WANT TO SAY, PLEASE DON'T TIME THINGS
01:46:33   AND THEN GO DO THINGS THAT WAY ALWAYS
01:46:35   IRRESPECTIVELY OF STYLE.
01:46:37   THIS SORT OF MINUSCULE TIMING OPTIMIZATION IS
01:46:40   ALMOST NEVER A GOOD GUIDE FOR HOW YOU SHOULD
01:46:42   PHRASE A LINE OF CODE.
01:46:43   ANOTHER GREAT WAY TO RUN EXPERIMENTS IS WITH
01:46:48   TESTS, SO YOU'RE SAYING TO YOURSELF, I'M READING
01:46:50   THIS CODE BASE AND I THINK THIS PARTICULAR
01:46:53   VARIANT ALWAYS HOLDS SO WRITE A TEST THAT PROVES
01:46:55   THAT OR THAT SHOWS THAT FOR A NUMBER OF CASES
01:46:58   FEEL THEN YOU CAN BUILD UP THESE SMALL BLOCKS OF
01:47:01   KNOWLEDGE INTO A MUCH MORE ROBUST UNDERSTANDING
01:47:04   OF THE SYSTEM.
01:47:05   THIS WILL PROBABLY BE SLOW THE FIRST TIME THAT
01:47:07   YOU DO IT AND IT DOES REINTRODUCE THE TOOLING AND
01:47:11   INSTALLATION HELL THAT WE HOPED TO AVOID BUT I
01:47:13   THINK IT'S WORTH IT AND THE REASON WHY I
01:47:15   EMPHASIZE THIS IS NOT BECAUSE IT HAS NEVER
01:47:18   OCCURRED TO ANY OF TO YOU WRITE TESTS BUT BECAUSE
01:47:20   I THINK MY THRESHOLD FOR WHEN YOU START WRITING
01:47:22   TESTS IS MUCH LOWER THAN YOU MIGHT HAVE HEARD.
01:47:25   I THINK IF YOU'RE SPENDING MORE THAN LIKE AN HOUR
01:47:27   WITH CPYTHON, YOU SHOULD TRY WRITING A TEST.
01:47:31   AND YOU DON'T NECESSARILY HAVE TO WRITE A FORMAL
01:47:33   TEST, EITHER.
01:47:33   YOU CAN, FOR EXAMPLE, USE THE FUNCTION THAT
01:47:35   YOU'RE LOOKING AT OR, LIKE, REMOVE A PIECE THAT
01:47:37   SEEMS IMPORTANT AND SEE IF IT FALLS OVER IN THE
01:47:39   WAY THAT YOU EXPECT IT TO.
01:47:40   AND THIS IS SOMETHING THAT I PERSONALLY AM OFTEN
01:47:42   BAD AT.
01:47:43   I REALLY WANT TO -- I OFTEN WANT TO HAVE A VERY
01:47:45   COMPLETE MENTAL MODEL OF THE SYSTEM BEFORE I
01:47:47   NOTHING AND START MAKING CHANGES, AND THIS IS AN
01:47:49   INEFFICIENT DECISION, LIKE ALMOST EVERY TIME.
01:47:52   IT WOULD BE MUCH FASTER TORE ME TO START MAKING
01:47:56   CHANGES, WRITING TEST ATTENTION, BUILD UP MY
01:47:58   MODEL ALONG THE WAY AND THAT'S CODES I PROBABLY
01:48:01   WON'T KEEP, I WILL END UP BUILDING THE MENTAL
01:48:03   MODEL, THROWING OUT THE CODE AND MAYBE MAKING A
01:48:05   CHANGE IF THAT'S WHAT I'M TRYING TO DO.
01:48:07   BUT, AGAIN, SINCE WE'RE NOT TALKING ABOUT
01:48:09   CONTRIBUTING OR ANYTHING TODAY, YOU SHOULD -- YOU
01:48:11   CAN TAKE YOUR COPY OF CPYTHON AND MAKE IT DO
01:48:14   WHATEVER YOU CARE ABOUT.
01:48:14   IT'S JUST TO INCREASE YOUR UNDERSTANDING AND THEN
01:48:17   THROW IT AWAY.
01:48:18   SO LET'S PUT THIS ALL BACK TOGETHER AND I WANT TO
01:48:23   LEAVE A COUPLE OF MINUTES FOR QUESTIONS ABOUT
01:48:25   STRATEGIES AND/OR THE RANDOM MODULE IF YOU'RE
01:48:28   INTERESTED.
01:48:29   WHEN YOU START TO ZIG INTO THE PYTHON CODE BASE,
01:48:31   DON'T READS IT, INTERACT WITH IT IN SOME OTHER
01:48:35   WAY.
01:48:36   I LIKE DIGGING AROUND IN PYTHON SOURCE, I FIND IT
01:48:38   DEEPLY GOOD FOR UNDERSTANDING IT.
01:48:41   I HOPE YOU DO THIS IN A REALLY INTERACTIVE AND
01:48:44   PLAYFUL WAY AND ONE OF THE GREAT THINGS ABOUT
01:48:46   OPEN SOURCE SOFTWARE IS THAT YOU HAVE YOUR OWN
01:48:48   COPY OF THE CODE IN FRONT OF YOU, AND YOU CAN
01:48:50   POKE IT AND PRODUCT IT AND RUN EXPERIMENTS AND
01:48:53   MAKE SILLY OR ILL-ADVISED CHANGES AND SOME OF THE
01:48:56   MOST INTERESTING AND OBJECTIVELY REALLY FUN
01:48:58   PROJECTS THAT I'VE HAD WERE EXTREMELY
01:49:00   ILL-ADVISED.
01:49:01   AND THEY WERE GREAT WAYS TO LEARN.
01:49:03   SO I ENCOURAGE YOU TO GO OUT AND DOWNLOAD A COPY
01:49:06   OF PYTHON SOURCE, IF YOU DON'T ALREADY HAVE ONE
01:49:09   AND START NOT READING IT.
01:49:11   THANK YOU.
01:49:12   [ Applause ]
01:49:16
01:49:23   >> AUDIENCE:  HI.
01:49:24   I CONSIDER MYSELF A FAIRLY JADED OLD PYTHON
01:49:27   PROGRAMMER SO I JUST WANT TO SAY THANKS BECAUSE I
01:49:29   LEARNED SOMETHING TODAY.
01:49:31   MY QUESTION, THOUGH, IS SO WHY DOES CHOICE LOOK
01:49:34   LIKE A METHOD?
01:49:36   >>  IF ONLY I HAD A SLIDE FOR THAT.
01:49:38   [ Laughter ]
01:49:38   SO THIS IS A REALLY INTERESTING MODEL, I THINK.
01:49:45   SO BASICALLY THE CHOICE IS IMPLEMENTED AS A
01:49:49   METHOD ON THE RANDOM CLASS AND WHEN YOU IMPORT
01:49:52   THE RANDOM MODULE FOR THE FIRST TIME, YOU GET AN
01:49:55   INSTANCE OF THAT CLASS AND THEN IN THAT MODULE,
01:49:58   IT REBINDS ALL OF THE METHODS AS FUNCTION NAMES,
01:50:01   SO YOU SEE LIKE C EQUALS INSTANCE DOT SAEED AND
01:50:07   RANDOM AND SO ON.
01:50:08   THERE IS A COMMENTS THAT EXPLAINS THE RATIONALE,
01:50:10   WHICH SAYS THAT YOU WANT TO PRESERVE THE ABILITY
01:50:12   FOR THE PYTHON PROGRAMMER TO RE-SEED THE RANDOM
01:50:18   MODULE AND THAT'S WHAT HAPPENS IN THE INIT MODULE
01:50:21   OF THIS RANDOM CLASS, SO WE DO WANT TO PRESERVE
01:50:24   THAT, SO RANDOM.CHOICE I THINK IS MOST OFTEN USED
01:50:27   IN TEXT ADVENTURE GAMES FOR BEGINNERS SO WE DON'T
01:50:30   WANT TO IMPOST THIS COST ON NEW PYTHON
01:50:33   PROGRAMMERS OR PROGRAMMERS WHO DON'T NEED SPECIAL
01:50:35   CONTROL OVER THE RANDOM MODULE.
01:50:36   SO THAT'S THE WAY THIS IS IMPLEMENTED AND THE
01:50:38   NAMES ARE REBOUND AND DOUBLE UNDERSCORE ALL IS
01:50:41   DEFINED IN THE METHODS SO YOU DON'T GET KIND OF
01:50:43   JUNK THAT DOESN'T BELONG THERE WHEN YOU DO A STAR
01:50:45   IMPORT.
01:50:45   OTHER QUESTIONS?
01:50:48   ALL RIGHT.
01:50:55   THANK YOU.
01:50:55   [ Applause ]
01:53:41   ^^^^^^^^^^^^^










