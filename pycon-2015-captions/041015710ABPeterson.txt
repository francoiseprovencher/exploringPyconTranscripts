          041015710ABPETERSON


11:10:15  >> WE WOULD LIKE TO WELCOME BENJAMIN
11:10:15  PETERSON.
11:10:15  THE (SLIGHTLY) LESS SORRY STATE OF SSL.
11:10:20  >>  THANK YOU VERY MUCH, EVERYBODY.
11:10:22  AND GOOD AFTERNOON.
11:10:24  AS HE SAID, I'M BENJAMIN PETERSON.
11:10:25  I WOULD LIKE TO TELL YOU ABOUT SSL AND
11:10:29  PYTHON.
11:10:29  BUT FIRST, LET ME LOOK AT THE PROGRAM HERE.
11:10:34  OKAY.
11:10:35  SO WHAT AM I UP AGAINST?
11:10:37  RAYMOND.
11:10:38  BEYOND PIP AID.
11:10:40  THE BEST PRACTICE FOR BEAUTIFUL INTELLIGIBLE
11:10:42  CODE.
11:10:42  OKAY.
11:10:43  NOTHING IS GOING TO BE BEAUTIFUL IN THIS
11:10:44  TALK.
11:10:45  SO YOU SHOULD GO TO THAT.
11:10:48  SO INSIDE THE HAT, PYTHON AT WALT DISNEY
11:10:52  ANIMATION STUDIOS.
11:10:54  THAT ONE YOU SHOULD DEFINITELY GO TO BECAUSE
11:10:55  IT'S NOT BEING RECORDED DUE TO ALL THE COOL
11:10:58  GRAPHICS WHICH ARE BEING SHOWN.
11:10:59  SO THAT'S IN 517D.
11:11:02  THAT'S DOWNSTAIRS.
11:11:08  I WAS WATCHING IN THE SPEAKER'S LOUNGE.  IT
11:11:10  LOOKED REALLY GOOD.
11:11:11  AND LET'S SEE.
11:11:12  HTTP 2.
11:11:13  WELL, I GUESS THAT USES SSL, SO MAYBE YOU CAN
11:11:16  JUST WATCH THAT LATER.
11:11:17  ALL RIGHT.
11:11:18  SO AS YOU CAN SEE IN THE PROGRAM, THE TALK IS
11:11:22  LISTED AS A DIVE INTO TLS.
11:11:26  AND THE TITLE HERE IS A BIT DIFFERENT.
11:11:28  AND THE REASON FOR THAT IS THAT I, WHEN THE
11:11:33  TALKS WERE ACCEPTED, I NOTICED THAT THERE WAS
11:11:35  A TALK WHICH OVERLAPPED A LOT WITH MY
11:11:37  ORIGINAL PROPOSAL, SPECIFICALLY DESCRIBED IN
11:11:39  THE ACTUAL TLS PROTOCOL.
11:11:43  AND ADDITIONALLY, IN THE TIME SENSE PROPOSALS
11:11:46  WERE DUE IN SEPTEMBER, A LOT OF THINGS HAVE
11:11:48  HAPPENED IN THE PYTHON SSL MODULE WHICH I
11:11:52  WOULD LIKE TO TELL YOU ABOUT.
11:11:53  SO I'M GOING TO BE TALKING ABOUT IMPROVEMENTS
11:11:55  MADE TO THE PYTHON STANDARD LIBRARY SSL
11:12:00  MODULE OVER THE LAST YEAR.
11:12:02  AND REMEMBER, PAUL'S TALK IS DOWNSTAIRS.
11:12:06  ALL RIGHT.
11:12:07  SO AS I SAID, I'M BENJAMIN PETERSON.
11:12:11  I HAVE BEEN A CORE DEVELOPER OF CPYTHON FOR
11:12:15  ABOUT 7 YEARS NOW.
11:12:19  AND I'VE WORKED ON A LOT OF DIFFERENT PARTS
11:12:21  OF CORE PYTHON LANGUAGE AND THE STANDARD
11:12:26  LIBRARY.
11:12:27  AND I'VE ALSO BEEN A RELEASE MANAGER.
11:12:29  AND THE OTHER THING WHICH YOU MAY KNOW ME
11:12:32  FROM IS WRITING THE SIX PYTHON 2 AND 3
11:12:36  COMPATIBILITY LIBRARY, WHICH I HOPE HAS
11:12:38  HELPED YOU IN DOC PYTHON 3.
11:12:41  OKAY.
11:12:41  SO THAT'S ENOUGH BORING THINGS ABOUT ME.
11:12:44  LET'S TALK ABOUT SOMETHING MUCH MORE
11:12:46  INTERESTING.
11:12:46  SO THIS IS HYNEK SCHLAWACK.
11:12:50  AS YOU CAN SEE, HE'S A VERY COOL GUY BECAUSE
11:12:52  HE HAS THIS PICTURE ON HIS WEBSITE OF HIM
11:12:56  STARING OUT OF BLACKNESS.
11:12:58  HE'S SITTING IN THE FRONT ROW IF YOU WANT TO
11:13:01  MEET HIM.
11:13:02  AND SO LAST YEAR, HYNEK GAVE A TALK AT PYCON
11:13:10  MONTREAL AND ALSO A FEW OTHER PLACES CALLED
11:13:13  THE SORRY STATE OF SSL.
11:13:16  AND AS YOU CAN SEE, MY TALK TITLE HAS BEEN
11:13:18  DERIVED FROM HIS.
11:13:21  AND AS YOU MAY SURMISE FROM THE TALK TITLE,
11:13:27  HE WAS BASICALLY POINTING OUT ALL THE
11:13:29  TERRIBLE THINGS IN THE PYTHON COMMUNITY WHICH
11:13:35  SURROUNDING SUPPORT OF SSL.
11:13:36  SO LATER IN THE TALK, HE ALSO HAD THIS SLIDE,
11:13:41  WHICH, OUCH, IT KIND OF HURTS.
11:13:45  IT BURNS.  AND SO MY HOPE IS TO EXPLAIN TO
11:13:50  YOU -- REMIND YOU WHY HYNEK SAYS WE WERE AT
11:13:56  THE FOREFRONT OF TERRIBLE AND THEN CONVINCE
11:13:59  YOU THAT WE'RE SLIGHTLY AHEAD OF THE
11:14:01  FOREFRONT OF TERRIBLE.
11:14:03  OKAY.
11:14:04  SO AGAIN, WHY ARE WE SO SORRY ABOUT THE STATE
11:14:09  OF SSL IN PYTHON?
11:14:16  SO LET ME BEGIN BY REMINDING YOU ABOUT THE
11:14:21  STANDARD LIBRARY SSL MODULE, WHICH IS THE
11:14:25  MAIN TOPIC OF THIS TALK.
11:14:26  SO IT WAS ADDED IN PYTHON 2.6, WHICH I
11:14:29  REMEMBER, BUT, AS FAR AS TECHNOLOGY IS
11:14:31  CONCERNED, IS BASICALLY ANCIENT HISTORY.
11:14:38  AND ITS BASIC OPERATION IS THAT IT'S A
11:14:40  WRAPOVER OVER SSL.
11:14:43  SO THERE'S NO CODE IN PYTHON WHICH ACTUALLY
11:14:45  KNOWS HOW TO SPEAK THE TLS OR SSL PROTOCOLS
11:14:48  OVER THE WIRE.
11:14:49  THAT'S ALL HANDLED BY OPEN SSL.
11:14:52  AND THE SSL MODULE JUST USES THE C OPEN SSL
11:14:58  APIS, SO THAT'S GOOD BOTH BECAUSE WE DON'T
11:15:00  HAVE TO MAINTAIN A TLS IMPLEMENTATION IN THE
11:15:03  STANDARD LIBRARY AND BAD BECAUSE EVERY TIME
11:15:05  THERE'S AN OPEN SSL CVE, THEN ALL PYTHON
11:15:10  STUFF IS SCREWED OVER.
11:15:12  AND THE API OF THE SSL MODULE IS BASICALLY A
11:15:20  FAKE SOCKET API, AT LEAST THE TRADITIONAL
11:15:23  API.
11:15:24  AND SO WHAT THAT MEANS IS THAT YOU WOULD MAKE
11:15:25  A RAW TCP SOCKET, AND THEN YOU WOULD HAND IT
11:15:29  TO THE SSL MODULE AND SAY WRAP THIS SOCKET
11:15:34  WITH TLS, AND OPEN SSL WOULD SPEAK TLS OR SSL
11:15:39  OVER THE HTTP SOCKET WHICH YOU CREATED AND
11:15:44  INTERACT WITH THE APIS, WHICH ARE LIKE THE
11:15:46  RAW SOCKET APIS WHICH YOU WOULD SAY WRITE 25
11:15:49  BYTES OR READ SEVERAL BYTES.
11:15:51  AND SO THIS MADE IT SOMEWHAT EASY TO JUST ADD
11:15:58  TLS TO A RAW SOCKET PROTOCOL WHEN THE API
11:16:03  WORKS.
11:16:04  THE ABSTRACTION BREAKS DOWN SOMETIMES.
11:16:07  AND THEN THE OTHER IMPORTANT THING ABOUT THE
11:16:09  SSL MODULE IS THAT IT IS WHAT PROVIDES HTTPS
11:16:13  SUPPORT IN THE REST OF THE STANDARD LIBRARY.
11:16:15  SO IN PARTICULAR, HTTPLIB BECAUSE HTTP AND
11:16:21  HTTPS PROTOCOLS ARE SO IMPORTANT IN MODERN
11:16:26  COMPUTING, BUT ALSO, IF YOU WANT TO DO XML,
11:16:29  RPC OVER SSL, THE STANDARD LIBRARY WILL USE
11:16:33  THE SSL MODULE FOR THAT.
11:16:35  SO IT'S -- IN A WAY, IT'S THE CANONICAL
11:16:41  SOURCE OF SSL SUPPORT FOR PYTHON.
11:16:44  AND THE OTHER THING WHICH NEEDS TO BE NOTED
11:16:46  IS THAT THE SSL MODULE SAW IMPROVEMENTS IN
11:16:53  PYTHON 3, WHICH -- AND 2.7 WAS BASICALLY LEFT
11:16:58  BEHIND.
11:16:58  SO WE'RE GOING TO SEE HOW THAT CREATED A BIT
11:16:59  OF TENSION.
11:17:02  SO MORE OR LESS, WHAT HAPPENED IS PYTHON 2.7
11:17:08  WAS RELEASED IN 2010.
11:17:11  AND THIS IS GOING TO BE THE END OF THE 2.7
11:17:14  SERIES, THE LAST MAJOR RELEASE.
11:17:18  ALL NEW FEATURES ARE NOW DEVELOPED ON PYTHON
11:17:22  3.
11:17:24  BUT THAT ALSO MEANS THAT THE SSL MODULE IN
11:17:27  2.7 WAS FROZEN IN 2010 AND, UNFORTUNATELY, A
11:17:34  LOT OF THE MODERN APIS WHICH YOU NEED TO DO
11:17:39  MODERN, SECURE CRYPTOGRAPHY AND TLS, ARE
11:17:44  ABSENT IN THE 2.7 VERSION OF SSL EVEN THOUGH
11:17:48  THEY WERE PRESENT IN PYTHON 3.
11:17:50  AND SO THEY WERE NOT ACCESSIBLE TO THE LARGE
11:17:53  NUMBER OF PYTHON USERS WHO ARE STILL USING
11:17:56  PYTHON 2.7, AND THEY ARE MORE OR LESS BEING
11:17:59  LEFT IN THE DUST TO FEND FOR THEMSELVES IN
11:18:03  TERMS OF SSL SUPPORT.
11:18:05  SO SPECIFICALLY, SOME IMPORTANT THINGS WHICH
11:18:11  WERE MISSING WAS SUPPORT FOR THE NEWER
11:18:13  PROTOCOLS IN TLS.
11:18:15  TLS 1.1, AND TLS 1.2.
11:18:18  AND THAT'S BAD NOT ONLY BECAUSE TLS 1.1 AND
11:18:23  1.2 ARE NEWER VERSIONS OF THE PROTOCOL WITH
11:18:28  SOME SECURITY IMPROVEMENTS, BUT ALSO BECAUSE
11:18:34  TLS 1.1 AND 1.2 ARE INCLUDED FOR MODERN
11:18:38  CIPHER SUITES.
11:18:39  SO THE KINDS OF CIPHERS WHICH WE WANT TO BE
11:18:41  USING TODAY ARE JUST NOT AVAILABLE IN TLS
11:18:45  1.0.
11:18:46  AND SO IF YOU DON'T ACTUALLY HAVE THE ABILITY
11:18:48  TO SUPPORT TLS 1.1 OR 1.2, THEN YOU'RE KIND
11:18:52  OF STUCK WITH THESE OLDER OFTEN BROKEN
11:18:55  CIPHERS.
11:18:56  IN PARTICULAR, YOU DON'T HAVE THE IMPORTANT
11:19:00  CIPHERS WHICH HAVE IMPORTANT PROPERTIES LIKE
11:19:03  PERFECT FORWARD SECURITY.
11:19:05  THERE IS ALSO JUST MISSING FEATURES FROM THE
11:19:08  SSL MODULE WHICH ARE NEEDED IF MODERN
11:19:11  NETWORKING APPLICATIONS LIKE NEXT PROTOCOL
11:19:13  NEGOTIATION, WHICH IS A TLS EXTENSION USED TO
11:19:19  NEGOTIATE THE NEXT APPLICATION LAYER
11:19:23  PROTOCOL.
11:19:23  WHAT THIS MEANS IS IT'S USED TO NEGOTIATE
11:19:27  HTTP 2.
11:19:28  AND SINCE HTTP 2 HAS BEEN FINALLY
11:19:30  STANDARDIZED, NOW THIS HAS BECOME A MUCH MORE
11:19:32  IMPORTANT ISSUE.
11:19:33  AND ANOTHER SIMILAR THING WAS SIMILAR NAME
11:19:37  INDICATION, WHICH IS A WAY TO HOST SSL OR TLS
11:19:42  SERVICES AS VIRTUAL HOSTS.
11:19:47  THIS IS NEEDED TO DO THAT.
11:19:49  AND THEN THE FINAL THING WAS THAT THERE WAS
11:19:51  NO BUILT-IN WAY TO ACCESS THE SYSTEM'S STORE
11:19:55  OF CERTIFICATES, AND YOU HAD TO BUILD YOUR
11:19:57  OWN CODE FOR THAT, WHICH ON UNIX SYSTEMS YOU
11:20:00  JUST USUALLY HAVE TO SEARCH IN THE RIGHT
11:20:03  LOCATIONS TO FIND THE CERTIFICATE STORE.
11:20:04  BUT ON WINDOWS, THERE'S CUSTOM WIN32 API CODE
11:20:09  WHICH YOU HAVE TO WRITE TO ACCESS THE SYSTEM
11:20:12  STORE.
11:20:15  AND THE FINAL THING WAS THAT IN 2.7, THERE
11:20:18  WERE JUST BAD DEFAULTS, WHICH WE KNOW ARE
11:20:23  VERY DANGEROUS IN SECURITY SENSE OF CODE AND
11:20:27  API DESIGN IN GENERAL, OF COURSE.
11:20:29  SO AS I SAID, LIKE ALL THE PROTOCOLS WERE
11:20:32  ALLOWED BY DEFAULT, SO COMPLETELY INSECURE
11:20:34  PROTOCOLS LIKE SSL 3 OR SOMETHING, YOU KNOW,
11:20:38  WOULD JUST BE USED BY DEFAULT UNLESS YOU TURN
11:20:40  IT OFF.
11:20:40  AND THE CIPHER STRING WAS THE ONE WHICH WAS
11:20:42  USED BY OPEN SSL BY DEFAULT, AND THAT
11:20:45  INCLUDED A LOT OF INSECURE CIPHERS.
11:20:49  THIS IS LIKE THE SORT OF WAY THAT THE TLS
11:20:54  PORT CIPHERS WOULD GET ADDED, AND THAT'S HOW
11:20:57  THAT SORT OF THING WOULD HAPPEN.
11:20:59  AND THEN THERE WAS NO CERTIFICATE TRUST
11:21:02  VERIFICATION BY DEFAULT.
11:21:04  IT WOULD JUST ACCEPT -- CLIENTS WOULD JUST
11:21:06  ACCEPT ANY CERT WHICH WAS HANDED OVER.
11:21:09  AND THERE WAS NO HOST NAME VALIDATION BY
11:21:12  DEFAULT.
11:21:12  SO THE SUM TOTAL OF ALL THIS IS THIS VERY
11:21:18  INNOCENT LINE.
11:21:20  JUST USING STANDARD LIBRARY NETWORKING CODE
11:21:24  IN PORT URLLIB OPENED THE VERSION OF THE
11:21:29  PYTHON WEBSITE WAS COMPLETELY INSECURE.
11:21:30  IT WAS AS BAD AS USING IT OVER HTTP BECAUSE
11:21:34  THERE'S NO CERTIFICATE VALIDATION OR HOST
11:21:37  NAME VALIDATION.
11:21:38  AND IN FACT, IT'S QUITE A BIT MORE INSIDIOUS
11:21:40  BECAUSE PEOPLE THINK THAT THEY'RE GETTING
11:21:42  SECURITY BY PUTTING AN S THERE.
11:21:43  BUT THE STANDARD LIBRARY WAS NOT GUARANTEED
11:21:47  IN THAT AT ALL.
11:21:50  SO I WOULD LIKE TO REPORT ON THE PROGRESS
11:21:53  OVER THE LAST YEAR.
11:21:58  AND THIS COMES IN THE FORM OF TWO PIPS.
11:22:00  THE FIRST ONE IS 466, NETWORK SECURITY
11:22:05  ENHANCEMENTS FOR PYTHON 2.7.X.
11:22:10  AS THE NAME SUGGESTS, THIS INVOLVES ADDING A
11:22:12  WHOLE LOT MORE SECURITY FEATURES TO THE SSL
11:22:17  MODULE IN PYTHON 2.
11:22:19  SO THIS -- WHAT YOU CAN THINK OF IS THAT THE
11:22:23  3.4 SSL MODULE IS JUST BACKPORTED TO 2.7.
11:22:29  AND THAT'S ACTUALLY ESSENTIALLY HOW THE
11:22:31  BACKPORT -- THIS PIP WAS IMPLEMENTED WAS
11:22:34  BACKPORTING AND PORTING EVERYTHING BACK TO
11:22:36  2.7.
11:22:37  SO THIS WAS RATHER EXCEPTIONAL, BECAUSE WE
11:22:41  USUALLY WE HAVE A VERY -- IN CORE CPYTHON, WE
11:22:46  HAVE A VERY SCRIPT BACKWARDS COMPATIBILITY
11:22:50  POLICY, WHICH SAYS THAT WE SHOULD NOT ADD NEW
11:22:52  FEATURES TO BUG FIX VERSIONS OF RELEASES.
11:22:56  BUT IT WAS FELT THAT WE WERE GETTING TO THE
11:22:58  POINT THAT WE WERE LEAVING PYTHON 2.7 USERS
11:23:04  WITH THIS TOTALLY INSECURE SSL MODULE, WHICH
11:23:09  WASN'T APPROPRIATE IN THE MODERN WORLD THAT
11:23:11  WE LIVE IN.
11:23:12  SO THE THINGS THAT BACKPORT INCLUDED ARE THE
11:23:18  SSL CONTEXT CLASS WHICH I'M GOING TO TALK
11:23:20  ABOUT BRIEFLY AT THE END OF THE TALK AND ALSO
11:23:21  THE ABILITY TO SUPPORT NEWER VERSIONS OF TLS
11:23:25  WITH THE ASSOCIATED GOODS CIPHERS AND SIMILAR
11:23:29  NAME INDICATION.
11:23:34  AND THEN THERE WERE A FEW OTHER TINY THINGS
11:23:37  WHICH WERE BACKPORTED FROM PYTHON 3 TO OTHER
11:23:40  MODULES.
11:23:41  NAMELY PBKDF 2.
11:23:47  WHICH IS WHAT YOU SHOULD USE WHEN YOU GET A
11:23:50  PASSWORD AND YOU PUT IT IN YOUR DATABASE.
11:23:52  YOU SHOULDN'T YOU SHOULD USE ONE OF THESE KEY
11:23:55  DERIVATION ALGORITHM AND THEN THERE'S A
11:23:58  CONSTANT TIME COMPARING ALGORITHM FOR
11:24:01  COMPARING THE HASHES WHICH TO PREVENT TIMING
11:24:04  ATTACKS.
11:24:05  AND A FEW OTHER THINGS.
11:24:07  AND THEN THE SECOND PIP, WHICH CAME OUT WAS
11:24:12  476.
11:24:13  THE NAME IS PRETTY SELF-EXPLANATORY.
11:24:16  ENABLING CERTIFICATE VERIFICATION BY DEFAULT
11:24:19  STANDARD LIBRARY HTTP CLIENTS.
11:24:22  SO WHAT THIS MEANT WAS THAT HTTPLIB AND ITS
11:24:27  CONSUMERS WOULD VERIFY CERTIFICATES TO TRUST
11:24:34  VERIFICATION BY USING THE SYSTEM CERTIFICATE
11:24:36  STORE BY DEFAULT AND DO HOST NAME
11:24:39  VERIFICATION.
11:24:40  SO IT SHOULD BE ROUGHLY ON PAR WITH WHAT YOUR
11:24:42  BROWSER DOES, ALTHOUGH YOUR BROWSER HAS A LOT
11:24:44  OF OTHER FEATURES.
11:24:45  BUT THIS IS SOME -- PROBABLY WE'RE ACTUALLY
11:24:51  PROVIDING ACTUAL SECURITY BY DEFAULT NOW.
11:24:55  AND SO THIS WAS RELEASED IN PYTHON 2.7.9 AND
11:25:00  3.4.1, WHICH CAME OUT -- 2.7.9 CAME OUT IN
11:25:06  DECEMBER, AND 3.4.1 CAME OUT IN FEBRUARY I
11:25:11  THINK.
11:25:11  SO THIS IS SOMEWHAT NEW.
11:25:13  BUT IF YOU WERE ABLE TO UPGRADE YOUR PYTHON,
11:25:18  YOU'LL BE ABLE TO TAKE ADVANTAGE OF THIS
11:25:21  SECURITY IMPROVEMENTS.
11:25:22  AND ADDITIONALLY, YOU ARE NOW -- YOU'RE ABLE
11:25:27  TO CONFIGURE THE TLS CONFIGURATION OF
11:25:32  STANDARD LIBRARY PROTOCOLS.
11:25:33  IF YOU DON'T WANT TO USE THE DEFAULT
11:25:35  BYPASSING THE CONTEXT ARGUMENT TO, FOR
11:25:38  EXAMPLE, HTTPLIB OR RPC LIB.
11:25:45  SO LET ME BRIEFLY ELUCIDATE A FEW OF THE
11:25:50  THINGS WHICH WERE BACKPORTED TO 2.7.
11:25:57  SO ONE OF THE MAIN THINGS WAS THIS CLASS
11:26:00  CALLED SSL CONTEXT, WHICH IS IN THE SSL
11:26:03  MODULE, WHICH BASICALLY SERVES AS THE
11:26:07  CONFIGURATION FOR AN SSL CONNECTION.
11:26:09  ALL OF THE ARGUMENTS WHICH YOU NEED TO MAKE
11:26:12  AN SSL CONNECTION.
11:26:14  AND THIS REPLACES THE ORIGINAL API IN THE SSL
11:26:18  MODULE CALLED WRAP SOCKET WHICH HAS LIKE 12
11:26:21  ARGUMENTS AND STILL NEEDED MORE.
11:26:22  AND SO NOW THEY'RE ALL WRAPPED UP IN THIS
11:26:24  CLASS CALLED SSL CONTEXT.
11:26:26  AND SO AMONG THE CONFIGURATION THINGS ARE THE
11:26:31  CERTIFICATES WHICH YOU WANT TO TRUST, WHETHER
11:26:34  HOST NAME VERIFICATION IS ENABLED, THE CIPHER
11:26:37  STRINGS WHICH YOU'RE WILLING TO NEGOTIATE,
11:26:40  AND THE PROTOCOLS WHICH YOU'RE WILLING TO
11:26:42  SPEAK.
11:26:43  SO THAT'S SSL 3.0 OR TLS ONE OR TLS 1.2.
11:26:50  AND THERE'S A WHOLE LOT OF OPEN SSL FLAGS
11:26:53  WHICH YOU CAN ADD OR REMOVE AT YOUR LEISURE
11:26:56  TO CONFIGURE FUN OPEN SSL BEHAVIOR.
11:27:00  SO THIS IS THE THING WHICH I SAID THAT MANY
11:27:02  NETWORKING APIS NOW ACCEPT.
11:27:06  THE SSL CONTEXT.
11:27:07  SO YOU CAN PASS AN SSL CONTEXT TO HTTPLIB AND
11:27:10  IT WILL USE THAT CONFIGURATION TO MAKE HTTPS
11:27:14  CONNECTIONS.
11:27:15  SO YOU CAN INSTANTIATE YOUR OWN SSL CONTEXT.
11:27:20  YOU JUST GET A BLANK ONE AND THEN DO WHATEVER
11:27:22  YOU NEED TO DO TO CONFIGURE IT.
11:27:24  BUT YOU SHOULDN'T DO THAT.
11:27:25  YOU SHOULD USE THIS FUNCTION CALLED CREATE
11:27:28  DEFAULT CONTEXT.
11:27:29  AND WHAT CREATE DEFAULT CONTEXT DOES IS IT
11:27:32  MAKES YOU AN SSL CONTEXT WITH GOOD DEFAULTS.
11:27:36  SO THIS IS THE ONE WHICH IS USED THROUGHOUT
11:27:37  THE STANDARD LIBRARY, AND SO IF YOU NEED TO
11:27:40  TWEAK SOMETHING, YOU CAN CREATE A DEFAULT
11:27:42  CONTEXT AND THEN JUST TWEAK WHATEVER YOU
11:27:45  NEED, AND THEN ALL THE OTHER DEFAULTS SHOULD
11:27:47  BE GOOD.
11:27:47  SO IN PARTICULAR, WE HAVE A GOOD CIPHER
11:27:51  STRING WITH GOOD PRIORITIZATION USING SOME OF
11:27:56  THE NEWER, HIGH QUALITY CIPHERS WHICH IS
11:27:58  ACTUALLY SUGGESTED BY HYNEK.
11:28:02  AND WE ALSO LOAD THE SYSTEM CERTS TO DO TRUST
11:28:06  VALIDATION.
11:28:08  AND THE BEST THING IS THAT NOW WE'LL BE ABLE
11:28:12  TO UPDATE THIS FUNCTION AS TLS BEST PRACTICES
11:28:16  EVOLVE.
11:28:18  AND SO -- AND MAKE SURE THAT EVERYTHING STAYS
11:28:21  SECURE.
11:28:23  FOR EXAMPLE, WE JUST RECENTLY REMOVED THE
11:28:26  CIPHER RC4 FROM THE DEFAULT PROTOCOL STRING
11:28:31  BECAUSE THERE'S AN RFC WHICH SAYS THAT YOU
11:28:34  SHOULD NOT USE IT BECAUSE IT'S BROKEN.
11:28:37  THERE ARE SOME PRETTY COOL BIAS ATTACKS.
11:28:39  AND SO AS I SAID, [INAUDIBLE] CONTEXT IS THE
11:28:45  ONE WHICH IS USED BY THE STANDARD LIBRARY
11:28:47  NETWORKING.
11:28:49  AND THEN SO AS I ALLUDED TO BEFORE, WE NOW
11:28:52  HAVE SUPPORT FOR SEVERAL MORE TLS EXTENSIONS
11:28:56  TO THE PROTOCOL, WHICH ARE IMPORTANT FOR
11:28:59  MODERN NETWORKING.
11:29:01  SPECIFICALLY, SERVER NAME INDICATION WHICH
11:29:04  ALLOWS FOR VIRTUAL HOSTING TO WORK WITH SSL.
11:29:09  AND ALSO, NEXT PROTOCOL NEGOTIATION, AN
11:29:12  APPLICATION LAYER PROTOCOL NEGOTIATION, WHICH
11:29:18  WERE -- BOTH WERE SUGGESTED BY GOOGLE IN
11:29:21  ORDER TO ALLOW THE NEGOTIATION OF SPEEDY AND
11:29:24  NOW HTTP 2, BUT IN THEORY YOU COULD USE IT TO
11:29:27  NEGOTIATE WHATEVER THE NEXT -- ANY PROTOCOL
11:29:31  THAT YOU WANT AND THERE'S CUSTOM HOOKS IN THE
11:29:34  SSL MODULE WHICH LET YOU SAY I WOULD LIKE TO
11:29:37  SPEAK PROTOCOL GOBBLY GOOK INSTEAD OF HTTP 2.
11:29:42  AND INSTEAD TO SUPPORT IT YOU SHOULD BE ABLE
11:29:45  TO SWITCH SEAMLESSLY TO THAT.
11:29:48  THE LAST MORE ADVANCED FEATURE WHICH I WOULD
11:29:50  LIKE TO TALK ABOUT WHICH IS NOT ACTUALLY IN
11:29:52  2.7 BECAUSE IT'S EVEN NEWER THAN 3.4 IS
11:29:54  MEMORY BIO SUPPORT.
11:29:56  SO AS I SAID AT THE BEGINNING OF THE TALK,
11:30:00  ONE OF THE SSL MODULE PROVIDES A SOCKET LIKE
11:30:06  API WHICH JUST SORT OF PRE-TENDS TO BE A RAW
11:30:08  SOCKET AND THEN SPEAKS SSL OVER THE
11:30:12  UNDERLYING RAW SOCKET.
11:30:13  BUT SOMETIMES IT'S USEFUL TO BE ABLE TO
11:30:15  SEPARATE THE ACTUAL IO FROM SPEAKING THE SSL
11:30:19  PROTOCOL.
11:30:20  SO THIS IS WHAT MEMORY BIOA LOW ALLOWS YOU TO
11:30:24  DO.
11:30:25  YOU WRITE A BUNCH OF BYTES TO A BUFFER AND
11:30:27  THEN YOU SAY -- OPEN SSL, TURN THIS INTO A
11:30:31  SSL PROTOCOL FRAME OR SOMETHING.
11:30:33  AND THEN SSL GIVES THAT BACK TO YOU, AND IT
11:30:36  DOESN'T SEND IT ON NETWORK OR ANYTHING, AND
11:30:39  THEN YOU CAN SEND THAT HOWEVER YOU WOULD LIKE
11:30:41  TO.
11:30:42  SO THIS IS MOSTLY USEFUL FOR HIGHER LEVEL
11:30:44  FRAME WORKS LIKE H SYNC IO AND TWISTED HAS
11:30:49  BEEN DOING SOMETHING LIKE THIS USING PI SSL
11:30:54  WHICH IS HAD SUPPORT FOR THIS LONGER.
11:30:56  AND IT'S ONLY IN PYTHON 3.5.
11:31:00  OKAY.
11:31:04  I HOPE YOU THINK THAT WE'RE NOT AT THE
11:31:08  FOREFRONT OF TERRIBLE ANYMORE. THE ONLY THING
11:31:10  ABOUT THIS IS THAT THERE'S USUALLY SOMEONE
11:31:12  WHO IS WORSE THAN YOU.
11:31:13  REALLY.
11:31:18  AND I WOULD ALSO LIKE TO PUT IN A PLUG FOR
11:31:20  REQUESTS WHICH ALSO HAS BEEN DOING STUFF LIKE
11:31:25  THIS FOR MUCH LONGER THAN IT'S BEEN DONE
11:31:28  PROPERLY IN THE STANDARD LIBRARY, AND IS JUST
11:31:31  GENERALLY VERY NICE API FOR MAKING HTTP
11:31:36  REQUESTS.
11:31:36  SO USE REQUESTS AND EVERYTHING WILL BE ALL
11:31:39  RIGHT.
11:31:43  FINALLY, I WOULD LIKE TO THANK A LOT OF
11:31:45  PEOPLE WHO MADE THESE THINGS POSSIBLE.
11:31:48  AND VASTLY IMPROVED THE SECURITY OF PYTHON.
11:31:53  PARTICULARLY, ALEX GAYNOR AND DAVID REID DID
11:31:56  A LOT OF THE BACKPORTING WORK WHICH IS A
11:31:58  MASSIVE TASK.
11:31:59  THOUSANDS OF LINES OF C CODE.
11:32:04  AND NICK COGHLAN AND DONALD STUFFT WROTE A
11:32:07  LOT OF PIPS AND OTHER PEOPLE HELPED WITH
11:32:11  REVIEWING CODE.
11:32:12  AND THERE'S A LOT OF PEOPLE WHO AREN'T NAMED
11:32:14  HERE.
11:32:14  BUT I WOULD LIKE TO PERSONALLY THANK THEM.
11:32:16  AND WITH THAT, HIT ME WITH QUESTIONS.
11:32:21  AND THANK YOU FOR COMING AND NOT GOING TO
11:32:23  PAUL'S TALK.
11:32:30  [ APPLAUSE ]
11:32:37  >> SO WE'VE GOT A FEW MINUTES FOR QUESTIONS.
11:32:39  IF YOU'VE GOT ONE, PLEASE STEP FORWARD AND
11:32:41  COME TO THE MICROPHONE.
11:32:56  HI, BENJAMIN.
11:32:57  THANK YOU.
11:32:58  I'M FROM THE TOUGH PROJECT.
11:33:00  SO MY QUESTION IS HOW OFTEN WOULD YOU UPDATE
11:33:03  THE STDLIB AS YOU FIND SAY NEW CIPHERS THAT
11:33:08  SHOULDN'T BE USED YET?
11:33:09  DOES THAT MEAN YOU WOULD HAVE TO RELEASE A
11:33:11  NEW VERSION OF PYTHON?
11:33:14  >>  YES.
11:33:14  SO I MEAN, AS SOON AS IT SEEMS LIKE THERE'S
11:33:19  CRYPTOGRAPHIC CONSENSUS IN THE SECURITY
11:33:22  COMMUNITY THAT WE SHOULD NOT BE DOING SOME
11:33:24  PARTICULAR THING, USUALLY ESPECIALLY IN THE
11:33:25  CASE OF SAVINGS IT'S NOT VERY HEART TO CHANGE
11:33:28  THE CIPHER STRING.
11:33:30  IN SOME CASES THERE'S ISSUES OF
11:33:32  COMPATIBILITY.
11:33:32  RC4 HAS BEEN KNOWN TO BE WEAK FOR A VERY LONG
11:33:37  TIME BUT IT'S LIKE THE ONLY SORT OF SECURE
11:33:39  PROTOCOL WHICH WINDOWS XP COULD SPEAK -- OR
11:33:42  INTERNET EXPLORER EIGHT ON WINDOWS XP.
11:33:46  I MEAN, IT'S STILL ON, FOR EXAMPLE, GOOGLE
11:33:48  AND OTHER POPULAR SITES BECAUSE THEY FEEL
11:33:50  THAT THEY NEED TO SUPPORT WINDOWS 8.
11:33:52  BUT IT'S -- YEAH, IT'S NOT TOO HARD TO UPDATE
11:33:55  MOST THINGS.
11:33:56  AND THEN THEY WILL JUST COME IN THE NEXT BUG
11:33:59  FIX RELEASE IF WE THINK IT'S WARRANTED.
11:34:03  >>  YOU MENTIONED OFFHANDEDLY THAT THERE'S A
11:34:06  SPECIAL KEY DERIVATION FUNCTION THAT WE'RE
11:34:08  SUPPOSED TO USE FOR HASHING PASSWORDS IN
11:34:10  PLACE OF USING SOMETHING OUT OF A HASH LIB.
11:34:12  SO COULD YOU TALK A LITTLE BIT MORE ABOUT
11:34:14  THAT AND WHAT THAT IS AND WHY THAT'S A GOOD
11:34:16  IDEA AND.
11:34:16  >> YEAH.
11:34:17  SURE.
11:34:17  SO IT'S ACTUALLY IN HASH LIB NOW.
11:34:20  AND IT HAS A -- IT DOES NOT HAVE A VERY GOOD
11:34:23  NAME.
11:34:24  PBKDF 2.
11:34:27  YES.
11:34:30  AND HYNEK IS NODDING.
11:34:31  SO JUST TAKE THE OBSCUREST ONE AND PASS
11:34:34  PASSWORDS TO IT, RIGHT?
11:34:35  YEAH, SO HASHING OBVIOUSLY IS A GOOD START.
11:34:37  BUT WHAT THESE KEY DERIVATION FUNCTIONS DO IS
11:34:41  THEY TRY TO ENSURE THAT DERIVING THE PASSWORD
11:34:45  TAKES SUBSTANTIAL RESOURCES.
11:34:48  SO IF YOU'RE JUST HASHING ONE PASSWORD IT'S
11:34:52  OKAY IF IT TAKES TEN MILLISECONDS OR
11:34:55  SOMETHING BECAUSE YOU'RE ONLY DOING ONE.
11:34:57  BUT IF YOU'RE TRYING TO BREAK PASSWORDS, AND
11:34:59  YOU'RE TRYING TO CREATE THESE RAINBOW, GIANT
11:35:03  TABLES OF PASSWORDS, THEN EVEN A FUNCTION
11:35:07  WHICH TAKES A FEW MILLISECONDS CAN REALLY
11:35:10  SLOW DOWN HASHING BILLIONS AND BILLIONS OF
11:35:14  STRINGS.
11:35:14  AND SO THERE'S OTHER COMPETING FUNCTIONS LIKE
11:35:17  S CRYPT, BUT THEY'RE ALL PRETTY GOOD.
11:35:19  AND SO THAT'S CONSIDERED TO BE MODERN
11:35:23  STANDARD IN PASSWORD HASHING IF THAT MAKES
11:35:27  SENSE.
11:35:31  >>  THANK YOU.
11:35:33  >>  NO MORE INQUIRIES?
11:35:35  ALL RIGHT.
11:35:35  THANK YOU AGAIN.
11:35:43  [ APPLAUSE ]
11:35:43  >>  HELLO, EVERYONE.
11:36:08  SO LUNCH IS BEING SERVED IN THE EXPO HALL,
11:36:10  210, THE SAME PLACE WHERE BREAKFAST WAS
11:36:13  SERVED IN THE MORNING.
11:36:14  THANK YOU VERY MUCH.
11:36:15  AND HAVE A NICE DAY.
11:36:21  [ LUNCH BREAK ]





