          041115517CMMAKAI



15:15:37  >>  I'M ROBERT CONN.
15:15:39  I WOULD LIKE TO INTRODUCE THE SPEAKERS FOR THIS
15:15:42  SESSION.
15:15:42  IT'S MATT MAKAI.
15:15:44  HE'S A DEVELOPER EVANGELIST AT TWILIO AND KATE
15:15:47  HEDDLESTON, WHO ARE A SOFTWARE ENGINEER AND
15:15:49  CURRENTLY FUN EMPLOYED.
15:15:50  AND THEY WILL BE TALKING ABOUT CHOOSING THEIR
15:15:53  NEXT WSGI DEPLOYMENT ADVENTURE.
15:15:55  IT'S GOING TO BE DIFFERENT FROM THE OTHER
15:15:56  TALKS.
15:15:57  I THINK IT WILL BE VERY EXCITING.
15:16:01  [ APPLAUSE ]
15:16:02  >> GOOD AFTERNOON, EVERYONE.
15:16:06  MY NAME IS MATT MAKAI.
15:16:07  I'M A DEVELOPER EVANGELIST WITH TWILIO.
15:16:11  SO THIS IS CHOOSE YOUR OWN WSGI DEPLOYMENT
15:16:15  ADVENTURE.
15:16:15  AND AS ROBERT ALLUDED TO, THIS IS GOING TO BE
15:16:18  SLIGHTLY DIFFERENT FROM SOME OF THE OTHER
15:16:21  TALKS.
15:16:21  WE NEED AUDIENCE PARTICIPATION HERE.
15:16:24  AND YOU ARE GOING TO PARTICIPATE VIA EITHER A
15:16:25  PHONE OR A LAPTOP.
15:16:26  SO THIS IS THE EXACT OPPOSITE OF WHAT MOST
15:16:29  SPEAKERS WANT.
15:16:30  PULL OUT EITHER YOUR PHONE OR YOUR LAPTOP.
15:16:32  GET IT CONNECTED TO WI-FI BECAUSE WE'RE GOING
15:16:35  TO NEED TO YOU HELP US FIGURE OUT WHICH PADS WE
15:16:38  CHOOSE THROUGH THIS STORY TODAY.
15:16:39  THERE'S GOING TO BE MULTIPLE DECISION POINTS
15:16:42  WHERE WE'LL NEED YOU TO DO VOTING VIA SMS OR
15:16:46  THE WEB BROWSER.
15:16:47  SO ONE OR THE OTHER.
15:16:48  AND WE'LL EXPLAIN THAT WHEN WE GET TO OUR FIRST
15:16:51  DECISION POINT.
15:16:52  SO I WOULD LIKE TO INTRODUCE MY ESTEEMED
15:16:55  CO-PRESENTER FOR HER SECOND TALK OF THE DAY
15:16:59  TODAY, KATE HEDDLESTON.
15:17:02  >> HELLO.
15:17:04  MY NAME IS KATE HEDDLESTON.
15:17:05  I'M A SOFTWARE ENGINEER.
15:17:08  I AM FUN EMPLOYED.
15:17:09  I DON'T WORK AT TWILIO.
15:17:12  SO ONLY ONE OF US IS ASSOCIATED WITH TWILIO.
15:17:18  HERE'S OUR STORY TODAY.
15:17:19  YOU HAVE STARTED THE HOTTEST NEW COMPANY IN
15:17:22  SILICON VALLEY.
15:17:23  YOU ARE A GROUP OF DUDES, ENGINEERING THINGS,
15:17:25  AND YOU HAVE CONVINCED SOME INVESTORS TO FUND
15:17:27  YOUR IDEA.
15:17:28  NOW, YOU HAVE TO BUILD IT.
15:17:31  DID YOU BUILD TINDER FOR PETS, THE HIP NEW APP
15:17:38  THAT CONNECTS LONELY PETS AT HOME FOR DAYTIME
15:17:40  MEET-UPS, OR DID YOU BUILD THE DACHSHUND DOC
15:17:43  SEND DELIVERY SERVICE, WHICH IS A PRODUCT THAT
15:17:46  DEPLOYS AN ARMY OF DACHSHUNDS TO DELIVER
15:17:50  DOCUMENTS AND TRACK ANALYTICS?
15:17:52  SO HERE'S YOUR FIRST VOTING POINT.
15:17:55  DID YOU BUILD TINDER FOR PETS OR THE DACHSHUND
15:18:02  DOC SEND DELIVERY SERVICE?
15:18:13  WE'RE ALREADY GETTING IN VOTES.
15:18:14  SEND AN SMS TO THAT NUMBER ON THE SCREEN OR GO
15:18:17  TO [INAUDIBLE].
15:18:20  THERE WILL BE TWO BUTTONS ON THE SCREEN SO YOU
15:18:23  CAN VOTE FOR WHICH APP WE'RE GOING TO CHOOSE
15:18:25  HERE.
15:18:26  WE'LL HAVE MULTIPLE SCREENS THAT ARE LIKE THIS.
15:18:28  SO THE URL WILL CHANGE AS WE GO ALONG, BUT THIS
15:18:30  IS HOW WE'RE GOING TO BE ABLE TO VOTE.
15:18:32  SO IT LOOKS LIKE HEAD TO HEAD.
15:18:35  >>  OH, WOW.
15:18:36  TINDER IS PULLING -- THIS IS EXCITING.
15:18:39  THIS IS RIVETING.
15:18:45  >>  SO YOU HAVE TO STAY ON THE PAGE FOR THE
15:18:47  ACTUAL VOTE TO COUNT.
15:18:48  SO STAY ON THE PAGE IF YOU'RE USING THE WEB
15:18:51  BROWSER VOTING.
15:18:52  AND THAT WILL ALLOW IT TO CONTINUE TO COUNT
15:18:55  YOUR VOTE HERE.
15:18:56  SO WHAT'S HAPPENING IS WE'RE CALCULATING IN THE
15:18:59  FLASK APPLICATION THE VOTES THAT ARE COMING IN.
15:19:01  WE'RE INCREMENTING REDIS OR DECREMENTING REDIS
15:19:05  IF YOU LEAVE THE PAGE, AND WE'RE COUNTING THE
15:19:08  NUMBER OF VOTES THAT ARE COMING IN.
15:19:09  >>  ALL RIGHT.
15:19:10  WE MIGHT HAVE SOME DUPLICATE VOTES.
15:19:12  I DON'T KNOW IF WE HAVE 110 PEOPLE HERE.
15:19:14  BUT IT LOOKS LIKE THE DACHSUND DOC SEND
15:19:20  DELIVERY SERVICE IS GOING TO BE THE WINNER.
15:19:22  SO YOU BUILD THE DACHSUND DOC SEND DELIVERY
15:19:27  SERVICE.
15:19:34  HERE AT DACHSUND HQ, WE HAVE NAILED THE
15:19:38  DELIVERY WORLD.
15:19:39  THE QUESTION IS THEN HOW DO WE TRANSLATE THIS
15:19:41  EXPERIENCE INTO THE PHYSICAL WORLD.  TODAY
15:19:43  WE'RE EXCITED TO REVEAL THE DACHSUND DOC SEND
15:19:50  DELIVERY SERVICE.
15:19:52  WHEN YOU NEED A DOCUMENT DELIVERED, GO TO
15:19:53  DACHSHUNDDOCSEND.COM AND PLACE YOUR DELIVERY
15:19:59  REQUEST.
15:19:59  A DACHSUND WILL ARRIVE AT YOUR FRONT DOOR.
15:20:03  STRAP THE DOCUMENT TO THE DACHSUND CARRIER, AND
15:20:08  YOUR DOCUMENT WILL BE ON ITS WAY.
15:20:11  >>  OUR HIGHLY TRAINED DACHSUND WILL PAY CLOSE
15:20:15  ATTENTION.
15:20:16  THE BILL WILL BE CAREFULLY TABULATED AND
15:20:18  REPORTED BACK TO YOU.
15:20:21  DACHSUND DOCUMENT DELIVERY A SPECIAL OFFER.
15:20:24  FREE FROM ANY WORRIES THAT YOUR DOCUMENT GETS
15:20:26  INTO THE WRONG HANDS.
15:20:27  READY TO GIVE OUR LATEST CREATION A SPIN AND
15:20:31  JUST HEAD TO DACHSUND.DOCSEND.COM.
15:20:38  >>  ALL RIGHT.
15:20:38  SO YOU'RE WORKING ON BUILDING THE HOTTEST NEW
15:20:41  APP SINCE COLOR.
15:20:41  THIS IS GOING TO BE AMAZING.
15:20:43  YOU'VE GOT THE CODE READY TO GO.
15:20:46  IT'S ALL READY FOR YOU TO DEPLOY.
15:20:52  SO WHAT DOES THAT LOOK LIKE?
15:20:54  >>  SO WE HAVE OUR APPLICATION CODE.
15:20:55  WE'VE BUILT OUR DACHSUND DOC SEND DELIVERY
15:20:59  SERVICE.
15:21:00  AND I WILL TRIP UP ON THAT MULTIPLE TIMES.
15:21:02  NOW WE NEED TO DO SOMETHING WITH IT.
15:21:05  SO WHAT DO WE DO WITH OUR CODE THAT'S RUNNING
15:21:07  ON OUR LOCAL DEVELOPMENT ENVIRONMENT SO THAT
15:21:10  OTHER PEOPLE CAN ACTUALLY START USING IT?
15:21:12  SO LET'S TAKE A LOOK OUR DEPLOYMENT.
15:21:16  WHAT WE NEED IS A MAP OF WHAT OUR DEPLOYMENT
15:21:19  SHOULD LOOK LIKE.
15:21:20  A MAP KIND OF LIKE THIS ONLY WITH OUR WSGI
15:21:23  DEPLOYMENT INSTEAD OF JUST LIKE THE OLD STYLE
15:21:26  HERE.
15:21:26  SO CAVEAT.  I AM NOT A CARTOGRAPHER, SO I WAS
15:21:31  TRYING TO DRAW A MAP THAT WOULD LOOK REALLY
15:21:34  NICE LIKE THIS, AND I COME UP WITH [INAUDIBLE]
15:21:38  MARK-UPS.
15:21:41  SO WE'RE GOING TO DRAW A MAP THAT WAY WITH THE
15:21:44  CONTENTS.
15:21:45  WE WILL START WITH THE INTERNET.
15:21:46  SO ON THE INTERNET ARE USERS THAT WANT TO USE
15:21:50  OUR DACHSUND DELIVERY SERVICE, AND WE HAVE OUR
15:21:55  APPLICATION CODE SITTING ON OUR LOCAL MACHINES.
15:21:57  THAT DOESN'T DO US ANY GOOD.
15:21:59  USERS CAN'T USE THE APPLICATION.
15:22:01  WHAT WE NEED IS A SERVER.
15:22:03  AND THE SERVER WE CAN GO OUT AND BUY HARDWARE,
15:22:10  CONNECT IT TO THE INTERNET, OR WE CAN GO GET A
15:22:13  VIRTUAL PRIVATE SERVER FROM A COMPANY.
15:22:15  SO, FOR EXAMPLE, WE COULD GO OUT, AND WE COULD
15:22:18  GO TO LINODE AND GO GET A SERVER.
15:22:21  THE REASON I PICKED LINODE, THAT'S WHAT'S
15:22:25  RUNNING OUR SERVER RIGHT NOW, SO IF WE HAVE ANY
15:22:28  PROBLEMS WITH THIS, WE CAN GO DOWNSTAIRS AND
15:22:30  YELL AT THEM AT THEIR BOOTH.
15:22:32  WE PROVISION A SERVER.  WE SPIN IT UP.
15:22:35  WE SSHN.
15:22:36  WE'RE IN OUR NEW SERVER AS THE NEW ACCOUNT.
15:22:40  NOW WE WANT TO GET OUR APPLICATION CODE ON TO
15:22:43  OUR SERVER.
15:22:44  SO WE'RE USING GITHUB.
15:22:49  WE WOULD GO AND GET CLONE, GET REPOSITORY TO
15:22:50  GET OUR APP CODE, AND WE PUT IT ON OUR SERVER.
15:22:55  NEXT WE NEED A WEB SERVER.
15:22:57  SO WE WOULD GO TO SUDO APP, GET INSTALL ENGINE
15:23:02  X, AND WE WOULD CONFIGURE ENGINE X SERVER.
15:23:06  SO OUR TEAM IS NOT -- WE GO ON STACK OVERFLOW.
15:23:10  WE COPY AND PASTE OUR CODE AND TRY TO MAKE OUR
15:23:13  CONFIGURATION WORK.
15:23:14  SO THE FIRST FEW LINES WE'RE NOT SURE WHAT THEY
15:23:16  DO YET.
15:23:17  THEY SAY SOMETHING ABOUT A WSGI THING.
15:23:19  BUT WE'LL WORRY ABOUT THAT LATER.
15:23:21  WE'RE JUST TRYING TO GET ENGINE X UP AND
15:23:25  RUNNING.
15:23:26  WE CAN FIGURE SOME BASIC LOGGING, AND THEN AT
15:23:28  THE END, WE COPY AND PASTE WHAT WE'VE SEEN ON
15:23:31  STACK OVERFLOW FOR THIS WSGI SERVER THING THAT
15:23:34  WE NEED TO FIGURE OUT IN A FEW MINUTES.
15:23:37  ALL RIGHT.
15:23:38  WE DO A RESTART OF OUR ENGINE X SERVER SO THAT
15:23:41  WE CAN GET THE CONFIGURATION TAKEN UP.
15:23:43  AND NOW WHEN PEOPLE GO TO OUR WEBSITE THEY SEE
15:23:46  A 502 BAD GATEWAY.
15:23:48  ALL RIGHT.
15:23:49  WHAT'S HAPPENING HERE?
15:23:50  SO WHEN PEOPLE ARE GOING TO THE WEBSITE, WHEN
15:23:53  THEY'RE GOING TO OUR APPLICATION.
15:23:54  THE WEB SERVER IS ACTING AS A PROXY.
15:23:59  SO THE PROXY IS JUST THE MIDDLE MAN.
15:24:01  IT'S SAYING, OKAY, I'M GETTING AN INCOMING
15:24:04  REQUEST.
15:24:04  AND I NEED TO HAND THIS OFF TO A PORT FIVE
15:24:11  UPSTREAM SERVER, SO CLEARLY, WE NEED TO SET
15:24:14  THIS THING UP.
15:24:15  WHAT WE NEED HERE IS A WSGI SERVER.
15:24:17  SO WE HAVE OUR WEB SERVER THAT'S HANDLING THE
15:24:20  RESPONSES.
15:24:21  WE'RE HANDLING REQUESTS FROM USERS.
15:24:23  AND THEN WE NEED TO GO AND HIT A WSGI SERVER
15:24:25  THAT IS GOING TO BE RUNNING OUR APPLICATION
15:24:27  CODE.
15:24:29  SO WE WOULD GO AND DO A SUDO APP GET, INSTALL
15:24:37  OUR DEPENDENCIES AND ONE OF OUR DEPENDENCIES
15:24:40  WOULD BE GREEN UNICORN.
15:24:42  THAT'S GOING TON THE WSGI SERVER THAT CAN RUN
15:24:44  OUR APPLICATION.
15:24:45  BUT WE'RE NOT REALLY SURE HOW TO RUN GREEN
15:24:47  UNICORN.
15:24:48  YOU KNOW, WE KEEP USING RUN SERVER ON OUR LOCAL
15:24:52  DEVELOPMENT ENVIRONMENT.
15:24:53  SO WE'LL JUST USE THAT FOR NOW HERE.
15:24:55  I KNOW AT THIS POINT MANY OF YOU WHO HAVE DONE
15:24:57  DEPLOYMENTS BEFORE ARE SHAKING YOUR HEAD.
15:25:01  RUN SERVER, THE DEV SERVER, A REALLY TERRIBLE
15:25:06  IDEA.
15:25:09  IF YOU HAVE A PROBLEM THAT WSGI HAS, AND YOU
15:25:11  SEE SOMEONE ELSE IN THE AUDIENCE WHO IS LIKE DO
15:25:14  RUN SERVER, YOU CAN HELP THEM OUT AND SHOW THEM
15:25:16  HOW WE SHOULD ACTUALLY DO THIS IN A SAFE,
15:25:18  SECURE WAY.
15:25:19  FOR NOW, THIS IS WHAT'S GOING TO BE RUNNING OUR
15:25:21  APPLICATION.
15:25:22  SO NOW PEOPLE GO, AND THEY WOULD SEE SOMETHING
15:25:24  LIKE THIS.
15:25:24  THEY WOULD SEE PLAIN HTML.
15:25:28  AND WHAT SHOULD HAPPEN IS, FOR EXAMPLE, WHEN
15:25:29  YOU GO TO A WEB PAGE, WHAT SHOULD HAPPEN IS WE
15:25:33  SHOULD SEE, OKAY, WE GET NOT ONLY THE HTML, BUT
15:25:35  WE GET IMAGES AND JAVASCRIPT AND ALL THAT
15:25:38  STUFF.
15:25:38  THIS IS WHAT HAPPENS.
15:25:39  THE REQUEST RESPONSE CYCLE.
15:25:40  BUT WE HAVEN'T CONFIGURED OUR WEB SERVER TO
15:25:43  HANDLE THE IMAGES IN JAVASCRIPT AND CSS THAT
15:25:47  SHOULD BE BRINGING UP OUR APPLICATION.
15:25:48  SO WE NEED TO SET UP STATIC FILE SERVING.
15:25:51  SO WE GO AND CHANGE THE CONFIGURATION OF ENGINE
15:25:54  X.
15:25:54  SO BELOW WHERE WE HAD OUR LOG CONFIGURATION SET
15:25:57  UP, WE WOULD PUT IN FOUR LINES.
15:26:00  AT THE LOCATION/STATIC.
15:26:03  SO ANY URL THAT HAS STATIC IN THIS, WE ARE
15:26:06  GOING TO HAVE AN ALIAS TO OUR BAR WWW STATISTIC
15:26:12  DIRECTORY.
15:26:15  AND THEN WE HAVE THE REST OF OUR CONFIGURATION
15:26:17  WHICH WE HAVE ALREADY PUT IN.
15:26:18  SO NOW WE HAVE OUR COMPLETE DEPLOYMENT,
15:26:21  COMPLETE INITIAL DEPLOYMENT, WELL, EXCEPT FOR
15:26:23  ONE OTHER STEP.
15:26:24  SO OUR ANGEL INVESTORS TOLD US THAT THERE'S
15:26:27  SOMETHING CALLED -- THAT THE DATA THAT WE HAVE
15:26:30  IS REALLY IMPORTANT.
15:26:30  SO DATA IS LIKE THE NEW OIL IS WHAT THE ANGEL
15:26:34  INVESTORS KEEP SAYING.
15:26:35  SO WE NEED SOME SORT OF DATABASE TO STORE
15:26:38  INFORMATION ABOUT OUR DOC SEND DELIVERY
15:26:41  SERVICE.
15:26:41  SO WE DO A POSTGRES INSTALLATION.
15:26:44  WE INSTALL A CLIENT, SO WE CAN ACCESS POSTGRES
15:26:58  FOR OUR APPLICATION, AND [INAUDIBLE] LOSS AUDIO
15:27:03  CONNECTION.
15:27:04  >>  SERVING UP IMAGES OF PETS THAT COULD BE
15:27:06  DOING DELIVERING.
15:27:09  AND WE'VE LAUNCHED.
15:27:10  FINALLY, THE WORLD CAN USE OUR DOC SEND
15:27:14  DELIVERY SERVICE.
15:27:16  EVEN BETTER.
15:27:18  WE'RE FEATURED ON TECH CRUNCH.
15:27:24  WE HAVE HYPER GROWTH, NOT JUST GROWTH.
15:27:26  WE HAVE HYPER GROWTH NOW.
15:27:27  SO WITH HYPER GROWTH COMES MORE PROBLEMS.
15:27:29  SO THE QUESTION IS DO WE HAVE SO MANY USERS
15:27:32  THAT ARE SIGNING UP FOR OUR DOC SEND DELIVERY
15:27:35  SERVICE THAT WE NEED TO MAKE EMAIL INVITES?
15:27:37  OR DO WE NEED TO SET UP AUTOMATION BECAUSE WE
15:27:41  KEEP HAVING TO MANUALLY LOG INTO THE SERVER AND
15:27:43  DO SSH UPDATE OUR CODE.
15:27:45  SO THE QUESTION IS ARE WE DOING EMAIL
15:27:49  INVITATIONS, OR ARE WE GOING TO AUTOMATE OUR
15:27:52  DEPLOYMENTS.
15:27:53  SO THE QUESTION OR THE PATH TO THE STORY IS UP
15:27:56  TO YOU.
15:27:57  SO THIS IS THE SAME NUMBER THAT WE HAD BEFORE.
15:28:01  AND THIS IS A NEW URL.
15:28:02  SO WE HAVE A J.MP/PYROCKET.
15:28:10  SEE WHAT PEOPLE THINK.
15:28:12  >>  THIS IS A CLOSE RACE.
15:28:13  I THINK IT'S A LITTLE UNCLEAR TO ME WHICH ONE
15:28:16  YOU GUYS PREFER.
15:28:18  FOR ANYONE THINKING BY THE WAY THAT THIS
15:28:20  COULDN'T POSSIBLY BE HOW COMPANIES LAUNCH, IT
15:28:24  IS.
15:28:26  SNAPCHAT.
15:28:32  [ LAUGHTER ]
15:28:33  >> ALL RIGHT.
15:28:34  WE'RE GOING TO CUT TO THIS POINT.
15:28:37  SO AUTOMATION IS CLEARLY KEY TO BEING ABLE TO
15:28:41  QUICKLY ITERATE ON OUR MVP.
15:28:43  SO WE'RE GOING TO WALK THROUGH AUTOMATED
15:28:45  DEPLOYS.
15:28:46  THIS IS JUST GOING TO BE A HIGH LEVEL OVERVIEW
15:28:48  OF AUTOMATION.
15:28:49  NOW, I THOUGHT THIS PICTURE WAS JUST -- I DON'T
15:28:54  KNOW.
15:28:54  IT JUST CRACKED ME UP.
15:28:55  WHAT I DECIDED WAS THIS WAS GOING TO BE THE TV
15:28:58  SECTION OF THE CHOOSE YOUR OWN ADVENTURE STORY.
15:29:01  SO I TRIED TO PUT IN AS MANY TV CLIPS AS
15:29:04  POSSIBLE THROUGHOUT IT.
15:29:04  SO WE WANT TO AUTOMATE, INSTEAD OF HAVING A
15:29:07  HUMAN DO EVERYTHING, WE HAVE A -- WELL, NOT A
15:29:10  ROBOT, BUT WE HAVE SOFTWARE DOING IT FOR US.
15:29:12  SO WE START LOOKING FOR WHAT CONFIGURATION
15:29:14  MANAGEMENT TOOLS ARE OUT THERE.
15:29:16  WHAT WOULD ALLOW US TO AUTOMATE.
15:29:17  AND WE SEE FABRIC, SALTSTACK, DOCKER, WHAT ARE
15:29:24  ALL THESE TOOLS, WHAT IS ALL THIS STUFF.
15:29:26  SO WE CALL UP A FRIEND.
15:29:28  WE'RE KIND OF LOST.
15:29:29  WE PHONE A FRIEND.
15:29:32  AND THEY SAY, ALL RIGHT, WHAT DO YOU WANT TO
15:29:34  AUTOMATE, RIGHT?
15:29:35  SO THAT'S THE FIRST THING IS WHAT -- LET'S JUST
15:29:37  START ANSWERING SIMPLE QUESTIONS LIKE WHAT IS
15:29:39  IT THAT YOU WANT TO AUTOMATE.
15:29:41  WE'VE GOT TO START SOMEWHERE.
15:29:43  YOU SAY, ALL RIGHT, WELL, I JUST DON'T WANT TO
15:29:46  SSH INTO THE MACHINE EVERY SINGLE TIME.
15:29:48  AND SO WHAT WE NEED TO DO IS WE NEED TO PICK
15:29:50  SOME TOOLS THAT WILL HANDLE DEPLOYMENTS FOR US.
15:29:54  SO WE CAN START BUCKETING THESE TOOLS WHEN
15:29:57  WE -- IF WE KNOW NOTHING ABOUT THE
15:29:59  CONFIGURATION MANAGEMENT TOOLS AND THE
15:30:02  DEPLOYMENT AUTOMATION THAT'S OUT THERE, WE CAN
15:30:04  BUCKET THEM.
15:30:05  SO, FOR EXAMPLE, IN THIS CASE, WE WOULD HAVE
15:30:07  UNDER SERVER STATE, CHEF PUPPET, SALTSTACK,
15:30:12  THIS IS GREAT FOR MANAGING THIS [INAUDIBLE]
15:30:17  HAVE SOMETHING THAT'S AKIN TO DEPLOYMENTS.
15:30:19  AND SO WE HAVE SHELL SCRIPTS.
15:30:23  WE DECIDE, OKAY, LET'S MAKE ANTS AND FABRIC
15:30:27  THAT ALLOW SOME SCRIPTS THAT ALLOW US TO
15:30:29  INSTEAD OF US HAVING TO SHH IN AND PULL DOWN
15:30:32  THE CODE, WE AUTOMATE THAT WITH SOME ANSIBLE
15:30:35  PLAYBOOKS AND FABRIC FUNCTIONS, AND THEN WE ADD
15:30:39  CONTINUOUS INTEGRATION.
15:30:40  SO LET'S GO BACK TO OUR MAP HERE.
15:30:43  WHAT WE HAVE IS THE APPLICATION THAT WE HAD SET
15:30:45  UP AND PULL DOWN OUR APP CODE FROM THE SOURCE
15:30:50  CONTROL.
15:30:50  WE GET IT THROUGH CONTINUOUS INTEGRATION.
15:30:53  SO WE WORK ON OUR CODE LOCALLY.
15:30:55  WE PUSH IT TO THE SOURCE CONTROL REPOSITORY.
15:30:58  THE CONTINUOUS INTEGRATION ENVIRONMENT IS
15:30:59  NOTIFIED AND THEN BUILDS THE CODE, IT MAYBE
15:31:03  TESTS AT SOME POINT IN THE FUTURE WHAT WE
15:31:05  ACTUALLY GET TIME TO WRITE SOME TESTS, AND THEN
15:31:07  WE DEPLOY THE CODE THROUGH THE CONTINUOUS
15:31:10  INTEGRATION.
15:31:10  SO WE NO LONGER HAVE TO SHH INTO THE MACHINE TO
15:31:14  DO EVERY SINGLE DEPLOYMENT.
15:31:15  SO FINALLY WE HAVE SOME AUTOMATION IN PLACE.
15:31:18  SO THIS CREATES SOME OTHER ISSUES.
15:31:20  CONFIGURED AND DEPLOYED IN YOUR ENVIRONMENT,
15:31:23  BUT NOW, DO WE HAVE HTTP REQUESTS THAT KEEP
15:31:30  TIMING OUT BECAUSE WE'RE TRYING TO GET TOO MUCH
15:31:33  WORK DONE OR WE'RE REPORTING WE'RE NOT SURE HOW
15:31:38  TO HANDLE THEM ALL?
15:31:40  THE CHOICE IS UP TO YOU.
15:31:40  SO AGAIN, SAME PHONE NUMBER.  IT'S
15:31:43  J.MP/ASYNC-FIX.
15:32:11  NECK IN NECK.
15:32:26  >>  OKAY.
15:32:27  SO YOU CHOSE TO BUILD AN ASYNCHRONOUS SERVICE.
15:32:30  THIS IS A PRETTY COMMON THING THAT COMES UP
15:32:33  VERY QUICKLY WHEN YOU'RE BUILDING A WEB
15:32:36  APPLICATION.
15:32:36  RIGHT?
15:32:36  SO THIS IS A PICTURE OF MINIONS BECAUSE THAT'S
15:32:40  HOW I THINK OF ASYNCHRONOUS SERVICES, AS
15:32:43  AUTOMATED MINIONS GOING OUT AND DOING YOUR
15:32:46  BIDDING BEHIND THE SCENES.
15:32:47  BASICALLY, WHAT HAPPENS IS SOMEONE IS USING
15:32:49  YOUR APPLICATION.
15:32:50  AND WHEN THEY COME IN, THEY MIGHT CLICK A
15:32:52  BUTTON, AND YOUR APPLICATION MIGHT GO CRAWL WEB
15:32:56  DATA.
15:32:56  BUT MAKING CALLS OUT TO THE REST OF THE WEB,
15:32:59  AND GETTING A BUNCH MORE DATA IS ACTUALLY VERY
15:33:02  SLOW, AND YOU DON'T WANT TO BLOCK USER
15:33:04  INTERACTIONS FROM MAKING CALLS OUT TO THE WEB.
15:33:08  SO YOU NEED AN ASYNCHRONOUS TAX SERVICE TO GO
15:33:11  OUT AND DO THIS BEHIND THE SCENES WHILE USERS
15:33:16  CAN GO ON YOUR SITE AND DO A BUNCH OF DIFFERENT
15:33:20  THINGS.
15:33:20  THIS IS A NICE LITTLE DIAGRAM.
15:33:22  BASICALLY, WHAT HAPPENS IS A CLIENT COMES IN,
15:33:24  THEY INITIATE A CALL.
15:33:25  AND RATHER THAN BLOCKING AND SAYING, OKAY,
15:33:27  WE'RE GOING TO ACTUALLY GO OUT, CRAWL THIS WEB
15:33:30  DATA, GET THE INFORMATION THAT YOU WANT, AND
15:33:31  THEN FOUR MINUTES LATER THE BUTTON IS GOING TO
15:33:34  STOP LOADING, AND IT'S GOING TO BE LIKE YOU'RE
15:33:36  DONE BECAUSE YOUR USER WAS GONE AFTER FIVE
15:33:40  SECONDS, THEY'RE NOT GOING TO WAIT FIVE SECONDS
15:33:43  FOR YOU TO DO ALL THESE TASKS BEHIND THE
15:33:45  SCENES.  SO WHAT YOU DO INSTEAD IS YOU SEND A
15:33:49  CALL BACK THAT SAYS, ALL RIGHT, WE'VE RECEIVED
15:33:51  THIS TASK, AND WE'RE DOING IT BEHIND THE
15:33:52  SCENES, LIKE WE'LL LET YOU KNOW WHEN WE HAVE
15:33:55  THE DATA THAT YOU NEED, AND WE'LL SEND YOU A
15:33:57  NOTIFICATION OR AN EMAIL OR WHATEVER IT IS.
15:34:02  THE ASYNCHRONOUS WEB SERVICE BEHIND THE SCENES
15:34:05  HAS QUEUES OF THESE DIFFERENT TASKS, AND THESE
15:34:08  QUEUES RUN AND PROCESS THE TASKS.
15:34:10  USUALLY ASYNCHRONOUS TASKS INVOLVE THINGS LIKE
15:34:13  GOING OUT AND GETTING DATA AND UPDATING THE
15:34:15  DATABASE OR SENDING EMAILS OR DOING NETWORK
15:34:18  INTENSIVE CALLS THAT YOU REALLY JUST DON'T WANT
15:34:19  TO HAVE HAPPEN IN REAL-TIME.
15:34:23  OR SOMETIMES YOU HAVE A WEB CRAWLER IN THE
15:34:25  BACKGROUND WHERE EVERY DAY YOU GO AND UPDATE
15:34:27  INFORMATION.
15:34:28  SO MAYBE EVERY DAY YOU WANT TO GO AND UPDATE
15:34:31  FACEBOOK LIKES EVERY DAY.
15:34:33  OR EVERY DAY YOU WANT TO CRAWL CERTAIN THINGS
15:34:35  TO GET NEWS ABOUT WHAT'S HAPPENING IN THE
15:34:37  WORLD.
15:34:37  AND SO THOSE ARE TIME-INTENSIVE TASKS  WHENEVER
15:34:43  IT GETS TO THESE QUEUES.
15:34:44  A LOT OF TIMES WHEN YOU ARE USING A THIRD-PARTY
15:34:46  SERVICE AND YOU SEND AN EMAIL OR YOU KICK OFF A
15:34:49  TASK AND IT TAKES AN HOUR, THAT'S BECAUSE THE
15:34:52  QUEUES GET BACKED UP IN AN ASYNCHRONOUS
15:34:57  SERVICE.
15:34:57  SO IT GOES TO THIS BLACK BOX, AND THEN AN HOUR
15:35:01  LATER YOUR TASK GETS PROCESSED.
15:35:03  BUT IT'S OKAY.
15:35:04  WHEN IT'S DONE, IT WILL SEND A RESPONSE, AND
15:35:06  YOU CAN NOTIFY THE USER THAT THE DATA IS THERE,
15:35:08  OR THEY WILL GET AN EMAIL OR WHATEVER IT IS
15:35:09  THAT THE TASK WAS DOING.
15:35:11  SO A LOT OF PEOPLE TALK ABOUT CELERY AND
15:35:15  RABBITMQ.
15:35:18  THERE'S ACTUALLY MORE LIGHTWEIGHT TOOLS, SO IF
15:35:20  YOU STARTED WITH ASYNCHRONOUS TASKS FOR THE
15:35:22  VERY FIRST TIME, AND YOU'RE LIKE CELERY AND
15:35:26  RABBITMQ ARE A LOT OF OVERHEAD.
15:35:29  THERE'S A LOT OF DOCUMENTATION TO READ.
15:35:30  THERE'S AN OPTION THAT'S EASIER THAT I REALLY
15:35:32  LIKE FOR GETTING UP AND RUNNING WITH A NEW WEB
15:35:35  APPLICATION, AND YOU CAN USE REDIS OR PYTHON
15:35:39  AQ.
15:35:41  REDIS IS A KEY DATA STORE.
15:35:43  YOU CAN INSTALL IT LOCALLY OR ON YOUR SERVER.
15:35:46  YOU START THE SERVER ON PORT 6739 OR WHATEVER
15:35:50  THE PORT THAT YOU NORMALLY START IT ON.
15:35:53  AND PYTHON RQ, YOU START THE PYTHON RQ TASK
15:35:59  LISTENER AND IN YOUR CODE YOU GO THROUGH AND
15:36:02  ALL YOU DO IS -- IT'S ONE LINE, YOU ENQUEUE
15:36:03  FUNCTION CALLS.
15:36:06  SO LET'S SAY YOU HAVE A FUNCTION THAT'S CRAWL
15:36:08  FACEBOOK DATA.
15:36:10  THIS FUNCTION IS WHAT GOES OUT, DOES THE
15:36:11  NETWORK CALLS TO FACEBOOK, GETS BACK
15:36:13  INFORMATION ABOUT SOMEONE'S PROFILE, THINGS
15:36:16  LIKES THAT.
15:36:17  SO WHEN A USER COMES IN AND SIGNS UP OR DOES
15:36:19  THIS TASK, THE FUNCTION GOES THROUGH.
15:36:21  AND RATHER THAN ACTUALLY MAKING THE CALLOUT TO
15:36:24  FACEBOOK, IT ENQUEUES THIS FUNCTION CALL.
15:36:27  AND IT'S LIKE, ALL RIGHT, STICK THIS IN OUR
15:36:29  PYTHON RQ, AND DO THIS LATER.
15:36:32  AND THEN CONTINUE WITH THE REST OF THIS
15:36:33  FUNCTION, RETURN TO THE USER, AND LET THEM GET
15:36:36  BACK TO THEIR DAILY LIVES.
15:36:37  AND THEN IN THE BACKGROUND PYTHON RQ WAS
15:36:40  LISTENING, AND IT'S LIKE, YEAH, A TASK, AND IT
15:36:43  GOES OUT AND GOES TO FACEBOOK AND RUNS THIS
15:36:46  FUNCTION AND GETS THE DATA AND UPDATES THINGS
15:36:48  AND DOES EXACTLY WHAT YOU TELL IT TO DO IN THIS
15:36:51  FUNCTION BECAUSE YOU'VE WRITTEN THE CODE THAT'S
15:36:53  BEEN EXECUTED, SO WHEN IT'S ALL DONE YOU CAN
15:36:56  SEND EITHER A NOTATION, OR SOMETIMES YOU DO
15:36:59  NOTHING.
15:37:00  BUT IT'S HAPPENING ASYNCHRONOUS.
15:37:02  SO THE USER ISN'T BLOCKED, AND THIS CODE IS
15:37:04  RUNNING IN THE BACKGROUND.
15:37:06  AND PYTHON RQ ALSO HAS A SCHEDULER, SO IF YOU
15:37:08  WANT TO SCHEDULE TASKS TO BE RUN AT A CERTAIN
15:37:11  TIME, WHICH IS ANOTHER COMMON ASYNCHRONOUS USE
15:37:13  CASE, YOU CAN ACTUALLY USE RQ SCHEDULER WITH
15:37:18  PYTHON RQ, AND THEY'RE BOTH PYTHON LIBRARIES
15:37:20  THAT YOU JUST PIP INSTALL.
15:37:26  YOU CAN SCHEDULE IT TO DO TASKS IN THE UI.  AND
15:37:28  I LOVE THESE FOR GETTING STARTED.
15:37:30  WHEN YOU START TO HAVE REALLY BIG ASYNCHRONOUS
15:37:33  SERVICES IN THE BACKGROUND AS IN YOU MIGHT BE
15:37:35  DOING A LOT OF ASYNCHRONOUS TASKS, A LOT OF WEB
15:37:39  CRAWLING, YOU HAVE A LOT OF USERS WANTING TO DO
15:37:42  A LOT OF THINGS WITH YOUR APPLICATION, AND YOU
15:37:44  HAVE TO SCALE THESE SERVICES TO MULTIPLE
15:37:47  SERVERS.
15:37:47  YOU MIGHT START NEEDING MORE ROBUST SOLUTIONS,
15:37:50  BUT THAT WOULD BE AT A PRETTY BIG SCALE, SO
15:37:53  THESE ONES WILL SERVE YOU ALL FOR A VERY, VERY
15:37:55  LONG TIME.
15:37:56  THE DOCS ARE GREAT, AND I AM A HUGE FAN.
15:37:59  ALL RIGHT.
15:37:59  YOU'VE SET UP A BASIC ASYNCHRONOUS SERVICE.
15:38:02  TASKS ARE RUNS IN THE BACKGROUND.
15:38:05  YOU'RE SUPER EXCITED.
15:38:06  NOW, DID YOU -- NO.
15:38:11  YEAH.
15:38:12  I'M REALLY GOOD AT USING TECHNOLOGY.
15:38:14  I DON'T WANT TO BRAG OR ANYTHING.
15:38:16  >> SO NOW THE QUESTION IS WE'VE AUTOMATED OUR
15:38:19  DEPLOYMENTS, WE'RE HANDLING ASYNCHRONOUS TASKS,
15:38:22  BUT WE'RE RUNNING OUT OF MONEY.
15:38:25  WE HAVE TWO BIG PROBLEMS.
15:38:26  WE'RE RUNNING OUT OF MONEY, AND SO WE'RE
15:38:29  THINKING ABOUT HAVING TO GO TO VCS, AND THEY'RE
15:38:31  GOING TO ASK ABOUT TRACTION.
15:38:33  THEY'RE GOING TO WANT PRETTY GRAPHS LIKE THIS.
15:38:36  BUT THE OTHER PROBLEM IS WE'VE GOT HACKERS THAT
15:38:40  ARE TRYING TO BREAK INTO OUR SYSTEM.
15:38:42  SO THE QUESTION IS HOW DO WE HANDLE THAT.
15:38:44  DO WE FIRST GO TO THE VCS FOR MONEY, OR DO WE
15:38:48  TRY TO HANDLE OUR SECURITY ISSUES FIRST?
15:38:50  THE CHOICE IS UP TO YOU.
15:38:51  SO THIS IS J.MP/TRACK, TRAC-SAC SECURITY.
15:39:14  ALL RIGHT.
15:39:15  LOOKS LIKE SECURITY HAS DOUBLE THE VOTES, SO
15:39:17  WE'RE GOING TO GO WITH SECURITY.
15:39:27  HAVE SOME MAJOR SECURITY CONCERNS RIGHT NOW.
15:39:31  WE'RE LOGGING IN AS ROOT.
15:39:33  WE'RE USING A PASSWORD.
15:39:34  WE HAVEN'T SET UP ANY SORT OF PUBLIC/PRIVATE
15:39:37  KEY IN ORDER TO LOG IN.
15:39:40  AND THESE GUYS ARE COMING [INAUDIBLE].
15:39:49  WE'RE NOT EVEN GOING TO ADDRESS THE ISSUES THAT
15:39:51  MAY BE OCCURRING FROM AN APPLICATION LEVEL.
15:39:53  WE'RE SIMPLY GOING TO DO SOME VERY BASIC
15:39:56  UPDATES TO THE WEB SERVER -- TO THE SERVER
15:39:59  ITSELF.
15:39:59  FIRST OFF, NO ROOT LOGIN.
15:40:02  WE WANT SSH KEY LOGINS ONLY, AND WE'RE GOING TO
15:40:06  INSTALL TWO PASSAGES, FAIL DEBAND AND TWO
15:40:09  UNINTENDED UPGRADES.
15:40:12  HERE'S HOW WE DO THAT.
15:40:13  LOG INTO THE MACHINE.
15:40:15  WE SHH BACK INTO THE MACHINE.
15:40:16  THIS ISN'T SOMETHING WE'VE AUTOMATED, AND WE DO
15:40:18  A GROUP ADD FOR EMPLOYERS.
15:40:20  WE THEN ADD WITH THE SECOND COMMAND, WE OPEN UP
15:40:24  SUDOERS.
15:40:25  WE SHOULD COPY THE SUDOERS FILE.
15:40:33  SO THAT WOULD BE A DEPLOYERS.
15:40:37  DEPLOYERS EQUALS ALL.
15:40:38  ANY USER IN THE DEPLOYERS GROUP WOULD HAVE SUDO
15:40:41  PRIVILEGES, SO WE'RE NOT GOING TO DRAG IN AS
15:40:45  ROOT ANYMORE.
15:40:45  WE'RE GOING TO LOG IN AS A USER IN THE
15:40:49  DEPLOYER'S GROUP SO WE CAN THEN USE SUDO
15:40:52  COMMANDS.
15:40:52  WE WOULD ADD A USER CALLED DEPLOYER.
15:40:55  WE WOULD SET THE PASSWORD OF DEPLOYER, AND THEN
15:40:59  WE WOULD CHANGE THE USER TO BE A PART OF THE
15:41:01  DEPLOYER'S GROUP.
15:41:02  MAKE A DIRECTORY, A DOT SHH DIRECTORY FOR THE
15:41:05  DEPLOYER.
15:41:06  CHANGE THE OWNERSHIP OF THAT DIRECTORY BECAUSE
15:41:09  WE'RE CURRENTLY AS GROUP RIGHT NOW.
15:41:11  SO WE HAVE TO CHANGE THE OWNERSHIP OF THE
15:41:13  DEPLOYER HOME DIRECTORY AND THE .SHH DIRECTORY
15:41:17  TO BE UNDER DEPLOYER AND DEPLOYER FOR THE USERS
15:41:22  OF THE GROUP.
15:41:23  WE WOULD EDIT THE SHH D CONFIGURATION AND
15:41:26  CHANGE TWO LINES.
15:41:28  LET'S SAY WE'RE ON UBUNTU RIGHT NOW.
15:41:34  WE WOULD NOT DO PASSWORD AUTHENTICATION.
15:41:38  A PUBLIC/PRIVATE KEY USING THE SHH KEY GEN.
15:41:43  WE COPY OUR PUBLIC KEY TO BE AN AUTHORIZED KEY,
15:41:47  AND THEN WE SCP FROM OUR LOCAL SYSTEM ON TO A
15:41:51  REMOTE SYSTEM THE THREE FILES THAT WE
15:41:53  CREATED -- OR THE PUBLIC KEY AND THE AUTHORIZED
15:41:55  KEY.
15:41:59  AND THEN WE INSTALL FAIL DEMAND.
15:42:02  SO WE WOULD DO A SUDO APP GET FAIL DEMAND,
15:42:05  INSTALL UPGRADES, AND CONFIG UNINTENDED
15:42:08  UPGRADES, WHICH WOULD INSTALL SECURITY UPDATES
15:42:12  AUTOMATICALLY FOR ANY PACKAGES THAT WE HAVE
15:42:14  INSTALLED ON OUR SYSTEM AND FAIL DEBAND WOULD
15:42:17  PREVENT MANY ATTEMPTED USER LOGINS,
15:42:20  UNAUTHORIZED USER LOGINS.
15:42:24  THE SCRIPT KITTIES FOR NOW.
15:42:26  SO THE QUESTION IS WE'VE GOT ONE MORE CHOICE
15:42:27  HERE.
15:42:30  DO WE HAVE PROBLEMS WITH SCALING THAT WE NEED
15:42:32  TO FIGURE OUT, OR DID WE DELETE ALL OF OUR
15:42:35  DATA, AND NOW WE HAVE TO FIGURE OUT HOW TO
15:42:36  HANDLE THAT?
15:42:38  THE CHOICE IS UP TO YOU.
15:42:39  SO THIS IS J.MP/SCALE-DATA.
15:42:58  DATA IS CATCHING UP.
15:42:59  NECK IN NECK.
15:43:08  SCALING OR DATA?
15:43:14  >>  ALL RIGHT.
15:43:14  LET'S GO WITH DATA.
15:43:17  I'M JUST GOING TO CALL IT AND GO WITH DATA.
15:43:19  ALL RIGHT.
15:43:22  SO YOU HAVE MISSING DATA.
15:43:24  AND THE BACKGROUND STORY TO THIS IS IT'S
15:43:27  SOMETHING LIKE WHAT MY BROTHER DID AT HIS FIRST
15:43:29  INTERNSHIP.
15:43:30  HE WORKED AT TRILIO WHEN THEY WERE REALLY
15:43:32  SMALL, AND HE GETS THIS, AND, YOU KNOW, THEY
15:43:34  GIVE HIM ACCESS TO EVERYTHING.
15:43:36  HE'S A 19-YEAR-OLD INTERN.
15:43:38  HE'S TAKING TWO PROGRAMMING CLASSES AT THE
15:43:40  TIME.
15:43:40  AND HE GETS IN THERE, AND HE'S DOING SOMETHING
15:43:42  IN THE DATABASE, AND HE GOES DELETE STAR FROM
15:43:45  USERS, AND THEN HE ACCIDENTALLY HITS ENTER.
15:43:49  THAT'S WHY YOU DON'T GIVE PEOPLE READ/WRITE
15:43:52  PERMISSION FROM YOUR DATABASE.
15:43:54  SO MY BROTHER DELETED THE ENTIRE USER TABLE ON
15:43:59  HIS FIRST DAY OF INTERNSHIP.
15:44:02  THEY HAD TO RESTORE IT WHICH THEY ONLY COULD DO
15:44:03  BECAUSE THEY HAD BACKUPS OF THEIR DATA.
15:44:12  YOU NEVER WANT TO HAVE A SINGLE POINT OF
15:44:14  FAILURE.
15:44:15  YOUR DATA IS REALLY IMPORTANT, AND YOU ALWAYS
15:44:17  WANT TO BE ABLE TO RESTORE IT.
15:44:19  YOU WANT TO BE ABLE TO DEAL WITH A PROBLEM IF
15:44:21  YOUR MASTER DATABASE GOES DOWN.
15:44:23  I DIDN'T HAVE TIME TO FIX THIS, BUT THERE IS A
15:44:25  BIG MOVEMENT TO NOT CALL THEM MASTER SLAVES, TO
15:44:28  CALL THEM MASTER MIRRORS AND THINGS LIKE THAT,
15:44:30  WHICH I'M TOTALLY ON BOARD WITH.
15:44:32  SO REPLACE THAT WITH MIRROR OR REPLICATION
15:44:36  DATABASE, BUT THE BASIC IDEA IS THE SAME.
15:44:38  YOU HAVE ONE MASTER DATABASE, AND THAT IS WHERE
15:44:40  ALL OF THE RIGHTS IN YOUR SYSTEM GO.
15:44:41  SO WHENEVER SOMEONE -- ANY USER COMES IN, AND
15:44:46  THEY WRITE DATA OR YOUR ASYNCHRONOUS TAX
15:44:50  SERVICE WRITES DATA, IT ALL WRITES IT TO THE
15:44:53  MASTER DATABASE, THE MIRROR DATABASES, AND YOU
15:44:55  CAN HAVE AS MANY OF THESE AS YOU WANT GET
15:44:58  WRITTEN TO FROM THE MASTER DATABASE.
15:45:00  SO DATA COMES INTO THE MASTER, AND THEN IT GETS
15:45:03  WRITTEN TO THE NEXT MIRROR AND GETS WRITTEN TO
15:45:06  THE NEXT MIRROR AND SO ON.
15:45:08  SO YOU HAVE THESE ROBUST BACKUPS OF YOUR DATA
15:45:10  AND IN FACT CLIENTS CAN COME IN AND READ FROM
15:45:12  THE MIRROR DATABASES, THEY JUST CAN'T WRITE TO
15:45:15  THEM.
15:45:15  HAD ANOTHER CO-WORKER DO THIS WHERE HE ONE TIME
15:45:19  LOGGED INTO PRODUCTION AND ALTERED DATA ON A
15:45:22  PRODUCTION READ-ONLY MIRROR.
15:45:24  NOT RECOMMENDED.
15:45:29  IT TOTALLY BREAKS REPLICATION.
15:45:31  IF THE MASTER FAILS.
15:45:32  YOU CAN GO OUT TO ANY ONE OF THE MIRROR
15:45:35  DATABASES WHICH IS A GREAT SYSTEM.
15:45:36  YOU ALSO HAVE MORE DATABASES TO READ FROM SO
15:45:40  YOU CAN SPREAD OUT THE LOAD.
15:45:41  THIS IS THE MASTER MIRROR SYSTEM.
15:45:43  THE SECOND SYSTEM IS THE MULTI-MASTER SYSTEM.
15:45:46  SO IN THIS SYSTEM, EVERY DATABASE IS A MASTER.
15:45:49  EVERY DATABASE CAN BE WRITTEN TO.
15:45:51  AND THEN THOSE RIGHTS GET REPLICATED ACROSS THE
15:45:54  OTHER DATABASES.
15:45:55  NOW, MOST PEOPLE, MOST COMPANIES GO WITH THE
15:45:59  MASTER MIRROR SYSTEM BECAUSE IT'S SIMPLER TO
15:46:02  IMPLEMENT.
15:46:03  THE MULTI-MASTER SYSTEM HAS SOME ADVANTAGES.
15:46:05  YOU CAN READ AND WRITE TO ANY DATABASE, BUT IT
15:46:07  HAS SOME CHALLENGES, WHICH IS THAT DEALING WITH
15:46:12  COLLISIONS, DATA COLLISIONS ACROSS DIFFERENT
15:46:15  DATABASES CAN GET VERY COMPLICATED, ESPECIALLY
15:46:17  AS YOU SCALE AND ESPECIALLY AS YOU HAVE MORE
15:46:20  MULTI-MASTER DATABASES.
15:46:22  RIGHT?
15:46:23  SO YOU CAN DO EITHER ONE OF THESE.
15:46:24  THEY BOTH INVOLVE SETTING UP A SYSTEM WHERE YOU
15:46:27  HAVE MULTIPLE DATABASES.
15:46:28  NO SINGLE POINT OF FAILURE.
15:46:30  AND BACKUPS OF YOUR DATA.
15:46:31  SO THAT ONE OF YOUR DATABASES GOES DOWN, YOU'RE
15:46:34  LIKE, THAT'S FINE.
15:46:35  WE HAVE ANOTHER DATABASE.
15:46:38  THE SITE IS NOT GOING TO GO DOWN.
15:46:40  WE'RE NOT GOING TO DIE.
15:46:41  YOU'RE STILL GOING TO BE THERE ALL NIGHT
15:46:43  TERRIFIED OF WHATEVER IT IS THAT'S GOING ON
15:46:45  THAT MADE YOUR MASTER DATABASE GO DOWN, BUT YOU
15:46:47  HAVE A BACKUP.
15:46:48  AND THEN THE FINAL THING THAT YOU SHOULD DO
15:46:50  THAT COMPANIES ALSO DO IS THEY HAVE CONSTANT
15:46:53  BASICALLY BACKUPS OF ALL OF THE DATA.
15:46:55  SO EVERY TIME DATA IS WRITTEN TO A DATABASE,
15:46:58  THERE'S A TRANSACTION LOG.
15:47:00  THOSE CAN GET BACKED UP.
15:47:02  THOSE CAN GET COPIED TO A THIRD-PARTY STORAGE
15:47:05  SYSTEM SO THAT WHEN YOU GO TO -- IF YOU DELETE
15:47:07  A BUNCH OF DATA LIKE MY BROTHER DID, EITHER YOU
15:47:10  CAN CHANGE OVER THE MASTER AND SAY, OKAY, THIS
15:47:14  DATABASE IS TOTALLY RUINED, OR YOU CAN GET THE
15:47:16  BACKUP LOGS AND RESTORE THE DATA FROM THERE.
15:47:18  SO THERE'S A COUPLE DIFFERENT OPTIONS.
15:47:20  YOU SHOULD DO BOTH.
15:47:21  YOU SHOULD HAVE MULTIPLE DATABASES SO THERE'S
15:47:24  NO SINGLE POINT OF FAILURE, AND YOU SHOULD ALSO
15:47:26  HAVE COPIES OF YOUR DATABASES JUST BEING LOGGED
15:47:28  TO A THIRD-PARTY SYSTEM.
15:47:29  AND YOU GENERALLY USE A THIRD-PARTY SYSTEM FOR
15:47:32  THOSE BACKUPS BECAUSE THE DATA GETS REALLY
15:47:34  LARGE.
15:47:35  IF YOU'RE CONSTANTLY BACKING UP YOUR DATABASE
15:47:37  AND YOU'RE CONSTANTLY BACKING UP ALL OF YOUR
15:47:40  DATA, IT'S LIKE A MASTER SCALE THING AS YOU GET
15:47:43  MORE USERS AND MORE INFORMATION.
15:47:44  SO THERE ARE THIRD PARTY [INAUDIBLE].
15:47:52  ALL RIGHT.
15:47:53  YOUR DATA IS SAFE FOR NOW IF ONE OF YOUR
15:47:55  DATABASES GETS KILLED OR SOMETHING BAD HAPPENS.
15:47:57  YOU HAVE A FAILOVER SYSTEM.
15:47:59  BUT NOW --
15:48:01  >>  ALL RIGHT.
15:48:02  WE'VE PUT IT OFF AS LONG AS WE COULD.
15:48:04  BUT WE HAVE TO GO TO THE VENTURE CAPITALISTS
15:48:08  FOR ADDITIONAL FUNDING.
15:48:09  WE NEED TO RAISE MONEY TO CONTINUE OUR
15:48:11  APPLICATION.
15:48:14  >>  THOSE DACHSHUNDS ARE REALLY EXPENSIVE.
15:48:18  >>  DACHSHUNDS ARE REALLY EXPENSIVE.
15:48:19  WE HAVE ONE MORE CHOICE WE NEED YOU TO MAKE.
15:48:22  SO YOU GO AROUND, YOU DO THE TWO-WEEK, NON-STOP
15:48:25  TOUR OF 40 DIFFERENT VCS.
15:48:29  PUSHING YOUR DOC SEND DELIVERY SERVICE OVER AND
15:48:32  OVER AGAIN.
15:48:34  THE QUESTION IS DO WE ACCEPT OR REJECT THE
15:48:37  MONEY FROM VCS?
15:48:41  SO THIS IS THE FINAL QUESTION FOR THE AUDIENCE
15:48:44  SO WE CAN TEST, ACCEPT OR REJECT OR GO TO
15:48:48  J.MP/VC DOLLARS.
15:48:53  ACCEPT OR REJECT.
15:48:54  >>  JUST KNOW THAT YOUR VCS CAN TELL YOU TO
15:48:57  BUILD TOOLS FOR CUSTOMERS AND DO ONE-OFF THINGS
15:49:00  AND -- GENERALLY --
15:49:02  >>  WE KNOW WE LOSE THE CONTROL OF YOUR
15:49:05  APPLICATION IF WE ACCEPT THE FUNDING.
15:49:06  >>  BUT YOU ALSO GET A LOT OF MONEY, AND YOU
15:49:07  CAN BUY PING-PONG TABLES AND SNACKS.
15:49:10  A LOT OF SNACKS.
15:49:16  I LOVE THE OPEN SOURCE CROWD.
15:49:18  EVERYONE IS LIKE REJECT.
15:49:19  REJECT IT.
15:49:25  ALL RIGHT.
15:49:25  SO FUNDING IS REJECTED.
15:49:28  GOOD CHOICE.
15:49:29  THOSE GUYS ARE -- THEY WERE KIND OF JERKS
15:49:32  ANYWAYS.
15:49:33  >> SO WE'VE REJECTED THE VC MONEY.
15:49:36  WE STUCK TO OUR GUNS, AND WE DECIDED WE'RE
15:49:38  GOING TO SCRAPE BY FOR AS LONG AS WE CAN.
15:49:42  IT TURNED OUT TO BE A REALLY GOOD CHOICE.
15:49:44  WE WERE ABLE TO IMPROVE OUR CASH FLOW, OUR
15:49:46  SERVICE, AND EVENTUALLY, WE STRUCK RICHES.
15:49:49  AND WE STILL OWN THE COMPANY.
15:49:52  >>  BOOTSTRAPPING FOR THE WIN.
15:49:54  >> MASSIVE FUNDING FLOWS THROUGH YOUR COFFERS.
15:49:58  YOU'RE A GREAT SUCCESS.
15:49:59  BUT THE QUESTION IS IS IT ALL JUST A BUBBLE.
15:50:03  SO THIS IS OUR VERSION OF THE CHOOSE YOUR OWN
15:50:05  ADVENTURE STORY.
15:50:06  ALL OF THIS CODE, THIS IS A FLASK APPLICATION
15:50:08  THAT IS RUNNING WHICH ACCEPTS SMS INPUT AND HAS
15:50:13  WEB BROWSER VOTING.
15:50:15  SO YOU CAN GO AND DO YOUR OWN VERSION OF THE
15:50:18  CHOOSE YOUR OWN ADVENTURE STORY.
15:50:20  IT'S AN OPEN SOURCE FLASK APPLICATION ON
15:50:23  GITHUB.
15:50:24  AND IF YOU ARE INTERESTED IN THE CODE AND
15:50:26  TUTORIALS THAT SHOW YOU HOW YOU CAN BUILD AN
15:50:29  APPLICATION LIKE THIS AND ADD MORE
15:50:32  FUNCTIONALITY AND CREATE YOUR OWN, GO TO THIS
15:50:34  LINK J.MP/PYCON/CIA.
15:50:43  IT WILL GIVE YOU A LINK TO OUR BLOG POST AND
15:50:47  OTHER BLOG POSTS THAT YOU LEARN FROM THERE.
15:50:54  WE REALLY APPRECIATE YOU PARTICIPATING IN OUR
15:50:57  STORY TODAY.
15:50:57  THANK YOU.
15:50:58  [ APPLAUSE ]
15:51:07  WE HAVE A LITTLE BIT OF TIME LEFT.
15:51:09  IF ANYONE HAS QUESTIONS, YOU'RE WELCOME TO -- I
15:51:11  DON'T KNOW IF THERE'S A MICROPHONE OR YOU CAN
15:51:14  JUST STAND UP AND -- YEAH, THERE'S A MICROPHONE
15:51:16  IN THE MIDDLE BACK.
15:51:17  I CAN SEE IT NOW.
15:51:18  SO YOU'RE WELCOME TO ASK QUESTIONS.
15:51:19  IF YOU WANT TO COME AND ASK US QUESTIONS LATER,
15:51:22  TOO, WE'LL BE OUTSIDE IN THE HALLWAY.
15:51:24  YEAH.
15:51:24  THAT'S ABOUT IT.
15:51:29  >>  AUDIENCE:  SO YOU TALKED ABOUT HAVING
15:51:30  ASYNCHRONOUS QUEUE, AND IT'S ACTUALLY VERY HARD
15:51:33  TO DEBUG IT, TO TEST IT FOR PROBLEMS.
15:51:36  DO YOU HAVE ANY RECOMMENDATIONS FOR HOW TO GET
15:51:38  THAT PART OF THE APPLICATION CORRECT?
15:51:39  >>  TESTING YOUR ASYNCHRONOUS CODE?
15:51:43  SO WE DIDN'T TALK A TON ABOUT TESTING IN HERE,
15:51:46  BUT I MEAN I HOPE EVERYONE KNOWS THAT TESTING
15:51:48  IS A REALLY GOOD THING, AND THERE'S A LOT OF
15:51:50  TOOLS OUT THERE FOR CONTINUOUS INTEGRATION THAT
15:51:53  WILL RUN YOUR TESTS WHEN YOU MERGE CODE INTO
15:51:56  GITHUB.
15:51:57  BUT TESTING ASYNCHRONOUS CODE, YOU'RE RIGHT, IS
15:52:00  VERY DIFFICULT BECAUSE IF YOU'RE TESTING A
15:52:02  FUNCTION THAT HAS AN ASYNCHRONOUS CALL, YOU'RE
15:52:04  NOT ACTUALLY WAITING FOR THAT CALL TO COMPLETE.
15:52:07  THERE'S A TALK GOING ON RIGHT NOW THAT YOU
15:52:10  SHOULD WATCH THE VIDEO OF WHERE SOMEONE IS
15:52:12  GIVING A TALK ON TESTING ASYNCHRONOUS CODE.
15:52:16  AND THAT IS WHERE I WOULD POINT YOU, BASICALLY,
15:52:19  WHICH IS JUST TOOLS FOR TESTING THESE TYPES OF
15:52:21  THINGS.
15:52:22  AND THERE'S A BUNCH OF THINGS YOU CAN DO.
15:52:24  YOU CAN MOCK CODE.
15:52:25  YOU KNOW, YOU CAN TRY TO TEST DATABASE BUT
15:52:29  THAT'S GOING TO BE REALLY HARD.
15:52:30  SO SOMETIMES YOU CAN JUST TEST TO MAKE SURE
15:52:32  THAT THE NETWORK CALLS EITHER CALL OR FAIL
15:52:35  APPROPRIATELY.
15:52:35  THINGS LIKE THAT.
15:52:36  IT CAN GET VERY COMPLICATED.
15:52:38  SO I'M GOING TO POINT YOU TO THAT TALK AND YOU
15:52:40  SHOULD GO WATCH THAT.
15:52:41  >>  AUDIENCE:  THANK YOU.
15:52:43  HEY.
15:52:44  SO I REALLY ENJOYED THIS TALK.
15:52:46  I REALLY LIKED THE FORMAT.
15:52:48  ONE OF THE REASONS WHY I WAS A BAD KID WHEN I
15:52:50  WAS GROWING UP WAS BECAUSE WHEN I READ A CHOOSE
15:52:53  YOUR OWN ADVENTURE BOOK I WOULD ALWAYS LOOK AT
15:52:56  ALL THE OTHER OUTCOMES.
15:52:57  ARE THESE SLIDES ONLINE SO I CAN SEE ALL THE
15:52:59  PATHS WE DIDN'T TAKE TODAY?
15:53:01  >>  THEY ARE NOT.
15:53:01  >>  AUDIENCE:  OH, WILL YOU PUT THEM ONLINE?
15:53:04  >>  I WILL CERTAINLY CONSIDER PUTTING THEM
15:53:07  ONLINE, YEAH.
15:53:09  I WILL POST A LINK TO IT ON THE BLOG POST THAT
15:53:14  I PUT UP.
15:53:15  >>  AUDIENCE:  COOL.
15:53:16  THANK YOU.
15:53:25  COOL.  THANK YOU ALL VERY MUCH FOR COMING OUT.
15:53:30  >> KATE:  HAVE A GOOD AFTERNOON, EVERYONE.











