          041115517CCMYERS

16:10:05  >>  HI.
16:10:05  I'D LIKE TO INTRODUCE THE NEXT SPEAKER.
16:10:07  IT'S COLTON MYERS FROM SALTSTACK TALKING
16:10:10  ABOUT HOW TO MANAGE YOUR INFRASTRUCTURE WITH
16:10:13  SALTSTACK.
16:10:19  [ APPLAUSE ]
16:10:20  >> ALL RIGHT.
16:10:22  IT'S LATE IN THE DAY HERE.
16:10:24  IT LOOKS LIKE WE'VE LOST A BUNCH OF PEOPLE
16:10:28  BETWEEN THE LAST TALK AND THIS ONE.
16:10:30  BUT OH, WELL.
16:10:31  MY NAME IS COLTON MYERS.
16:10:34  I'M A PLATFORM ENGINEER FROM SALTSTACK.
16:10:37  I'VE WORKED THERE FOR A NUMBER OF YEARS AND
16:10:38  HAVE BEEN INVOLVED IN SALT DEVELOPMENT FOR
16:10:40  ALL THAT TIME.
16:10:41  REALLY QUICK BEFORE WE JUMP INTO THE ACTUAL
16:10:44  CONTENT, JUST A QUICK PLUG FOR MY BOOK.
16:10:46  IT WAS JUST PUBLISHED.
16:10:47  THIS TALK IS GOING TO BE KIND OF A LEARNING
16:10:53  SALTSTACK LIGHT.
16:10:53  WE'RE GOING TO TALK A LOT ABOUT THE CONTENT
16:10:57  THAT'S IN THE BOOK AND VERY QUICKLY BECAUSE
16:10:59  THIS IS ONLY A 30-MINUTE TALK.
16:11:02  SO LET'S GET TO IT.
16:11:03  WHAT IS SALTSTACK?
16:11:04  IF YOU'RE HERE, YOU PROBABLY HAVE AT LEAST A
16:11:06  LITTLE BIT OF AN IDEA.
16:11:07  MAYBE YOU'VE COME AND TALKED TO US AT OUR
16:11:10  BOOTH DURING THE CONFERENCE.
16:11:15  SALTSTACK IS FAST COMMUNICATION.
16:11:16  THAT'S WHAT EVERYTHING IS BUILT UPON.
16:11:18  IN FACT, WHEN SALTSTACK WAS FIRST STARTED AS
16:11:21  A PROJECT, IT WAS ONLY INTENDED FOR REMOTE
16:11:24  EXECUTION.
16:11:25  ON TOP OF THAT FAST COMMUNICATION, WE'VE BEEN
16:11:27  ABLE TO BUILD A WHOLE PLATFORM OF OTHER
16:11:31  PIECES.
16:11:31  MORE EXECUTION IS WHERE IT STARTED, AND THEN
16:11:33  CONFIGURATION MANAGEMENT IS PROBABLY WHAT
16:11:35  WE'RE BEST KNOWN FOR.
16:11:37  WE ALSO CAN DO AUTOMATION [INAUDIBLE].
16:11:45  AND IT'S ALL WRITTEN IN -- [INAUDIBLE] THAT
16:11:48  YOU NEED IT FOR.
16:11:51  IT'S COMPLETELY OPEN SOURCE.
16:11:54  THIS IS AWESOME.
16:11:55  I GET PAID TO WRITE OPEN SOURCE SOFTWARE,
16:11:57  WHICH IT DOESN'T GET MUCH BETTER THAN THAT.
16:11:59  THE NEXT QUESTION THAT USUALLY PROMPTS IS,
16:12:03  WELL, HOW DO YOU GUYS MAKE MONEY.
16:12:05  IS IT JUST TRAINING, IS IT JUST SERVICES.
16:12:07  AND THE METAPHOR THAT WE LIKE TO USE IS CAR
16:12:10  PARTS.
16:12:11  SO SALT OPEN SOURCE HAS ALL OF THE THINGS
16:12:14  THAT YOU NEED TO BUILD WHATEVER YOU WANT TO
16:12:16  BUILD WITH IT.
16:12:18  EVERYTHING IS THERE.
16:12:18  WE DON'T HOLD ANYTHING BACK.
16:12:20  IT'S ALL COMPLETELY OPEN SOURCE.
16:12:22  WITH THOSE PIECES, WE BUILD SALTSTACK
16:12:25  ENTERPRISE, WHICH IS THE FINISHED CAR, THE
16:12:28  FINISHED PACKAGE.
16:12:30  AND SO IF YOU'RE INTERESTED IN LEARNING MORE
16:12:31  ABOUT THAT, THEN HEAD TO
16:12:33  SALTSTACK.COM/ENTERPRISE.
16:12:36  THAT'S ALL I'M GOING TO SAY ABOUT THAT.
16:12:38  WITH THAT, WE'RE GOING TO JUMP INTO A DEMO,
16:12:40  AND WE'RE GOING TO HOPE IT WORKS.  THE
16:13:00  MINIONS ARE ALREADY CONNECTED TO THE MASTER.
16:13:03  THE MASTER IS THE SERVER FOR WHICH YOU'RE
16:13:04  CONTROLLING ALL OF YOUR HOSTS AND THE MINION
16:13:07  IS [INAUDIBLE] CONTROLLING.
16:13:10  SO THE MASTERS CONTROL MINIONS.
16:13:15  SO CONNECTED TO THIS MASTER, I HAVE -- LET'S
16:13:17  RUN OUR FIRST COMMAND HERE.
16:13:19  WE'RE GOING TO PING ALL OF OUR AVAILABLE
16:13:21  MINIONS.
16:13:21  AS YOU CAN SEE, THERE ARE FOUR MINIONS.
16:13:23  THAT'S THE [INAUDIBLE] AND THREE OTHER
16:13:25  MINIONS, AND THAT'S ALMOST GETTING CUT OFF.
16:13:31  ACTUALLY, I THINK IT WILL BE OKAY.
16:13:33  SO WE HAVE THREE OTHER MINIONS THAT ARE
16:13:37  SEPARATE FROM OUR MASTER THAT ARE CONNECTED
16:13:40  AS WELL.
16:13:43  THE STEPS FOR INSTALLATION OF SALT AND
16:13:45  CONNECTING THE MINION TO THE MASTER ARE
16:13:47  REALLY STRAIGHTFORWARD.
16:13:49  IF YOU GO TO DOCSTAT.COM, THERE'S AN
16:13:52  INSTALLATION PAGE RIGHT THERE.
16:13:54  AND YOU CAN GET THAT DONE.
16:13:54  I SKIPPED ALL THAT IN THE INTEREST OF TIME SO
16:13:56  WE CAN SEE.
16:14:07  SO WE CAN SEE THAT WE'VE CONNECTED.
16:14:09  MINIONS -- [INAUDIBLE] WE'VE ALREADY
16:14:11  PRE-ACCEPTED THESE FOUR MINIONS.
16:14:12  IF WE WERE TO BRING UP NEW MINIONS AND HAVE
16:14:14  THEM CONNECT, THEY WOULD BE UNDER UNACCEPTED
16:14:17  KEYS, AND HE WOULD HAVE TO ACCEPT THEM USING
16:14:21  SALT-A TO ACCEPT THE KEYS.
16:14:24  THAT'S A QUICK RUNDOWN WHERE YOU MIGHT GET TO
16:14:27  THE POINT WHERE WE ARE.
16:14:29  LET'S TALK ABOUT OUR FIRST COMMANDS.
16:14:31  SO INSIDE A SALTSTACK -- I JUST REALIZED --
16:14:45  WHICH IS JUST FANTASTIC.
16:14:49  THIS IS WHAT I GET FOR DEMOING.
16:14:51  HUH?
16:15:01  SO WHAT I'M DOING IS I'M FETCHING SOME
16:15:03  MATERIALS THAT I'M GOING TO BE USING LATER.
16:15:14  SO I JUST FETCHED SOME MATERIALS THAT I'M
16:15:17  GOING TO USE LATER AND STUCK THEM IN THE
16:15:20  DIRECTORY ON MY MASTERS.
16:15:24  SO OUR FIRST COMMAND WAS SALTSTACK TEST.PING.
16:15:30  THERE ARE A COUPLE DIFFERENT PIECES OF THIS
16:15:32  COMMAND THAT YOU SHOULD BE AWARE OF.
16:15:33  SALT IS THE BINARY FROM WHICH YOU CALL ALL OF
16:15:37  THESE COMMANDS.
16:15:38  IF WE DO SALT-H, WE CAN SEE HELP TEXTS AND
16:15:43  ALL THE DIFFERENT OPTIONS THAT WE HAVE
16:15:44  AVAILABLE TO US.
16:15:45  AND IT'S JUST A LITTLE BIT TOO BIG.
16:15:47  THERE WE GO.
16:15:48  THAT'S BETTER.
16:15:48  OKAY.
16:15:48  AND I'M NOT GOING TO TALK ABOUT A LOT OF THE
16:15:52  OPTIONS.
16:15:52  THEY'RE PRETTY SELF-EXPLANATORY.
16:15:54  THERE'S SOME GOOD DOCUMENTATION HERE.
16:15:56  YOU CAN SEVER LOG LEVELS, TIME OUTS,
16:16:00  ET CETERA, ET CETERA.
16:16:01  SO IN THIS PARTICULAR COMMAND, I'M NOT
16:16:02  ACTUALLY USING ANY OF THESE, BUT I MIGHT HAVE
16:16:04  A DASH V FOR VERBOSE OR WHATEVER.
16:16:07  LET'S BRING THAT UP TO THE TOP.
16:16:10  ALL RIGHT.
16:16:10  SO AFTER OUR COMMAND LINE OPTIONS, WE HAVE
16:16:17  THIS STAR.
16:16:18  AND THIS IS AN EXAMPLE OF A TARGETING STRING.
16:16:20  SO WE NEED TO BE ABLE TO TELL SALT WHICH
16:16:23  MINIONS IT'S ACTUALLY GOING TO BE CONNECTING
16:16:25  TO AND RUNNING THESE COMMANDS ON.  AND SO
16:16:27  RIGHT NOW I'M RUNNING STAR, AND I NEED TO PUT
16:16:29  IT IN QUOTES; OTHERWISE BASH WILL TRY TO
16:16:37  CONSUME IT AS A BLOB.
16:16:39  STAR MEANS EVERYTHING.
16:16:40  AND THEN I'M GOING TO TALK ABOUT TARGETING
16:16:43  LATER.
16:16:44  WE HAVE THE FUNCTION WHICH WE'RE ACTUALLY
16:16:46  RUNNING, AND THIS IS JUST A REMOTE EXECUTION
16:16:49  MODULE FUNCTION.
16:16:50  IF YOU LOOK IN THE SOURCE CODE FOR SALT, IT'S
16:16:52  IN SALT/MODULES, AND THIS IS GOING TO BE THE
16:16:56  TEST MODULE WITH THE PING FUNCTION WITHIN IT.
16:17:00  AND ALL THIS DOES IS RETURN TRUE.
16:17:01  AND WE'RE GOING TO ACTUALLY LOOK AT THAT A
16:17:03  LITTLE BIT.
16:17:04  IF WE HAD A FUNCTION WHICH TAKES ARGUMENTS,
16:17:06  WE WOULD ALSO HAVE ARGUMENTS ON THE END OF
16:17:09  HERE.
16:17:09  SO TEST.OKAY CODE HELLO, AND ALL OF OUR
16:17:13  MINIONS SAY HELLO.
16:17:17  THE REALLY COOL THING ABOUT SALT -- OR ONE OF
16:17:19  THE REALLY COOL THINGS IS THAT IT IS SELF
16:17:21  DOCUMENTING.
16:17:22  SO WE HAVE A MODULE CALLID SYS, WHICH ALLOWS
16:17:30  YOU TO SEE WHAT WE HAVE AVAILABLE TO US.
16:17:32  IF I DO SYS.MODULES, THERE IT GOES.
16:17:39  WE CAN SEE THE MODULES LOADED ON OUR MINIONS,
16:17:42  AND THERE ARE A TON OF THEM.
16:17:43  AND THIS LIST IS NOT ACTUALLY EVEN EXHAUSTED
16:17:45  BECAUSE THE MINION IS ONLY LOADING THOSE
16:17:47  MODULES FOR WHICH IT HAS THE DEPENDENCIES.
16:17:50  SO WE ALREADY KNOW WE HAVE THE TEST MODULES,
16:17:53  SO LET'S LOOK AT THE FUNCTIONS WITHIN THAT
16:17:55  MODULE.
16:17:56  LIST, FUNCTIONS, TEST, AND WE CAN SEE, OKAY,
16:17:58  WE HAVE TEST.R, TEST.ECHO, TEST.FIB, TONS OF
16:18:08  THINGS THAT WE CAN USE FOR TESTING SALT.
16:18:10  AND IF WE GO FURTHER, WE CAN GO SYS.DOC OR
16:18:17  TEST.PING USED TO MAKE SURE THE MINION IS UP
16:18:21  AND RESPONDING, NOT SLEEPING.
16:18:24  IT'S JUST A FUNCTION IN PYTHON THAT RETURNS
16:18:26  TRUE.
16:18:27  INTERESTINGLY, SYS REFERS TO ITSELF.
16:18:30  SO THIS IS USEFUL TO KNOW.
16:18:33  IT LISTS ALL ITS FUNCTIONS IN SYS.
16:18:35  WE CAN SEE THAT WE CAN ALSO LIST STATE
16:18:37  FUNCTIONS, STATE MODULES, STATE DOCS AND ALL
16:18:41  THESE OTHER THINGS AS WELL.  YOU CAN GET
16:18:43  ALMOST ALL OF THE SALT DOCUMENTATION RIGHT
16:18:45  THERE ON THE COMMAND LINE.
16:18:46  SO THIS IS SUPER USEFUL TO KNOW ESPECIALLY
16:18:48  WHEN YOU'RE NEW TO SALT.
16:18:49  LET'S TALK ABOUT A COUPLE OF THESE OTHER
16:18:52  MODULES THAT WE MIGHT HAVE.
16:18:54  WE CAN INSTALL PACKAGES.
16:18:57  TKG.INSTALL.
16:19:00  I KNOW IT HAS NO DEPENDENCIES, SO IT WILL BE
16:19:03  FAST.
16:19:03  THE FIRST ALREADY HAD AN INSTALL SO IT DIDN'T
16:19:08  NEED TO INSTALL.
16:19:09  THAT'S WHY THERE WAS NOTHING THERE.
16:19:11  WE COULD INSTALL EMAX.
16:19:12  EVEN THOUGH THAT'S AGAINST MY RELIGION.
16:19:17  THAT ONE WILL TAKE A LITTLE BIT LONGER.
16:19:19  SO WHILE THAT RUNS, WHILE THAT INSTALLS EMAX,
16:19:21  LET'S TALK A LITTLE BIT ABOUT TARGETING.
16:19:24  SO BY DEFAULT, WE TARGET VIA GLOBBING.
16:19:27  SO WHILE WE'RE HITTING ALL OF OUR MINIONS, WE
16:19:32  CAN TARGET.
16:19:33  SO AS SOON AS THIS FINISHES COMING BACK --
16:19:37  YOU CAN DO IT.
16:19:37  WHICH MINION ISN'T COMING BACK YET?
16:19:42  EMAX HAS A LOT OF DEPENDENCIES.
16:19:45  THAT'S RIDICULOUS.
16:19:46  ANYWAY, IF WE GO BACK TO SALT, WE CAN DO
16:19:48  SALT, LET'S GET OUR LIST OF MINIONS AGAIN
16:19:52  HERE.
16:19:52  SO WE CAN SAY SALT.
16:19:56  TEST.PING.
16:19:57  THIS IS JUST GLOBBING.
16:19:59  IT'S USING THE PYTHON GLOBBING LIBRARY.
16:20:03  SO WE CAN DO WHATEVER WE WANT TO.
16:20:09  WE CAN DO RANGES.
16:20:10  STAR, MINION, ONE THROUGH TWO, SO THAT'S JUST
16:20:15  GLOBBING.
16:20:16  IF WE LOOK IN THE HELP -- OOPS.
16:20:18  I GOT IT ANYWAY.
16:20:19  WE CAN GLOB A BUNCH OF OTHER WAYS.
16:20:23  WE CAN GLOB VIA REGULAR EXPRESSIONS, JUST A
16:20:27  COMMA SEPARATED LIST.
16:20:29  WE CAN GLOB VIA GRAINS.
16:20:32  SO GRAINS ARE STATIC INFORMATION ABOUT OUR
16:20:34  MINIONS.
16:20:35  FOR EXAMPLE, WE HAVE INFORMATION SUCH AS THE
16:20:38  OS THAT'S RUNNING ON THE MINION OR THE OS
16:20:42  VERSION OR THE OS FAMILY OR THE -- LET'S JUST
16:20:45  LOOK.
16:20:45  IF WE DO SALT -- LET'S JUST LOOK AT ONE OF
16:20:48  OUR MINIONS HERE.
16:20:51  WE HAVE GRAINS.ITEMS.
16:20:54  AND WE CAN SEE THE EXHAUSTIVE LIST WHICH
16:20:56  WE'RE NOT GOING TO GO OVER.
16:20:57  IPV4, IP INTERFACES.
16:21:05  PROBABLY IN GRAINS.
16:21:07  SO WE CAN TARGET OFF OF THAT.
16:21:09  WE CAN SAY, OKAY, I JUST WANT TO TARGET OS
16:21:11  FAMILY WN.
16:21:16  SO WE USE A COLON TO -- LET'S BRING THAT TO
16:21:17  THE TOP.
16:21:18  OS FAMILY DEBIAN.
16:21:23  WE USE A COLON.
16:21:25  WE GET JUST OR DEBIAN MINIONS.
16:21:31  IT CAN BE GOOD TO KNOW WHAT THESE ARE.
16:21:33  LET'S DO OS FAMILY AND OS RELEASE.
16:21:42  I HAVE A CENTOS 6.4, A DEBIAN 7.5, AND
16:21:51  ANOTHER.
16:21:51  NOW WE HAVE THREE DEBIAN MINIONS.
16:21:54  SO WE CAN ALSO USE GLOBBING IN HERE, DEBIAN W
16:22:02  STAR, WHATEVER.
16:22:04  NOT A VERY GOOD EXAMPLE, BUT STILL SHOWS THAT
16:22:06  IT WORKS.
16:22:09  AND THAT'S GRAINS TARGETING.
16:22:11  LET'S TALK A LITTLE BIT -- SO WE CAN ALSO
16:22:14  TARGET WITH REGULAR EXPRESSIONS IN GRAINS.
16:22:16  WE CAN -- I'M GOING TO SKIP A COUPLE.
16:22:22  PILLAR DOWN THERE.
16:22:23  WE'RE NOT GOING TO TALK MUCH ABOUT PILLAR IN
16:22:25  THIS TALK.
16:22:25  PILLAR IS JUST A SECURE VERSION OF GRAINS
16:22:28  BASICALLY.
16:22:28  THIS IS INFORMATION THAT COMES FROM THE
16:22:30  MASTER AND IS GIVEN TO THE MINIONS IN A
16:22:33  SECURE WAY SO YOU CAN STICK, YOU KNOW, SECURE
16:22:35  DATA IN THERE THAT ONLY SOME MINIONS ARE
16:22:37  SUPPOSED TO HAVE, FOR EXAMPLE, OR YOU CAN
16:22:39  JUST STICK DATA THAT YOU WANT TO USE THAT
16:22:41  COMES FROM A MASTER.
16:22:42  AND THEN FINALLY, LET'S TALK ABOUT COMPOUND
16:22:45  MATCHING.
16:22:45  WE CAN ACTUALLY COMBINE THESE MATCHES WITH
16:22:47  COMPOUND.
16:22:47  SO I CAN SAY, OKAY, I WANT A GRAINS MATCH,
16:22:53  G@OS FAMILY DEBIAN AND NOT G@OS DEBIAN.
16:23:00  SO I DON'T WANT ANYTHING THAT'S PART OF THE
16:23:01  OS FAMILY DEBIAN BUT NOT ACTUALLY DEBIAN.
16:23:05  TEST.PING.
16:23:06  THAT SHOULD BE TWO MINIONS, AND WE GOT OUR
16:23:08  TWO MINIONS BACK.
16:23:16  AND THEN THE LAST TYPE OF TARGETING IS NODE
16:23:19  GROUP, WHICH IS JUST COMPOUND MATCHING.
16:23:22  BUT YOU CAN ASSIGN AN ALIAS TO A COMPOUND
16:23:24  MATCH BECAUSE TYPING THAT OUT EVERY TIME IS
16:23:26  GOING TO BE PRETTY TIRESOME.
16:23:28  SO IN YOUR MASTER CONFIG, YOU CAN ASSIGN
16:23:31  GROUPS WHICH ARE ASSIGNED TO THESE COMPOUND
16:23:34  MATCHES.
16:23:34  SO THAT COVERS SUPER BRIEFLY OUR MODE
16:23:37  EXECUTION SYSTEM, AND IT'S SUPER POWERFUL.
16:23:40  YOU CAN DO LOTS OF THINGS WITH IT.
16:23:41  BUT WHERE SALT REALLY SHINES FOR MANAGING
16:23:43  YOUR SERVERS IS WHEN YOU GET INTO THE STATE
16:23:46  SYSTEM.
16:23:46  I HAVE SOME STATES THAT I PUT IN PLACE A
16:23:48  LITTLE BIT EARLIER, WHICH -- OOPS.
16:23:52  WHERE AM I?
16:23:57  OKAY.
16:24:03  SO THIS IS OUR FIRST STATE.
16:24:06  AND THIS IS A STATE FILE THAT HAS THREE
16:24:08  STATES INSIDE OF IT.
16:24:10  I'VE KIND OF PRE-WRITTEN THEM HERE.
16:24:12  AND AT FIRST, IT LOOKS LIKE A LOT, BUT IT
16:24:14  STARTS TO BOIL DOWN PRETTY QUICKLY INTO
16:24:17  THINGS THAT ARE SIMPLE TO UNDERSTAND.
16:24:19  THIS FIRST LINE INSTALL APACHE IS JUST THE
16:24:22  STATE ID.
16:24:23  SO EVERY UNIQUE STATE THAT WE RUN NEEDS TO
16:24:25  HAVE AN ID.
16:24:28  THIS PKG.INSTALLED SHOULD LOOK FAMILIAR.
16:24:31  IT FOLLOWS THE SAME MODEL WE USE FOR MODE
16:24:34  EXECUTION, AND WE BASICALLY SAY I WANT THIS
16:24:38  PACKAGE TO BE INSTALLED ON MY SYSTEM.
16:24:40  OKAY?
16:24:40  AND THEN WE GIVE IT ANY ARGUMENTS, AND THE
16:24:43  FIRST ARGUMENT IS ALWAYS NAME.
16:24:45  THE NAME OF THE PACKAGE WE'RE INSTALLING IS
16:24:47  APACHE 2.
16:24:49  IT'S INTERESTING TO NOTE HERE THAT THE
16:24:56  VERBIAGE IS DIFFERENT IN SALT -- OR IN
16:24:58  STATES.
16:24:59  WHEN WE WERE INSTALLING PACKAGES WITH
16:25:02  EXECUTION, WE WERE JUST SAYING PKG.INSTALL
16:25:04  BECAUSE WE JUST WANT TO INSTALL A PACKAGE,
16:25:06  AND IT'S JUST CALLED INSTALL H TOP OR
16:25:09  WHATEVER IT IS, WHEREAS IN THE STATE SYSTEM
16:25:11  WE HAVE PKG.INSTALLED.
16:25:14  WE ARE DEFINING THE FINAL STATE OF OUR
16:25:16  SYSTEM, AND SALT JUST MAKES THAT HAPPEN.
16:25:18  SO PKG.INSTALLED, IF THAT PACKAGE IS ALREADY
16:25:22  INSTALLED, IT'S NOT GOING TO DO ANYTHING.
16:25:23  IF IT IS NOT INSTALLED, IT WILL INSTALL IT,
16:25:25  MAKE SURE IT'S INSTALLED PROPERLY AND RETURN,
16:25:28  YOU KNOW, THE [INAUDIBLE].
16:25:31  THE OTHER THING TO NOTE THAT'S INTERESTING IS
16:25:33  THIS -- YOU NOTICE THAT I'VE JUST BEEN USING
16:25:38  PKG.
16:25:38  I HAVEN'T HAD TO REFER TO ACT OR YUM OR ANY
16:25:42  OF THESE TOOLS EVEN THOUGH I HAVE A MIXTURE
16:25:46  OF MINIONS AND SALT THAT ACTUALLY ABSTRACTS
16:25:48  THAT AWAY FOR US.
16:25:51  WE DON'T HAVE TO WORRY ABOUT WHETHER THERE'S
16:25:53  YUM OR APP ON THE TARGET SYSTEMS.
16:25:56  IT WILL ACTUALLY DETECT THAT AND RUN THE
16:25:59  CORRECT COMMAND.
16:26:01  THE SECOND STATE HERE IS OUR SERVICE.RUNNING
16:26:05  STATE.
16:26:05  AGAIN, APACHE RUNNING.
16:26:06  THAT'S JUST A STATE ID.
16:26:08  WE CAN USE WHATEVER WE WANT THERE, BUT IT'S
16:26:10  USEFUL TO MAKE IT DESCRIPTIVE SO THAT WE KNOW
16:26:13  WHAT'S GOING ON.
16:26:14  SO WE WANT TO MAKE SURE THAT THE APACHE 2
16:26:16  SERVICE IS RUNNING.
16:26:18  WE WANT TO ALSO ENABLE IT SO THAT IT IS -- IT
16:26:21  WILL RUN ON START-UP.
16:26:23  AND THEN WE HAVE TWO SPECIAL ARGUMENTS WHICH
16:26:27  WE CALL REQUISITES INSULT.
16:26:30  AND THIS ALLOWS US TO CREATE DEPENDENCIES IN
16:26:32  OUR STATE TREE.
16:26:33  SO, FOR EXAMPLE, WE REQUIRE THE PACKAGE STATE
16:26:37  INSTALL APACHE.
16:26:38  THIS MEANS THAT THE PACKAGE STATE IS ALWAYS
16:26:40  GOING TO RUN FIRST NO MATTER WHETHER WE'VE
16:26:42  PUT THEM -- WHAT ORDER WE'VE PUT THEM INTO
16:26:45  THE FILE.
16:26:47  BY DEFAULT STATES WILL RUN IN THE ORDER THAT
16:26:49  THEY'RE DEFINED, BUT WE CAN MASSAGE THAT
16:26:51  ORDER AS NEEDED WITH THESE REQUISITES.
16:26:55  SO THIS WILL MAKE SURE THAT THE PACKAGE RUNS
16:26:57  FIRST AND THAT IT INSTALLS SUCCESSFULLY
16:27:00  BEFORE WE TRY TO RUN THE STATE.
16:27:03  AND THEN THIS WATCH IS A SPECIAL REQUISITE
16:27:05  THAT I'M NOT GOING TO TALK ABOUT IN TOO MUCH
16:27:08  DETAIL.
16:27:08  BUT THE WAY IT'S USED HERE MEANS THAT IT'S
16:27:10  ACTUALLY WATCHING THIS FILE DOWN HERE THAT
16:27:12  I'M GOING TO TALK ABOUT IN JUST A MINUTE.
16:27:13  AND IF THAT FILE CHANGES IT'S GOING TO
16:27:15  ACTUALLY RESTART APACHE.
16:27:17  SO IF YOU USE A WATCH REQUISITE WITH A
16:27:20  SERVICE STATE LIKE THIS, IT WILL RESTART THE
16:27:22  SERVICE WHEN THERE ARE CHANGES THAT ARE MADE.
16:27:24  SO THAT'S SUPER USEFUL.
16:27:26  SO LET'S TALK ABOUT THIS FINAL STATE HERE
16:27:29  INSTALL APACHE.COMF.
16:27:31  WE SAY FILE.MANAGED BECAUSE WE JUST WANT TO
16:27:37  DEFINE THE FINAL STATE OF THE SYSTEM.
16:27:40  OKAY?
16:27:41  SO WE HAVE THE NAME, WHICH IS THE TARGET ON
16:27:44  THE SYSTEM.
16:27:47  THE FILE NAME ON THE SYSTEM.
16:27:49  WE HAVE THE SOURCE, WHICH HAS A SPECIAL
16:27:52  SALT:// WHICH REFERS TO FILES ON THE MASTER.
16:27:58  IN FACT, I CAN EDIT THAT FILE RIGHT HERE.
16:28:01  IF I SAY EDIT/ -- IT'S RIGHT THERE.
16:28:04  GOT A FILE HERE.
16:28:07  AND THEN WE DEFINE THE USER AND THE GROUP
16:28:09  THAT WE WANT THAT FILE TO BE SET AS, THE MODE
16:28:13  OF THE FILE AND ACTUALLY USE SOME TEMPLATING.
16:28:17  I USE SOME JINJA INSIDE OF THAT FILE TO GET
16:28:22  RID OF SOME DEBIAN COMPATIBLE STUFF BECAUSE I
16:28:25  PULLED THE CONFIGURATION.
16:28:27  AND FINALLY, WE MAKE SURE THAT THE APACHE IS
16:28:30  INSTALLED FIRST.
16:28:30  SAME AS BEFORE, WE NEED TO MAKE SURE THAT
16:28:32  APACHE IS INSTALLED SO THESE DIRECTORIES ARE
16:28:35  IN PLACE.
16:28:35  SO WE HAVE THE STATE.
16:28:36  AND THEN WE CAN RUN IT.
16:28:38  NOW, YOU NOTICE IN THE STATE I'VE ACTUALLY
16:28:40  USED APACHE 2 EXPLICITLY IN A COUPLE PLACES,
16:28:45  AND SO THAT'S ACTUALLY GOING TO FAIL ON MY
16:28:46  CENTOS MACHINES BECAUSE THEY EXPECT HTTPD.
16:28:53  SO NOW I'M JUST GOING TO RUN THIS ON MY --
16:29:03  I'LL SHOW YOU HOW TO FIX THAT IN JUST A
16:29:05  MINUTE.
16:29:11  IT'S INSTALLING APACHE.
16:29:12  PUTTING THIS FILE INTO PLACE.
16:29:13  MAKING SURE THE SERVICE IS STARTED.
16:29:16  SO WE'RE ALREADY GETTING STUFF BACK.
16:29:18  SO THIS IS OUR MINION 2, WHICH IS MY DEBIAN
16:29:22  MINION.
16:29:23  SO YOU NOTICE IT INSTALLED APACHE.
16:29:24  IT TELLS US ALL THE DIFFERENT PACKAGES THAT
16:29:26  CHANGED.
16:29:26  THIS DIF IS HOW THE APACHE.COMF FILE CHANGED,
16:29:33  AND IT'S FAIRLY HEFTY BECAUSE I PULLED THIS
16:29:41  FROM MY UBUNTU MACHINES.
16:29:49  NOW LET'S JUST DO ONE QUICK TEST.
16:29:52  IF I ADD A NEW LINE TO THIS APACHE.COMF, THAT
16:29:57  MEANS THAT IT WILL CHANGE ON THE TARGET
16:29:59  SYSTEMS, AND WE WANT TO MAKE SURE THAT APACHE
16:30:01  RESTARTS BECAUSE WE HAD THAT WATCH IN THERE
16:30:03  TO MAKE SURE APACHE RESTARTS.
16:30:05  SO IF WE LOOK HERE, OKAY, SO INSTALL APACHE.
16:30:08  IT SAID APACHE 2 IS ALREADY INSTALLED.
16:30:11  BUT HERE WE CAN SEE THE DIF OF THE FILE
16:30:14  BECAUSE WE ADDED THAT NEW LINE.
16:30:16  AND DOWN HERE WE CAN SEE THE SERVICE
16:30:17  RESTARTED.
16:30:17  SO EVERYTHING IS WORKING PERFECTLY.
16:30:19  IF I RUN THIS AGAIN, NOW THERE'S NO CHANGES.
16:30:21  SO EVERYTHING SHOULD JUST BE PERFECTLY GREEN
16:30:23  AND NOTHING CHANGED.
16:30:24  AND EVERYTHING IS GOOD ON ALL THREE SYSTEMS.
16:30:26  SO LET'S EXTEND THIS TO A LITTLE BIT OF CROSS
16:30:33  PLATFORM AGNOSTICISM, IF YOU WILL.
16:30:40  SO IF YOU IGNORE THOSE FIRST EIGHT OR NINE
16:30:43  LINES, THE REST OF THE FILE IS PRETTY MUCH
16:30:46  THE SAME AS BEFORE.
16:30:47  I'VE USED A COUPLE LITTLE JINJAS, SO USE WHAT
16:30:52  I'VE DEFINED AT THE TOP.
16:30:54  BUT OTHERWISE, IT'S EXACTLY THE SAME.
16:30:56  WE HAVE ACCESS TO UNGRAINS, WHICH I'VE BEEN
16:30:58  USING BEFORE.
16:30:59  INTERESTINGLY ENOUGH, WE ALSO HAVE ACCESS TO
16:31:01  OUR PILLAR, WHICH I'M GOING TO SHOW IN JUST A
16:31:03  MINUTE.
16:31:03  WE ACTUALLY CAN EVEN CALL OUT TO REMOTE
16:31:05  EXECUTION MODULES FROM WITHIN HERE.
16:31:08  SO IF GRAINS -- IF THE OS FAMILY IS DEBIAN,
16:31:13  THEN WE SAY OKAY.
16:31:14  IF IT'S IN APACHE 2, THAT NAME INSTEAD, PUT
16:31:23  THE FILE THERE AND GET THE FILE FROM THERE.
16:31:25  SO I HAVE A DIFFERENT FILE FOR THE
16:31:27  [INAUDIBLE].
16:31:30  AND DOWN HERE WE USE LITTLE JINJA BLOCKS TO
16:31:36  INSERT THE FILE.
16:31:41  NOW WE CAN RUN APACHE JINJA.
16:31:45  OUR UBUNTU AND DEBIAN CAME RIGHT BACK.
16:31:51  WE'RE STILL WAITING ON OUR CENTOS MACHINE.
16:31:58  IT DIDN'T HAVE TO INSTALL NEARLY AS MANY
16:32:01  DEPENDENCIES.
16:32:02  I PULLED THIS FILE FROM A CENTOS MINION SO IT
16:32:06  DIDN'T ACTUALLY CHANGE.
16:32:07  SERVICE ATB HAS BEEN ENABLED AND IS RUNNING.
16:32:12  ON OUR UBUNTU MACHINES, IT'S BEEN ENABLED.
16:32:17  BUT ON OUR RIGHT-HAND MACHINES, IT WILL NOT,
16:32:19  SO OUR STATE ACTUALLY ENABLED THAT SERVICE
16:32:21  FOR US.
16:32:22  SO NOW IF WE RUN THIS ONE MORE TIME JUST TO
16:32:26  MAKE SURE, YOU NOTICE THEY ALL CAME BACK
16:32:29  ALMOST IMMEDIATELY.
16:32:30  EVERYTHING IS IN THE CORRECT STATE, AND WE
16:32:32  KNOW EVERY TIME WE RUN THIS HIGH STATE THAT
16:32:35  STATE THAT WE'VE DEFINED WILL BE THE WAY THAT
16:32:36  WE DEFINED IT.
16:32:39  AND THAT'S THAT.
16:32:40  SO AS MY FINAL DEMO, I'M GOING TO SHOW PILLAR
16:32:44  REALLY QUICK.
16:32:44  I'M NOT ACTUALLY GOING TO SHOW HOW YOU GET
16:32:46  PILLAR DATA ONTO YOUR MINIONS.
16:32:49  IT'S FAIRLY STRAIGHTFORWARD.
16:32:51  IT'S JUST A SERIES OF YOU FILES, AND YOU GET
16:32:56  SENT TO THE MINIONS.
16:32:57  THERE'S PLENTY OF GOOD DOCUMENTATION THERE.
16:32:59  I WILL SHOW YOU THAT IT'S ALREADY THERE.
16:33:01  SO IT'S PILLAR.ITEM.
16:33:03  I PUT IN A PILLAR KEY CALLED USERS ON ALL MY
16:33:06  MINIONS.
16:33:07  IT'S ALL THE SAME.
16:33:08  SO ALL MY MINIONS HAVE THIS LARRY, MOE, AND
16:33:10  CURLY LIST OF USERS.
16:33:13  SO NOW I HAVE ANOTHER STATE THAT WILL
16:33:15  ACTUALLY USE THIS DATA.
16:33:16  SO IF WE LOOK AT USERS PILLAR HERE, NOW I'M
16:33:19  USING A JINJA FOUR LOOP FOR USER IN PILLAR
16:33:23  USERS.
16:33:24  WE HAVE MANAGE_, AND WE USE THE USER NAME,
16:33:27  BECAUSE, AGAIN, THIS LINE HAS TO BE UNIQUE,
16:33:30  SO WE NEED TO USE THE USER NAME IN OUR ID TO
16:33:33  MAKE IT UNIQUE.
16:33:34  USER.PRESENT.
16:33:35  AGAIN, IT'S NOT USER.ADD BECAUSE THAT'S
16:33:37  ITERATIVE.
16:33:38  IT'S USER.PRESENT BECAUSE WE'RE DEFINING THE
16:33:42  FINAL STATE OF OUR MACHINE, AND WE GIVE IT
16:33:43  THE NAME OF THE USER.
16:33:44  OKAY?
16:33:50  SO IF WE DO THIS -- THAT WAS FAST.
16:33:55  ALL RIGHT.
16:33:55  SO WE CAN SEE ALL OF THE INFORMATION ABOUT
16:34:04  THE USER, THE HOME DIRECTORY, ALL THE
16:34:07  DIFFERENT STUFF THAT WAS CREATED, LARRY, MOE,
16:34:08  AND CURLY ARE PRESENT, AND IF WE RUN THIS
16:34:12  AGAIN WE CAN SEE THEY'RE ALREADY THERE AND UP
16:34:14  TO DATE.
16:34:15  WE CAN DEFINE DIFFERENT PIECES OF INFORMATION
16:34:18  FOR THESE GUYS, YOU KNOW, THEIR HOME
16:34:21  DIRECTORY OR WHATEVER, AND EVERYTHING WILL BE
16:34:23  UPDATED AS NECESSARY.
16:34:24  SO THAT'S THE STATE SYSTEM AT SALT.
16:34:28  AND I THINK THAT'S ALL I HAVE.
16:34:29  SO WE ARE GOING TO HAVE A FEW QUESTIONS.
16:34:31  AND AGAIN, IF THIS IS -- THIS IS REALLY FAST.
16:34:36  I WENT THROUGH A LOT OF CONTENT REALLY FAST.
16:34:40  AND SO MAKE SURE YOU GO BACK TO THE VIDEO IF
16:34:43  YOU WANT.
16:34:44  CHECK OUT MY BOOK.
16:34:45  IT'S REALLY THE BETTER VERSION OF THIS TALK
16:34:47  BECAUSE IT HAS MORE INFORMATION.
16:34:49  AND YOU CAN GET MY SLIDES AND THE STATE FILES
16:34:52  THAT I USED AT THAT BITLY ADDRESS.
16:34:55  AND THANK YOU VERY MUCH.
16:34:56  [ APPLAUSE ]
16:35:02  >> THERE'S A MICROPHONE IN THE CENTER IF YOU
16:35:04  WANT TO ASK QUESTIONS.
16:35:05  I'LL START WITH THE FIRST QUESTION.
16:35:08  >> Audience:  IF YOU'RE USING DOCKER, IT
16:35:11  SEEMS LIKE A REALLY DIFFERENT STYLE VERSUS
16:35:13  CHANGING ALL THIS.
16:35:14  CAN YOU TALK A LITTLE BIT ABOUT THE TRADE OFF
16:35:16  BETWEEN THE TWO AND CAN SALTSTACK BE USED
16:35:19  WITH DOCKER.
16:35:20  >>  YEAH, SALTSTACK CAN MANAGE DOCKER NO
16:35:23  PROBLEM.
16:35:24  IT CAN MANAGE SPINNING THEM UP AND
16:35:26  INTERACTING WITH DOCKER.
16:35:27  WE ACTUALLY JUST REWROTE OUR DOCKER SUPPORT
16:35:30  SO IT WILL BE IN OUR NEXT FEATURE RELEASE.
16:35:32  THAT REWRITE WILL.
16:35:37  THERE'S TWO DIFFERENT FORMS OF CONFIGURATION
16:35:39  MANAGEMENT THAT ARE HAPPENING RIGHT NOW.
16:35:40  ONE OF [INAUDIBLE] IF I NEED TO CHANGE
16:35:45  SOMETHING, I JUST BLOW IT AWAY AND MAKE A NEW
16:35:47  ONE.
16:35:47  AND THEN THERE'S THE SALT, YOU KNOW, CHEF
16:35:50  PUPPET WHERE WE ARE TRYING TO JUST MANAGE THE
16:35:52  SYSTEMS AND WE DON'T USUALLY BLOW THEM AWAY.
16:35:55  WE JUST MAKE SURE THEY GET IN THE CORRECT
16:35:58  STATE AND FIX THEM AS THEY NEED IT.
16:36:00  AND I DON'T KNOW WHICH ONE IS GOING TO WIN.
16:36:02  HONESTLY, WE'RE GOING TO KIND OF SEE WHERE IT
16:36:05  GOES IN THE NEXT COUPLE YEARS BECAUSE YOU CAN
16:36:07  ALSO USE SALT TO DO A SIMILAR THING TO DOCKER
16:36:09  WHERE YOU DON'T EVEN HAVE A MASTER.
16:36:13  YOU JUST SPIN UP A MASTER LIST ALT INSTALLED
16:36:19  AND THEY PULL THEIR STATES FROM GIT FS AND
16:36:22  WE'LL JUST RUN THEIR STATES ON A SCHEDULE TO
16:36:24  MAKE SURE THEY'RE IN THE RIGHT STATE.
16:36:28  AND THEY WON'T EVER -- YOU WON'T EVER TOUCH
16:36:30  THOSE MINIONS ONCE THEY HAVE APPEARED EXCEPT
16:36:32  BY MAYBE UPLOADING NEW STATES TO GIT FS OR
16:36:36  WHATEVER.
16:36:37  AND SO THAT'S ANOTHER INTERESTING, YOU KNOW,
16:36:39  HANDS OFF, NO MASTER, AND WITH THOSE KINDS OF
16:36:42  THINGS YOU LOSE OUT ON QUICK CHANGES.
16:36:44  YOU CAN'T JUST DO PACKAGE.INSTALL AND UPGRADE
16:36:48  YOUR SECURITY FIX.
16:36:50  YOU KNOW, YOU CAN'T INSTALL PATCHES WITH A
16:36:53  SINGLE COMMAND.
16:36:53  YOU HAVE TO ACTUALLY MAKE NEW ONES OR
16:36:56  WHATEVER.
16:36:56  SO THERE'S A LOT OF TRADE-OFFS BUT I REALLY
16:36:59  LIKE THE WAY THAT WE DO THINGS AT SALT.
16:37:01  I THINK IT REALLY WORKS REALLY WELL AND
16:37:03  SCALES REALLY WELL, AND I HOPE THAT ANSWERED
16:37:08  YOUR QUESTION?
16:37:09  >> Audience:  ARE THE MINIONS AWARE OF THEIR
16:37:11  STATE?
16:37:11  COULD YOU QUERY AND SAY WHAT MINIONS HAVE
16:37:13  THIS STATE FILE, LIKE SO CHEF CAN DO THAT,
16:37:17  RIGHT?
16:37:17  YOU CAN QUERY CHEF AND SAY TELL ME ALL OF THE
16:37:20  ONES THAT ARE RUNNING THIS COOKBOOK AND IT
16:37:24  WILL SPIT YOU OUT A LIST.
16:37:27  IS THERE SOMETHING SIMILAR.
16:37:28  >> A LOT OF THIS PROCESSING HAPPENS ON THE
16:37:30  MINION, IT REQUEST FILES FROM THE MASTER AND
16:37:32  COMPILES THEM.
16:37:33  YOU CAN HAVE IT COMPILE THOSE I FILES DOWN TO
16:37:36  A LIST OF WHAT STATES IT'S GOING TO RUN AND
16:37:38  VIEW THAT LIST.
16:37:38  OR YOU CAN EVEN RUN TEST RUNS IF YOU PASS IN,
16:37:42  IN FACT, I CAN JUST DO IT REALLY QUICK.
16:37:44  IF YOU PASS IN STAR STATE.SLS APACHE, AND WE
16:37:49  DO TEST -- OH, SORRY.
16:37:51  I DIDN'T KNOW YOU GUYS HAVE CHANGED -- OKAY.
16:37:53  IF WE DO TEST EQUALS TRUE ON THE END OF THAT.
16:37:56  NOW, THIS ISN'T A GOOD EXAMPLE.
16:37:58  BECAUSE -- ACTUALLY, IT WILL.
16:38:00  THESE FAILED BECAUSE I USED THE WRONG ONE.
16:38:02  LET'S DO APACHE UNDERSCORE GINGER HERE.
16:38:05  THIS WILL ACTUALLY NOT MAKE ANY CHANGES ON
16:38:08  THE TARGET SYSTEM.
16:38:08  IT WILL TELL YOU WHAT CHANGES ARE GOING TO BE
16:38:10  MADE.
16:38:11  SO LET'S MAKE A LITTLE CHANGE HERE.
16:38:13  SO WE ADDED A NEW LINE AGAIN.
16:38:15  SO CHANGES WOULD BE MADE NORMALLY.
16:38:17  AND SO IF WE LOOK HERE, SEE HOW IT'S IN
16:38:19  YELLOW NOW?
16:38:20  SO NOW IT SAYS, OKAY, THE FILE THIS IS SET TO
16:38:24  BE CHANGED.
16:38:24  IT WILL TELL YOU EXACTLY WHAT'S DIFFERENT
16:38:26  BETWEEN WHAT YOU'VE DEFINED AND WHAT'S ON THE
16:38:28  SYSTEM.
16:38:29  AND WHAT'S GOING TO HAPPEN THE NEXT TIME YOU
16:38:30  RUN A REAL STATE RUN.
16:38:31  AND THIS ONE SAYS SERVER IS SET TO BE
16:38:33  RESTARTED BECAUSE IT KNOWS IT'S GOING TO BE
16:38:36  RESTARTED NEXT TIME YOU RUN A STATE RUN.
16:38:38  SO THOSE ARE TWO WAYS YOU CAN SEE THE STATE
16:38:40  OF A MACHINE WITHOUT TOUCHING IT.
16:38:42  THE OTHER ONE I DIDN'T RUN THE COMMAND.
16:38:43  YOU CAN DO STATE.SHOW.
16:38:46  HIGH STATE.SHOW.
16:38:49  I HAVEN'T ACTUALLY DEFINED A TOP FILE SO I
16:38:50  DON'T THINK THIS WILL WORK BUT YOU CAN USE
16:38:54  HIGH STATE NORMALLY IF YOU'VE DEFINED A TOP
16:38:57  FILE AND ENVIRONMENTS AND STUFF THAT I DIDN'T
16:38:59  GO INTO TODAY.
16:38:59  BUT ANYWAY.
16:39:06  >> AUDIENCE:  CAN YOU TALK BRIEFLY ABOUT THE
16:39:08  CONNECTIVITY REQUIREMENTS BETWEEN THE MINIONS
16:39:11  AND THE MASTER?
16:39:11  IS THAT SOMETHING THAT'S ALWAYS ENCRYPTED?
16:39:16  HOW IS IT SECURED?
16:39:23  >> YES, SO THE MINIONS [INAUDIBLE].
16:39:26  ONE OF THEM IS A PUB PORT 4505.
16:39:29  ALL THE MINIONS STAY CONNECTED TO THAT ALL
16:39:30  THE TIME.
16:39:32  THE OTHER ONE IS THE RAT PORT AND WHEN
16:39:34  MINIONS ARE DONE RUNNING A JOB THEY WILL
16:39:36  RETURN THEIR INFORMATION THERE.
16:39:37  THAT'S THE DEFAULT SETUP.
16:39:38  WE HAVE A COUPLE OTHER WAYS YOU CAN RUN SALT.
16:39:41  YOU CAN RUN IT OVER SHH.
16:39:43  IT'S CALLED SALT-SHH.
16:39:45  AND THAT'S A FEATURE COMPLETE VERSION OF SALT
16:39:47  THAT USES SHH AS THE TRANSPORT.
16:39:49  AND WE HAVE ANOTHER EXPERIMENT AT TRANSPORT
16:39:53  THAT'S OVER UDP CALLED RATE.
16:39:55  RELIABLE, ASYNCHRONOUS EVENT TRANSPORT.
16:39:59  AND IT'S REALLY PROMISING.
16:40:00  THE DRAWBACK THERE IS THAT YOU HAVE TO HAVE
16:40:02  OPEN PORTS ON THE MINION.
16:40:04  BUT YES, THAT CONNECTION IS ALWAYS OPEN BUT
16:40:06  IT'S VERY LIGHTWEIGHT AND -- YEAH.
16:40:08  HOPE THAT ANSWERS YOUR QUESTION.
16:40:16  COULD YOU TALK ABOUT REACTOR AND MAYBE
16:40:18  OVERSTATE?
16:40:19  >>  YEAH.
16:40:19  SO SALT HAS AN EVENT SYSTEM BUILT INTO IT.
16:40:23  MINIONS CAN FIRE EVENTS.
16:40:25  IN FACT YOU CAN ACTUALLY PUT EVENTS ON THE
16:40:27  BUS FROM THIRD PARTY APPLICATIONS EVEN.
16:40:29  AND THEN THE MASTER SEES THOSE EVENTS AND CAN
16:40:31  REACT TO THEM BY RUNNING COMMANDS, RUNNING
16:40:34  STATES, ET CETERA.
16:40:34  THAT'S THE REALLY HIGH LEVEL.
16:40:36  IT'S REALLY COOL BECAUSE YOU CAN MAKE SELF
16:40:39  HEALING INFRASTRUCTURES AND REACTIVE
16:40:42  INFRASTRUCTURES AND THEN OVERSTATE IS
16:40:44  ACTUALLY DEPRECATED IN FAVOR OF ORCHESTRATE.
16:40:48  SO ORCHESTRATE ALLOWS YOU TO RUN STATES AND
16:40:52  COMMANDS ON MINIONS IN BATCHES.
16:40:54  SO IF YOU NEED TO BRING UP YOUR DATABASE
16:40:56  SERVERS BEFORE YOU BRING UP YOUR WEB SERVERS
16:41:00  IF YOU JUST RUN NORMAL STATES ON THEM, THEY
16:41:02  WILL RUN THEIR STUFF WITHOUT KNOWING EACH
16:41:05  OTHER AT ALL.
16:41:07  WHEREAS ORCHESTRATE ALLOWS YOU TO RUN.
16:41:10  RUN CLUSTERS OF SERVERS.
16:41:12  BEFORE I EVEN START RUNNING THESE STATES OVER
16:41:13  HERE.
16:41:14  SO THAT'S STATE.ORCHESTRATE.
16:41:16  AND THERE'S INFORMATION ABOUT THAT ON THE
16:41:18  DOCS.
16:41:18  SO.
16:41:21  >>  IT LOOKS LIKE THE LAST QUESTION.
16:41:23  SO THANK YOU.
16:41:24  >> YEAH, I THINK WE'RE GOOD.
16:41:25  THANKS, EVERYBODY.
16:41:26  [ APPLAUSE ]
























