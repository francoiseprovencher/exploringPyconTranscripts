02:05:34   >> HELLO, EVERYBODY.
04:03:13   SOUNDS LIKE YOU CAN HEAR ME.
04:03:14   TODAY I HAVE THE PLEASURE OF INTRODUCING JIM
04:03:16   BAKER FROM THE SUNNY STATE OF COLORADO.
04:03:20   HE'S AN AVID SKIER, A RACKSPACE EMPLOYEE AND A
04:03:25   CORE JTHON DEVELOPER AND TODAY HE WILL BE
04:03:29   SPEAKING ON HOW TO MAKE YOUR CODE MORE ROBUST.
04:03:35   TAKE IT AWAY, JIM.
04:03:37   >> THANKS.
04:03:37   [ Applause ]
04:03:44   >> I THINK THERE ARE PEOPLE OUT THERE, I CAN'T
04:03:45   QUITE SEE YOU BUT I'M GLAD TO HEAR THE CLAPS SO
04:03:51   ANY EVENT, SOME POSSIBLE QUESTIONS THAT YOU MIGHT
04:03:52   HAVE COMING INTO THIS TALK ARE, WHAT EXACTLY ARE
04:03:55   WEAK REFERENCES, ANYWAY?
04:03:57   HOW DO THEY DIFFER FROM STRONG REFERENCES?
04:04:01   WHEN WOULD I USE THEM?
04:04:02   MENTION CORE DOLOR JTHON, I ALSO WROTE A BOOK.
04:04:08   I DO LOTS OF COOL THING AT RACKSPACE INCLUDING
04:04:12   WORK ON JTHON.
04:04:13   I TEACH PRINCIPALS OF PROGRAMMING LANGUAGE AT THE
04:04:15   UNIVERSITY OF COLORADO-BOULDER, SO LOVE ALL THE
04:04:19   SORT OF FUN THINGS I GET TO DO.
04:04:20   FOR INSTANCE, IN THAT PARTICULAR CLASS I TEACH
04:04:23   THE FUNCTIONAL IDIOM WHILE WE'RE GOING THROUGH
04:04:27   FORMAL OPERATIONAL SEMANTICS, THAT SORT OF THING.
04:04:31   SO, YOU KNOW, YOU CAN READ THIS.
04:04:33   THIS COMES FROM OUR DOCUMENTATION, WEAK REFERENCE
04:04:35   TO AN OBJECT IS NOT ENOUGH TO KEEP THE OBJECT
04:04:37   ALIVE.
04:04:38   WHEN THE ONLY REMAINING REFERENCES TO A REFERENCE
04:04:40   ARE WEAK REFERENCES, GARBAGE COLLECTION IS FREE
04:04:43   TO DESTROY THE REFERENT RENT AND REUSE THE MEMORY
04:04:47   FOR SOMETHING ELSE.
04:04:49   HOWEVER, UNTIL THE OBJECT IS ACTUALLY DESTROYED,
04:04:51   THE WEAK REFERENCE MAY RETURN THE OBJECT EVEN IF
04:04:53   THERE ARE NO STRONG REFERENCES TO IT.
04:04:55   SO YOU -- IF YOU LOOKED AT THIS OR LOOKED AT THE
04:05:02   DEFINING PIP ON THIS THIS MIGHT NOT BE SATISFYING
04:05:06   IN TERMS OF UNDERSTANDING WHAT A WEAK REFERENCE
04:05:08   IS.
04:05:09   IT WAS INITIALLY PROPOSED IN PIP 205, IT WAS 'EM
04:05:12   MEANTED IN PIP 2.1, WHICH WAS RELEASED 14 YEARS
04:05:16   AGO SO THAT'S THE FLIP SIDE OF THIS, SHOULD WE BE
04:05:25   USING THIS IF IT'S SUCH A POWERFUL STRATEGY AS I
04:05:28   TRY TO CONVINCE YOU FOR THE TITLE OF THIS TALK.
04:05:30   SO I'M GOING TO SUGGEST PUT TOGETHER A LITTLE...
04:05:36   I'M GOING TO GO OVER TO A CONSOLE, SOME LIVE
04:05:39   DEMO -- LOOKS LIKE I'VE ALREADY STARTED SOMETHING
04:05:41   HERE.
04:05:41   SO I'LL JUST CLEAR IT OUT.
04:05:43   USING PYTHON 3.4 BECAUSE IT HAS BUILT-IN TAB
04:05:51   COMPLETION, WHICH IS SUPER HANDY.
04:05:52   SO LET'S SAY I WANTED TO FIND SOME CLASS THAT I'M
04:05:55   GOING TO REFERENT TO.
04:05:56   I'M JUST GOING TO DO A STRING...
04:06:02   SCROLL IT UP.
04:06:06   LET'S SEE HERE.
04:06:07   NO, THAT DOESN'T DO WHAT WE WANT.
04:06:13   HOLD ON.
04:06:18   WE'LL START FROM THE TOP.
04:06:19   BETTER?
04:06:22   OKAY.
04:06:22   SO WE'LL HAVE A CLASS LIKE THIS.
04:06:26   THIS IS BECAUSE STRINGS IN CPYTHON CANNOT BE JUST
04:06:33   WEAK-REFERENCED.
04:06:34   WE MADE IMPORT FROM WEAK REFERENCE -- LET'S JUST
04:06:39   DO IT THE EASY WAY.
04:06:40   AND WE'LL SAY THAT WE HAVE A WEAK REFERENCE SET.
04:06:46   OKAY.
04:06:50   SO WE'VE CREATED THIS COLLECTION.
04:06:53   BY THIS NATURE, YOU'RE GOING TO THINK I'M GOING
04:06:55   TO HAVE A WEAK REFERENCE TO ANY OF ITS ELEMENTS,
04:06:58   ANY OF ITS MEMBERS.
04:07:00   OKAY, SO WHAT DOES THAT MEAN?
04:07:02   I'M GOING TO JUST CREATE ONE, CREATE A FOO
04:07:06   OBJECT.
04:07:06   I WAS ABLE TO ADD IT.
04:07:08   I HAVE THIS SET, LET'S LIST IT.
04:07:10   WAIT, WHERE DID IT GO?
04:07:18   SO IMPORTANT THING TO KNOW IS THAT, THAT GC IS
04:07:22   NOW POSSIBLY GOING TO JUST -- I'M SORRY, YOU MAY
04:07:27   SEE THIS THING JUST IMMEDIATELY GO AWAY.
04:07:30   BECAUSE THE REFERENCE COUNTING FOR THAT FOO
04:07:33   OBJECT, THAT MY STREAMFOO OBJECT WENT TO ZERO,
04:07:38   THE WEAK REFERENCE WAS CLEARED OUT AND IT MOVED
04:07:41   OUT OF THAT SET.
04:07:44   IN SOMETHING LIKE JTHON IT WOULD ACT DIFFERENTLY,
04:07:47   HAVE TO WAIT FOR THE GARBAGE COLLECTOR TO CLEAR
04:07:49   THAT UP BUT IN CPYTHON IT COULD BE ALMOST
04:07:52   IMMEDIATE, DEPENDING UPON THE WAY REFERENCES ARE
04:07:55   HELD.
04:07:56   SO IN ORDER TO ACTUALLY HOLD ON TO THIS, MAYBE IT
04:08:01   TO HAVE TO GO AND CREATE SOME -- A -- SO I HAVE
04:08:10   THIS A OBJECT.
04:08:12   I COULD IMPORT SYS, DO A ROUGH COUNT ON THAT.
04:08:16   I WOULD SEE THAT'S ACTUALLY THREE, WHICH IS GOING
04:08:21   TO BE ONE MORE THAN IT ACTUALLY IS.
04:08:24   IT'S POSSIBLE THAT ACTUALLY THERE IS A FOOM
04:08:27   THAT'S ALREADY OUT THERE THAT'S ALREADY BEEN
04:08:29   IMPORTED, AND HOLDING THAT ADDITIONAL
04:08:32   REFERENCE -- IF YOU ACTUALLY -- YOU CAN DO THINGS
04:08:35   LIKE THIS, LIKE HOW MANY REFERENCES ARE THERE TO
04:08:37   ONE?
04:08:39   715 REFERENCES TO ONE.
04:08:41   HOW ABOUT ZERO?
04:08:44   579, EVEN 42 HAS A LOT OF REFERENCES TO IT.
04:08:47   IT'S ONLY WHEN YOU GO UP TO, LIKE, SOMETHING LIKE
04:08:49   THIS, THAT YOU WOULD ACTUALLY SEE, OH, THERE'S
04:08:53   JUST THIS ONE REFERENCE APPARENTLY OUTSTANDING
04:08:59   THAT'S REAL.
04:09:00   SO IF I DIDN'T ADD THAT TO MY SET -- SORRY,
04:09:07   PEOPLE, WHO ARE GOING TO NOT SEE THAT.
04:09:10   OOPS, LOOKS LIKE I...
04:09:12   OOPS.
04:09:14   HELPS IF I DO IT THE RIGHT WAY.
04:09:16   AND I DID LIST S, OBVIOUSLY IT'S GOING TO HOLD IT
04:09:22   BECAUSE THERE IS SOMETHING THAT IS HOLDING THAT
04:09:24   REFERENCE.
04:09:24   IF I DELETE A FROM THE -- MYNAME SPACE AND I LIST
04:09:31   S AGAIN, WELL, LOOKS LIKE IT POSSIBLY IS STILL
04:09:35   THERE.
04:09:35   LET'S DO IMPORT GC.
04:09:38   AND DO THAT AGAIN, AND IT'S GONE.
04:09:45   ALL RIGHT?
04:09:45   SO JUST SOME SIMPLE THINGS THAT WE'RE ADDING
04:09:48   INTUITION TOO.
04:09:50   STRONG REFERENCES, INCLUDING SOMETHING, A NAME
04:09:52   LIKE THAT A DO HOLD THAT OBJECT AND PREVENT IT
04:09:57   FROM, REMOVED FROM THAT WEAK SET.
04:10:01   BUT IF WE JUST ADDED IT WITHOUT ANY STRONG
04:10:04   REFERENCE WHATSOEVER, IT COULD JUST BE
04:10:06   IMMEDIATELY CLEARED OUT.
04:10:07   OKAY.
04:10:11   SO S WILL BE EVENTUALLY EMPTY IN THE CONTEXT OF
04:10:21   POTENTIALLY SOME GARBAGE COLLECTION.
04:10:23   SO WE'VE BUILT SOME INTUITION AND THE THING THAT
04:10:27   I WANT YOU TO JUST THINK ABOUT IS WHAT DO WE DO
04:10:31   WITH WEAK REFERENCES IN GENERAL?
04:10:33   IT'S TO PREVENT MEMORY AND RESOURCE LEAKS.
04:10:36   WE DON'T WANT TO BE HOLDING ON TO OBJECTS
04:10:39   UNNECESSARILY.
04:10:39   AND OF COURSE WE KNOW ABOUT THIS IN OTHER
04:10:43   CONTEXTS, SO, FOR EXAMPLE, IF I JUST WRITE CODE
04:10:47   LIKE THIS, YOU KNOW, I OPEN UP SOME FILE, AND I
04:10:51   DON'T EXPLICITLY CLOSE IT, DOES IT GET CLOSED?
04:10:55   WELL, AT SYSTEM SHUTDOWN IT WOULD BUT NOT
04:10:58   NECESSARILY WITHOUT GOING AND CAUSING RESOURCE
04:11:02   EXHAUSTION.
04:11:03   SO GARBAGE COLLECTION IS NOT MAGICAL, IT'S NOT
04:11:06   GOING TO JUST SAY, OH, THIS IS -- I KNOW YOU
04:11:09   DON'T NEED THIS.
04:11:10   INSTEAD IT'S GOING TO WORK ON SOME PRINCIPLES
04:11:12   AROUND HOW REFERENCES WORK.
04:11:14   SO DOESN'T MATTER IF IT'S REFERENCE COUNTING OR
04:11:17   SOME VARIANT OF MARK AND SWEEP, LIKE YOU SEE IN,
04:11:23   SAY, JAVA-BASED JTHON OR IN PYPY, OR SOME
04:11:27   COMBINATION AS WE CPYTHON WHICH ACTUALLY DOES DO
04:11:31   A FULL MARK AND SWEEP OCCASIONALLY.
04:11:33   SO GK CANNOT READ YOUR MIND.
04:11:39   YOU MAY BE A DEVELOPER, IT CANNOT DO THAT.
04:11:42   IT'S NOT SUFFICIENT.
04:11:43   NOW, YOU CAN GO AND DO MANUAL CLEARANCES, THIS IS
04:11:47   VERY MUCH LIKE IF YOU WERE WRITING C-CODE.
04:11:50   YOU COULD USE TRY FINALLY, THIS SORT OF PATTERN,
04:11:54   RIGHT?
04:11:55   YOU CAN APPLY SOME DEEPER KNOWLEDGE OF YOUR CODE,
04:11:58   OR YOU CAN DO SOME CLEAN-UP BY SOME OTHER SCHEME.
04:12:02   SO YOU MAY GO AND USE DUNDER DEL AS A FINALIZER.
04:12:13   SO, FOR EXAMPLE, SOCKET MAKE FILE DOES DO THIS.
04:12:16   SO IF YOU ARE GOING AND CREATING WHAT APPEARS TO
04:12:22   BE A FILE OBJECT ON A SOCKET, SOCKET MAKE FILE
04:12:32   WILL DO THIS FOR YOU AND ALLOW TO YOU RETURN SOME
04:12:34   NUMBER OF OBJECTS.
04:12:35   IT'S USED BY A NUMBER OF PRIMITIVES IN THE SOCKET
04:12:37   LIBRARY.
04:12:38   AS WELL AS TOOLS OUT THERE LIAR URL LIB IF I
04:12:47   REMEMBER PROPERLY.
04:12:48   BUT THE PROBLEM IS, IF IT DOESN'T LINE UP, AS I
04:12:51   MENTIONED EARLIER, WHO HAS SEEN TOO MANY OPEN
04:12:55   FILES?
04:12:55   OKAY.
04:12:56   THAT'S WHY YOU CAME TO THIS TALK.
04:12:58   YOU WANTED TO SOLVE YOUR PROBLEM.
04:13:02   SO THIS IMPLEMENTATION IS DONE THROUGH A SEPARATE
04:13:06   COUNTING THEME SO SOCKET MAKE FILE IS TRYING TO
04:13:10   DO THE RIGHT THING FOR YOU AND IF YOU LOOK AT IT,
04:13:12   IT'S GOING AND PREVENTING RESOURCE LEAKS ALONG
04:13:16   THESE LINES.
04:13:16   I THINK WE'VE PROBABLY SEEN DUNDER DEL BEFORE.
04:13:20   I HAVEN'T MENTIONED WEAK REFERENCES YET AFTER
04:13:21   THAT QUICK DEMO.
04:13:22   YOU MIGHT USE THE WIF STATEMENT WITH AUTOMATIC
04:13:26   RESOURCE MANAGEMENT.
04:13:27   YOU SHOULD BE DOING THIS.
04:13:29   SO, AGAIN, NO WEAK REFERENCES YET.
04:13:31   WE'RE KEEPING IT SIMPLE.
04:13:35   YOU DON'T HAVE TO BE IN THIS TALK BUT WHAT IF AN
04:13:38   OBJECT IS A CHILD IN A PARENT-CHILD RELATION, YOU
04:13:41   HAVE SOME SORT OF TREE.
04:13:43   YOU NEED TO TRACK ITS PARENT AND THE PARTICIPATE
04:13:50   WANTS TO TRACK ITS CHILD.
04:13:51   YOU MIGHT BE DOING IN FOR AN XPAT READER, NO,
04:13:54   YOU'RE NOT DOING AN XPAT READER BECAUSE YOU NO
04:13:56   LONGER USE THAT OLD LEGACY STUFF.
04:14:00   BUT I THINK YOU SEE THE POINT, IT DOES HAPPEN.
04:14:04   I'M GOING TO MAKE THAT EXAMPLE EVEN SIMPLER.
04:14:07   LET'S IMPLEMENT A DOUBLY LINGED LIST.
04:14:12   MAKE SOME PREFERENCE REFERENCES.
04:14:14   WE'LL ALSO ADD DUNDER DEL TO CLEAN UP SOME
04:14:16   RESOURCES, SOUNDS LIKE A GOOD COME THANKS.
04:14:18   AND WE MIGHT SEE THIS IN ORDERICT, WHICH IS A
04:14:24   GREAT COLLECTION IN THE COLLECTIONS LIBRARY.
04:14:26   SO PRESERVES THE WORD OF INSERTION.
04:14:29   YOU CAN GET THAT OUT WHEN YOU ITERATE IT OR
04:14:33   INDEX.
04:14:34   IT HAS GREAT PERFORMANCE WITH THE PERFORMANCE
04:14:38   BEING THE SAME AS RELEVANT DIX.
04:14:40   AND USES THIS DOUBLY LINKED LIST TO PROVE
04:14:44   INSERTION ORDER.
04:14:45   SO WHY IS AVOIDING STRONG REFERENCE CYCLES SO
04:14:49   IMPORTANT?
04:14:50   AGAIN, I'M TRYING TO MOTIVATE THIS WEAK REFERENCE
04:14:52   HAVE THE AGAIN, CPYTHON CG DOES BREATH COUNTING
04:15:00   BUT IT CANNOT GO TO ZERO IN THE PRESENCE OF THAT
04:15:04   CYCLE -- SORRY, A CYCLE CANNOT GO TO ZERO.
04:15:07   SO THE -- IN CONTRAST, WHAT WE CAN DO WITH
04:15:12   CPYTHON IS USE ITS SUPPORT FOR WEAK REFERENCES,
04:15:18   AND IN THAT CASE, IT STORES A LIST OF CONTAINERS
04:15:21   TO BE CLEARED OUT INCLUDING PROXIES.
04:15:23   THAT'S PERFORM WHEN THE PREFERRED OBJECT IS
04:15:25   DEALLOCATED WHICH OCCURS WHEN THAT REF COUNT GOES
04:15:29   TO ZERO.
04:15:30   NO WAITING ON THE GARBAGE COLLECTOR AND WE CAN
04:15:32   SEE THAT IN THIS CODE HERE.
04:15:33   FOR INSTANCE, IF I'M DEALLOCATING A SET, FOR
04:15:36   EXAMPLE, I ALWAYS ENCOURAGE IF YOU REALLY WANTS
04:15:38   TO SEE WHAT'S GOING ON, LOOK AT THE SOURCE, LUKE,
04:15:43   USE THE SOURCE.
04:15:44   SO IF THERE IS A WEAK REFERENCE LIST, THERE IS A
04:15:47   LIST OF REFERENCES THAT ARE REFERRING TO THIS
04:15:51   OBJECT.
04:15:52   THIS WILL BE FILLED IN.
04:15:54   WHEN THIS IS SEEN AS BEING DEALLOCATED, WHEN ITS
04:15:59   REF COUNT GOES TO ZERO, THIS WILL CLEAR IT OUT.
04:16:04   ONE THING I DIDN'T TELL YOU IS WHEN YOU ADD A
04:16:06   WEAK REFERENCE TO SOMETHING, WE DID SEE IT IN
04:16:10   THAT ONE EXAMPLE WHEN I ADDED THAT AS A MEMBER.
04:16:14   THE REF COUNT FOR THAT OBJECT IS NOT INCREMENTED.
04:16:18   ANOTHER THING THAT'S A LITTLE TAKE-AWAY HERE IS
04:16:22   THAT THERE ARE A LOT OF OBJECTS IN CPYTHON THAT
04:16:25   ARE NOT WEAK REFERENCABLE, AND THIS IS BECAUSE
04:16:30   THIS DOES ADD SOME OVERHEAD IN TERMS OF ADDING
04:16:33   POTENTIALLY THIS EXTRA LIST.
04:16:37   OKAY.
04:16:40   SO WHY DO YOU WANT TO AVOID THOSE STRONG
04:16:43   REFERENCE CYCLES?
04:16:44   WELL, THEY HAVE TO WAIT FOR MORE -- CGC.
04:16:49   CPYTHON'S CG IS UNFORTUNATELY STOP THE WORLD AND
04:16:51   IF YOU LOOK AT THE DECISION CRITERIA IN GC SET
04:16:56   THRESHOLD, EVEN THOUGHT IT'S GENERATIONAL, YOU
04:16:58   CAN SEE IT'S SOMEWHAT PROBLEMATIC TO RELY ON NOT
04:17:01   EXHAUSTING, SAY, FILES, OR OTHER EXPENSIVE
04:17:04   RESOURCES OR EVEN MEMORY.
04:17:06   YOU KNOW, MY EXPERIENCE WITH GARBAGE COLLECTOR IS
04:17:11   THAT THEY WORK WELL EXCEPT WHEN THEY DON'T.
04:17:14   THAT MAY BE YOUR EXPERIENCE, TOO.
04:17:16   ESPECIALLY AROUND SOME SMALL OBJECT THAT LAPSE TO
04:17:21   BE POINTING TO SOME EXPENSIVE EXTERNAL RESOURCE.
04:17:25   ESPECIALLY, AGAIN, WITH SOMETHING WHERE YOU MIGHT
04:17:28   RUN OUT OF FILES.
04:17:31   ANY EVENT, THERE WAS A BUG IN ORDER DICT AROUND
04:17:38   THIS VERY ISSUE.
04:17:39   NOW, FOR 2.7 THEY REMOVED THE DUNDER DEL.
04:17:43   I'LL EXPLAIN WHY IN JUST A MOMENT.
04:17:45   FOR 3.2, THEY REPLACED DEL WITH WEAK REFERENCES,
04:17:55   AND FOR 3.4, USING DUNDER DEL, THIS FINAL EASIER
04:18:01   NO LONGER MEANS REF CYCLES OR UNCOLLECTIBLE
04:18:05   GARBAGE, WHICH IS WHY THEY HAD TO DO THIS.
04:18:06   SO WE SEE IN ISSUE 9.25, AND AGAIN MAYBE IT'S
04:18:11   JUST MY -- AS A DEVELOPER HERE OF PYTHON, BUT I
04:18:16   LIKE TO READ THE BUGS.
04:18:17   I LIKE TO SEE WHAT'S GOING ON.
04:18:20   AND WE SEE THIS ISSUE 9.825, THE REASON WHY.
04:18:27   WE HAD TO REMOVE DUNDER DEL FROM THE DEFINITION
04:18:30   OF ORDEREDDICT BECAUSE THIS PRESENTS USER
04:18:33   CREATE-SELF-REFERENCING DICTIONARIES FROM
04:18:36   BECOMING PERMANENTLY UNCOLLECTIBLE GC GARBAGE.
04:18:41   AND POTENTIALLY ALSO HAVING STRONG REFERENCES TO
04:18:45   OTHER THINGS WHICH COULD BE PROBLEMATIC.
04:18:47   DON'T WANT UNCOLLECTIBLE GARBAGE.
04:18:51   SO THE OTHER THING IN 3.2, WE REPLACED DEL WITH
04:18:58   WEAK REFS, AND AGAIN THERE IS THIS FURTHER POINT
04:19:01   THAT WE NO LONGER HAVE TO WORRY ABOUT
04:19:03   UNCOLLECTIBLE GARBAGE.
04:19:06   SO LET'S LOOK AT THE IMPLEMENTATION OF ORDER
04:19:08   DICT.
04:19:09   SO, WHAT I FIND INTERESTING ABOUT STUFF LIKE THIS
04:19:14   IS, AGAIN, YOU CAN -- YOU CAN LOOK INTO THE CODE.
04:19:18   THIS IS ACTUALLY HOW YOU MIGHT, YOU KNOW -- YOU
04:19:23   WOULD SEE, FOR EXAMPLE, THIS ONE USE OF THE PROXY
04:19:28   MECHANISM, THOUGH WHAT'S NICE WITH WEAK REFERENCE
04:19:32   PROXY, IS IT BASICALLY CREATES A WEAK REFERENCE
04:19:36   AND DOES ALL THE WORK IN TERMS OF MAKING IT LOOK
04:19:40   LIKE THE OBJECT THAT'S REFERENCING.
04:19:43   SO YOU DON'T HAVE TO GO AND DO ADDITIONAL STEP,
04:19:48   ADDITIONAL FUNCTION CALL IN ORDER TO GO AND
04:19:52   DE-REFERENCE THAT WEAK REFERENCE.
04:19:54   IT SETS UP PREVIOUS, TO POINT TO THIS, BECAUSE
04:19:59   NOW WE'RE GOING AND ADDING THIS TO THAT LIST AND
04:20:02   THE WAY THIS IS DONE IS DOUBLY LINKED LIST WITH
04:20:06   THE ROOT POINTING TO THE END.
04:20:08   AFTER THAT POINT, OUR PREVIOUS ALWAYS HAS A
04:20:11   WEAK -- IS ALWAYS WEAK-REFERENCING THE PREVIOUS
04:20:14   ITEM.
04:20:17   OUR FORWARD LINK IS JUST A STANDARD LINK, A
04:20:21   STANDARD STRONG REFERENCE.
04:20:22   WHY WOULD WE WANT TO DO THAT?
04:20:23   BECAUSE IF WE HAVE WEAK REFERENCES ON BOTH SIDES,
04:20:26   AND NOTHING ELSE IS REFERENCING IT, WE'LL SEE
04:20:29   WHAT WE SAW WITH THAT INITIAL EXAMPLE WITH WEAK
04:20:32   SET, THE OBJECT IS SIMPLY POTENTIALLY IS JUST
04:20:37   GOING TO GO AWAY AT ANY TIME.
04:20:39   NOW HERE ARE SOME OTHER INTERESTING THINGS.
04:20:45   YOU SEE THERE IS THE USE OF SLOTS TO MINIMIZE
04:20:47   OVERHEAD.
04:20:48   BECAUSE YOU'RE USING SLOTS, YOU HAVE TO GO AND
04:20:51   ACTUALLY PUT WEAK REF IN IT AS ONE OF THE SLOT
04:20:56   NAMES.
04:20:57   BY THE WAY, THESE ARE NO-OPS AND IMPLEMENTATIONS
04:21:01   LIKE JTHON.
04:21:02   I DON'T KNOW WHAT THE CASE IS IN PYPY, PROBABLY
04:21:04   SIMILAR.
04:21:04   SO THE CRUX OF THIS CODE IS SIMPLY GOING AND
04:21:06   DOING THIS WEAK REFERENCE PROXY.
04:21:08   AND THAT'S REALLY IT.
04:21:15   I -- WE WENT THROUGH SO FAST THERE, I'M NOT
04:21:20   CERTAIN THAT REGISTERED.
04:21:22   THERE WASN'T A LOT OF WORK NECESSARY IN ORDER TO
04:21:26   GET THIS WITH THE DESIRED BEHAVIOR.
04:21:31   OKAY?
04:21:31   ALL WE HAD TO DO WAS COME UP WITH THIS SCHEME
04:21:34   WHERE WE RECOGNIZED THAT ONE SIDE OF THE
04:21:39   RELATIONSHIP WE WERE GOING TO GO AND USE A STRONG
04:21:43   REFERENCE.
04:21:44   ARBITRARILY WE JUST SIMPLY USED THE NEXT
04:21:47   REFERENCE AS A STRONG REFERENCE.
04:21:52   ON THE FLIP SIDE, WE WANTED TO GO AND MAKE
04:21:54   CERTAIN THAT THERE WASN'T A REFERENCE CYCLE.
04:21:56   WELL, THAT WAS EASY ENOUGH TO DO.
04:21:58   THE PREVIOUS WOULD BE A WEAK REFERENCE.
04:22:04   YOU LINE THOSE TWO TOGETHER AND NOW WE DON'T HAVE
04:22:06   THE SCENARIO WHERE THIS -- REMOVING AN ITEM FROM
04:22:13   THIS ORDERED DICTIONARY MIGHT TAKE SOME TIME FOR
04:22:16   IT TO BE REMOVED JUST BECAUSE THE -- WE HAVE THIS
04:22:22   GARBAGE OR EVEN WORSE, UNCOLLECTIBLE GARBAGE.
04:22:27   ALL RIGHT.
04:22:27   SO THAT'S SOME MOTIVATION BUT THE REALITY IS
04:22:30   WE'RE NOT NORMALLY WRITING ORDEREDDICT.
04:22:34   WE'RE GOING TO BE DOING THINGS LIKE A LOOK-UP
04:22:36   TABLE, WHERE WE'RE GOING TO WANT TO PROVIDE MORE
04:22:38   INFORMATION ABOUT SOME OBJECT.
04:22:41   WE DON'T WANT TO EXTEND OR MUCKY PATCH IT SO FOR
04:22:48   THOSE OF YOU WHO LIKE DOING THIS AND I UNDERSTAND
04:22:50   WHY, YOU'RE LIKE, HEY, THERE IS THIS FANTASTIC
04:22:54   DID YOU UNDERSTANDER DICT AROUND FOR THIS OBJECT
04:22:57   AND I'LL JUST NAME SOMETHING WITH -- PUT IT IN
04:22:59   THERE AND THERE WON'T BE ANY COLLISION OR WE'LL
04:23:01   EVEN ADD IT TO THE CLASS AND THERE WON'T BE ANY
04:23:04   COLLISION BECAUSE I'M JUST ADDING METHODS TO IT,
04:23:07   SO WHO HAS DONE THAT?
04:23:09   WHO'S MONKEY PATCHED OR USED DUNDER DICT IN INTH
04:23:15   WAY?
04:23:16   NO ONE, REALLY?
04:23:17   YOU'RE NOT FESSING UP.
04:23:19   NO, YOU ALREADY ARE USING THIS MECHANISM, RIGHT?
04:23:23   SO YOU COULD USE A DICTIONARY AS THE LOOK-UP
04:23:27   TABLE, WHERE YOU USE THE OBJECT AS A KEY, BUT NOW
04:23:30   YOU NEED TO MANUALLY CLEAN UP THAT DICT WHEN THE
04:23:33   OBJECT IS NO LONGER NEEDED.
04:23:34   AND MAYBE YOU KNOW WHEN IT NEEDS TO BE CLEANED UP
04:23:39   OR MAYBE YOU DON'T BECAUSE YOU'RE DOING IT IN THE
04:23:41   CONTEXT OF SOME LIBRARY.
04:23:44   SO IT'S ESPECIALLY USEFUL FOR LIBRARIES.
04:23:46   WE CAN USE A WEAK KEY DICTIONARY.
04:23:50   VERY SIMILAR SORT OF IDEA THAT WE SAW WITH THE
04:23:53   ORDER DICTONE SIDE IS GOING TO BE WEAK AND THE
04:23:59   OTHER HAS A STRONG REFERENCE.
04:24:02   IN THIS PARTICULAR CASE, IT'S THE KEY THAT IS
04:24:05   WEAK.
04:24:05   WE INSERT THE OBJECT AS THE KEY.
04:24:08   WE CAN ASSOCIATE ANYTHING WE WANT AS THE VALUE.
04:24:11   A LIST OF PROPERTIES, SOME OTHER OBJECT, SO ON,
04:24:14   SO FORTH.
04:24:15   WHEN THE OBJECT IS REMOVED, I MEAN, IT'S -- IT
04:24:21   GOES AWAY BECAUSE IT'S NO LONGER IN USE SOMEWHERE
04:24:24   ELSE.
04:24:25   NOTHING ELSE IS HOLDING A STRONG REFERENCE TO IT.
04:24:29   NOW, THE CLEAN-UP OF THAT DICTIONARY WILL OCCUR.
04:24:35   OKAY, SO THAT KEY, THE ITEM FOR THAT KEY WILL BE
04:24:39   REMOVED AND IF THERE'S NOTHING HOLDING ON TO
04:24:43   THOSE ASSOCIATIVE VALUES IN, SAY, THAT LOOK-UP
04:24:48   TABLE, THAT WILL ALSO BE CLEANED UP.
04:24:49   SO WE HAVE A LOOK-UP TABLE THAT WORKS THE WAY WE
04:24:51   WANT IT.
04:24:52   THE OBJECT IS GONE, THIS -- THESE INTERESTING
04:24:54   ADDITIONAL PROPERTIES THAT WE WERE ASSOCIATING
04:24:56   WITH IT ARE GONE NOW, AS WELL, BECAUSE NOTHING
04:25:00   ELSE IS HOLDING ON TO IT.
04:25:01   SO LET'S LOOK AT ONE EXAMPLE.
04:25:04   DJANGO SIGNALS.
04:25:05   SO DJANGO INCLUDES THE SIGNAL DISPATCHER, ALLOWS
04:25:09   FOR DE-COUPLED APPLICATIONS.
04:25:11   TO GET NOTIFIED WHEN ACTIONS OCCUR ELSEWHERE IN
04:25:14   THE FRAMEWORK.
04:25:15   THIS IS EXACTLY THE SORT OF THING WHERE YOU DON'T
04:25:18   KNOW IN ADVANCE NECESSARILY WHO'S TALKING TO YOU.
04:25:25   THE REALITY LOOKS LIKE I GOT A LITTLE BIT CUT OFF
04:25:30   HERE IS THAT IT'S REALLY JUST A COUPLE LINES TO
04:25:35   DO THIS SET-UP.
04:25:36   YOU HAVE TO STILL SET UP WHAT THAT CACHE IS BUT
04:25:40   THE CHOICE OF USING A WEAK KEY DICTIONARY HERE IS
04:25:44   JUST A COUPLE LINES WHERE, REALLY, THE ONLY EXTRA
04:25:47   LINE HERE IS ARE WE USING CACHING OR NOT, AND IF
04:25:51   WE'RE NOT USING CACHING, WE'LL JUST HAVE THIS
04:25:54   EMPTY DICTIONARY THAT WE WON'T USE AT ALL.
04:25:56   JUST TO HAVE SOMETHING AS A PLACEHOLDER.
04:25:59   SO THAT'S PRETTY USEFUL.
04:26:03   BUT THEN YOU LOOK AT THE WEAK REF -- WEAK VALUE
04:26:07   DICTIONARY AND YOU WONDER, WELL, WHAT IS THAT
04:26:09   GOOD FOR?
04:26:10   WHY IS THAT THERE?
04:26:12   SO IF YOU GO AND DO SOME TECH SEARCH IN THE
04:26:17   CENTERED -- STANDARD LIBRARY OR GO OUT TO PYPY,
04:26:22   DO SOMETHING SIMILAR, YOU'LL SEE IT BEING USED IN
04:26:24   A NUMBER OF PLACES.
04:26:25   BEING USED BY MULTI-PROCESSING, BY THE LOGGING
04:26:28   MODULE, SO ON, SO FORTH, BUT, AGAIN, WHY WEAK
04:26:31   VALUES?
04:26:32   WELL, IT'S USEFUL WHEN YOU WANT TO TRACK THE
04:26:36   OBJECT BY SOME I.D., ITS NAME, A NUMBER AND SOME
04:26:40   TABLE, IT'S PROCESS I.D.
04:26:42   OKAY?
04:26:42   BUT YOU DON'T WANT THE FACT THAT IT'S -- THAT YOU
04:26:48   HAVE A PROCESS I.D. TO A PROCESS MAPPING TO NOT
04:26:55   SUPPORT GARBAGE COLLECTING THAT PROCESS.
04:26:59   I MEAN, YES, IT IS EXPENSIVE RESOURCE IS GOING TO
04:27:01   GO AWAY IN THE CASE OF A PROCESS BUT YOU'RE STILL
04:27:04   HOLDING ON TO IT UNNECESSARILY.
04:27:05   SO MAYBE THERE IS SOME OPERATING SYSTEM CLEAN-UP
04:27:10   THAT YOU CAN DO OR EXPECT BUT, AGAIN, NOT ALWAYS.
04:27:15   ALL RIGHT.
04:27:16   SO ONCE THAT OBJECT IS GONE, ONCE WE NO LONGER
04:27:20   NEED TO HOLD ON TO THAT WEAK VALUE, IT'S GOING TO
04:27:23   GO AWAY.
04:27:24   NOW, INTERESTINGLY ENOUGH, WHILE THAT OBJECT IS
04:27:26   AROUND, YOU'RE GOING TO BE HOLDING ON TO THAT
04:27:29   SMALL INTEGER OR STRING BUT GENERALLY WE DISCOUNT
04:27:33   THAT.
04:27:33   ONE PLACE THAT MIGHT HAPPEN IS YOU START UP LOTS
04:27:35   AND LOTS OF THREADS.
04:27:39   AND YOU MAY JUST SEE THAT, YOU KNOW, THIS -- I'M
04:27:44   NOT GOING TO SEE THOSE THREADS' I.D.s GO AWAY
04:27:49   UNTIL THAT PARTICULAR THREAD ITSELF IS NO LONGER
04:27:53   DE-REFERENCED -- NO LONGER REFERENCED, RATHER.
04:27:56   OKAY.
04:27:57   SO HERE'S A LITTLE BIT OF GUIDANCE IN TERMS OF
04:28:00   THINKING ABOUT WHY YOU MIGHT GO AND USE A WEAK
04:28:07   REFERENCE IN ONE PLACE OR ANOTHER.
04:28:09   AND IT'S REALLY THE CONSIDERATION OF WHAT IS THE
04:28:12   OBJECT LIFE CYCLE INDEPENDENCE?
04:28:15   SO ONE SIDE MAY DEPEND ON THE OTHER BUT NOT VICE
04:28:17   VERSA.
04:28:18   SO YOU'RE DOING TO USE WEAK REFERENCES FOR THE
04:28:21   INDEPENDENT SIDE.
04:28:23   THE PROCESS IS TERMINATED.
04:28:25   WELL, YOU NO LONGER NEED TO LOOK IT UP BY PROCESS
04:28:28   I.D., NO LONGER MATTERS, RIGHTS?
04:28:34   JUST LIKE THE WEAK VALUE DICTIONARY, ALL RIGHT?
04:28:37   COULD YOU COMBINE BOTH IDEAS TOGETHER?
04:28:40   WELL, YEAH, BOTH SIDES COULD BE INDEPENDENT.
04:28:46   SO GYTHON IMPLEMENTS THIS INTO THE HINDER
04:28:51   PATTERN, YOU MAY WANT TO WRAP THE JTHON CLASS TO
04:28:54   ITS PYTHON WRAPPERS, INCLUDING FOR SUPPORT FOR
04:28:57   SUBCLASSING THAT JAVA CLASS.
04:28:59   YOU MAY BE THAT PYTHON CLASS MAY BE USED BY JAVA
04:29:06   CLASSES SO, AGAIN, THERE WILL BE -- I'M SORRY,
04:29:10   PYTHON CLASSES USING JAVA CLASS SO THERE WILL BE
04:29:13   SOME STRONG REFERENCE FROM THAT PYTHON CODE SO IN
04:29:15   BOTH CASES, YOU MAY HAVE STRONG REFERENCES BUT
04:29:17   THE FACT THAT THERE IS THIS MAPPING, THIS
04:29:20   ONE-TO-ONE MAPPING, YOU JUST WANTS TO ENSURE
04:29:24   THERE CAN ONLY BE ONE AND WHEN EITHER SIDE GOES
04:29:27   AWAY, IT SHOULD ALSO GO AT THAT POINT.
04:29:35   SO YOU DON'T UNNECESSARILY HOLD ON TO SOME
04:29:38   RESOURCE AND LEAK.
04:29:43   SO EITHER MIGHT GO AWAY.
04:29:45   THE JAVA CLASSES IN THIS PARTICULAR CASE WILL BE
04:29:48   GARBAGE COLLECTED IF NO CLASS LOADER OR THE
04:29:51   OBJECTS OF THAT CLASS EXIST.
04:29:53   BUT THE PYTHON USAGE OF THIS CLASS -- IF THERE'S
04:29:58   NO USAGE ON THE PYTHON SIDE, SO YOU DON'T WANT
04:30:00   THAT MAPPING TO UNNECESSARILY HOLD THINGS.
04:30:04   IF THEY ARE STILL IN USE, YOU WANT IT TO BE HELD
04:30:08   BUT IF THEY GO AWAY, THEN THERE'S NO POINT FOR
04:30:12   THIS MAPPING AT THAT POINT.
04:30:13   THERE IS A PURE PYTHON RECIPE AVAILABLE FOR THIS.
04:30:19   I HAVEN'T REALLY EVALUATED THIS.
04:30:22   THERE IS AN EASY JTHON VERSION BECAUSE I LIKE TO
04:30:27   SHOW OFF GYTHON OCCASIONALLY, AND HERE WE HAVE
04:30:30   IT, A WEAK KEYED VALUE DICTIONARY, IT'S SUBCLASS
04:30:33   IS DICT SO WE CAN GET ITS CAPABILITIES.
04:30:36   WE USE A BUILDER, OH, GOSH, I DIDN'T CHECK THIS
04:30:39   ONE PIECE BUT IT REALLY IS JUST ARG S AND KEYWORD
04:30:44   ARGS.
04:30:45   FOR COMPLETENESS, YOU NEED TO ADD THESE METHODS
04:30:48   BUT THESE ARE TRIVIAL AND THERE IS A THING IN THE
04:30:52   GYTHON LIB MODULE THAT YOU CAN IMPORT THAT ALLOWS
04:30:57   TO YOU BUILD DICTIONARIES WITHOUT ANY JAVA
04:31:00   COMPATIBLE CONCURRENT MAP THAT YOU WANT.
04:31:03   AND ASSIGN IT TO BEING OF A CERTAIN CLASS, THIS
04:31:09   WOULD KEY VALUE DICTIONARY AND YOU'RE DONE AND
04:31:11   NOW YOU HAVE A WEAK KEY VALUE DICTIONARY FOR
04:31:13   REAL.
04:31:13   THAT IS CONCURRENT AND SAFE.
04:31:15   AND I AM DONE.
04:31:17   ANY QUESTIONS?
04:31:19   [ Applause ]
04:31:30   >> AUDIENCE:  IF THERE ARE ANY QUESTIONS FOR JIM,
04:31:32   THERE IS A MICROPHONE RIGHT THERE.
04:31:33   WE HAVE TIME FOR ONE QUESTION, PROBABLY.
04:31:35   OTHERWISE I'M SURE YOU'LL BE ABLE TO GRAB HIM IN
04:31:41   THE HALL AFTERWARDS.
04:31:43   >> GREAT.
04:31:44   ALL RIGHT.
04:31:46   THANK YOU VERY MUCH.
04:31:47













