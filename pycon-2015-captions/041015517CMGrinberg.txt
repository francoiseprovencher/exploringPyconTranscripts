            041015517CMGRINBERG

15:17:03    >> I WANT TO INTRODUCE OUR NEXT SPEAKER,
15:17:03    MIGUEL GRINBERG.
15:17:03    HE IS AN ENGINEER AT RACKSPACE.
15:17:04    HE ALSO QUITE LITERALLY WROTE THE BOOK ON
15:17:08    FLASK DEVELOPMENT, SOMETHING THAT'S BEEN
15:17:11    EXTREMELY HELP ME TO ME AS I'VE BEEN WORKING
15:17:14    ON PYTHON WEB ENGINEERING.
15:17:16    IT'S VEIL FROM O'REILLY.
15:17:19    REALLY IMPROVING THE QUALITY OF YOUR REST
15:17:22    APIS SO I'LL LET MIGUEL TAKE IT FROM THERE.
15:17:26    [ APPLAUSE ]
15:17:29    >> THANK YOU.
15:17:30    OKAY.
15:17:32    FIRST OF ALL, I WANT TO SAY SOMETHING REALLY
15:17:35    QUICK.
15:17:36    THIS IS SUPPOSED TO BE A GOOD DAY FOR ME BUT
15:17:37    I JUST LEARNED THAT MY MOM PASSED AWAY TODAY
15:17:41    UNEXPECTEDLY.
15:17:42    SO I'M GOING TO DEDICATE THIS TALK TO HER.
15:17:47    THANK YOU.
15:17:48    [ APPLAUSE ]
15:17:53    THAT WAS A GREAT INTRODUCTION.
15:18:00    THANK YOU.
15:18:00    SO MOST OF THIS IT'S ALREADY, YOU KNOW,
15:18:03    DUPLICATION.
15:18:04    BUT YES, I WORK FOR RACKSPACE ON OPENSTACK.
15:18:09    I HAVE A BUNCH OF EXTENSIONS FOR FLASK.
15:18:14    OPENSOURCE FOR GITHUB, AND I HAVE A BLOG THAT
15:18:18    MANY OF YOU FOUND ME AND TOLD ME THAT YOU
15:18:21    FOUND IT USEFUL, SO THAT MAKES ME VERY HAPPY.
15:18:24    AND THEN THERE'S THE BOOK AND A BUNCH OF
15:18:27    OTHER THINGS THAT I DID WITH O'REILLY.
15:18:30    SO BASICALLY, IF I CAN SUMMARIZE THIS, I LIKE
15:18:33    FLASK.
15:18:34    THAT'S HOW I'LL PUT IT.
15:18:36    SO TODAY I'M GOING TO TALK ABOUT RESTFUL
15:18:44    APIS.
15:18:44    THIS IS A TOPIC THAT YOU'RE GOING TO FIND
15:18:55    PLENTY OF PEOPLE THAT ASK I WANT TO DO THIS
15:18:57    OR THAT AND HOW DO I DO IT IN AN API, AND
15:19:00    THEN ALWAYS SOMEONE COMES UP AND SAYS NO,
15:19:03    THAT'S NOT RESTFUL, DON'T DO IT.
15:19:05    AND THEN, YOU KNOW, THE PERSON THAT ASKED THE
15:19:08    QUESTION IS LEFT WITH NOTHING.
15:19:09    HOW DO I DO IT?
15:19:11    SO IT'S REALLY VERY CONFUSING.
15:19:15    AND ONE OF THE PROBLEMS IS THAT THE REST
15:19:20    PAPER, THE PAPER THAT INTRODUCED EVERYTHING
15:19:22    WHICH WAS PUBLISHED IN THE YEAR 2000 BY ROY
15:19:27    FIELDING IS VERY HIGH LEVEL.
15:19:31    IT DOESN'T TALK ABOUT DOING REST OVER HTTP.
15:19:34    IT JUST DESCRIBES AT A VERY HIGH LEVEL HOW
15:19:39    REST SERVICE SHOULD BEHAVE, BUT IT DOESN'T
15:19:41    SAY HOW TO MAP THAT INTO HTTP, WHICH IS WHAT
15:19:44    WE ALL USE TO IMPLEMENT OUR APIS.
15:19:46    SO THE OTHER THING THAT WILL BE USEFUL IS IF
15:19:52    THERE WAS GOOD EXAMPLES, REFERENCE
15:19:53    IMPLEMENTATIONS THAT WE CAN ALL FOLLOW.
15:19:56    AND TO MY KNOWLEDGE, THERE ARE NONE.
15:19:58    I DON'T KNOW ANY API THAT I CAN SAY THAT IS
15:20:02    100% RESTFUL, NOT EVEN THE BIG ONES.
15:20:07    SO ANOTHER PROBLEM, I'M SAYING I DON'T THINK
15:20:13    THEY'RE RESTFUL, BUT IT'S ME THINKING THAT
15:20:14    THEY'RE NOT RESTFUL.
15:20:17    THE REST PAPER DOESN'T REALLY SAY HOW HTTP
15:20:19    SHOULD IMPLEMENT THESE APIS, SO IT'S REALLY
15:20:22    MY OPINION, AND THERE'S A LOT OF PEOPLE
15:20:24    MAKING OPINIONS.
15:20:25    PEOPLE GO MAKE OPINIONS ON THE INTERNET, OR
15:20:27    THEY GO TO CONFERENCES AND VOICE THEIR
15:20:30    OPINIONS.
15:20:31    AND HERE I AM.
15:20:32    I'M DOING THE SAME THING.
15:20:33    SO, YOU KNOW, IT'S KIND OF A MESS.
15:20:38    SO SOMETHING THAT I HEARD MENTIONED A LOT IN
15:20:40    THE OPENSTACK ENVIRONMENT IS THAT PEOPLE SAY
15:20:44    WE'RE DOING PRAGMATIC REST.
15:20:47    AND BASICALLY, THAT'S AN EXCUSE TO SAY WE ARE
15:20:49    TAKING THE PARTS OF REST THAT WE LIKE, AND
15:20:51    WE'RE IGNORING THE REST OR WE'RE IGNORING THE
15:20:56    PARTS THAT WE DON'T UNDERSTAND.
15:20:57    AND IS THAT A PROBLEM?
15:20:58    I DON'T THINK IT IS A PROBLEM.
15:21:02    THE PURISTS SAY YOU SHOULD NOT CALL YOUR API
15:21:05    A REST API, BUT WHO CARES, RIGHT?
15:21:07    YOU CAN BENEFIT FROM THE REST PRINCIPLES EVEN
15:21:10    IF NOT ALL OF THEM, JUST SOME.
15:21:12    SO IT'S STILL A GOOD THING TO -- YOU KNOW, TO
15:21:16    FOLLOW AS MANY AS YOU FIND USEFUL.
15:21:21    SO TO BE RESTFUL ACCORDING TO THE PURISTS,
15:21:27    YOU SHOULD ABIDE BY SIX RESTFUL CONSTRAINTS.
15:21:31    THESE ARE THE SIX THAT ARE SPECIFIED IN THE
15:21:34    ORIGINATING PAPER.
15:21:35    SO THESE ARE THE SIX LISTED HERE IN THE ORDER
15:21:38    THEY APPEAR ON THAT PAPER, ON THAT DOCUMENT.
15:21:46    IT'S REALLY AMAZING THAT SOMETHING THAT CAN
15:21:48    BE LISTED SO CONCISELY IS SO COMPLEX.
15:21:51    SO WHAT I DID WITH THESE SIX IS I RATED THEM
15:21:55    FROM EASY, MEDIUM OR HARD.
15:21:59    SO I'M GOING TO GO OVER SIX OF THEM SORTED BY
15:22:03    COMPLEXITY.
15:22:06    AND THEN AFTER I'M DONE WITH THIS, WHICH
15:22:08    SHOULD BE -- IT'S A BRIEF OVERVIEW.
15:22:10    I'M NOT GOING TO GO INTO A LOT OF DETAIL.
15:22:12    AFTER I'M DONE WITH THIS, I'M GOING TO SHOW
15:22:14    YOU AN EXAMPLE.
15:22:16    THAT'S ANOTHER PROBLEM.
15:22:16    A LOT OF PEOPLE, PURISTS, THEY SAY YOU SHOULD
15:22:20    NOW DO THIS, YOU SHOULD DO THAT.
15:22:23    BUT THEY DON'T HAVE ANYTHING TO BACK IT UP.
15:22:25    SO WHAT I'M GOING TO DO HERE IS I'M GOING TO
15:22:28    SHOW YOU WHAT I THINK IS A DECENT MODEL.
15:22:31    IT'S REASONABLY RESTFUL.
15:22:34    THE PURISTS WOULD SAY THAT IT'S NOT QUITE.
15:22:36    I THINK IT'S CLOSE IF IT'S NOT RIGHT THERE ON
15:22:39    THE MARK.
15:22:39    SO LET'S START.
15:22:41    SO THE FIRST ONE IS OPTIONAL.
15:22:45    SO YOU CAN IGNORE IT.
15:22:47    DON'T READ THIS.
15:22:48    JUST GO ABOUT THINGS WITHOUT KNOWING THIS,
15:22:51    AND YOU'RE FINE BECAUSE YOU CAN DO IT OR
15:22:53    DON'T, AND IT'S FINE ANYWAY.
15:22:55    AND IT'S CODE-ON-DEMAND.
15:22:57    WHAT THIS MEANS IS THAT YOU CAN HAVE THE
15:23:00    SERVER CAN PROVIDE THE CLIENT CODE TO
15:23:03    EXECUTE.
15:23:06    SO WE SEE THIS EVERY TIME IF WEB
15:23:08    APPLICATIONS, RIGHT?
15:23:11    YOU GO TO TWITTER.COM, FACEBOOK.COM, OR
15:23:14    ANYTHING.COM AND YOU DON'T ONLY GET HTTP OR
15:23:19    JAVASCRIPT, YOU GET A BUNCH OF SCRIPTS AND
15:23:22    THEN THAT RUNS IN THE BROWSER.
15:23:24    FOR APIS, I DON'T THINK THIS IS THAT USEFUL,
15:23:27    SO I'VE NEVER SEEN IT DONE SUCCESSFULLY.
15:23:36    AND APIS, THE RESTFUL APIS ARE ALL ABOUT
15:23:43    SCALABILITY.
15:23:43    IF YOU WANT TO SUPPORT AS MANY CLIENTS AS YOU
15:23:45    CAN YOU CAN'T A LEE RELY ON THE BROWSER TO BE
15:23:48    THE ONLY TYPE OF CLIENT.
15:23:50    WHAT WOULD YOU SEND?
15:23:50    IF YOU SEND JAVASCRIPT, WHAT IF IT'S AN
15:23:53    IPHONE RUNNING OBJECTIVE C OR THRIFT.
15:23:56    IT KIND OF CREATES A PROBLEM.
15:23:59    SO I CAN DO THIS.
15:24:01    AND IF YOU KNOW OF ANYTHING, ANY PRODUCT THAT
15:24:03    DOES THIS SUCCESSFULLY, I WOULD LIKE TO KNOW
15:24:07    BECAUSE I HAVEN'T SEEN ANY.
15:24:08    SO THE NEXT I'M GOING TO USE PICTURES, SO
15:24:16    THIS WILL BE EASIER.
15:24:16    SO THE SECOND ONE, WHICH IS IN THE EASY
15:24:19    CATEGORY IS CLIENT-SERVER.
15:24:21    AND THIS SHOULD BE -- EVERYBODY GETS THIS.
15:24:23    THIS IS SUPER EASY.
15:24:25    THE IDEA HERE IS THAT YOU SHOULD HAVE THE API
15:24:27    SEPARATED FROM THE CLIENT, AND THAT DOESN'T
15:24:29    MEAN THAT THEY NEED TO BE PHYSICALLY IN
15:24:30    DIFFERENT MACHINES, DIFFERENT POSTS.
15:24:33    THEY NEED TO BE A DIFFERENT PROCESS.
15:24:34    THE API SHOULD BE A DIFFERENT PROCESS AT
15:24:35    LEAST.
15:24:36    IT CAN BE POSTED ON THE SAME MACHINE AS THE
15:24:38    CLIENT.
15:24:39    AND THE IMPORTANT THING IS THAT THE CLIENT
15:24:41    AND THE SERVER TALK OVER A NETWORK PROTOCOL.
15:24:44    BUT WHY?
15:24:45    REMEMBER, I SAID I WAS GOING TO HAVE TO
15:24:47    REPEAT SCALABILITY A LOT.
15:24:49    SO IF YOU DO IT THIS WAY, THEN IT'S SUPER
15:24:52    EASY TO GO TO THIS.
15:24:53    NOW, YOU HAVE ONE API SERVING THE CLIENTS.
15:24:56    SO THIS IS ONE ASPECT OF SCALABILITY THAT IS
15:24:59    BASICALLY, IF YOU FOLLOW THIS PRINCIPLE, YOU
15:25:03    GET IT FOR FREE.
15:25:04    OKAY?
15:25:07    SO NEXT WE'RE GOING INTO THE MEDIUM
15:25:12    COMPLEXITY ONES.
15:25:13    THE NEXT ONE IS CALLED LAYERED SYSTEM.
15:25:16    WHAT THIS SAYS IS THAT THE CLIENT AND THE
15:25:19    SERVER MAY NOT TALK DIRECTLY, THAT THERE
15:25:22    MIGHT BE SOME MYSTERIOUS BLOCKS THAT NOBODY
15:25:26    KNOWS WHAT IT DOES IN THE MIDDLE.
15:25:28    THE CLIENT DOESN'T KNOW IT'S NOT TALKING TO A
15:25:30    SERVER.
15:25:31    THE CLIENT TALKS TO AN INTELLECTUAL PROPERTY
15:25:32    ADDRESS AND A PORT.
15:25:33    IT DOESN'T KNOW IF IT'S A REAL SERVER OR
15:25:36    INTERMEDIATE SERVER, AND THE SAME THING ON
15:25:39    THE OTHER SIDE.
15:25:40    THE SERVER GETS REQUESTS AND IT DOESN'T KNOW
15:25:42    IF IT'S GETTING THEM FROM REAL CLIENTS OR
15:25:44    FROM SOME BOX THAT IS IN THE MIDDLE.
15:25:49    SO THE ONLY ASPECT OF THIS IF YOU'RE
15:25:52    DEVELOPING AN API IT'S IMPORTANT TO KEEP IN
15:25:54    MIND THAT IS ON THE SERVER THIS PREVENTS YOU
15:25:57    FROM IDENTIFYING YOUR CLIENTS, YOU SEE
15:26:01    HEADERS IN THEIR REQUESTS.
15:26:02    RIGHT?
15:26:03    THIS GUY, THIS SERVER HERE IS GOING TO GET
15:26:05    ALL REQUESTS FROM THE SAME CLIENT.
15:26:06    THERE'S NO WAY IT CAN TELL WHO IS THE CLIENT.
15:26:10    RIGHT?
15:26:12    THERE ARE OTHER WAYS.
15:26:14    I'M GOING TO SHOW YOU OTHER WAYS TO IDENTIFY
15:26:16    CLIENTS.
15:26:17    SO THAT'S THE ONLY LIMITATION.
15:26:19    AND ONCE AGAIN, IF YOU DO THIS, YOU GET THIS
15:26:22    FOR FREE.
15:26:23    SO NOW THAT BOX IN THE MIDDLE THAT I DIDN'T
15:26:28    TELL YOU WHAT IT IS, ONE OF THE POSSIBLE
15:26:29    FUNCTIONS IS THAT THIS GUY IS A LOAD
15:26:31    BALANCER.
15:26:32    SO YOUR API STARTS TO BECOME SUCCESSFUL, AND
15:26:36    YOU GET LOAD.
15:26:37    THE SERVER BECOMES SLOW.
15:26:38    JUST THROW MORE SERVERS TO THE CLIENT.
15:26:42    THERE'S ABSOLUTELY NO DIFFERENT.
15:26:44    THEY KEEP SENDING THEIR REQUEST TO THE SAME
15:26:47    API REPORT AND THE ONLY DIFFERENCE IS THE
15:26:49    RESPONSES COME BACK QUICKER.
15:26:51    THE SERVER RESPONSE IS FASTER, RIGHT?
15:26:53    AND YOU CAN KEEP SCALING THIS WAY FOR CENTRAL
15:26:58    SCALING.
15:26:59    NEXT IS CACHE.
15:27:02    WHAT THIS ONE IS SAYING IS THAT THE API
15:27:05    SERVER SHOULD PROVIDE CACHING DIRECTIVES SO
15:27:09    THAT CACHISTS ARE IN THE MIDDLE.
15:27:11    SO FOR EXAMPLE, THAT BOX IN THE MIDDLE COULD
15:27:13    ALSO BE A CACHE.
15:27:14    COULD CACHE THE RESPONSES.
15:27:16    SO THAT IF THE SAME REQUEST COMES OVER AND
15:27:20    OVER, IT CAN PROVIDE A RESPONSE WITHOUT DOING
15:27:23    A TRIP TO THE ACTUAL SERVER.
15:27:31
15:27:31    BUT GOING BACK TO TIE INTO THE LAYERED SYSTEM
15:27:34    THAT WE'VE SEEN BEFORE, YOU CAN ALSO HAVE
15:27:38    CACHES IN THE CLIENTS, AND IN FACT, IF YOU
15:27:40    HAVE WEB BROWSERS AS CLIENTS, YOU DO HAVE A
15:27:44    CACHE.
15:27:45    ALL OUR BROWSERS HAVE A CACHE.
15:27:47    SO YOU MAY NOT EVEN NEED TO GO OUT OF YOUR
15:27:49    CLIENT MACHINE TO ANSWER A REQUEST THAT'S
15:27:52    FREQUENTLY USED.
15:27:53    SO THIS IS CACHE.
15:27:56    OKAY?
15:27:57    UNFORTUNATELY, THE NEXT TWO, THE HARD ONES, I
15:28:01    COULDN'T COME UP WITH PICTURES.
15:28:02    I'M SORRY.
15:28:04    THESE ARE HARDER TO REPRESENT.
15:28:06    SO I DON'T HAVE PICTURES FOR THESE.
15:28:09    THIS GIVES A LOT OF ANGST TO DEVELOPERS, TO
15:28:13    WEB DEVELOPERS, PEOPLE THAT ARE USED TO
15:28:15    CREATE WEB APPLICATIONS, TRADITIONAL WEB
15:28:18    APPLICATIONS.
15:28:18    THEY EXPECT THE API WILL LOG USERS IN AND
15:28:22    THEN REMEMBER THEM.
15:28:25    AND STATE LESS SAYS, THIS CONSTRAINT SAYS
15:28:29    THAT YOU CAN'T DO THAT.
15:28:31    AND THE PROBLEM IS THAT WHEN YOU HAVE
15:28:33    SESSIONS, IT COMPLICATES SCALING.
15:28:37    IMAGINE BEFORE WE WERE SEEING THAT WE CAN GO
15:28:39    FROM ONE TO THREE SERVERS.
15:28:41    IF YOU'RE STORING SESSIONS IN THE ONE SERVER
15:28:43    THAT YOU HAVE, WHEN YOU GO TO THREE, WHAT DO
15:28:45    YOU DO?
15:28:46    WHERE DO YOU PUT THE SESSIONS?
15:28:48    RIGHT?
15:28:48    HOW DO YOU KNOW THAT THE CLIENT WILL GO
15:28:50    ALWAYS TO THE SERVER THAT HOLDS THAT SESSION?
15:28:53    SO IT COMPLICATES THINGS.
15:28:55    IT CAN BE SOLVED BUT IT MAKES THINGS MORE
15:28:57    COMPLICATED.
15:28:59    SO REST IS SAYING DON'T DO IT.
15:29:04    SOME PEOPLE MAY CLAIM THAT COOKIES ARE KIND
15:29:06    OF A LOOPHOLE.
15:29:07    THAT YOU CAN USE COOKIES BECAUSE THE
15:29:09    DIFFERENCE IS THAT YOU CAN STORE STATE
15:29:11    COOKIE, AND THAT GOES TO THE CLIENT, SO THE
15:29:14    CLIENT STORES IT, NOT THE SERVER, AND THEN
15:29:16    EVERY TIME THE CLIENT SENDS A NEW REQUEST IT
15:29:19    SENDS THE COOKIE BACK TO THE SERVER.
15:29:20    SO I THINK COOKIES ARE IN A GRAY AREA.
15:29:24    THEY ARE MAYBE RESTFUL BUT PROBABLY NOT.
15:29:28    MY OPINION IS THAT IT'S NOT A GOOD IDEA TO
15:29:30    USE THEM, AND I'M GOING TO GIVE YOU AN
15:29:31    EXAMPLE.
15:29:31    LET'S SAY THE CLIENT CONNECTS TO THE SERVER
15:29:33    AND GETS A COOKIE AND THEN IT GOES AWAY FOR
15:29:36    ONE MONTH.
15:29:36    DURING THAT MONTH, YOU MAKE UP [INAUDIBLE] TO
15:29:39    YOUR SERVER, AND YOU CHANGE THE FORMAT OF
15:29:41    YOUR SESSIONS.
15:29:42    SO A MONTH PASSES, AND NOW YOU GET A REQUEST
15:29:46    FROM THIS CLIENT THAT HAS AN OLD SESSION IN
15:29:49    AN OLD FORMAT THAT YOU DON'T UNDERSTAND
15:29:51    ANYMORE. SO YOU GET A PROBLEM.
15:29:52    SO AGAIN, IT'S A PROBLEM THAT CAN BE SOLVED
15:29:58    BUT IT'S A COMPLICATION SO IT'S BETTER NOT TO
15:30:00    DO IT.
15:30:00    SO THE WAY TO DO THIS IS TO HAVE CLIENTS SEND
15:30:04    AUTHENTICATION WITH EVERY REQUEST.
15:30:06    SO THE SERVER GETS A REQUEST, AUTHENTICATES
15:30:08    THE USER, CARRIES OUT THE REQUEST, AND THEN
15:30:11    FORGETS COMPLETELY ABOUT THAT CLIENT.
15:30:13    AND THEN WHEN THE CLIENT NEEDS TO SEND
15:30:14    ANOTHER REQUEST, IT REPEATS THE WHOLE THING.
15:30:17    OF COURSE, YOU'RE SENDING AUTHENTICATION
15:30:25    SENSITIVE INFORMATION OVER THE NETWORK EVERY
15:30:26    TIME, SO IT'S VERY, VERY IMPORTANT THAT YOU
15:30:28    USE A SECURE HTTP FOR EVERY END POINT IN YOUR
15:30:31    API.
15:30:36    OKAY.
15:30:36    SO I TOLD -- THESE ARE SIX, AND I CHEATED.
15:30:41    THE SIX-TO-ONE INTERFACE, IT'S REALLY LOADED,
15:30:46    SO IT'S DIVIDED INTO FOUR SECTIONS.
15:30:48    I HAVE FOUR SLIDES FOR JUST THIS.
15:30:51    IT'S SUPER COMPLEX.
15:30:54    AND THIS IS THE ONE THAT BASICALLY GIVES THE
15:30:58    BASIC IDENTIFICATION TO REST THAT WE ALL KNOW
15:31:04    ABOUT REST, WHICH IS TO SEND A REQUEST TO
15:31:05    RESOURCES, AND ALL THAT STUFF IS HERE.
15:31:07    SO THE FIRST PART, 5.25 OUT OF SIX IS THAT
15:31:12    RESOURCES, YOU NEED TO IDENTIFY THEM.
15:31:15    SO RESOURCE WILL BE ANY ENTITY IN YOUR API.
15:31:18    SO IT COULD BE CUSTOMER PRODUCTS AND VOICES.
15:31:21    IF YOU'RE DOING AN API FOR THE DEVICE I TEND
15:31:25    TO DO A PROJECT CAMERAS, I LIKE CAMERAS.
15:31:28    SO WHEN I CREATE AN API FOR A CAMERA, THAT'S
15:31:31    A RESOURCE TOO EVEN THOUGH IT'S A PHYSICAL
15:31:33    ENTITY.
15:31:35    I HAVE EVERY SOURCE FOR IT.
15:31:37    SO FOR EACH RESOURCE, YOU HAVE TO PROVIDE AN
15:31:41    IDENTIFIER, AND THAT'S A URL.
15:31:46    IT DOESN'T MATTER HOW THAT URL LOOKS.
15:31:49    YOU MAY THINK THAT YOU HAVE TO USE THE
15:31:50    STANDARD SLASH, RESOURCE NAME, SLASH ID.
15:31:56    YOU DON'T HAVE TO.
15:31:57    IF YOU WANT TO DO THEM CRYPTIC, THAT'S FINE.
15:32:02    THEY CAN BE UGLY AND CRYPTIC, AND THAT'S
15:32:09    FINE.
15:32:10    IF YOU'RE DEVELOPING A SERVER YOU WANT TO
15:32:12    HAVE THEM IN A WAY THAT YOU UNDERSTAND SO YOU
15:32:13    CAN USE YOUR OWN ORGANIZATION TO CREATE THESE
15:32:16    URLS, BUT THEY CAN BE HOWEVER YOU WANT.
15:32:18    THEY DON'T HAVE TO BE SOMETHING THAT THE
15:32:20    CLIENT UNDERSTANDS.
15:32:23    SECOND PART OF THESE FOUR SUBPARTS IS THE
15:32:28    REPRESENTATIONS.
15:32:30    THIS IS SAYING THAT THE RESOURCES ARE NOT
15:32:33    ACCESSIBLE TO THE CLIENT.
15:32:36    ALL THE CLIENTS SEE ARE REPRESENTATIONS OF
15:32:38    THEM.
15:32:40    SO THIS MEANS THAT YOU DON'T HAVE TO MAP --
15:32:44    SAY YOU HAVE A RESOURCE THAT REPRESENTS A
15:32:48    DATABASE TABLE.
15:32:56    HOW TO REPRESENT AND TRANSFORM THE ENTITIES
15:32:59    OF THESE SOURCES IN A WAY THAT YOU THINK IS
15:33:02    MORE CONVENIENT FOR YOUR API.
15:33:05    IT'S GOING BACK TO THE EXAMPLE OF HAVING THE
15:33:07    CAMERA.
15:33:08    OBVIOUSLY I CANNOT SHIP A CAMERA IN A
15:33:10    RESOURCE BECAUSE IT'S A PHYSICAL OBJECT, SO I
15:33:13    INVENT SOME REPRESENTATION THAT I THINK IS
15:33:15    USEFUL, AND THAT'S MY REPRESENTATION.
15:33:19    REPRESENTATIONS CAN COME IN DIFFERENT
15:33:20    FORMATS.
15:33:21    AND WHEN YOU'RE DOING THIS OVER HTTP, THERE
15:33:23    IS ALL THIS MECHANISM WHERE THE CLIENT AND
15:33:26    THE SERVER CAN AGREE ON THE BEST FORMAT.
15:33:30    THEY NEGOTIATE THE FORMAT.
15:33:31    SO TYPICALLY, YOU SEE JSON, THAT'S THE ONLY
15:33:35    ONE, THAT'S ACTUALLY WHAT I'M GOING TO SHOW
15:33:37    YOU IN THIS EXAMPLE.
15:33:38    BUT, YOU KNOW, IF YOU WANT TO SUPPORT THE
15:33:42    PERFORMANCE, YOU CAN, AND HTTP ALLOWS IT.
15:33:44    IT'S VERY EASY TO DO.
15:33:51    THE CLIENT NEEDS TO MAKE A REPRESENTATION TO
15:33:52    THE RESOURCE.
15:33:53    IT NEVER GETS ACCESS TO THE RESOURCE
15:33:56    DIRECTLY.
15:33:57    IT SHIPS IT TO THE SERVER AND THE SERVER
15:34:00    LOOKS AT THE SOURCE REPRESENTATION AND MAPS
15:34:02    THAT INTO THE RESOURCE.
15:34:04    THE PRESENTATION IS SEPARATE FROM THE ACTUAL
15:34:05    RESOURCE.
15:34:07    SELF DESCRIPTIVE MESSAGES, THE THIRD ONE.
15:34:09    THIS IS SAYING THAT THE MESSAGES OF THESE
15:34:14    REQUESTS AND RESPONSES THAT THE CLIENT AND
15:34:16    SERVER EXCHANGE ARE SELF CONTAINED.
15:34:18    THERE'S NO SIDE INFORMATION.
15:34:23    IT ONE IT'S KIND OF DIFFICULT TO INTERPRET.
15:34:27    IT'S SUBJECT TO INTERPRETATION IF YOU COMPLY
15:34:30    WITH THIS OR NOT.
15:34:31    YOU CAN GET CRAZY AND YOU CAN SAY THAT
15:34:33    NOTHING COMPLIES OR YOU CAN BE RELAXED AND
15:34:35    SAY THAT MOST THINGS COMPLY.
15:34:37    BUT BASICALLY, WHAT MOST PEOPLE DO, AND I DO,
15:34:39    TOO, IS BASICALLY DEFINE ALL THE THINGS THAT
15:34:42    YOU WANT DONE ABOUT THIS REQUEST IN THE
15:34:46    REQUEST AND THE RESPONSE.
15:34:48    SO YOU SEND THE OPERATION IN THE REQUEST
15:34:50    METHOD, WHICH COULD BE GET POST, PUT, AND
15:34:55    DELETE, OR OTHERS.
15:34:56    THERE ARE OTHERS THAT SOME PEOPLE USE BUT
15:34:58    THESE ARE THE FOUR THAT ARE THE MOST USED.
15:35:01    YOU ALWAYS OPERATE ON THAT RESOURCE.
15:35:03    SO THAT'S YOUR URL.
15:35:05    THE URL, YOU SEND THE REQUEST TO.
15:35:07    YOU NEED TO AUTHENTICATE ALWAYS AS I SAID
15:35:09    BEFORE, SO YOU USE THE HEADERS FOR, FOR
15:35:11    EXAMPLE, BASIC AUTHENTICATION IN HTTP.
15:35:15    CONTENT TYPE AND ACCEPT HEADERS ARE FOR
15:35:19    CONTENT NEGOTIATION IF YOU DO THAT.
15:35:20    IF YOU NEED TO USE REPRESENTATIONS, THOSE GO
15:35:23    IN THE BODY.
15:35:24    EITHER THE REQUEST OR THE RESPONSE.
15:35:26    AND WHEN THERE IS A RESULT COMING BACK FROM
15:35:29    THE SERVER, YES, FROM THE SERVER, YOU GET IT
15:35:31    IF THE STATUS QUO OF THE HTTP RESPONSE.
15:35:38    THE LAST ONE, THIS ONE NOBODY DOES THIS.
15:35:44    YOU CAN LOOK AT THIS, GO FIND ANY APIS
15:35:48    NOBODY -- I REALLY LOVE IT.
15:35:50    I WOULD LOVE TO BE WRONG ABOUT THIS.
15:35:52    BUT I DON'T THINK I AM.
15:35:55    SO LET ME KNOW.
15:35:57    NOBODY DOES THIS.
15:35:58    THE IDEA HERE IS SO IT'S SAYING HERE THAT THE
15:36:05    API SHOULD WORK WITH HYPER MEDIA, SO YOU
15:36:08    SHOULD HAVE LINKS, AND THE CLIENT, THIS
15:36:13    COVERS RESOURCES THROUGH LINKS THAT IT GETS
15:36:16    FROM PREVIOUS RESOURCES IT KNOWS ABOUT.
15:36:18    SO BASICALLY, AT THE BEGINNING THE CLIENT
15:36:20    KNOWS NOTHING.
15:36:20    ONLY KNOWS THE URL OF THE API, THE MAIN URL.
15:36:24    AND FROM THERE, IT STARTS DISCOVERS ALL THE
15:36:28    THINGS THAT ARE THERE.
15:36:30    THIS IS  ANOTHER ONE THAT IS SUBJECT TO
15:36:32    INTERPRETATION.
15:36:32    YOU CAN GET CRAZY, AND THEN IT'S REALLY
15:36:34    IMPOSSIBLE TO IMPLEMENT THIS, OR YOU CAN BE
15:36:37    PRAGMATIC AND IMPLEMENT A REASONABLE -- HAVE
15:36:41    ORIGINAL IMPLEMENTATION OF IT THAT
15:36:42    ESSENTIALLY IS USEFUL AND THAT'S WHAT I'M
15:36:46    GOING TO SHOW YOU TODAY.
15:36:47    OKAY.
15:36:48    SO I THINK I'M GOING TO STOP HERE.
15:36:52    I'M GOING TO SHOW YOU THE EXAMPLE.
15:36:54    SO THIS IS OPEN SOURCE, SO YOU CAN WRITE DOWN
15:37:00    THE REPOSITORY FOR THIS.
15:37:04    IT'S PYTHON.
15:37:05    I'M SURE YOU CAN GET GUESS THIS.
15:37:07    IT'S WRITTEN IN FLASK.
15:37:09    I'M NOT USING ANY EXTENSIONS FOR REST.
15:37:12    I DID THE REST BY HAND USING NATIVE FLASK.
15:37:16    IN FACT, EVEN IF I WANTED TO USE A FRAMEWORK,
15:37:19    I DON'T THINK ANY FRAMEWORK IN PYTHON OR ANY
15:37:23    OTHER LANGUAGE WILL ALLOW ME TO GET TO THIS
15:37:26    LEVEL OF RESTFULNESS.
15:37:29    I THINK I WOULD NEED TO JUMP THROUGH HOOPS TO
15:37:31    GET, ESPECIALLY THE HYPER MEDIA PART DONE.
15:37:34    SO I FOUND IT WAS EASIER TO DO IT IN FLASK
15:37:38    NATIVE.
15:37:45    LET'S SEE HOW THAT WORKS.
15:37:48    I'M RUNNING IT HERE.
15:37:48    I HAVE THREE WINDOWS.
15:37:50    NUMBER ONE IS RUNNING THE SERVER.
15:37:52    AND I HAVE REDIS RUNNING ON NUMBER TWO.
15:37:57    BEFORE I START I'M GOING TO TELL YOU A LITTLE
15:37:59    TRIVIA.
15:37:59    ONE OF THE THINGS I'M GOING TO SHOW HERE IT'S
15:38:02    KIND OF NOT RESTFUL.
15:38:03    LET'S SEE IF YOU CAN SPOT IT.
15:38:05    I'LL TELL YOU AFTER I'M DONE WITH THE DEMO.
15:38:11    I'M GOING TO USE A MIDLINE CLIENT.
15:38:14    SO THIS IS HTTP REQUEST TO THE TOP URL.
15:38:19    YOUR URL OF THIS API IS RUNNING ON THE FLASK
15:38:22    DEVELOPMENT SERVER, SO IT'S LOCAL HOST FIVE
15:38:25    THOUSAND.
15:38:25    I'M NOT USING HTTPS HERE BECAUSE IT'S RUNNING
15:38:28    ON MY MACHINE.
15:38:29    IF I WOULD WANT TO DEPLOY THIS I WOULD HAVE
15:38:32    TO USE HTTPS OF COURSE.
15:38:35    SO I KNOW I CAN'T.
15:38:36    I CANNOT GET ACCESS.
15:38:37    NOW, TAKE A LOOK AT THIS.
15:38:43    MEDIA.
15:38:43    LOCATION HEADER TELLS ME WHERE SHOULD I GO TO
15:38:46    GET MY TOKEN.
15:38:47    I'M GOING TO USE TOKEN AUTHENTICATION HERE.
15:38:50    SO LET'S GO THERE.
15:38:54    THIS IS TELLING ME PHOTO FIVE METHOD NOT
15:38:57    ALLOWED.
15:38:58    SELF DESCRIPTIVE MESSAGES AGAIN.
15:39:00    THIS IS SELF CONTAINED.
15:39:03    I EXACTLY KNOW WHAT'S GOING ON HERE.
15:39:05    THIS IS TELLING ME THAT A GET REQUEST TO THIS
15:39:07    URL IS INVALID.
15:39:09    SO LET'S TRY OPTIONS.
15:39:18    THE OPTIONS REQUEST TELLS ME WHAT REQUESTS
15:39:20    THIS URL SUPPORTS, AND HERE I CAN SEE --
15:39:23    OKAY.
15:39:23    SO IT'S A POST REQUEST.
15:39:25    THIS GUY WANTS A POST REQUEST.
15:39:26    SO I'M GOING TO DO A POST REQUEST.
15:39:34    AND THIS IS TELLING ME I NEED TO AUTHENTICATE
15:39:36    TO GET MY TOKEN.
15:39:38    SO I'M GOING TO SEND AUTHENTICATION.
15:39:42    AND I HAVE AN ACCOUNT ON THIS.
15:39:44    SO I'M GOING TO SAY MY USER NAME.
15:39:46    IT'S GOING TO ASK ME FOR MY PASSWORD, AND
15:39:50    THAT'S MY TOKEN.
15:39:51    OKAY?
15:39:52    SO NOW I HAVE A TOKEN.
15:39:53    I'M GOING TO HAVE TO USE THIS ON EVERY SINGLE
15:39:56    REQUEST.
15:39:56    SO I'M GOING TO SAY THAT ON THE VARIABLE.
15:39:59    OKAY? AND NOW I CAN GO BACK TO THE VERY FIRST
15:40:07    ONE AND I CAN AUTHENTICATE WITH MY TOKEN.
15:40:13    HERE, I GET THE FIRST THING.
15:40:15    THIS IS ALL I KNOW IS THAT THE ONLY URL I
15:40:19    KNOW AS A CLIENT.
15:40:21    AND THIS HAS GIVEN ME A CATALOG WHERE I SEE
15:40:23    ALL THE RESOURCES THAT I CAN ACCESS AND ALL
15:40:25    THE VERSIONS THAT THIS API SUPPORTS.
15:40:28    RIGHT NOW THERE'S ONLY ONE, AND THERE ARE
15:40:30    THREE RESOURCES.
15:40:31    MOST PEOPLE SAY, WELL, OKAY, YOU'RE A HUMAN.
15:40:33    YOU HAVE A BRAIN, YOU CAN READ THIS AND
15:40:35    UNDERSTAND IT.
15:40:36    HOW CAN SCRIPT AND APPLICATION CAN UNDERSTAND
15:40:40    THIS IF IT DOESN'T KNOW ANY PREVIOUS
15:40:41    KNOWLEDGE.
15:40:42    AND THAT'S TRUE.
15:40:43    I AGREE WITH THAT VIEW.
15:40:45    THE RESOURCES IN AN API NEED TO BE
15:40:47    DOCUMENTED.
15:40:49    SO THE CLIENT KNOWS WHAT RESOURCES SHOULD
15:40:53    EXPECT TO FIND.
15:40:54    WHAT IT DOESN'T KNOW IS WHERE THEY ARE
15:40:56    LOCATED.
15:40:58    AND THIS IS GOOD BECAUSE WHEN YOU IN THE
15:41:02    SERVER NEEDS TO -- IF YOU NEED TO REORGANIZE
15:41:04    YOUR RESOURCES, YOU'RE FREE TO DO IT.
15:41:11    SO THIS EXAMPLE IS BASED ON THE EXAMPLE I
15:41:13    SHOWED LAST YEAR AT THE API TALK I DID.
15:41:17    SO YOU CAN GO SEE THE BY VIDEO OF IT IF YOU
15:41:22    WANT TO FIND OUT MORE.
15:41:24    IT'S BASICALLY ALLOWS STUDENTS AND CLASSES TO
15:41:27    REGISTER, SO STUDENTS REGISTER TO CLASSES.
15:41:30    SO LET'S SEE WHAT CLASSES WE HAVE.
15:41:37    SO I STAKE THAT URL AND SEND A GET REQUEST.
15:41:41    SO HERE -- I'M NOT SEEING THE WHOLE THING.
15:41:45    SORRY.
15:41:51    SO WE HAVE HEADERS.
15:41:55    THERE'S CAPTION HEADERS, CACHE CONTROL AND
15:41:58    ETAG ARE FOR CACHING.
15:42:00    SO I'M NOT GOING TO GO INTO DETAILS BUT THOSE
15:42:02    ARE AN HTTP CACHE WOULD UNDERSTAND THOSE AND
15:42:06    WE WOULD BE ABLE TO INTERPRET THOSE AND APPLY
15:42:08    CACHING TO THIS REQUEST.
15:42:10    WHAT ELSE WE HAVE?
15:42:11    WE HAVE THREE RIGHT LIMITING HEADERS.
15:42:15    THOSE ARE PRETTY STANDARD IN APIS THESE DAYS.
15:42:18    THEY ARE TELLING ME HOW MANY REQUESTS I CAN
15:42:20    DO IN A SHORT AMOUNT OF TIME.
15:42:22    AND THEN WE HAVE CLASSES, WHICH IS THE LIST
15:42:24    OF CLASSES.
15:42:27    AND WE HAVE META.
15:42:28    SO MET A IS PAGINATION INFORMATION.
15:42:33    AND THE IDEA HERE IS THAT I DON'T KNOW HOW
15:42:35    MANY CLASSES I HAVE IN THIS DATABASE.
15:42:37    IT COULD BE A REALLY LONG LISTING, SO THE
15:42:39    SERVER ENFORCES PAGINATION, AND THE
15:42:41    INFORMATION THAT YOU GET INCLUDES PAGE
15:42:43    NUMBER, NUMBER OF PAGES, FIRST, LAST, NEXT,
15:42:46    AND PREVIOUS URLS, ALL THAT STUFF, SO HYPER
15:42:49    MEDIA ONCE AGAIN.
15:42:51    THE CLASSES LIST IS A LIST OF URLS.
15:42:53    AND PEOPLE DON'T SEEM TO LIKE THIS.
15:42:56    THE REASON I DO IT THIS WAY IS BECAUSE BY
15:42:58    PUTTING THE URLS HERE, THE LINKS, I IMPROVE
15:43:02    CACHING EFFICIENCY.
15:43:05    THE RESPONSES TO ALL THESE REQUESTS MIGHT BE
15:43:07    CACHED.
15:43:07    SO IT MAY BE PRETTY CHEAP TO ISSUE THESE
15:43:11    REQUESTS AND GET A RESPONSE.
15:43:14    NOW, YOU MAY NOT LIKE THIS, AND I AGREE,
15:43:16    SOMETIMES THIS IS NOT -- I MEAN, IT'S GOING
15:43:18    TO BE A PAIN TO HAVE TO GO AND GET ALL THESE
15:43:22    TEN REQUESTS SEPARATELY, AND YOU END UP
15:43:25    ISSUING A LOT OF REQUESTS.
15:43:26    SO I'M GOING TO SHOW YOU OTHER WAYS TO DEAL
15:43:29    WITH THIS.
15:43:30    BUT FIRST, THIS IS A COLLECTION.
15:43:33    SO THERE ARE A NUMBER OF FUNCTIONS
15:43:37    THAT ARE DOCUMENTED, SO THIS IS NOT -- THE
15:43:41    CLIENT NEEDS TO KNOW THIS.
15:43:42    SO ONE THING YOU CAN DO IS YOU CAN SAY FOR
15:43:44    PAGE -- LET'S DO IT.
15:43:46    AND THAT CHANGES THE PAGE SIZE.
15:43:48    I CAN SAY -- I CAN LEAVE THAT AND ADD FILTER.
15:43:53    I CAN SAY NAME, GREATER/EQUAL TO P, A
15:44:02    NAMELESS THAN Q.
15:44:03    THIS WILL GIVE YOU ME ALL THE CLASSES THAT
15:44:06    START WITH P, AND I CAN ALSO SAY SORT BY NAME
15:44:09    ASCENDING.
15:44:15    SO I GOT TWO.
15:44:16    IT TELLS ME DOWN THERE -- THIS IS IN THE DARK
15:44:19    WHERE YOU, THE BOTTOM NOTE SAYS THERE ARE
15:44:21    THREE.
15:44:21    SO THERE'S ONE MORE.
15:44:24    HOW DO I GET TO THE NEXT PAGE HERE AND I
15:44:26    DON'T HAVE TO GO BACK TO THAT AND EDIT THE
15:44:30    URL.
15:44:30    I GET THE NEXT HYPER MEDIA AGAIN.
15:44:33    I'M SORRY.
15:44:34    AUTHENTICATION.
15:44:38    AND JUST COPY AND PASTE THAT, AND -- WHAT DID
15:44:42    I DO WRONG HERE?
15:44:54    I'M SORRY, I CAN'T HEAR YOU.
15:44:56    OH, I'M SORRY.
15:44:57    METHOD.
15:44:57    YES.
15:44:58    GET.
15:45:10    YOU'RE SHARP TODAY, I'M NOT.
15:45:13    HERE YOU GO.
15:45:14    OKAY.
15:45:14    SO HERE'S MY THIRD ONE.
15:45:18    I HAD THREE.
15:45:19    NOW, LET'S USE THIS ONE, AND LET'S SAY YOU
15:45:22    DON'T REALLY WANT THIS GETTING URLS.
15:45:25    IT'S REALLY HAVING A SECOND STEP TO GET URLS.
15:45:28    IT'S KIND OF A -- IT'S PAINFUL.
15:45:30    SO I CAN DO EXPAND EQUALS ONE.
15:45:35    AND THAT BASICALLY REPLACES THE URL WITH THE
15:45:38    ACTUAL REPRESENTATION FOR THAT RESOURCE.
15:45:42    OKAY?
15:45:43    SO THIS IS PYTHON PROGRAMMING.
15:45:46    SO HOW CONVENIENT.
15:45:48    I'M GOING TO SAVE THIS.
15:45:52    WE ARE GOING TO USE THIS.
15:45:53    SO I'LL SAVE IT IN A VARIABLE.
15:45:57    LET'S GO BACK TO THE BEGINNING.
15:45:59    SO WE WERE PLAYING WITH CLASSES.
15:46:01    SO NOW LET'S LOOK AT STUDENTS.
15:46:11    SO LET'S GET A LIST OF STUDENTS.
15:46:12    I COPY/PASTE THIS ADDRESS.
15:46:19    SO THIS DATABASE I HAVE NO STUDENTS.
15:46:21    SO I'M SURE YOU KNOW THIS.
15:46:23    TYPICALLY, WHEN YOU WANT TO CREATE A
15:46:25    RESOURCE, YOU SPEND A POST REQUEST TO THE
15:46:28    COLLECTION URL, THIS URL HERE.
15:46:30    SO I'M GOING TO GO AHEAD AND CHANGE THIS TO
15:46:34    POST AND SEE WHAT HAPPENS.
15:46:37    OOPS.
15:46:39    BACK REQUEST.
15:46:39    SELF DESCRIPTIVE MESSAGES.
15:46:41    SO DO YOU KNOW WHAT HAPPENED HERE?
15:46:43    THERE'S NO DATA.
15:46:44    THAT'S THE PROBLEM.
15:46:46    SO DOCUMENTATION SAYS THAT THE STUDENT
15:46:49    RESOURCE HAS ONE FIELD.
15:46:50    IT'S CALLED NAME.
15:46:52    SO I'M GOING TO SAY NAME, SUSAN.
15:46:56    AND THAT WORKED.
15:47:00    AND HYPER MEDIA AGAIN.
15:47:01    THIS IS THE ADDRESS FOR THE NEW RESOURCE.
15:47:05    SO IF I SEND A GET REQUEST TO THIS ONE, I GET
15:47:12    SUSAN.
15:47:15    IT'S LOWER CASE, SO THAT SHOULD BE UPPER
15:47:17    CASE.
15:47:17    SO I'M GOING TO GO AHEAD AND MODIFY THIS, AND
15:47:23    YOU PROBABLY KNOW THIS, TOO.
15:47:25    PUT REQUEST TO A RESOURCE URL MODIFIES IT.
15:47:28    SO NAME, PROPERLY UPPER CASES.
15:47:35    AND IT SAYS OKAY.
15:47:37    SO I'M GOING TO REGISTER SUSAN TO A CLASS.
15:47:40    YOU CAN SEE HERE IN THE REPRESENTATION FOR
15:47:43    SUSAN THERE'S THIS REGISTRATION URL.
15:47:47    ONCE AGAIN, HYPER MEDIA THIS.
15:47:49    THIS IS A LINK TO THE LIST OF -- THE
15:47:52    COLLECTION OF REGISTRATIONS, CLASS
15:47:54    REGISTRATIONS FOR THIS ONE STUDENT, FOR
15:47:56    SUSAN, WHICH, IF I SEND A REQUEST, THIS IS
15:48:00    EMPTY.
15:48:01    SUSAN IS A NEW STUDENT, SO -- SO I'M GOING TO
15:48:09    CREATE A REGISTRATION BY SENDING A POST
15:48:14    REQUEST, AND I'M GOING TO SAY CLASS URL.
15:48:19    REMEMBER, I SAVED THE URL FOR THE PYTHON
15:48:22    CLASS?
15:48:24    SO THERE IT GOES.
15:48:26    AND NOW I HAVE ANOTHER LINK FOR THIS
15:48:30    ASSOCIATION BETWEEN A STUDENT AND THE CLASS.
15:48:34    SUSAN REGISTERED TO PYTHON CLASS.
15:48:37    OOPS, I MISSED ONE.
15:48:39    SO I CAN GET THIS.
15:48:43    I KEEP DOING THAT.
15:48:46    AND THIS ONE HAS THE CLASS AND SELF URL.
15:48:51    I DIDN'T MENTION THIS.
15:48:52    ALL THE RESOURCES THAT I HAVE HAVE A SELF
15:48:54    URL.
15:48:54    THEY BASICALLY REFER TO THEMSELVES.
15:48:57    SO YOU HAVE THE CLASS, THE STUDENT, AND ALSO
15:49:07    LET'S SAY SUSAN CHANGED HER MIND.
15:49:10    SHE KNOWS ENOUGH PYTHON SO SHE DECIDED NOT TO
15:49:13    TAKE THIS CLASS.
15:49:14    SO THE WAY I DO THAT IS BY SENDING A DELETE
15:49:17    REQUEST TO THE REGISTRATION.
15:49:19    AND THAT TAKES CARE OF THAT.
15:49:21    AND IF I NOW GO BACK TO GET THE REGISTRATIONS
15:49:26    FOR SUSAN, NOW IT'S EMPTY AGAIN.
15:49:31    SO DID YOU FIND WHAT'S NOT -- ON PURPOSE, I
15:49:37    DIDN'T MENTION -- I BRIEFLY MENTIONED, YOU
15:49:39    KNOW, -- NO, SIR.
15:49:48    SO HE'S SAYING THAT WHEN I UPDATED THE
15:49:51    STUDENT, I SHOULD HAVE USED A PATCH.
15:49:53    NORMALLY, IT'S NOT A PARTIAL UPDATE.
15:50:03    THIS IS A VERY -- THIS IS A VERY SIMPLE
15:50:06    PROJECT, SO NAME IS ALL THERE IS.
15:50:08    SO THAT WAS CORRECT.
15:50:11    EVEN IF I LIKE PATCH, NO.
15:50:14    VERY LIMITING.
15:50:14    REMEMBER, NOW I TOLD YOU WHAT'S THE PROBLEM.
15:50:18    SO THINK, WHICH OF THE PRINCIPLES OF THE
15:50:21    CONSTRAINTS THIS IS BREAKING.
15:50:23    IS IT BREAKING THE STATELESS CONSTRAINT?
15:50:26    YOU CANNOT REMEMBER USERS COUNTING HOW MANY
15:50:30    TIMES THEY USE THEIR CONTEXT SERVER, IT'S A
15:50:34    VIOLATION.
15:50:34    UNFORTUNATELY, LIMITING IS A MUST.
15:50:37    YOU HAVE TO HAVE IT.
15:50:38    SO THAT'S WHY I PUT IT IN HERE.
15:50:41    THE WAY MOST PEOPLE DO LIMITING IS BY
15:50:46    CHECKING THE REMOTE ADDRESS.
15:50:49    AND THAT WOULD BE REALLY BAD BECAUSE AS I
15:50:51    MENTIONED BEFORE, WHEN I SHOWED PICTURES, THE
15:50:53    REMOTE ADDRESS MIGHT ALWAYS BE THE SAME ONE.
15:50:56    YOU REALLY CANNOT TRUST THAT.
15:50:58    THAT'S REALLY -- IT'S SOMETHING THAT YOU
15:51:01    CANNOT TRUST.
15:51:02    SO THE WAY I'M DOING HERE, AND YOU CAN LOOK
15:51:03    AT IT IN THE PROJECT IS BY USING THE
15:51:06    AUTHENTICATION INFORMATION.
15:51:07    SO UNAUTHENTICATED USERS CANNOT BE VERY
15:51:11    LIMITED WITH THIS SOLUTION THAT I IMPLEMENTED
15:51:14    HERE.
15:51:14    BUT SINCE ALL THE END POINTS ARE
15:51:16    AUTHENTICATED IT'S NOT A BIG DEAL FOR THIS
15:51:19    PARTICULAR PROJECT.
15:51:19    SO ANYWAY, THAT'S THE DEMO PART.
15:51:23    SO YOU PROBABLY THINK I'M CRAZY THAT MAYBE I
15:51:31    SPENT MONTHS, A YEAR CREATING ALL THIS BY
15:51:33    HAND ON FLASK WITHOUT ANY EXTENSIONS, NO
15:51:38    RESTFUL SUPPORT, I JUST DID IT ALL BY HAND
15:51:41    AND CREATED ALL THIS SORTING, FILTERING,
15:51:44    EXPANSION, ALL THAT STUFF.
15:51:45    SO MAYBE YOU'RE SAYING THAT, YOU KNOW, IT'S
15:51:47    NOT WORTH IT.
15:51:48    I DON'T KNOW.
15:51:50    LET'S GIVE UP ON REST.
15:51:52    LET'S GO BACK TO SOAP.
15:51:54    I DON'T KNOW.
15:51:58    SO I'M REALLY KIDDING.
15:52:01    IT'S EASY.
15:52:03    AND YOU'RE WELCOME TO LOOK AT THE PROJECT AND
15:52:05    LOOK AT THE VIDEO OF THE -- I EXPLAINED
15:52:08    BETTER -- A SIMILAR PROJECT, A LITTLE SIMPLER
15:52:12    THAN THIS ONE, BUT THE VIDEO FROM LAST YEAR
15:52:15    WILL BE, YOU KNOW, INFORMATIONAL.
15:52:16    BUT JUST SO THAT I WHET YOUR APPETITE, I'M
15:52:21    GOING TO SHOW YOU ONE OF THE ROUTES.
15:52:22    REMEMBER WHEN I OBTAINED ALL THE CLASSES THAT
15:52:25    START WITH P?
15:52:27    SO HOW LONG IS THAT DO YOU THINK?
15:52:31    THE TOP LEVEL, YOU KNOW, THE END POINT FOR
15:52:35    THAT, I'M GOING TO GIVE YOU A CLUE, FITS
15:52:37    HERE.
15:52:38    OKAY AND ANOTHER CLUE, HELLO,.
15:52:48    THAT'S IT.
15:52:48    SO THIS IS A DATABASE QUERY.
15:52:50    OKAY?
15:52:51    THIS IS THE ONLY END POINT SPECIFIC CODE THAT
15:52:55    I NEED FOR A COLLECTION.
15:52:56    ALL I NEED TO DO IS WRITE A FUNCTION AND
15:52:59    RETURN A DATABASE QUERY.
15:53:02    THIS IS A DATABASE QUERY THAT HASN'T RUN YET.
15:53:05    IT'S A QUERY THAT IS STILL YET TO RUN THAT
15:53:08    CURRENTS THAT -- THAT RETURNS THAT
15:53:10    COLLECTION.
15:53:11    USING ALCHEMY CLASS QUERY.
15:53:14    OKAY?
15:53:15    SO WHAT DO I DO WITH THIS?
15:53:18    I DECORATE THIS FUNCTION WITH A GENERIC
15:53:22    DECORATOR.
15:53:23    THIS WORKS FOR EVERY COLLECTION, AND IF YOU
15:53:25    WORK WITH FLASK SQL IT WILL PROBABLY USE ON
15:53:29    YOUR CHANGE PROJECT AS WELL.
15:53:32    SO THIS DECORATOR TAKES THE QUERY THAT THE
15:53:35    FUNCTION RETURNS AND LOOKS AT THE QUERY
15:53:37    STRING OF THE URL AND THEN APPLIES A SORTING,
15:53:40    FILTERING, PAGINATION, ALL OF THAT.
15:53:43    THEN RUNS THE QUERY, GETS THE RESULTS.  IT
15:53:46    LOOKS AT THE QUERY STRING AGAIN TO SEE IF YOU
15:53:49    WANT EXPANDED OR NOT EXPANDED RESULTS.
15:53:51    AND BASED ON THAT, IT GENERATES A PYTHON
15:53:54    DICTIONARY WITH THE DATA.
15:53:55    SO THERE ARE REPRESENTATIONS AS A PYTHON
15:53:57    DICTIONARY.
15:53:58    SO NOW YOU HAVE A LIST.
15:54:01    IT'S A LIST INSIDE A PYTHON DICTIONARY, THE
15:54:04    WHOLE THING.
15:54:10    THAT GOES TO ANOTHER DECORATOR.
15:54:12    THIS GUY TAKES THE DICTIONARY AND RENDERS IT
15:54:15    ADJACENT.
15:54:16    I COULD IMPROVE THIS AND MAKE IT A PROPER
15:54:18    CONTENT NEGOTIATION.
15:54:19    IT COULD SUPPORT XML AND WHATEVER, HTML, WHO
15:54:25    KNOWS.
15:54:28    AND THEN THE DECORATOR ADDS THE CACHING.
15:54:32    THE CACHING REQUIRES AN MT5 HASH TAG.
15:54:36    SO IT LOOKS AT THE RESPONSE THAT THE JSON
15:54:38    DECORATOR PUT AND CREATES THE MT5 FOR THE
15:54:43    CASH TO WORK PROPERLY.
15:54:44    AND THEN, FINALLY, I TAKE THIS WHOLE THING,
15:54:45    THE FUNCTION AND ALL THE DECORATORS AND I
15:54:48    REGISTER WITH FLASK UNDER THE URL FLASK
15:54:52    CLASSES FOR MET A GET.
15:54:55    AND IF YOU LOOK AT THE CODE, THE HIGH LEVEL
15:54:58    CODE, IT'S PRETTY MUCH ALL LIKE THIS.
15:55:00    IT'S ALL SUPER SIMPLE AND BASICALLY IT MADE
15:55:05    WRITING THIS PROJECT REALLY, REALLY FUN FOR
15:55:07    ME:  THAT'S ALL I HAVE.
15:55:17    THANK YOU.
15:55:18    [ APPLAUSE ]
15:55:21    >> ALL RIGHT.
15:55:21    FOLKS.
15:55:21    WE HAVE ABOUT FIVE MINUTES LEFT FOR
15:55:23    QUESTIONS.
15:55:23    THE MICROPHONE IS RIGHT BACK ALMOST IN THE
15:55:25    CENTER OF THE ROOM, SO IF YOU HAVE ANY
15:55:26    QUESTIONS, PLEASE FEEL FREE TO LINE UP.
15:55:48    >>  CAN I POSE A HYPOTHETICAL?
15:55:50    I'VE GOT A BUNCH OF MICRO SERVICES.
15:55:53    WOULD I WANT TO HAVE A BUNCH OF INDIVIDUAL
15:55:56    FLASK CONTAINERS, ONE PER RESOURCE?
15:56:00    >>  ONE PER RESOURCE?
15:56:01    WHY WOULD YOU DO THAT?
15:56:02    WHAT'S THE BENEFIT?
15:56:03    >>  IN CASE I WANT TO REDEPLOY ONE OF THEM,
15:56:07    CHANGING THAT CLASS OF RESOURCES.
15:56:09    NOT ONE PER RESOURCE INSTANCE.
15:56:11    I MEAN ONE PER CLASS OF RESOURCE, SO I'VE GOT
15:56:14    A FLASK CONTAINER THAT HAS CLASSES AND A
15:56:16    FLASK CONTAINER THAT HAD STUDENTS, AND A
15:56:19    FLASK CONTAINER THAT HAS REGISTRATION.
15:56:21    >> OKAY.
15:56:21    SO YOU CAN HOST SEPARATE SERVERS AND THEN PUT
15:56:24    THEM BEHIND A PROXY SERVER THAT FINDS WHICH
15:56:30    ONE TO TALK TO.
15:56:33    BE FAIRLY SIMPLE TO ARCHITECT.
15:56:36    AND IT DOESN'T CHANGE ANYTHING FOR FLASK.
15:56:39    >>  SORRY.
15:56:40    WERE THOSE DECORATORS STANDARD WITH FLASK?
15:56:44    I DON'T HAVE MUCH FAMILIARITY WITH FLASK.
15:56:45    >> NO.
15:56:45    DECORATORS, THIS IS A FEATURE OF PYTHON.
15:56:48    IT'S A --
15:56:49    >>  NO.
15:56:49    NO.
15:56:50    I MEAN THE ONES YOU WERE USING.
15:56:52    >>  THE DECORATIONS I USED ARE MINE.
15:56:54    SO I CODED THEM.
15:56:56    ACTUALLY, I CAN TELL YOU A LITTLE BIT MORE.
15:56:58    THE COLLECTION ONE -- YOU PROBABLY THINK I'M
15:57:00    CHEATING BECAUSE I SAID THAT THIS IS SIMPLE,
15:57:02    AND OF COURSE, YOU KNOW, ALL THE COMPLEXITY
15:57:05    ISN'T ALL -- IT'S ABOUT A HUNDRED LINES OF
15:57:12    WELL COMMENTED CODE FULL OF WHITESPACE, SO
15:57:16    IT'S REALLY NOT THAT DIFFICULT.
15:57:17    I WROTE IT IN ONE DAY.
15:57:19    SO --
15:57:20    >>  BUT THEY'RE AVAILABLE FOR US TO LOOK AT?
15:57:23    >>  YES.
15:57:24    THEY HAVE ADDRESS, IT'S ALL THERE.
15:57:26    SO FEEL FREE TO LOOK AT IT, AND IF YOU HAVE
15:57:28    ANY QUESTIONS I'LL BE MORE THAN HAPPY TO
15:57:31    ANSWER THEM.
15:57:31    >> THANK YOU VERY MUCH.
15:57:32    >>  YEAH.
15:57:34    >>  YOU MENTIONED THAT YOU DON'T LIKE USING
15:57:37    COOKIES AND THAT CLIENTS SHOULD
15:57:38    REAUTHENTICATE WITH EVERY REQUEST.
15:57:41    >> YES.
15:57:41    >>  I'M NOT ENTIRELY CLEAR THAT I UNDERSTAND
15:57:43    THE DISTINCTION BETWEEN USING THE OFF TOKEN
15:57:47    LIKE YOU DID IN YOUR EXAMPLE VERSUS HAVING AN
15:57:50    OFF TOKEN IN A COOKIE THAT YOU SENT
15:57:53    >>  I AGREE THAT THERE'S A LOT OF
15:57:54    SIMILARITIES.
15:57:55    THE PROBLEM I HAVE WITH COOKIE S IS THAT
15:57:56    THEY'RE NOT PART OF THE CORE HTTP PROTOCOL.
15:58:00    SO NOT ALL HTTP CLIENTS IMPLEMENT COOKIES.
15:58:03    SO, FOR EXAMPLE, LET'S SAY IF YOU WANT TO
15:58:06    SUPPORT ADUENOS AS CLIENTS.
15:58:11    THIS IS A VERY CONSTRAINED PLATFORM FOR A 2K
15:58:15    OF RAM.
15:58:15    IT'S LIKE WE'RE GOING BACK TO THE 80S WITH
15:58:18    THE COMMODORES AND THAT SORT OF THING.
15:58:20    IT'S A CONSTRAINED THING.
15:58:21    SO HAVING TO SUPPORT COOKIES MIGHT BE A
15:58:23    BURDEN FOR THAT.
15:58:24    I MEAN, THE WHOLE THEME OF REST IS TO SCALE
15:58:27    AND SUPPORT, YOU KNOW, AS MANY VARIANTS OF
15:58:32    CLIENTS AS POSSIBLE.
15:58:33    SO I AGREE WITH THAT TOKENS AND COOKIES, AND
15:58:36    THAT'S WHY I SAID COOKIES ARE A GRAY AREA.
15:58:38    BUT, YOU KNOW, IT'S REALLY NOT THAT -- IT'S
15:58:40    NOT MORE COMPLICATED TO USE TOKENS.
15:58:43    SO.
15:58:44    >> THANK YOU.
15:58:44    >>  YEAH.
15:58:49    >> AUDIENCE:  I HAVE USED DJANGO RESTFUL BOOK
15:58:52    TO BUILD A RESTFUL A COUPLE TIMES.
15:58:55    AND I SAW YOUR PRESENTATION LAST YEAR AS
15:58:56    WELL, AND I SEE THAT YOU USE FLASK AND SQL
15:59:02    ALCHEMY.
15:59:03    I JUST WAS WONDERING IF YOU HAVE AN OPINION
15:59:07    ON WHICH ONE IS BETTER OR WHAT'S THE
15:59:09    DIFFERENCE, OR, YOU KNOW,.
15:59:11    >> I THINK YOU KNOW WHICH ONE I THINK IS
15:59:13    BETTER.
15:59:18    >>  AUDIENCE:  WHY?
15:59:19    >>  THAT'S A DIFFICULT QUESTION.
15:59:20    I THINK WE'RE ALL DIFFERENT.
15:59:26    AND I'VE BEEN DOING SOFTWARE FOR MANY YEARS.
15:59:28    SO WHEN I GO TO A FRAMEWORK THAT TELLS ME HOW
15:59:32    TO DO THINGS, I KIND OF FEEL CONSTRAINED.
15:59:36    I LIKE TO FIND MY OWN WAYS TO SOLVE PROBLEMS.
15:59:39    AND YOU KNOW, I FIND FLASK THE PERFECT, YOU
15:59:43    KNOW, VEHICLE FOR ME TO FIND THE SOLUTIONS
15:59:46    EXACTLY THE WAY I WANT THEM.
15:59:50    IT'S A FRAMEWORK THAT WILL LET YOU DO THIS.
15:59:52    RIGHT?
15:59:53    YOU'RE GOING TO HAVE TO START JUMPING THROUGH
15:59:55    HOOPS TO FIGURE OUT HOW TO DO THIS HYPER
15:59:57    MEDIA THING.
15:59:58    WITH FLASK, I MEAN, IT'S -- FLASK DOESN'T
16:00:01    CARE.
16:00:01    SO I JUST DO WHATEVER I WANT.
16:00:03    SO THAT'S WHAT I LIKE.
16:00:04    >>  AUDIENCE:  THANK YOU.
16:00:05    >>  YES.
16:00:06    YOU'RE WELCOME.
16:00:10    >> AUDIENCE:  I NOTICE YOU CHOSE TO VERSION
16:00:11    YOUR API VIA YOUR REQUEST URL, WHY DID YOU
16:00:15    CHOOSING TO THIS WAY USING THE REQUEST HEADER
16:00:19    FOR THE VERSION ITSELF
16:00:20    >>  YEAH, SO SOME PEOPLE LIKE TO PUT IT IN
16:00:22    THE HEADERS.
16:00:26    REALLY, WHEN YOU WRITE APIS THIS WAY, IT'S
16:00:30    REALLY UNLIKELY THAT YOU'RE GOING TO HAVE TWO
16:00:32    VERSIONS OF API.
16:00:34    IF YOU NEED TO DO A NEW VERSION IT'S PROBABLY
16:00:36    GOING TO BE A REALLY MAJOR DIFFERENT VERSION
16:00:39    WHERE YOU'RE GOING TO CHANGE THINGS IN A
16:00:41    DRASTIC WAY.
16:00:42    THIS WHOLE THING ABOUT USING HYPER MEDIA
16:00:44    REALLY REDUCES THE RISK OF YOU HAVING TO
16:00:46    CREATE A NEW VERSION.
16:00:47    SO I DON'T THINK I'M GOING TO NEED TO DO NEW
16:00:51    VERSIONS.
16:00:52    IF I NEED TO DO A COMPLETELY NEW THING, I
16:00:55    WOULD PROBABLY BE -- IT WILL BE A DIFFERENT
16:00:56    API.
16:00:57    >>  AUDIENCE:  I JUST KNOW THAT I'M WORKING
16:00:58    ON A REST API NOW, AND I KNOW THAT SOME OF
16:01:00    THE OBJECTS THAT I'M GOING TO BE RETURNING
16:01:02    LATER ARE GOING TO INCLUDE MORE COMPLICATED
16:01:05    VALUES OR DIFFERENT ONES.
16:01:06    AND I KNOW THAT I WANT TO VERSION THAT FOR
16:01:09    LATER, SO I'M STRUGGLING TO DECIDE WHETHER I
16:01:11    SHOULD BE INCLUDING THAT IN THE URL OR IN THE
16:01:13    ACTUAL ACCEPT HEADER
16:01:15    >>  SO RIGHT.
16:01:16    FOR CLIENTS, IT'S EASIER TO PUT IT IN THE
16:01:19    URL.
16:01:20    RIGHT?
16:01:20    AND IN THIS CASE, EVEN MORE BECAUSE THE
16:01:23    CLIENT DOESN'T EVEN KNOW THAT THE V2 OR V1 IS
16:01:26    THERE.
16:01:26    RIGHT?
16:01:27    BECAUSE IT'S ALL HYPER MEDIA BASED.
16:01:29    >>  AUDIENCE:  RIGHT.
16:01:30    >> IF YOU HAD TO PUT IT IN THE HEADERS, YOU
16:01:32    NEED -- YOU KNOW, THE CLIENT NEEDS TO WRITE
16:01:35    THAT HEADER GENERATED.
16:01:36    SO IT'S A LITTLE BIT MORE BURDEN.
16:01:38    BUT IT'S FINE.
16:01:39    I THINK IT WORKS.
16:01:40    I MEAN, PEOPLE DO IT.
16:01:41    SO I HAVE NOTHING -- I CAN'T REALLY TELL YOU
16:01:43    THAT IT'S WRONG BECAUSE IT'S NOT.
16:01:46    >> Audience:  THANK YOU.
16:01:47    >>  YES.
16:01:49    >> THANKS, EVERYBODY, FOR COMING OUT.
16:01:51    ENJOY YOUR PYTHON.
16:01:52    THANK YOU.
16:01:53    [ APPLAUSE ]















