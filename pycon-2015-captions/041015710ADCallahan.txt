02:28:44   >> HELLO.
02:57:29   OUR NEXT TALKER IS DAN CALLAHAN AND HE'S GOING TO
02:57:31   BE TELLING US ABOUT RUNNING PYTHON APPS ON
02:57:37   COREOS.
02:57:41   >> THANK YOU.
02:57:42   MIC?
02:57:44   THERE WE GO.
02:57:45   SO, ANY NAME IS DAN CALLAHAN, I WORK IN DEVELOPER
02:57:48   RELATIONS FOR MOZILLA, YOU CAN FIND ME ON
02:57:51   TWITTER@CALLAHAN.
02:57:54   TWO YEARS AGO, DOCKER GOT RELEASED AND EVER
02:57:57   SINCE, AN ENORMOUS BUZZ AND EXCITEMENT ABOUT
02:58:00   CONTAINERIZATION ON LINUX.
02:58:02   I WON'T TALK ABOUT DOCKER TODAY.
02:58:04   THERE IS AN ENTIRE TALK ON IT TOMORROW, GO TO IT.
02:58:06   WHAT I WANT TO TALK ABOUT MORE IS THE IMPACT THAT
02:58:09   THIS INTEREST IN CONTAINERIZATION RECEIVING ON
02:58:12   THE REST OF OUR BACK-END SERVER STACK.
02:58:14   SO WHAT DOES CONTAIN JURYIZATION CHANGE FOR THE
02:58:17   WAY WE ARCHITECT OUR HOST MACHINES?
02:58:19   I'M GOING TO LOOK AT THIS BY EXAMINING A LINUX
02:58:23   DISTRIBUTION CALLED COREOS WHICH WAS RELEASED
02:58:25   ABOUT A YEAR AND A HALF AGO AND IT'S DESIGNED
02:58:27   FROM THE GROUND UP TO RUN CONTAINERS.
02:58:30   NOT THAT YOU NEED A SPECIAL -- TO RUN CONTAINERS
02:58:35   BUT BY LOOKING AT A DISTRO THAT WAS DESIGNED AS A
02:58:38   GREENFIELD EXPERIMENT AND WHAT AN IDEAL HOST FOR
02:58:41   CONTAINERS WOULD LOOK LIKE, WE CAN SEE THINGS
02:58:43   TODAY THAT WILL BECOME BEST PRACTICES IN THE NEXT
02:58:51   FEW YEARS.
02:58:52   FROM THOSE OF YOU FROM THE BAY AREA, GREEN IS
02:58:56   GOING TO BE STARTED ON MONDAY, SO BE READY FOR
02:58:58   THAT WHEN YOU GET BACK FROM PYCON.
02:59:00   WHAT ARE WE TRYING TO SOLVE HERE?
02:59:03   WHY ARE PEOPLE EXCITED ABOUT CONTAINERS?
02:59:05   I DON'T DO OPS, I HAVE WEEKEND PROJECTS, I WANT
02:59:07   TO DEPLOY THEM SOMEWHERE, I WANT A PLATFORM THAT
02:59:10   WILL STAY UPDATED AUTOMATICALLY, I WANT THAT
02:59:11   PLATFORM TO STAY UPDATEd in a day that won't
02:59:14   break my apps by, you know, upgrading a
02:59:17   dependency out from under me and I want a
02:59:19   platform that will survive outages so it would be
02:59:22   really fantastic if I get a server and I pulled
02:59:26   the plug on it, if I can trust that my
02:59:28   applications will keep running somewhere else,
02:59:30   because if we have those three things, I can be
02:59:32   lazy and that's ultimately what I'm looking for,
02:59:35   right?
02:59:35   But to get there, we need something declarative,
02:59:39   we need the ability to say -- declarative, we
02:59:43   NEED SOMETHING TO SAY ALWAYS KEEP TWO OF THESE
02:59:46   RUNNING AND DIDN'T PUT THEM ON THE SAME MACHINE.
02:59:50   I COULD PROBABLY COBBLE SOMETHING TOGETHER THAT
02:59:52   GETS ME THERE BUT AT A CERTAIN POINT, YOU START
02:59:54   KIND OF COLLAPSING UNDER THE WEIGHT OF ALL THOSE
02:59:56   ORCHESTRATION AND THIS KIND OF RUBE GOLDBERG
02:59:59   MACHINE OF WHAT'S ONLINE, WHAT'S OFFLINE AND YOU
03:00:03   DON'T WANT TO TOUCH YOUR SERVERS AND YOU GOT
03:00:05   MONTHS AND MONTHS WITH THIS FAITH-BASED DEV-OPS
03:00:09   THAT I TRUST THINGS WILL BE OKAY AND THEN HEART
03:00:11   BLEED HAPPENS, AND ALL OF THAT TECHNICAL DECK
03:00:13   COMES CRUSHING DOWN.
03:00:14   SO THE WAY WE GET ON THE OF THAT MORASS, FOR
03:00:19   HOBBYISTS LIKE ME, IS MOVING TO SOMETHING
03:00:21   DECLARATIVE, WHERE WE CAN DEFINE THE STATE WE
03:00:25   WANT AND TRUST OTHER SYSTEMS ARE GOING TO MAKE
03:00:27   THAT REALTY.
03:00:29   TO DO THAT, WE NEEDS NEW TECHNOLOGY AND WE NEED
03:00:35   THAT -- NOT BRAND-NEW TECHNOLOGY.
03:00:37   THIS SORT OF STUFF HAS BEEN THE NORM INSIDE
03:00:39   GOOGLE AND AMAZON, Facebook, FOR A WHILE, BUT
03:00:41   WE NEED SOMEBODY TO TAKE GOOGLE'S SECRET SAUCE
03:00:45   AND PACKAGE IT IN A WAY WE CAN RUN IT ON OUR OWN
03:00:47   SERVERS.
03:00:48   IN A SENSE, THAT'S WHAT COREOS IS DOING SO, WE
03:00:52   NEED INNOVATION IN FOUR KEY AREAS.
03:00:54   WE SEED A BETTER WAY TO HANDLE SYSTEM IS UPDATES.
03:00:56   TWO, WE NEED A WAY TO ISOLATE OUR APPLICATIONS
03:01:00   FROM THE HOST ENVIRONMENT.
03:01:00   WE NEED A WAY TO CLUSTER OUR SERVERS TOGETHER SO
03:01:04   THAT THEY CAN BE REASONED ABOUT AS A SINGLE
03:01:08   LOGICAL UNIT.
03:01:08   AND WE NEED A WAY TO DISTRIBUTE TASKS AMONGST THE
03:01:13   CLUSTER.
03:01:13   SO IN THIS TALK, I'M GOING TO LOOK AT HOW COREOS
03:01:20   SOLVES THOSE PROBLEMS.
03:01:21   FOR UPDATES, WE'RE DOING TO LOOK AT FAST PATCH.
03:01:26   FOR CONTAINERS FOR APPLICATION ISOLATION, LOOK AT
03:01:31   DOCTOR AND ROCKET.
03:01:31   WE'LL LOOK AT A PROJECT CALLED ETCD, AND FOR
03:01:36   SCHEDULING, THE JOB OF DISTRIBUTING TASKS WE'LL
03:01:39   LOOK AT FLEET AND...
03:01:41   [ Audio Indiscernible ]
03:01:41   SO WE'LL LOOK AT EACH OFF THESE IN TURN AND SEE
03:01:43   WHAT THE PROBLEM IS AND WHAT THEY'RE SOLVING AND
03:01:46   WHAT THEY MEAN FOR SERVERS AND OF OUR
03:01:49   APPLICATIONS.
03:01:50   AND ALL OF THIS IS FREE AND OPEN SOURCE SOFTWARE,
03:01:53   SO ONE OF THE THINGS THAT I REALLY ADMIRE ABOUT
03:01:56   COREOS AS A COMPANY, THEY'VE CONTRIBUTED THINGS
03:02:00   LIKE ETCD AND FLEET AS TRULY COMMERCIAL PROJECTS.
03:02:05   YOU CAN STAND THIS UP TODAY WITHOUT HAVING TO
03:02:07   ACCEPT PROPRIETARY SOFTWARE, WITHOUT HAVING TO
03:02:09   PAY A DIME.
03:02:10   REALLY FANTASTIC.
03:02:11   SO DELETES START WITH SYSTEM UPDATES.
03:02:13   COREOS USES A SYSTEM CALLED FAST PATCH.
03:02:17   WHAT THEY'RE TRYING TO DO IS DECREASE THE GAP
03:02:20   BETWEEN WHEN A PATCH BECOMES AVAILABLE AND WHEN
03:02:22   IT BECOMES APPLIED TO YOUR SERVERS.
03:02:25   BECAUSE STAYING UP TO DATE IS KEY TO GOOD
03:02:28   SECURITY.
03:02:28   AS SOON AS A VULNERABLE IS KNOWN, A PATCH IS MADE
03:02:31   AVAILABLE, YOU'RE BASICALLY RACING, DOZENS OF
03:02:33   OTHER PEOPLE IN THE WORLD TO SEE IF YOU CAN PATCH
03:02:35   YOUR SERVERS BEFORE THEY CAN DEVELOP AN AUTOMATED
03:02:38   EXPLOIT.
03:02:38   SO ANYTHING YOU CAN DO TO GO FROM PATCH AVAILABLE
03:02:41   TO PATCH APPLIED AS QUICKLY AS POSSIBLE, THE
03:02:43   BETTER, SO THE FIRST THING COREOS DOES IS THEY'VE
03:02:47   ADOPTED A BROWSER-STYLE UPDATE MODEL SO YOU HAVE
03:02:51   CHANNELS, YOU CAN SAY I WANT THE ALPHA, BETA OR
03:02:53   STABLE RELEASE OF MY OPERATING SYSTEM.
03:02:55   IN THE BACKGROUND, UPDATES GET DOWNLOADED
03:02:58   OPPORTUNISTICALLY, SO A NEW VERSION OF COREOS
03:03:02   COMES OUT, IT'S DOWNLOADED.
03:03:04   NEXT TIME YOU REBOOT, IT'S APPLIED.
03:03:06   THE OTHER THING THAT COREOS DOES, THEY TREAT THE
03:03:11   ENTIRE SYSTEM AS A SINGLE UNIT FOR THE PURPOSE OF
03:03:14   UPDATES.
03:03:14   SO WHAT THIS LOOKS LIKE IS WHEN YOU BOOT INTO A
03:03:17   COREOS MACHINE, YOU HAVE THREE PARTITIONS, AN A
03:03:21   PARTITION, AND A B, BOTH OF WHICH HOLD THE COREOS
03:03:25   SYSTEM AND YOU HAVE A DATA PARTITION FOR YOUR OWN
03:03:27   STUFF.
03:03:28   THESE ARE MOUNTED ADD READ-ONLY SO YOU CAN
03:03:30   FLIP-FLOP BETWEEN THEM.
03:03:34   WHEN AN UPDATE BECOMES AVAILABLE, A DAMON THAT
03:03:37   HAS NICE LIMITS ON HOW MUCH BAND WIDTH AND CPU TO
03:03:40   USE WILL DOWNLOAD THE UPDATES, APPLY IT TO THE
03:03:44   PARTITION.
03:03:45   THE UPDATES ARE EFFECTIVELY ENTIRE SYSTEM IMAGES,
03:03:48   YOU GET A WHOLE NEW ISO BASICALLY EVERY TIME AN
03:03:51   UPDATE COMES OUT.
03:03:53   THAT UPDATE GETS APPLIED AND THE NEXT TIME YOU
03:03:55   REBOOT, YOU'RE RUNNING SYSTEM B WITH THAT UPDATE
03:04:01   AND YOU HAVE YOUR DATA IN THE DATA PARTITION.
03:04:04   THIS HAS A COUPLE OF REALLY NICE PROPERTIES.
03:04:06   ONE IS THAT FOR WHATEVER REASON, IF THAT UPDATE'S
03:04:10   BAD, YOU CAN REBOOT AGAIN AND YOU'RE BACK INTO A,
03:04:13   INTO A KNOWN GOOD STATE, RIGHT?
03:04:14   SOME HAVE UPDATES THAT ARE RECOVERABLE, YOU CAN
03:04:17   ROLL BACK ON.
03:04:19   THE OTHER NICE PROPERTY OF THE SYSTEM IS THAT THE
03:04:21   UPDATES ARE AUTUMN MICK AND WHAT THAT MEANS IS
03:04:25   INSTEAD OF GOING PACKAGE BY PACKAGE, LIKE YUM,
03:04:31   WHERE A POWER OUTAGE HAPPENED HALFWAY THROUGH
03:04:34   YOUR UPDATE, YOU MIGHT BE LIFT IN AN INCONSISTENT
03:04:36   STATE.
03:04:37   WITH COREOS EITHER THE WHOLE UPDATE GOT APPLIED
03:04:41   OR NOTHING, WHICH IS REALLY IMPORTANT WHEN YOU'RE
03:04:43   DEALING WITH AUTOMATIC REBOOTS OF YOUR SERVERS,
03:04:45   RIGHT?
03:04:45   YOU WANT TO KNOW THAT YOU'RE NOT GOING TO HAVE AN
03:04:47   ADVERSE EVENT LEAVE YOU COMPLETELY BROKEN.
03:04:53   SO WE'VE GOT A SERVER, IT'S RUNNING OUR APP.
03:04:55   THE SERVER IS RUNNING COREOS.
03:04:58   AND YOU'RE PROBABLY THINKING TO YOURSELF, WAIT A
03:05:01   SECOND, DAN, MY SERVER IS REBOOTING ON ITS OWN,
03:05:04   HOW DO I KEEP MY APP ONLINE?
03:05:06   NAIVE ANSWER IS, LET'S JUST ADD ANOTHER SERVER,
03:05:11   RIGHT?
03:05:11   WE HAVE TWO SERVERS, WE SHOULD BE OKAY, EXCEPT
03:05:13   WHAT'S CAUSING THE SERVER TO REBOOT?
03:05:15   AN UPDATE BECOMES AVAILABLE, THE SERVER NOTICES
03:05:19   IT, DOWNLOADS IT, BOTH THE SERVERS WILL SIGH THE
03:05:22   UPDATE AT THE SAME TIME.
03:05:23   SO NOW BOTH YOUR SERVERS ARE REBOOTING AT THE
03:05:26   SAME TIME.
03:05:26   HOW DO YOU KEEP YOUR APP ONLINE?
03:05:29   [ Laughter ]
03:05:30   RIGHT, WE CAN JUST ADD INCREASINGLY MORE SERVERS
03:05:33   UNTIL, LIKE, WE PROBABLY WON'T HAVE THEM ALL OFF
03:05:39   AT THE SAME TIME.
03:05:41   A BETTER SOLUTION MIGHT BE TO INTRODUCE
03:05:43   CONSENSUS, INTRODUCE INCLUDES TIERING AND WE'RE
03:05:45   GOING TO DO THAT WITH A TOOL CALLED ETCD, BUNDLED
03:05:50   WITH COREOS.
03:05:51   IT'S A KEY VALUE STORE AND IT GIVES US A PLACE
03:05:54   WHERE IF WE STAND UP A THIRD CLUSTER, IT'S A
03:05:59   PLACE TO STORE META DATA ABOUT THE CLUSTER.
03:06:01   SO WE HAVE THREE SERVERS, ONE FOR ETCD AND TWO
03:06:04   FOR THE APP.
03:06:05   ON TOP OF THIS CENTRAL PLACE OF HISTORIC
03:06:08   CONFIGURATION, COREOS BUILDS A TOOL CALLED LOCK
03:06:13   SCHMIDT, SO WHENEVER A SERVER WANTS TO UPDATES TO
03:06:16   REBOOT ITSELF, IT HAS TO ACQUIRE A LOCK FROM
03:06:18   ETCD, AND WHEN IT COMES BACK UP AFTER THE UPDATE,
03:06:21   IT RELATES THE LOCK.
03:06:22   SO THIS MEANS YOU CAN GOVERN THE RATE AT WHICH
03:06:25   UPDATES ROLL OUT ACROSS YOUR CLUSTER BY LIMITING
03:06:28   THE NUMBER OF LOCKS AVAILABLE.
03:06:30   IT ALSO MEANS THAT IF AN UPDATE COMES OUT THAT'S
03:06:33   BAD THAT YOUR HARDWARE WON'T BOOT FROM, A SERVER
03:06:35   WILL GRAB A LOCK, ATTEMPT TO REBOOT, IT WON'T
03:06:39   COME BACK UP SO IT WILL NEVER RELEASE THAT LOCK
03:06:41   WHICH MEANS YOU CAN'T HAVE A CASCADING FAILURE
03:06:44   DUE TO A BAD UPDATE.
03:06:45   LET'S LOOK AT WHAT THAT LOOKS LIKE.
03:06:49   SO I'VE GOT TWO COREOS VIRTUAL MACHINES AND I'VE
03:06:54   GOT LOCKSMITH AND I CAN LOOK AT STATUS AND I SEE
03:06:57   THAT I HAVE ONE LOCK AVAILABLE OUT OF A MAXIMUM
03:06:59   OF ONE, SO I CAN GO AHEAD AND SAY, "LOCK."
03:07:03   IF I LOOK AT THE STATUS AGAIN, WE CAN SEE THIS
03:07:07   MACHINE HAS ACQUIRED A LOCK AND IS NOW CLEARED TO
03:07:10   REBOOT.
03:07:10   IF I TRY TO LOCK ON THIS OTHER MACHINE OR ACQUIRE
03:07:12   A LOCK OVER HERE...
03:07:14   I GET AN ERROR BECAUSE THERE AREN'T ANY MORE
03:07:17   LOCKS AVAILABLE.
03:07:18   THIS SERVER HAS TO RELEASE THE LOCK FIRST.
03:07:20   AND SO ALL THIS IS DOING IS WRITING AND READING
03:07:24   FROM A KEY IN ETCD.
03:07:28   SAY S FOR CURSIVE AND WE HAVE THIS LEAFLET HERE,
03:07:33   THAT IF WE SAY "ETCD CONTROL, GET JOBS, A JSON
03:07:39   DOCUMENT."
03:07:40   ZERO SUM AVAILABLE IS AVAILABLE WITH A MAXIMUM,
03:07:42   THIS MACHINE I.D. IS HOLDING IT.
03:07:46   SO WITH ETCD WE CAN COME OVER HERE AND SAY, WATCH
03:07:50   FOREVER.
03:07:51   THAT KEY.
03:07:52   AND NOW WE'LL BE NOTIFIED WHEN IT CHANGES.
03:07:54   SO IF I UNLOCK THIS SERVER, WE SEE THE UPDATED
03:08:00   DOCUMENT.
03:08:00   IF I RELOCK, SO REALLY NICE WAY TO GET NOTIFIED
03:08:08   OF CHANGES TO YOUR CLUSTER CONFIGURATION, RIGHT?
03:08:11   SO WHEN THE LOCK IS AVAILABLE, THE SERVER CAN GET
03:08:14   ONE.
03:08:14   REBOOT AND WE WOULD ALL BE IN A REALLY GOOD
03:08:19   PLACE.
03:08:20   DOES THIS SOLVE OUR PROBLEM OF OUR SERVERS
03:08:24   REBOOTING?
03:08:24   YES?
03:08:27   NO.
03:08:28   GUESS WHAT'S ALSO RUNNING COREOS, THE ETCD
03:08:34   SERVER.
03:08:35   THAT'S REBOOTING ON ITS OWN.
03:08:36   HOW DO I KEEP MY APP ONLINE?
03:08:39   RIGHT, ADD ANOTHER SERVER.
03:08:40   SO YOU MAY BE SENSING A THEME.
03:08:42   WE HAVE A SERVER, AND THEN WE WANT MORE.
03:08:44   AND YOU JUST KEEP GETTING MORE.
03:08:47   SO THE NICE THING ABOUT ETCD IS THAT WE HAVE THE
03:08:50   SINGLE POINT OF FAILURE TO GET AWAY FROM THAT,
03:08:53   R.THAT, WE NEED TO DISTRIBUTES THAT AND IT'S
03:08:55   DESIGNED TO BE DISTRIBUTED.
03:08:57   IT'S AN IMPLEMENTATION OF A SYSTEM DESCRIBED IN
03:09:01   THE CHUBBY PAPER BY GOOGLE.
03:09:03   THE MAIN DIFFERENCE IS ETCD USES A CONSENSUS
03:09:07   ALGORITHM CALLED RAFT.
03:09:11   IT'S EASIER TO IMPLEMENT, HAS IDENTICAL FAULT
03:09:13   TOLERANCE AND PERFORMANCE CHARACTERISTICS.
03:09:15   IN ENGLISH, THAT MEANS THAT YOU CAN TAKE THIS
03:09:18   SYSTEM AND FOR DEVELOPMENT AND TESTING, IT'S
03:09:22   FINE, YOU CAN DO THIS, RUN IT ON THE SAME THING
03:09:24   BUT IF YOU'RE GOING TO PRODUCTION AND WANT TO
03:09:26   KEEP THE STUFF ONLINE FOR REAL, YOU CAN SET UP A
03:09:29   CLUSTER OF ETCD NODES.
03:09:31   WE HAVE FOUR MORE SERVERS.
03:09:32   >> GENERALLY YOU WANT TO KEEP THE CLOSE TIER A
03:09:35   STATIC SIZE, LIKE THREE TO FIVE SHOULD BE FINE
03:09:38   AND THE NICE THING ABOUT THAT IS BECAUSE OF THE
03:09:40   CONSENSUS ALGORITHM, BECAUSE THE MAJORITY OF THE
03:09:43   NODES ARE ONLINE AND CAN SEE EACH OTHER, THE
03:09:45   CLUSTER WILL KEEP WORKING.
03:09:47   SO WITH FIVE NODES, TWO WILL FAIL AND THE CLUSTER
03:09:50   WILL WORK AS IF NOTHING HAD HAPPENED.
03:09:52   AND THIS SORT OF ARCHITECTURE CAN SUPPORT TENS,
03:09:54   HUNDREDS, THOUSANDS OF WORKER SERVERS, SO THIS IS
03:09:58   WHAT YOU WOULD WANT TO GO TO PRODUCTION WITH IF
03:10:00   YOU HAD, SAY, A BUNCH OF ETCD SPOT INSTANCES, YOU
03:10:06   WOULD HAVE THOSE ON ONE SIDES AND THE MORE
03:10:09   PERSISTENT SET OF THE NODES TO HELP COORDINATE
03:10:12   THE CLUSTER.
03:10:13   EVERYONE FOLLOW?
03:10:14   CLUSTERS, YEAH, DISTRIBUTE SYSTEMS, EVERYTHING
03:10:15   BREAKS IN INTERESTING WAYS.
03:10:17   FOR THESE DEMOS, I'M GOING TO SET UP A 3-NODE
03:10:21   CLUSTER USING A VOLUME VIRTUAL MACHINE.
03:10:23   I'M RUNNING ETCD AND APPS ON THE SAME NODES.
03:10:26   YOU COULD THEORETICALLY GO TO PRODUCTION WITH
03:10:28   THIS BUT YOU DON'T WANT TO BECAUSE YOU CAN'T IN
03:10:31   THIS SORT OF SYSTEM EASILY DROP AND AND OTHER
03:10:33   WORKER NODES, RIGHT?
03:10:35   IT'S MUCH BETTER TO KEEP THOSE SEPARATE, BUT FOR
03:10:38   DEMONSTRATION, WE'RE GOOD TO GO.
03:10:40   THE NICE THING ABOUT ETCD, WHILE IT'S BUNDLED
03:10:46   WITH COREOS, IT'S INDEPENDENTLY -- IT'S BEEN
03:10:49   ADOPTED BY THE GOOGLE SCHEDULES, BY VULCAN D
03:10:53   PROXY AND SEEING ACTUAL COLLABORATION AND REUSE.
03:10:57   COOL TECHNOLOGY, RIGHT?
03:10:59   BUT WE HAVEN'T TALKED ABOUT HOW WE'RE GOING TO
03:11:01   RUN OUR APPS ON THIS THING, JUST TALKED ABOUT HOW
03:11:04   WE'RE GOING TO STOP THE SERVERS FROM REBOOTING AT
03:11:06   THE SAME TIME WHICH IS AN IMPORTANT PROBLEM, BUT
03:11:07   THAT DOESN'T ACTUALLY MAKE US ANY MONEY OR LET US
03:11:10   SHOW OFF OUR SIDE PROJECT OR ANYTHING LIKE THAT.
03:11:12   THE REASON THAT COREOS IS ABLE TO DO FULL SYSTEM
03:11:18   STYLE UPDATES IS THAT THEY MAKE THE OPERATING
03:11:23   SYSTEM EXTREMELY BARE BONES SO THE WHOLE ISO IS
03:11:27   140 MEGABYTES.
03:11:28   WHICH MEANS THERE'S NO ROOM FOR PYTHON, PERL,
03:11:32   RUBY, JAVASCRIPT.
03:11:34   THE BASE SYSTEM IS NOW AT READ-ONLY SO YOU CAN'T
03:11:37   EVEN MUCK WITH THINGS LIKE USER BEN.
03:11:40   SO WHAT DO YOU DO, HOW DO YOU RUN ANYTHING?
03:11:42   USE CONTAINERS.
03:11:45   SO CONTAINERS AT A VERY HIGH LEVEL ARE SOMEWHERE
03:11:49   BETWEEN A REALLY LIGHTWEIGHT VIRTUAL MACHINE OR A
03:11:52   REALLY HEAVY WEIGHT CHROOT.
03:11:55   THE IDEA IS THAT INSTEAD OF A VIRTUAL MACHINE
03:11:57   WHERE YOU COME TO A HOST AND SAY HERE IS AN
03:11:59   ENTIRE SOFTWARE-BASED DEFINITION OF A WHOLE
03:12:02   COMPUTER THAT I WANT YOU TO EMULATE, WITH A
03:12:04   CONTAINER, DESIRING HERE IS A FILE SYSTEM, RUN
03:12:06   THAT PROGRAM AND KEEP IT ISOLATED FROM OTHER
03:12:08   THINGS.
03:12:08   THANKS.
03:12:09   AND YOU'RE TRUSTING THE HOST SYSTEM TO PROVIDE
03:12:11   THE ISOLATION, TO PROVIDE THE KERNEL AND YOU GET
03:12:14   THE ACCOUNTING AND THE MANAGEMENT SOMETIME OF A
03:12:16   VIRTUAL MACHINE BUT YOU GET MUCH BETTER DENSITY,
03:12:21   MUCH BETTER PERFORMANCE BECAUSE EVERY CONTAINER
03:12:23   ON THAT HOST IS SHARING THE SAME KERNEL.
03:12:27   IT'S -- IT'S MUCH MORE LIKE LAUNCHING A LOCAL
03:12:31   PROCESS THAN EMULATING AND BOOTING A WHOLE
03:12:34   MACHINE.
03:12:34   AND THIS HAS A LOT OF BENEFITS.
03:12:39   DOCKER KINDS OF POPULARIZED THIS IN THE LIE NICKS
03:12:42   WORLD BUT THIS IDEA HAS BEEN AROUND FOR A LONG
03:12:44   TIME.
03:12:46   FREEBIE S DHAD JAILS BACK IN 1999, WHICH IS THE
03:12:51   SAME THING.
03:12:51   WE'RE ONLY SEEING THE BUZZ NOW BECAUSE LINUS
03:12:54   ADDED A FEATURE CALLED SEA GROUPS TO GIVE SIMILAR
03:12:59   ISOLATION, AND ONLY TWO YEARS SINCE DOCKER SHOWED
03:13:01   UP AND SAID WE HAVE THIS CAPABILITY, WE SHOULD
03:13:03   WRAP IT UP IN A HIGH LEVEL INTERTASTE MAKES IT
03:13:07   USABLE AND FIND A SERIALIZATION FORMAT THAT WE
03:13:10   CAN ACTUALLY BUILD AN IMAGE HERE AND SHARE IT
03:13:13   SOMEWHERE ELSE.
03:13:13   COREOS SHIPS TWO CONTAINERS RUN TIMES, YOU HAVE
03:13:19   DOCKER AND ONE OF THEIR OWN DESIGN CALLED ROCKET,
03:13:22   THAT'S DESIGNED TO BE MORE MINIMAL.
03:13:24   THEY'VE TRIED TO USE ROCKET TO NARROW IN ON A DEV
03:13:28   SPACE, AN INTEROPERABLE SPECIFICATION FOR
03:13:31   CERTAINLYIZING CONTAINERS.
03:13:33   DOCKER IS MORE INTERESTED IN WE HAVE A WORKING
03:13:36   IMPLEMENTATION SUPPLY SOURCE, LET'S GO FROM
03:13:39   THERE.
03:13:40   IT GETS DRAMATIC AND POLITICAL.
03:13:41   THEY BOTH DO THE SAME THING, EFFECTIVELY.
03:13:44   SO HOW DOES THIS ACTUALLY WORK IN PRACTICE?
03:13:46   LET'S COME OVER HERE.
03:13:48   WOW, THAT WAS A COOL SOUND.
03:13:51   THAT WASN'T ME, WAS IT?
03:13:52   ALL RIGHT, SO I'M SHELLED INTO ONE OF MY CORE
03:13:57   MACHINES AND I'VE GOT A REALLY BASIC PYRAMID
03:14:00   APPLICATION.
03:14:00   SO THERE'S MY HELLO WORLD, DON'T READ IT, IT'S
03:14:05   UGLY, FROM THERE, FROM THE TUTORIAL, I DON'T KNOW
03:14:08   QUITE ALL THAT MUCH ABOUT PYRAMID THOUGH IT'S
03:14:10   LOOKING NICE.
03:14:11   I'VE GOT MY REQUIREMENT ON TCP WHICH SAYS IT
03:14:18   EQUALS 514, AND THEN I'VE GOT A DOCKER FILE
03:14:21   THAT'S BASIC, SAYS FROM PYTHON 343 ON BUILD AND
03:14:25   COMMAND IS PYTHON 3 HELLO.PI.
03:14:28   SO WHAT DOCKER LETS YOU DO IS LETS YOU CREATE
03:14:30   THIS HIERARCHY OF SYSTEM IMAGES.
03:14:34   IF WE LOOK AT DOCKER IMAGES TREE, SO WE CAN SEE
03:14:42   THAT THERE IS THIS IMAGE AT THE TOP AND A DESCEND
03:14:46   NOT FROM IT IS THIS PYTHON ON BUILD IMAGE AND
03:14:48   THEN THERE'S MY APP AT THE BOTTOM THAT HE BUILT
03:14:50   BEFOREHAND IN CASE THE NETWORK WENT DOWN.
03:14:52   SO WHAT THIS ON BUILD IMAGE IS, IT EMULATES A
03:15:00   HEROKU BUILD PACK, SO WHEN I TRY TO BUILD THIS,
03:15:15   I'M GOING TO RUN INSTALL ON ITS, COPY IT IS
03:15:17   SOURCE CODE INTO USER SOURCE APP AND THE IMAGE IS
03:15:20   BUILT.
03:15:20   NOW WE CAN SAY, DOCKER RUNNING, AND WE'LL MAP
03:15:26   PORT 8020 PORT 8080 IN THE CONTAINER AND RUNNING
03:15:30   THE CONTAINER IN MY APP.
03:15:31   IS THERE WE GO.
03:15:38   SO NOW IF I COME BACK OFF HERE, BAM, HELLO WORLD.
03:15:40   I HAVE I'VE GOT AN APP RUNNING CONTAINER, HELLO,
03:15:44   PYCON.
03:15:45   LIKE THERE'S REAL SOFTWARE RUNNING IN A CONTAINER
03:15:48   RIGHT NOW AND THAT'S NOT SUPER IMPRESSIVE, EVEN
03:15:50   THOUGH YOU CLAPPED SO YOU'RE VERY NICE.
03:15:51   INSTEAD OF RUNNING THAT COMMAND, LET'S RUN BASH.
03:15:57   OH, EXIT -- LOOK HOW FAST I CAN START AND STOP
03:16:00   CONTAINERS, CAN'T DO THAT WITH A VM.
03:16:04   EVERY TIME I INVOKE THAT COMMAND, BASH WAS
03:16:07   CREATED INSIDE A COPY -- A FILE SYSTEM SNAPSHOT
03:16:09   FROM THIS CONTAINER, HAD ISOLATION FROM OTHER
03:16:13   THINGS IN THE PROCESS, OR IN THE OPERATING
03:16:15   SYSTEM, JUST LIKE YOU WOULD EXPECT WITH A VIRTUAL
03:16:18   MACHINE.
03:16:19   BUT WAY LIGHTER WEIGHT.
03:16:21   SO IF I LOOK AROUND IN HERE, THERE'S MY APP, THIS
03:16:24   LOOKS LIKE A -- AN INSTALL, GOT AN APP KIT, GOT
03:16:29   AN ETCD DEBIAN SYSTEM, AND I LOOK LIKE I'M IN A
03:16:35   DEBIAN SYSTEM EVEN THOUGH I'M ON A COREOS SYSTEM.
03:16:38   THIS IS A HUGE BENEFIT FOR CONTAINERS, YOU CAN
03:16:41   DEVELOP A CONTAINER LOCALLY AND THEN DEPLOY THAT
03:16:46   ON FEDORA OR RED HAT AND DOESN'T MATTER, AS LONG
03:16:48   AS YOU'RE USING MODERN LINUX AND HOSTING ON
03:16:51   MODERN LINUX, IT WILL JUST RUN, WHICH IS REALLY
03:16:54   FANTASTIC.
03:16:55   WE HAVEN'T TALKED ABOUT -- I'M GOING IN AND
03:17:01   MANUALLY RUNNING THINGS, THAT DOESN'T SCALE.
03:17:03   WE WANT TO GET TO THE NICE DECLARATIVE PLACE
03:17:06   WHERE WE CAN SEE KEEP TWO RUNNING BUT NOT ON THE
03:17:08   SAME MACHINE AND THAT REQUIRES SOMETHING AKIN TO
03:17:10   A CLUSTER LEVEL NET SYSTEM.
03:17:13   IF WE'RE DEALING WITH A SINGLE SERVER, WE HAVE
03:17:15   THINGS TO USE.
03:17:16   BUT WE'RE NOT DEALING WITH A SINGLE SYSTEM
03:17:19   ANYMORE.
03:17:19   SO THERE ARE TWO SCHEDULERS THAT WORK REALLY WELL
03:17:23   WITH COREOS, GETS BOUNDS HE WOULD WITH ONE CALLED
03:17:26   FLEET THAT'S BASIC AND ONE CALLED CUBER.NETS,
03:17:30   BY -- THAT'S SUPER COMPLEX, IF YOU GOT MILLIONS
03:17:35   OF SERVERS AND YOU'RE TRYING TO EEK OUT EVERY
03:17:38   PERCENT OF EFFICIENCY, YOU WANT KUBERNETES.
03:17:43   THE...
03:17:46   [ Audio Indiscernible ]
03:17:47   COREOS IS COMMERCIAL OFFERING, TECTONIC USES
03:17:50   KUBERNETES, BUT, AGAIN, YOU KNOW, AND BOTH OF
03:17:54   THESE ARE BUILT ON ETCD.
03:17:55   SO ANOTHER PATTERN, LIKE IT'S NOT NECESSARILY
03:17:57   SCHEDULING OR ANY OTHER THING THAT GIVES US HIGH
03:18:03   AVAILABILITY, ALL THIS COMES DOWN TO IS HAVING
03:18:05   CONSENSUS ON THE NETWORK, HAVING THAT ONE PLACE
03:18:07   ETCD WHERE WE CAN AGREE ON WHAT THE STATE OF ALL
03:18:09   THE MACHINES ARE.
03:18:11   SO FLEET, FLEET'S SIMPLE.
03:18:15   A CLUSTER INTERFACE FOR SYSTEM C.D.
03:18:18   IF YOU HAVE -- YOU PROBABLY DON'T LIKE IT.
03:18:20   UNFORTUNATELY, EVERY MAJOR DISTRIBUTION KIND OF
03:18:23   SEEMS TO LIKE IT.
03:18:24   AND SO WHAT SYSTEMD DOES IS LET YOU WRITE WITHIN
03:18:28   ITS FILES THAT LOOK LIKE THIS, WHERE YOU SEE
03:18:31   HERE'S MY APP, IT REQUIRES DOCKER, BEFORE IT
03:18:35   STARTS, GO TRY TO KILL ANY OTHER VERSIONS OF IT
03:18:37   AND REMOVE THEM.
03:18:38   WHEN IT STARTS, GO AND RUN THIS THING.
03:18:43   JUST LIKE YOU SAW ME RUN ON THE COMMAND LINE,
03:18:46   DOCKER RUN, AND USE DOCKER STOP TO KILL IT.
03:18:52   EVERYTHING UP HERE IS A NORMAL SYSTEM FILE.
03:18:54   WHAT FLEET ADDS IS THIS LITTLE X FLEET SECTION AT
03:18:56   THE BOTTOM, WHICH CAN HAVE THINGS LIKE CONFLICTS
03:18:59   MY APP, AT STARS, DOT SERVICE.
03:19:02   THIS IS THE THING THAT TELLS FLEET NOT TO PUT TWO
03:19:04   OF THESE ON THE SAME MACHINE.
03:19:05   AND YOU HAVE OTHER CONSTRAINTS AVAILABLE, TOO.
03:19:08   YOU CAN SAY PUT THIS ON A SPECIFIC MACHINE
03:19:10   RUNNING ANOTHER CONTAINER OR PUT IT ON A SPECIFIC
03:19:12   MACHINE BY I.D., OR BASED ON META DATA.
03:19:15   YOU CAN SAY, MAKE THIS GLOBAL, RUN IT ON EVERY
03:19:16   MACHINE THAT'S AVAILABLE.
03:19:17   SO WE HAVE ALL THAT.
03:19:22   LET'S LOOK WHAT IT LOOKS LIKE IN PRACTICE.
03:19:24   SO I HAVE THIS SERVICE FILE.
03:19:27   IT'S JUST WHAT YOU SAW BEFORE.
03:19:29   AND I'M GOING TO INSPECT MY FLEET CLUSTER, SO
03:19:35   LET'S LIST MACHINES.
03:19:36   SO I'VE GOT THREE SERVERS.
03:19:38   LIST UNITS.
03:19:41   THERE IS NOTHING RUNNING ON THEM RIGHT NOW.
03:19:43   SO LET'S TAKE THIS UNIT FILE AND SAY, FLEET
03:19:51   CONTROL SUBMIT, MY APP SERVICE.
03:19:54   THE @ SYMBOL IS A TEMPLATE, SO, SAYS, HEY,
03:19:59   REPLACE LIKE THIS I WITH THE NUMBER OF THE THING
03:20:01   YOU'RE RUNNING.
03:20:02   SO IF WE START ONE, IT WILL BE ONE, IF WE START
03:20:04   ANOTHER ONE, THAT WILL BE 2.
03:20:06   SO WHAT SUBMIT DOES IS IT TAKES THAT FILE AND
03:20:09   STORES IT IN THE ETCD CLUSTER.
03:20:11   ETCD CONTROL LS CURSIVE, COREOS.COM.
03:20:18   SO, LET'S SEE.
03:20:19   THAT LOOKS LIKE IT.
03:20:21   SO IF WE SAY ETCD CONTROL, GET THAT, BAM, THERE
03:20:28   IS OUR UNIT FILE.
03:20:30   IT'S GOT A HASH WHICH POINT TO THIS.
03:20:33   AND THERE IT IS.
03:20:39   YOU ALSO SEE FLEET KEEP TRACK OF THE VARIOUS
03:20:42   MACHINES AVAILABLE.
03:20:42   BUT WE'RE NOT ACTUALLY RUNNING THIS YET, JUST
03:20:44   MADE IT AVAILABLE TO THE CLUSTER.
03:20:46   SO I CAN LIST UNIT FILES AND WE CAN SEE THAT IT'S
03:20:50   THERE BUT NOT ACTIVE.
03:20:51   LET'S BOOT ONE OF THESE UP.
03:20:52   THERE WE GO.
03:21:02   LET'S START ANOTHER ONE.
03:21:03   SO THIS LAUNCHED ON THE MUCH ENDING IN .101, THE
03:21:07   SECONDS ONE WILL LAUNCH ON -- OH, WAIT FOR IT.
03:21:11   ONE OR TWO.
03:21:12   THAT'S COINCIDENCE, COULD HAVE ENDED UP ON THREE.
03:21:15   BUT IF WE LOOK AT FLEET CONTROL, LIST MACHINES,
03:21:19   WE CAN SEE THOSE MACHINES, LIST UNITS.
03:21:22   WE CAN SEE THOSE APPS RUNNING ON THOSE VARIOUS
03:21:25   MACHINES.
03:21:25   AND WE CAN USE NORMAL SYSTEM D COMMANDS SO SAY
03:21:31   JOURNAL, STATUS, RATHER, LET'S DO STATUS.
03:21:34   MY APP AT 1.
03:21:37   SO YOU CAN SEE THAT THAT ARM IN THE -- FAILED
03:21:41   BECAUSE THERE WASN'T PREEXISTING IMAGE BUT THE
03:21:43   MAIN PROCESS IS ACTIVE AND RUNNING, AND HERE IS
03:21:45   THE LAST BIT OF OUTPUT FROM RUNNING THAT.
03:21:48   SO I CAN SEE THAT FOR ANYTHING RUNNING, EVEN
03:21:49   THOUGH I'M ON SYSTEM -- ON THE CORE 1, I CAN LOOK
03:21:52   AT THAT ON 2, AND I CAN ACTUALLY SAY, FLEET
03:21:59   CONTROL SSH, AND JUMP OVER TO THE BOX THAT'S
03:22:03   RUNNING MY TASK VERY EASY WITHOUT HAVING TO KIND
03:22:06   OF DE-REFERENCE IT.
03:22:08   SO THAT'S HOW WE GO FROM A UNIT FILE TO HAVING
03:22:15   TWO THINGS RUNNING.
03:22:18   I PROMISED YOU HIGH AVAILABILITY, SO LET'S GO
03:22:21   KILL ONE OF THESE.
03:22:21   SO LET'S SAY -- THIS IS WAY SMALL, MAKE THAT BIG.
03:22:29   PROJECTS, PYCON...
03:22:34   SO WE'LL SHELL INTO COREO2.
03:22:46   OOPS.
03:22:47   SSH COREO2.
03:22:49   THERE WE GO.
03:22:51   SO WE'RE IN THIS MACHINE THAT'S RUNNING MY APP 2,
03:22:54   RIGHT?
03:22:55   SO LET'S SHUT DOWN EACH NOW.
03:22:59   OH, PSEUDO SHUT DOWN.
03:23:01   AND SO BAM.
03:23:07   IT'S GONE AND UP ON THREE.
03:23:12   [ Applause ]
03:23:13   SO WE CAN REBOOT THAT MACHINE AND IF YOU WERE
03:23:22   DOING THIS WITH A NORMAL SCHEDULER, WHEN THIS
03:23:24   MACHINE COMES BACK UP, IT'S GOING TO, YOU KNOW,
03:23:26   TRY TO RESTART THAT FILE, NOT SO BECAUSE IN THIS
03:23:29   CASE BECAUSE FLEET'S THE THING THAT'S CONTROLLING
03:23:31   WHAT HAPPENS.
03:23:33   IT'S LIKE, WAIT, I ALREADY FILLED THIS, I'M
03:23:35   RUNNING ON TWO SERVERS ALREADY, 102 DOESN'T NEED
03:23:39   TO RESTART IT SO WHEN THIS COMES BACK UP, WE CAN
03:23:41   SAY THIS MACHINE'S GOT THE THREE MACHINES AGAIN,
03:23:44   BUT THAT'S STILL JUST RUNNING ON MACHINE 1 AND 3.
03:23:47   KIND OF COOL, RIGHT?
03:23:51   AT THIS POINT YOU'VE STILL GOT TO FIGURE OUT, ALL
03:23:54   RIGHT, I HAVE MY STUFF, IT CAN SURVIVE.
03:23:56   LET'S KILL ANOTHER -- I CAN SURVIVE WHILE THE
03:23:59   MACHINE IS GETTING THE PLUGGED PULLED ON IT.
03:24:01   BUT THAT MEANS YOU HAVE TO DESIGN YOUR APPS
03:24:03   DIFFERENTLY.
03:24:04   IF A MACHINE CAN GO AWAY, IF A CONTAINER CAN BE
03:24:07   KILLED ON A MACHINE, THEN SHOW UP ON A DIFFERENT
03:24:09   MACHINE, YOU HAVE TO MINIMIZE STATE.
03:24:12   BECAUSE YOU'RE NOT GOING TO HAVE THE SAME HARD
03:24:14   DRIVE AVAILABLE TO YOU.
03:24:14   HEROKU WROTE A REALLY NICE DOCUMENT CALLED "THE
03:24:19   12 FACTOR APP DESIGN PRINCIPLES," REALLY WORST
03:24:22   READING THAT.
03:24:22   TALKS ABOUT HOW THEY'VE COME TO BUILD APPS THAT
03:24:25   WORK WELL ON THE HEROKU PLATFORM WHICH HAS MANY
03:24:28   OF THE SIMILAR DESIGN CONSTRAINTS.
03:24:31   BUT THIS DOESN'T SOLVE THINGS THAT ACTUALLY NEED
03:24:33   STATE, LIKE DATABASES AND LOAD BALANCES, RIGHT,
03:24:36   BECAUSE I WILL I'M OVER HERE, GOT THIS THING
03:24:38   RUNNING ON 101 AND 103, YOU KNOW, THERE IT IS ON
03:24:41   101, THERE IT IS ON 103.
03:24:44   BUT IT WAS ON 102 AND THAT'S TOTALLY DEAD NOW,
03:24:48   RIGHT?
03:24:48   SO YOU STILL NEED TO HAVE SOMETHING IN FRONT OF
03:24:51   THIS DOING LOAD BALANCING.
03:24:53   AND THAT'S OKAY.
03:24:56   THERE'S NOT A GREAT STORY FOR STAPLENESS IN THIS
03:24:59   SORT OF AN ARCHITECTURE YET.
03:25:02   BUT YOU DON'T TO HAVE RUN YOUR WHOLE ENVIRONMENT
03:25:04   ON COREOS TO REAP THE BENEFITS OF RUNNING A LOT
03:25:07   OF WORKER PROCESSES ON IT.
03:25:08   IN SOME CASES, IF YOU'RE ON LIKE AMAZON ECTUBE,
03:25:15   YOU CAN OUT-SOURCE THIS, PAY MONEY TO START UP AN
03:25:19   RDS OR SOMETHING, BUT BEING ALSO FOR WEEKEND
03:25:22   PROJECTS, FINE, GO BIND YOUR DATABASE, SAY ONLY
03:25:24   RUN THIS ON MACHINE I.D.XAND IT REBOOTS, NO BIG
03:25:28   DEAL, RIGHT?
03:25:29   IT WILL BE OUT FOR A COUPLE OF MINUTES EVERY
03:25:31   COUPLE WEEKS, YOU'RE STILL GOING TO BE OKAY AND
03:25:34   IT DOES GET YOU TO A BETTER PLACE THAN YOU WERE
03:25:36   BEFOREHAND FOR THE STATEFUL PARTS BUT DOES GET
03:25:40   YOU TO A MUCH BETTER PLACE FOR THE THINGS THAT
03:25:43   AREN'T NECESSARILY STATEFUL, RIGHT?
03:25:44   IF YOU HAVE IDEAS FOR MAKING THIS BETTER, THINGS
03:25:47   LIKE POSTGRES, IS NOT CLUSTER AWARE, SO IF YOU
03:25:52   NEED POSTGRES, YOU NEED TO BABYSIT IT, STILL.
03:25:56   GREAT ROOM FOR INNOVATION.
03:25:58   BUT THE END OF THIS, LIKE, WE'VE DONE IT, RIGHT?
03:26:00   WE HAVE A PLATFORM THAT'S SELF UPDATING AND SELF
03:26:04   ORGANIZING AND SELF HEALING AND WE DID IT BY
03:26:07   USING AN OPERATING SYSTEM THAT AUTOMATICALLY
03:26:09   UPDATES, USING AUTONOMIC UPDATES.
03:26:14   WE PUT THEM IN THE ISOLATED CONTAINERS.
03:26:17   DON'T REDISTRIBUTE TO -- OH, MAN -- THERE WE GO.
03:26:22   WEB TECHNOLOGY, MAN.
03:26:25   SO WE ALSO SET UP MULTIPLE CONTAINERS, MULTIPLE
03:26:29   SERVERS IN A COORDINATE CLUSTER USING ETCD, AND
03:26:32   WE USED A SCHEDULER FLEET TO DISTRIBUTE JOBS
03:26:36   ACROSS THE CLUSTER.
03:26:37   NOW YOUR TURN TO PLAY WITH THIS, RIGHT?
03:26:39   I'VE SHOWN YOU IT'S POSSIBLE, I'VE SHOWN YOU WHAT
03:26:41   DESIGNS CHANGE, LIKE THINGS HAVE TO BE ABLE TO
03:26:44   DIE AND COME BACK UP ON A DIFFERENT HOST.
03:26:46   YOUR TURN TO PLAY WITH IT.
03:26:48   COREOS IS RUN ON A TON OF PLATFORMS.
03:26:54   I DID EVERYTHING ON A LOCAL TRIO VIRTUAL MACHINE
03:26:57   RUNNING VAGRANT.
03:26:57   YOU COULD ALSO DO THIS ON AZURE, ECTUBE,
03:27:01   RACKSPACE, ALL THESE HAVE OFFICIAL COREOS IMAGES
03:27:05   AND DIGITALOCEAN ALSO SUPPORTS IT.
03:27:10   A FRIEND OF MINE STARTED WORKING AT DIGITALOCEAN,
03:27:15   SHE TOLD ME TO USE THE CODE SAMMY LOVES PYCON TO
03:27:17   GET A $40 CREDIT, SO YOU CAN SPIN UP THREE VMs
03:27:23   FOR TWO AND A HALF MONTHS PLAY WITH THIS.
03:27:26   FEEL FREE TO GIVE IT OUT TO PEOPLE, SUPER GREAT.
03:27:29   BUT I'VE BEEN TALKING FOR A WHILE.
03:27:31   LET'S TAKE SOME QUESTIONS.
03:27:32   YOU CAN FIND MY SLIDES, CHECK OUT DIGITALOCEAN,
03:27:35   USE THE CODE, FREE STUFF.
03:27:37   MIC IS IN THE BACK.
03:27:38   THANK YOU SO MUCH.
03:27:38   [ Applause ]
03:27:55   >> I WONDER IF YOU COULD SAY WHAT THE EXPERIENCE
03:27:57   IS LIKE RUNNING COREOS ON A MAC DEVELOPMENT
03:28:01   ENVIRONMENT, DOES IT SUCK?
03:28:02   >> IT KIND OF SUCKS.
03:28:03   SO THE...
03:28:05   [ Laughter ]
03:28:05   ONE OF THE PREMISES IS THAT YOU'RE GOING TO SHARE
03:28:09   YOUR KERNEL BETWEEN ALL YOUR CONTAINERS AND IF
03:28:12   I'M USING A MAC AND TRYING TO RUN THINGS ON
03:28:15   LINUX, THAT WON'T WORK, SO YOU STILL NEED A
03:28:17   VIRTUALIZATION LAYER.
03:28:18   NOT IDEAL.
03:28:20   IT'S TOTALLY FINE FOR TESTING, THERE IS A VAGRANT
03:28:24   COREOS RECIPE THAT MAKES IT DEAD SIMPLE TO SPIN
03:28:27   UP THREE OF THESE THINGS, PLAY WITH THEM.
03:28:29   BUT YOU'RE STILL BOOTING A VM TO THEN GO RUN
03:28:32   OTHER VMs BECAUSE YOU CAN'T DO THIS NATIVELY ON
03:28:35   YOUR DESK TOP.
03:28:37   IF YOU'RE RUNNING -- AND RUNNING LINUX, WAY AHEAD
03:28:40   OF THE GAME.
03:28:41   IT IS WHAT IT IS.
03:28:41   WE'RE DEPLOYING LINUX, YOU HAVE TO DEAL WITH IT
03:28:43   SOMEWHERE.
03:28:44   >> AUDIENCE:  AND GIVING IT AN ENORMOUS AMOUNT OF
03:28:47   RAM.
03:28:47   YOU GIVE THE VAGRANT CONTAINER AN ENORMOUS AMOUNT
03:28:51   OF RAM AND WALK AWAY.
03:28:53   >> COREOS DOESN'T TAKE A SUPER AMOUNT OF RAM,
03:28:56   BOOTS REALLY QUICK BUT YOU HAVE TO BE RUNNING THE
03:28:58   CONTAINERS ON LINUX.
03:29:00   THERE ARE OBVIOUSLY LIKE MICROSOFT JUST ANNOUNCED
03:29:02   A CONTAINERIZATION SOLUTION FOR WINDOWS EARLIER
03:29:04   THIS WEEK.
03:29:06   BUT CONTAINERS AREN'T PORTABLE ACROSS OPERATING
03:29:10   SYSTEMS.
03:29:11   THEY'RE PORTABLE ACROSS DISTRIBUTIONS, SO, LIKE,
03:29:13   A CONTAINER THAT HAS A USER LAND FROM RED HAT
03:29:16   WILL RUN ON A HOST USING UBUNTU OR ARGENTE, BUT
03:29:22   YOU CAN'T TAKE THAT CONTAINER LIKE YOU COULD WITH
03:29:24   A VM AND RUN IT ON WINDOWS.
03:29:27   >> AUDIENCE:  HEY, DAN, GREAT TALK.
03:29:28   QUICK QUESTION.
03:29:29   IF YOU HAVE A SERVICE THAT DEPENDS ON HAVING
03:29:31   SOMETHING ON DISK PERSISTENTLY AND YOU WANT TO BE
03:29:33   ABLE TO START THIS SERVICE ON ANY SORT OF
03:29:35   ARBITRARY NODE, HOW ARE YOU GOING TO CREATE A
03:29:38   FILE SYSTEM WHICH, SAY, IS SHARED ACROSS THOSE
03:29:41   INSTANCES THAT THIS SERVICE WILL HAVE ACCESS TO?
03:29:43   >> THERE'S NOT AN ANSWER FOR THAT BAKED IN.
03:29:46   IF YOU'RE USING EC2, YOU CAN GO IN AND USE, LIKE,
03:29:49   ELASTIC BLOCK STORES, NOW AN NFS CLIENT FILE
03:29:52   SERVICE OR SOMETHING.
03:29:54   SO YOU WOULD WANT TO JUST DO A NORMAL KIND OF
03:29:56   NETWORK FILE SHARE OR A NETWORK BLOCK MOUNT AND
03:29:59   MANAGE THAT OUTSIDE OF THIS.
03:30:01   >> AUDIENCE: COOL, THANKS.
03:30:04   >> AUDIENCE:  GREAT TALK.
03:30:06   QUICKLY FOR THE GUY IN THE BLUE FIREFOX T-SHIRT,
03:30:10   THERE'S BOOT TO DOCKER, THAT GETS YOU A SLIMMED
03:30:13   DOWN VM THAT RUN ON OSX WHICH IS PRETTY GOOD, IF
03:30:18   YOU WANT TO PLAY AROUND WITH DOCKER THINGS.
03:30:21   BOOT TO DOCKER.
03:30:23   MY QUESTION IS AROUND FLEET VERSUS KUBERNETES, I
03:30:34   KNOW THERE IS A LOT OF WORK THAT YOU'RE DOING ON
03:30:36   THEM, I'M WONDERING WHAT THE FUTURE PATH IS.
03:30:41   SEEMS LIKE KUBERNETES IS DOING THINGS THAT FLEET
03:30:45   IS DOING.
03:30:46   IS THERE A DIFFERENCE, ARE YOU MOVING TOWARDS
03:30:47   KUBERNETES OR WHAT'S THE --
03:30:50   >> SO ONE POINT OF CLARIFICATION, I'M NOT THOSE
03:30:53   GUYS.
03:30:53   I WORK FOR MOZILLA, JUST A HOBBYIST IN THIS SPACE
03:30:56   BUT I DID TALK TO KELSEY HIGHTOWER WHO WORKS FOR
03:31:00   COREOS BEFORE I GAVE THIS TALK AND THE SENSE I
03:31:02   GOT FROM HIM WAS THAT FLEET IS AN EXCELLENT BASIC
03:31:07   SCHEDULER AND IF YOU NEED CAN YOU BEER NETS YOU
03:31:13   KNOW IT.
03:31:14   YOU GET 5% BETTER ALLOCATION OF YOUR RESOURCES,
03:31:17   YOU SAVE MILLIONS OF DOLLARS IN THE POWER BILL,
03:31:20   THAT'S WHEN YOU MOVE TO KUBERNETES, BUT FLEET
03:31:23   ITSELF IS A GREAT PRIMITIVE.
03:31:25   SO YOU COULD USE THAT TO BOOT STRAP THE
03:31:28   KUBERNETES ON THE CLIENTS' NETWORK.
03:31:31   KUBERNETE MOMENTUM, GOOGLE HAS TONS OF ENGINEERS
03:31:38   ON IT ALL THE TIME BUT SEEMED TO BE GEARED
03:31:41   TOWARDS LARGER SCALE DEPLOYMENT.
03:31:44   >> AUDIENCE:  SO YOU CAN SEE -- NOT YOU BUT THE
03:31:46   GENERAL, FLEET AND KUBERNETES EXISTING SIDE BY
03:31:50   SIDE, BASICALLY.
03:31:52   >> ABSOLUTELY.
03:31:52   >> AUDIENCE:  THIS IS A BRIEF FOLLOW-UP ON AN
03:31:55   EARLIER QUESTION.
03:31:55   HAVE YOU EXPERIMENTED WITH AMAZON'S ELASTIC BLOCK
03:31:58   STORE AS A MEANS OF PERSISTENCE WITH A DATABASE
03:32:01   SERVER LIKE POSTGRES OR ANYTHING ELSE?
03:32:05   FEEL THAT'S READY FOR PRODUCTION YET OR IT MIGHT
03:32:07   WORK IF YOU TRY IT SORT OF THING?
03:32:09   >> IT'S MORE OF A -- IT SHOULD WORK WITHIN THE
03:32:12   CONSTRAINTS OF EBS.
03:32:13   BUT THE THINGS I'M DOING, I'M WORKING ON HOBBY
03:32:16   PROJECTS.
03:32:16   THIS STUFF, EVERYTHING I SHOWED YOU WILL SCALE TO
03:32:18   HUNDREDS OR THOUSANDS OF SERVERS.
03:32:20   I'M CARING MORE ABOUT, LIKE, THREE, BECAUSE I
03:32:23   DON'T WANT TO DEAL WITH THAT ONE EMAIL ONCE A
03:32:24   MONTH WHERE IT'S HEY, THERE IS A HARDWARE PROBLEM
03:32:26   ON YOUR SERVER.
03:32:28   WE'VE REBOOTED, MAN, MY STUFF WAS OFFLINE, SO I'M
03:32:31   TRYING TO FIX THAT ON A LOW LEVEL AND I FIND IT
03:32:34   INTERESTING THIS SORT OF TECHNOLOGY DOES SCALE
03:32:37   DOWN TO THAT PRETTY WELL BUT PUTTING MY STAPLE
03:32:40   STUFF IN RDS ON AMAZON.
03:32:42   >> AUDIENCE:  OKAY, THANKS.
03:32:46   >> AUDIENCE:  WHAT YOU'VE BEEN PROVIDING IS
03:32:48   REALLY INTERESTING AND I WOULD LIKE TO KNOW HOW
03:32:50   THIS IS FITTING -- CONFIGURATION MANAGEMENT TOOL
03:32:54   SUCH AS SALT AND PEPPER, WHERE SOME COMPANION
03:32:58   MIGHT HAVE INVESTED IN MANIFEST OR STATES AND HOW
03:33:03   DO YOU SEE THE TRANSITION BECAUSE, LIKE, THE
03:33:04   TRANSITION BETWEEN SOMETHING WHICH IS DECLARATIVE
03:33:08   AND WHERE YOU HAVE ALL YOUR CONFIGURATION,
03:33:11   GETTING SOMETHING TO SUCH VOLATILE THING.
03:33:15   >> RIGHT, SO IT SEEMS LIKE THE COREOS PLATFORM
03:33:18   ITSELF, YOUR SYSTEM IS MOUNTED IS READ ONLY.
03:33:19   YOU CAN'T REALLY CHANGE THE CONFIGURATION.
03:33:21   I MEAN, YOU CAN OBVIOUSLY ADD THINGS TO SLASH ETC
03:33:25   AND THAT, BUT IN A CERTAIN WAY OBVIATES THE NEEDS
03:33:30   FOR TOOLS LIKE CHEF, PUPPET, SALT STACK, ANSIBLE,
03:33:33   BECAUSE YOU'RE NOT TRYING TO MAKE THE MACHINES.
03:33:36   YOU'RE STILL TRYING TO BUILD A CONTAINER BUT THE
03:33:39   TOOLS THAT EXIST FOR THAT, THE DOCKER FILES THAT
03:33:41   SAY, GO DOWN THIS, RUN THIS, DO THAT, KIND OF
03:33:44   TAKE CARE OF THAT AND ONCE YOU'RE DONE, THAT
03:33:46   SINGLE CONTAINER IS PORTABLE.
03:33:47   YOU CAN SERIALIZE IT, SCP IT FROM ONE HOST TO
03:33:51   ANOTHER, AND PICKS UP AND RUNS WITHOUT HAVING TO
03:33:53   HAVE LIKE THE LONG-LIVED CONFIGURATION MANAGEMENT
03:33:57   OR THE CONFIGURATION CONVERGENCE, THINGS YOU
03:34:00   USUALLY GET WITH THOSE SORTS OF TOOLS.
03:34:02   SO MIGHT GET RID OF THEM WHICH IS KIND OF
03:34:04   TERRIBLE BUT GETTING RID OF STUFF IS ALSO KIND OF
03:34:06   GOOD.
03:34:09   >> AUDIENCE: SO IF YOU HAVE, LIKE, A THOUSAND
03:34:13   APPLICATION SERVERS AND, YOU KNOW, THEN FIVE ETCD
03:34:18   NODES, DOESN'T SEEM LIKE A BIG DEAL BUT IF YOUR
03:34:21   SCALE IS THREE APP SERVERS AND YOU NEED A NODE OF
03:34:25   3 TO FIVE ETCD THINGS, DOESN'T SEEM TO MAKE
03:34:28   SENSE.
03:34:29   SO IF YOU'RE IN PRODUCT BUT WITH A LOW NUMBER,
03:34:32   DOES THAT -- IS THAT HOW THEY USE IT THERE?
03:34:35   >> YEAH, THIS TOTALLY MAKES SENSE.
03:34:36   YOU GET ALL THE REDUNDANCY -- THIS IS A
03:34:39   PRODUCTION-READY DEPLOYMENT, JUST WITH THREE
03:34:42   NODES.
03:34:43   THE PROBLEM THERE IS IF ONE OF THOSE MACHINES
03:34:45   DIES, LIKE IF YOU'RE USING ETCD SPOT INSTANCES OR
03:34:48   SOMETHING, YOU HAVE TO TAKE CARE TO INFORM ALL
03:34:50   THE OTHER NODES THAT THIS ONE IS NO LONGER
03:34:52   SOMETHING THEY SHOULD BE LOOKING FOR BECAUSE IF
03:34:54   SOMETHING ELSE SHOWS UP, THEN YOU HAVE A REALLY
03:34:57   WEIRD SYSTEM IN THE PART THAT DOES CONSENSUS,
03:34:59   RIGHT, BECAUSE IT'S LIKE, I HAVE FOUR THINGS, I
03:35:01   THOUGHT I HAD THREE THINGS.
03:35:02   I THINK IT'S WEIRD.
03:35:03   BUT IF YOU'RE JUST STANDING UP A COUPLE OF
03:35:05   LONG-RUNNING VMs TO A FIXED NUMBER THAT,
03:35:07   CONFIGURATION WORKS GREAT.
03:35:09   TRADITIONALLY, YOU DON'T WANT TO TURN ON ALL THAT
03:35:12   MANY ETCD NODES, STARTS DEGRADING AFTER NINE.
03:35:17   I THINK IN THE GOOGLE CHUBBY PAPER, THEY HAD 5
03:35:22   MACHINES HANDLING HUNDREDS OF CONCURRENT CLIENTS.
03:35:25   SO SOMETHING LIKE THAT REALLY DOES SCALE
03:35:28   ENORMOUSLY, SOMETHING LIKE THAT IS FINE IF YOU'RE
03:35:30   USED TO A TRADITIONAL LONG-RUNNING VM.
03:35:32   TIME FOR ONE MORE?
03:35:38   >> AUDIENCE:  SO YOU MADE A COMMENT AND I'VE
03:35:39   HEARD IT A NUMBER OF TIMES THAT THIS
03:35:43   AUTOMATICALLY UPDATED AND SAVED YOU FROM A NUMBER
03:35:47   OF SECURITY PROBLEMS.
03:35:49   BUT IT DIDN'T.
03:35:50   >> YES, I THINK I KNOW WHERE YOU'RE GOING AND
03:35:52   THIS IS GREAT.
03:35:52   THANK YOU.
03:35:53   >> AUDIENCE:  BECAUSE YOUR USER LANDS IS WHERE
03:35:56   LIB SSL LIVED AND NONE OF YOUR LIB SSLs ON YOUR
03:36:01   CLUSTER GOT UPDATED WHEN EVERYTHING REBOOTED.
03:36:03   >> SPOT ON.
03:36:04   SO THIS WOULD HELP YOU WITH THINGS LIKE KERNEL
03:36:06   LEVEL VULNERABILITIES BUT YOU STILL HAVE TO
03:36:09   MAINTAIN YOUR USER LANDS AND SO WHAT YOU WANT TO
03:36:11   DO IS END UP MAKING SURE THAT YOU'RE REBUILDING
03:36:14   YOUR DOCKER IMAGES REGULARLY, REDEPLOYING THEM
03:36:17   AND THINGS LIKE THAT ONCE THINGS COME OUT.
03:36:19   THE NICE THING, THIS GETS YOU AWAY FROM HAVING TO
03:36:22   MANAGE BOTH THE HOST SYSTEM AND THE APPLICATION
03:36:26   SYSTEM WITH A LOT OF CARE, RIGHT?
03:36:28   LIKE RED HAT WILL SELL YOU A TEN-YEAR
03:36:31   SUBSCRIPTION SO YOU DON'T HAVE TO UPDATE AND
03:36:34   THAT'S SCARY.
03:36:35   THIS LETS YOU WORRY, HERE'S MY APPLICATION, I CAN
03:36:38   UPDATE IT ON MY OWN AND NOT WORRY ABOUT THE
03:36:40   EFFECT.
03:36:41   >> THAT'S ALL THE TIME WE HAVE FOR QUESTIONS.
03:36:43   THANK YOU SO MUCH, DAN.
03:36:44   >> THANK YOU.
03:36:44






