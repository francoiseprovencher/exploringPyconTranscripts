           [ MUSIC PLAYING ]
00:24:21   >> MY NAME IS LIV AND THIS IS YING LI AND SHE'S
00:26:47   GOING TO BE TALKING TO US ABOUT CARMEN SAN DIEGO,
00:26:55   I THINK.
00:27:00   >> WELCOME, GUMSHOES, TO ANOTHER EPISODE OF WHERE
00:27:03   IN iRAN IS SAN DIEGO, PYTHON SAN DIEGO.PY?
00:27:07   SPONSORED BY MY EMPLOYER, RACKSPACE.
00:27:10   I'M YOUR HOST AND ACME CRIME NET LIAISON.
00:27:14   THE CHEF APPRECIATES YOUR HELP AND DISCRETION IN
00:27:16   THIS MATTER BUT I'LL LET HER EXPLAIN THE
00:27:18   SITUATION HERSELF.
00:27:19   GUMSHOES, WE'VE RECEIVED A CREDIBLE THREAT TO THE
00:27:21   ACME CRIME NET CASE FILE SERVER.
00:27:23   I GOT THIS TEXT FROM MY MOTHER EARLIER TODAY.
00:27:26   MY MOTHER THINKS IF SHE THREATENS MY WORK, I'LL
00:27:29   TO HAVE CALL HER AND ASK HER TO STOP.
00:27:30   SHE'S PROBABLY RIGHT BUT I CAN'T LET THE
00:27:32   ULTIMATUM STAND.
00:27:33   THE NEXT TIME SHE MIGHT DEMAND THAT I MAKE
00:27:36   THANKSGIVING DINNER.
00:27:38   MY MOM IS A PYTHON PROGRAMMER BUT I DIDN'T SEE
00:27:41   ANY PROCESSES LOADING.
00:27:43   FIND THE ROGUE PROCESS, GUMSHOES.
00:27:45   I NEED TO START THE SERVER UP AGAIN AT SOME POINT
00:27:47   AND I CAN'T HAVE HER DELETING MY FILES.
00:27:49   CHIEF OUT.
00:27:51   >> THANKS, CHIEF.
00:27:52   [ Laughter ]
00:27:52   AND, I GUESS...
00:27:54   THERE'S THE MEMORY DUMP.
00:27:56   OKAY, SO NOW WE HAVE A TWO GIGABYTE BINARY FILE,
00:28:01   A DUMP OF WHAT'S WAS ON THE RAM IN THE SERVER.
00:28:04   IT SURE WOULD BE NICE IF THIS WAS SPLIT INTO
00:28:07   PROCESS REGIONS.
00:28:08   THEN WE CAN FIND THE PART THAT BELONGS TO THE
00:28:10   ROGUE PYTHON PROCESS AND DO SOMETHING WITH IT.
00:28:13   MAYBE WE CAN SPLIT IT OURSELVES, ALL PROCESSES
00:28:15   ARE MANAGED BY A BOSS, RIGHT, THE KERNEL, WHICH
00:28:18   MUST KNOW THEIR WHEREABOUTS AND WHAT THEY'VE BEEN
00:28:20   UP TO.
00:28:21   WE NEED TO FIND THE KERNEL AND INTERROGATE IT,
00:28:23   BUT HOW?
00:28:24   LUCKILY, THERE IS AN OUTSIDE CONTRACTOR WICK
00:28:27   EMPLOY TO HUNT THROUGH MEMORY DUMPS FOR US.
00:28:29   IT'S OPEN SOURCE, WRITTEN ENTIRELY IN PYTHON AND
00:28:32   IF WE GIVE IT AN ACCURATE DESCRIPTION OF WHAT THE
00:28:34   KERNEL LOOKS LIKE AND THE ADDRESS OF ITS KNOWN
00:28:37   ASSOCIATES VOLATILITY CAN FIND THE KERNEL AND ANY
00:28:39   PROCESSES THE KERNEL CAN MANAGE.
00:28:42   THE FIRST THING WE NEED TO DO IS BUILD A PROFILE
00:28:45   OF THE KERNEL.
00:28:46   KERNEL HEADERS DESCRIBE THE KERNEL.
00:28:49   THEY DEFINE THE DATA STRUCTURES IT USES, WHAT
00:28:52   ATTRIBUTES THEY HAVE AND HOW BIG THEY ARE.
00:28:54   THIS WILL TELL VOLATILITY WHAT THE CERTAINLY
00:28:56   ENGINEER -- KERNEL WILL LOOK LIKE IN -- THEY'RE
00:29:01   PROVIDED BY THE LINUX HEADER PACKAGES FOR OUR
00:29:04   PARTICULAR KERNEL VERSION.
00:29:06   FOR OS 10, THEY CAN BE DOWNLOADED FROM AN HE WILL
00:29:08   AND VOLATILITY HAS A LOT OF EXPERIENCE HUNTING
00:29:12   DOWN THE KERNELS.
00:29:14   SO WHAT ABOUT THE LOCATIONS OF THE KERNEL'S KNOWN
00:29:17   SOMEBODY AT?
00:29:18   WE'RE LOOKING FOR AN ADDRESS BOOK OF SORTS,
00:29:20   CALLED THE SYMBOL TABLE.
00:29:21   THAT HAS INFORMATION ABOUT IDENTIFIERS IN THE
00:29:23   KERNEL CODE.
00:29:24   INFORMATION LIKE AN IDENTIFIER IS AN ADDRESS
00:29:26   WHICH IS JUST A NUMBER REPRESENTING AN OFFSET
00:29:28   INTO MEMORY, WHERE THE IDENTIFIER CAN BE FOUND.
00:29:31   IN LINUX, THE KERNEL SYMBOL TABLE CAN BE FOUND AT
00:29:37   BOOT/SYSTEM.MAP.
00:29:40   IT CAN BE USED TO EXTRACT THE MAPPING, LIKE
00:29:43   HUMANELY, AND, AGAIN, VOLATILITY PROBABLY ALREADY
00:29:46   KNOWS ALL THE WINDOWS ADDRESS BOOKS.
00:29:48   OKAY.
00:29:50   SO NOW THAT WE'VE BUILT OUR PROFILE, WE CAN
00:29:52   INVOKE VOLATILITY.
00:29:53   WE DEAD-DROP OUR PROFILE INTO A PLUG I IN
00:29:56   DIRECTORY, TELL THE -- TELL VOLUME TAKE IT BOTH
00:29:58   THE LOCATION OF THE DEAD-DROP AND THE NAME OF THE
00:30:00   PROFILE AND THEN WE POINT IT AT THE MEMORY DUMP
00:30:02   AND TELL IT WHAT WE WANT TO SEARCH FOR.
00:30:05   LET'S START BY TELLING VOLATILITY TO FIND THE
00:30:07   KERNEL AND BRING IT IN FOR A FRIENDLY CHAT.
00:30:09   VOLATILITY FACILITATES THE INTERROGATION WITH AN
00:30:13   INTERACTIVE SHELL COMMAND VOLUME VOL SHELL.
00:30:16   THIS IS AN I-PYTHON SESSION WITH EXTRA CONTEXT.
00:30:19   AS YOU CAN SEE, VOLATILITY THINKS IT'S FOUND THE
00:30:21   KERNEL'S INIT TASK, THE PARENTS OF ALL OTHER
00:30:26   PROCESSES NWINDOWS, THIS WOULD BE THE SYSTEM
00:30:28   PROCESS, IN OS 10, THIS WOULD BE THE KERNEL TASK.
00:30:31   THE LINUX KERNEL KEEPS TRACK OF ALL THE PROCESSES
00:30:34   IT'S CURRENTLY MANAGING IN A LINKED LIST.
00:30:36   THE FIRST LIMITS OF WHICH IS THE INIT TASK.
00:30:39   SO THEY'VE FOUND THAT TASK, PROBABLY FOUND THE
00:30:42   KERNEL AND WE CAN GET TO AMOUNT OTHER PROCESSES.
00:30:44   SO LET'S USE THE I-PYTHON INTERFACE TO ASK SOME
00:30:49   BASIC QUESTIONS TO ESTABLISH THE SUSPECT'S
00:30:51   IDENTITY.
00:30:51   THE VOLATILITY SHELL OBJECT IS PRESENTED AS SELF
00:30:54   AND THE TASK CURRENTLY UNDER INTERROGATION
00:30:57   SUPPOSEDLY INIT IS AN ATTRIBUTE ON VOLATILITY
00:31:01   SHELL NAMED PROC.
00:31:02   WE CAN START OFF WITH SOMETHING EASY.
00:31:04   LET'S SAY, HEY, WHAT ARE YOU?
00:31:05   TEST STRUCT, IT ANSWERS, AND THAT WOULD BE GREAT
00:31:09   IF WE KNEW WHEN A TASK STRUCT WAS.
00:31:13   TO ANSWER THAT, WE SHOULD UNDERSTAND WHAT THE
00:31:15   KERNEL DOES WHEN A PROCESS STARTS UP.
00:31:17   WE KNOW THAT INIT IS SOME KIND OF LINUX PROCESS
00:31:20   AND WE KNOW THE KERNEL NEEDS SOME WAY TO KEEP
00:31:22   TRACK OF ALL PROCESSES, SO IT OBVIOUSLY NEEDS TO
00:31:25   STORE INFORMATION NEEDED TO MANAGE THE PROCESS,
00:31:27   AND THE IT ALLOCATES MEMORY FOR THE PROCESS WHEN
00:31:29   IT STARTS UP, WHICH MEANS IT NEEDS TO STORE WHAT
00:31:31   MEMORY BELONGS TO WHAT PROCESS.
00:31:33   THE PROCESS INFORMATION IS STORED IN A C DATA
00:31:36   STRUCTURE OR STRUCT.
00:31:37   YOU CAN THINK OF STRUCTS LIKE PYTHON NAMED UP HE
00:31:41   WILLS, THEY GROUP DATA TOGETHER.
00:31:43   IN LINUX, THIS STRUCT IS CALLED A TASK STRUCT.
00:31:46   THE CORRESPONDING INSTRUCTOR IN WINDOWS WOULD BE
00:31:49   E PROCESS AND IN OS 10 IT'S PROC, BUT THEY PRETTY
00:31:53   MUCH ALL CONTAIN THE SAME INFORMATION.
00:31:55   LIKE BASIC INFORMATION ABOUT THE PROCESS ITSELF,
00:31:57   LIKE THE I.Z., THE SHORT NAME AND THE START TIME.
00:32:00   THE EXAMPLE DISPLAYED HERE IS A LINUX TASK
00:32:03   STRUCT.
00:32:03   THEY ALSO USUALLY HAVE SOME WAY TO ACCESS THE
00:32:09   PARENT PROCESSES, SIBLING PROCESSES AND CHILD
00:32:11   PROCESSES, AND INFORMATION ABOUT THE OWNER OF THE
00:32:13   PROCESS.
00:32:13   SOME WAY TO LOOK UP THE PROCESSES OPEN FILES AND
00:32:18   SOCKETS, AND FINALLY, SOME WAY TO STORE
00:32:22   INFORMATION NEEDED TO MANAGE THE MEMORY OF THE
00:32:23   PROCESS.
00:32:23   IN LINUX, IT'S STORED IN ANOTHER STRUCTURE CALLED
00:32:25   THE MM STRUCT.
00:32:27   SO NOW WE KNOW WHAT THAT IS, LET'S RETURN TO THE
00:32:33   INTERROGATION AND ASK MORE SPECIFIC QUESTIONS,
00:32:35   LIKE WHAT'S YOUR PROCESS I.D.?
00:32:38   ONE.
00:32:38   THAT'S PRETTY COOL.
00:32:39   THE INIT TASK ALWAYS HAS AN I.D. OF ONE IN LINUX.
00:32:43   WHAT'S YOUR SHORT NAME?
00:32:45   INIT.
00:32:46   AWESOME, IDENTITIES VERIFIED, WE'VE CONFIRMED
00:32:49   THIS IS THE SUSPECT.
00:32:50   LET'S HAVE VOLATILITY A MUCH MORE EFFECTIVE
00:32:53   INTERROGATOR THAN US ASK WHAT PROCESSES IT
00:32:57   MANAGES.
00:32:57   THE ANSWER LOOKS LIKE THE RESULT OF THE LINUS PS
00:33:00   COMMANDS.
00:33:01   THERE IS A LIST OF THE PROCESS I.D.s AND SHORT
00:33:02   NAMES, NOTHING LOOKS SUPER SUSPICIOUS, THOUGH, SO
00:33:05   LET'S HAVE VOLATILITY ASK A DIFFERENT WAY.
00:33:06   THIS TIME THE ANSWER LOOKS A LOT LIKE THE RESULT
00:33:10   OF THE LINUX PS AUX COMMAND.
00:33:12   THIS GIVES US A COMPLETE COMMAND LINE ARGUMENTS
00:33:14   FOR EACH PROCESS, AS OPPOSED TO JUST A SHORT
00:33:16   NAME.
00:33:17   STILL NOTHING SUSPICIOUS, THOUGH.
00:33:18   WE SHOULD REALLY ASK MORE EXPLICITLY.
00:33:21   KERNEL, DO YOU KNOW ABOUT ANY PYTHON PROCESSES?
00:33:24   AND IT LOOKS LIKE NO.
00:33:26   SO THAT'S PRETTY UNFORTUNATE.
00:33:29   THE KERNEL WAS PERFECTLY COOPERATIVE AND
00:33:32   FORTHCOMING WITH US, THOUGH, WHICH MEANS THAT THE
00:33:33   ROGUE PROCESS WE ARE LOOKING FOR MUST HAVE GIVEN
00:33:35   THE KERNEL A FAKE NAME AND IT'S LYING TO THE
00:33:38   KERNEL.
00:33:38   LOOKS LIKE THIS WILL TAKE SOME MORE LEG WORK.
00:33:41   SO LET'S HAVE A CLOSER LOOK AT THE RESOURCE THE
00:33:46   KERNEL GIVES THE PROCESSES AND TRACK IT DOWN THAT
00:33:50   WAY.
00:33:51   MAYBE WE SHOULD LOOK AT THE OPEN FILES AND
00:33:53   SOCKETS?
00:33:53   SINCE THE KERNEL PROVIDES AND KEEPS TRACK OF THIS
00:33:56   ACCESS, IT'S AVAILABLE TO US IN THE MEMORY DUMP,
00:33:59   TOO.
00:33:59   SO THE KERNEL HAS GIVEN US A LIST OF EVERY OPEN
00:34:02   FILE ACCESSED BY EVERY PROCESS.
00:34:05   LOOKING AT THIS, WHAT WOULD WE CONSIDER
00:34:07   SUSPICIOUS?
00:34:08   ONE OBVIOUS THING WOULD BE TO SEE IF THERE WERE
00:34:10   ANY PROCESSES TRYING TO DELETE THE CASE FILES.
00:34:13   WHICH THERE DOESN'T SEEM TO BE.
00:34:14   BUT WE'D ONLY SEE THAT IF A PROCESS HAPPENED TO
00:34:18   BE DOING THAT AT THE TIME OF THE MEMORY DUMP.
00:34:20   PRIOR ACCESS THAT HAD FINISHED BY THE TIME THE
00:34:22   MEMORY WAS ACQUIRED WOULD NOT EVEN SHOW UP.
00:34:24   SIMILARLY WITH OPEN SOCKETS, WE CAN LOOK AT WHAT
00:34:29   PROCESSES ARE LISTENING TO WHAT SOCKETS BUT ALSO
00:34:31   THE CHIEF HAPPENS TO KNOW HER MOM'S I.P., NOTHING
00:34:33   WOULD JUMP OUT AT US.
00:34:34   AND UNLESS THE PROCESS WAS CONTACTING THE SERVER
00:34:36   AT THE EXACT MOMENT OF THE MEMORY DUMP, WE
00:34:38   WOULDN'T SEE IT, ANYWAY.
00:34:40   OKAY.
00:34:41   SO OPEN FILES AND SOCKETS ARE A DEAD END.
00:34:43   WE SHOULD HAVE A CLOSER LOOK AT THE MEMORY
00:34:45   RESOURCES THE KERNEL PROVIDES EACH PROCESS IT
00:34:47   MANAGES, SO LET'S CHECK OUT THE MM STRUCT.
00:34:51   WHICH SORT OF LOOKS LIKE THIS.
00:34:52   ON THE LEFT IS WHAT PROCESS MEMORY GENERALLY
00:34:55   LOOKS LIKE.
00:34:55   THE TOP IS THE END OF THE PROCESS MEMORY WHERE
00:34:58   THE HIGHEST ADDRESS IS AND THE BOTTOM IS THE
00:35:00   BEGINNING OF PROCESS MEMORY WHERE ZERO IS.
00:35:02   ON THE RIGHT IS PART OF THE ACTUAL STRUCT
00:35:05   DECLARINGATION.
00:35:06   THE MM INSTRUCT AN OH SAYS SEVERAL INTERESTING
00:35:09   REGIONS OF A PROCESS MEMORY.
00:35:10   THINK OF IT LIKE SAKES INS A LIBRARY, LIKE
00:35:13   MYSTERIES OR SCIENCE FICTION.
00:35:15   THERE'S THE ENVIRONMENT VARIABLE SECTION NEAR THE
00:35:18   TOP WHICH HAS THE ENVIRONMENT VARIABLES THE
00:35:20   PROCESS WAS STARTED WITH, THEN BELOW THAT, THERE
00:35:22   IS THE COMMAND LINE ARGUMENTS THE PROCESS WAS
00:35:24   STARTED WITH.
00:35:25   THEN THERE'S THE STACK WHICH IS LIKE A SCRATCH
00:35:27   PAD FOR PROCESSES, IT'S WHERE IT WRITES
00:35:30   INCRIMINATING EVIDENCE.
00:35:31   THIS IS WHERE PROGRAMS STORE CALL INFORMATION,
00:35:34   ARGUMENTS AND RETURN VALUES.
00:35:35   IT STARTS AT HIGHER ADDRESSES AND AS MORE THINGS
00:35:38   ARE ADDED TO THE STACK, GROWS DOWNWARD.
00:35:40   NEXT IS THE MEMORY MAP SECTION.
00:35:41   THIS IS WHERE NECESSARY FILES LIKE LIBRARIES MAKE
00:35:44   MMAP TO MEMORY.
00:35:46   FOR PYTHON PROGRAM, C-EXTENSIONS WOULD BE MAPPED
00:35:48   HERE.
00:35:49   ADDITIONAL FILE MAPPINGS GET ADDED TO THE SECTION
00:35:51   AT THE BOTTOM SO IT GOES DOWNWARDS LIKE THE STACK
00:35:53   AND LOOKING AT IT COULD ALSO GIVE INCRIMINATING
00:35:55   EVIDENCE, LIKE A BAD READING LIST.
00:35:57   THEN COMES THE HEAP, WHICH FOR HISTORICAL REASONS
00:36:01   IS REFERRED TO AS BRICK.
00:36:03   THIS IS WHERE DYNAMICALLY ALLOCATED OBJECTS GO.
00:36:06   IN PYTHON, THAT'S LIKE EVERY OBJECT, VERY MUCH
00:36:09   EVER, ALL OF IT -- ALL OF IT GOES ON THE HEAP SO
00:36:13   THAT'S REALLY WHERE WE WANT TO LOOK IF WE HAVE
00:36:15   FIND A ROGUE PROCESS.
00:36:17   IN THE NEXT SECTION, WE FIND THE DATA SEGMENT
00:36:20   WHICH IS THE NON-INSTRUCTION PARTS OF THE PROCESS
00:36:22   BINARY.
00:36:22   IT'S THE GLOBAL AND STATIC VARIABLES OF THE
00:36:24   BINARY, FOR THE PYTHON BINARY, THIS WILL MAKE
00:36:26   LIKE C-PYTHON BUILT-IN DOC STRINGS.
00:36:31   THE NEXT REGION IS THE EXECUTABLE MACHINE
00:36:32   INSTRUCTION PART OF THE PROCESS BINARY.
00:36:35   THIS IS THE PART OF THE PYTHON BINARY THAT
00:36:37   ACTUALLY RUNS PYTHON.
00:36:38   SO IF THOSE WERE LIKE LIBRARY SECTIONS, WHAT'S
00:36:42   THE UNIT OF THING THAT'S BEING CATEGORIZED?
00:36:45   WHAT'S THE MEMORY ANALOG TO A BOOK?
00:36:48   THAT WOULD BE A VIRTUAL MEMORY AREA, WHICH IS A
00:36:50   CONTIGUOUS AREA OF PROCESS MEMORY THAT HAS THE
00:36:53   SAME PERMISSIONS AND ALLOWED OPERATIONS AND THAT
00:36:55   IS MAPPED TO THE SAME FILE.
00:36:56   THERE MIGHT BE MULTIPLE VIRTUAL MEMORY MEMORIES
00:37:01   IN A SAME SECTION.
00:37:03   ALSO NOTE THAT A SINGLE VIRTUAL MEMORY AREA
00:37:04   COVERS THE ENVIRONMENT VARIABLE, THE COMMAND LINE
00:37:07   ARGUMENTS AND THE STACK.
00:37:08   IF YOU THINK ABOUT IT, ENVIRONMENT VARIABLES AND
00:37:12   THE COMMANDS LINE ARGUMENTS ARE LIKE THE FIRST
00:37:15   FUNCTION CALL TO THE PROCESS SO THAT SORT OF
00:37:17   MAKES SENSE.
00:37:17   SO IF THE KERNEL HAS TO KEEP LISTS OF WHICH
00:37:21   VIRTUAL AREAS BELONG TO WHICH PROCESS, THAT'S HOW
00:37:23   A LIBRARY KEEPS A RECORDS OF THE BOOKS THE
00:37:25   PATRONS CHECK OUT, RIGHT?
00:37:26   AND VOLATILITY CAN GET US ACCESS TO THIS BOOK
00:37:28   LIST WITHOUT NEEDING A COURT ORDER, USING THE
00:37:32   COMMAND PROR MAPS.
00:37:34   THIS IS PERFECTLY LEGAL AND ABOVEBOARD.
00:37:37   ON A LIVE LINUX SYSTEM, YOU CAN SEE THE SAME LIST
00:37:40   USING THE PROC FILE IN PROC/PITT/MAPS.
00:37:45   THIS SYSTEM PROVIDES USER SPACE A WAY TO GET
00:37:47   INFORMATION ABOUT PROCESSES WITHOUT HAVING TO
00:37:50   MAYBE SYSTEM CALLS TO THE KERNEL.
00:37:54   EACH HAS A START AND END ADDRESS, A PERMISSIONS
00:37:57   FLAG WHICH SPECIFIES WHICH OPERATIONS ARE ALLOWED
00:37:59   FOR THE VIRTUAL MEMORY AREA.
00:38:00   SEE HOW EACH OF THESE THREE AREAS HAVE DIFFERENT
00:38:02   SET OF PERMISSIONS, EVEN THOUGH THEY'RE MAPPED
00:38:04   THE EXACT SAME FILE?
00:38:05   SPEAKING OF, THE VIRTUAL MEMORY AREA HAS A NAME
00:38:09   WHICH MIGHT BE THE NAME OF THE FILE THAT'S MAPPED
00:38:11   OR MIGHT BE SOMETHING LIKE KEEP OR STACK.
00:38:13   THE FIRST NUMBER OF VIRTUAL MEMORY AREA IN THIS
00:38:17   LIST IS THE SEGMENTS PART OF THE FILE BECAUSE
00:38:19   IT'S EXECUTABLE AND NOT WRITABLE.
00:38:21   THE SECONDS AND THIRD MEMORY AREAS FORM THE
00:38:24   SEGMENTS, ONE BEING READ-ONLY AND THE OTHER BEING
00:38:26   READS-WRITE.
00:38:27   SO, GREAT, WE HAVE SOME VIRTUAL MEMORY AREAS
00:38:30   MANAGED BY THE KERNEL BUT HOW DOES THIS HELP US
00:38:32   FIND OUR ROGUE PROCESS?
00:38:34   WELL, WE JUST HAVE TO USE THE INFORMATION THE
00:38:36   KERNEL KEEPS ABOUT WHAT'S HAPPENED IN MEMORY TO
00:38:38   CATCH ONE OF THESE PROCESSES IN A LIE.
00:38:40   6 ENGINEERED, ALL THE PROCESSES MANAGED BY THE
00:38:45   KERNEL DENY THEY'RE PYTHON PROCESSES BUT DO ANY
00:38:47   OF THEM ACTUALLY HAVE THE THE PROCESS MAPPED AS A
00:38:50   PYTHON CODE?
00:38:51   IF SO, THAT SEEMS LIKE A CLEAR INTENT TO DECEIVE
00:38:54   AND WARRANTS SUSPICION.
00:38:55   SO, LET'S GO TALK TO THE KERNEL AGAIN AND WE'RE
00:38:58   GOING TO GO THROUGH ITS PAPERWORK FOR PROCESSES
00:38:59   WITH A FINE-TOOTHED COMB.
00:39:02   EACH AND EVERY PROCESS THAT THE KERNEL MANAGES,
00:39:05   WHICH IS STORED IN A LINKED LIST THAT WE CAN
00:39:07   CONVENIENTLY ACCESS USING THE ATTRIBUTE TASKS.
00:39:11   FOR EACH PROCESS, WE WANT TO IDENTIFY THE VIRTUAL
00:39:13   MEMORY AREA THAT CORRESPONDENCES WITH THE
00:39:15   EXECUTABLE PART OF THE PROCESS BINARY.
00:39:17   WE WANT TO FIND THE CODE SEGMENT.
00:39:19   SO WE GO THROUGH ALL OF THE VIRTUAL MEMORY AREAS
00:39:21   FOR THAT PROCESS, WHICH WE CAN OBTAIN USING THE
00:39:24   FUNCTION GET PROC MAPS.
00:39:25   AND WE FIND ONE WHOSE START AND END ADDRESSES
00:39:29   MATCH THE SEGMENT CODE START AND END ADDRESSES,
00:39:32   THAT'S THE CODE SEGMENT.
00:39:33   SOME PROCESSES, MAINLY THE KERNEL THREADS, SHARE
00:39:36   THE KERNEL'S ADDRESS SPACE SO DON'T HAVE CODE
00:39:38   SEGMENTS THEMSELVES.
00:39:40   WE WANT TO IGNORE THOSE.
00:39:41   FOR NON-KERNEL THREADS, THERE ARE NOT AND ONLY BE
00:39:44   VIRTUAL MEMORY AREA FOR THE CODE SEGMENTS, WHEN
00:39:46   WE FIND IT, WE WANT TO PRINT IT OUT -- PRINT OUT
00:39:49   THE VIRTUAL MEMORY AREA NAME ALONG WITH A PROCESS
00:39:52   I.D. AROUND THE SHORT NAME.
00:39:54   AND THEN WE CAN COMPARE WHAT EACH PROCESS CLAIMS
00:39:56   ITS NAME IS WITH WHAT EACH EXECUTABLE PROCESS THE
00:39:59   PROCESS HAS MAPPED.
00:40:01   AND THAT'S WEIRD, THERE ARE TWO PROCESSES
00:40:03   CLAIMING TO BE WHOOPSIE, THE UBUNTU ERROR
00:40:07   REPORTER.
00:40:08   ONE IS USER BIN WHOOPSIE, WHICH IS PRETTY
00:40:11   STANDARD AND THE OTHER IS USING USER BIN PYTHON,
00:40:14   AND WE ARE LOOKING FOR A PYTHON PROCESS.
00:40:17   I THINK WE HAVE A VIABLE SUSPECT, GUMSHOES.
00:40:22   NOW WE NEED TO BUILD OUR CASE.
00:40:23   WE KNOW THE PROCESS HAS BEEN LYING TO THE KERNEL
00:40:25   BUT THAT'S NOT A CRIME.
00:40:26   AFTER ALL, OTHER LEGITIMATE PROCESSES ALSO LIE
00:40:30   ABOUT THE NAME, THEY OVERWRITE THEIR OWN SHORT
00:40:32   TASK NAME AND COMMAND LINE ARGUMENTS.
00:40:34   FOR INSTANCE, POSTGRASS DOES THIS TO RUN THE
00:40:37   QUERY IN SHHD DOES THIS TO SHOW WHO'S LOGGED ON,
00:40:40   SO WE NEED TO LEARN MORE.
00:40:42   WHAT ELSE HAS THIS PROCESS BEEN DOING?
00:40:44   WE CAN OF COURSE ASK VOLATILITY TO INTERROGATE
00:40:48   THE KERNEL ABOUT THIS PROCESS SPECIFICALLY,
00:40:49   WHEREAS WE WERE ASKING ABOUT ALL PROCESSES
00:40:52   BEFORE.
00:40:53   FOR INSTANCE, WE CAN LOOK AT THE OPEN FILES THIS
00:40:56   PROCESS WAS USING.
00:40:57   LOOKS LIKE IT WAS PIPING SOMETHING TO DEV NULL AT
00:41:00   THE TIME OF MEMBERRY ACQUISITION, NOT SUSPICIOUS
00:41:02   BUT IT DOES INDICATE THAT IT WAS PROBABLY RUNNING
00:41:04   IN THE BACKGROUND.
00:41:05   WE CAN LOOK AT ANY OPEN SOCKETS THAT THIS
00:41:08   PARTICULAR PROCESS HAD ACCESS TO.
00:41:09   LOOKS LIKE NONE.
00:41:10   AT THE TIME OF THE MEMORY ACQUISITION.
00:41:12   AGAIN, THIS DOESN'T MEAN THAT THE PROCESS NEVER
00:41:14   MADE ANY NETWORK CONNECTIONS, JUST MEANS IT WON'T
00:41:17   DOING SO AT THE TIME OF THE MEMORY DUMP.
00:41:19   OKAY, SO LET'S HAVE A CLOSER LOOK AT THE PROCESS
00:41:21   BINARIES.
00:41:22   OH, LOOK, IT WAS USING THE PYTHON LIBRARY SET
00:41:24   PROC TITLE.
00:41:25   THIS IS A LIBRARY THAT PROVIDES AN API TO
00:41:28   OVERRIDE A PROCESS NAME AND COMMAND LINE
00:41:30   ARGUMENTS SO THAT'S HOW IT HID ITSELF.
00:41:31   WE STILL DON'T KNOW ANYTHING USEFUL ABOUT THE
00:41:34   PROCESS'S INTENTIONS, THOUGH, OR WHAT IT DID
00:41:37   BEFORE THE CHIEF ACQUIRED THE MEMORY DUMP SO
00:41:39   LET'S LOOK AT THE PROCESS'S BOOKS, NAMELY STACK
00:41:42   AND HYPE.
00:41:43   THERE MIGHT BE INCRIMINATING EVIDENCE IN THERE.
00:41:44   WE HAVE THE START AND END ADDRESSES HERE SO WE
00:41:46   CAN TAKE THE FILE THE CHIEF GAVE US, SEEK TO THE
00:41:49   START ADDRESS AND READ UNTIL THE ENDS ADDRESS,
00:41:51   RIGHT?
00:41:51   SO LET'S START WITH THE STACK.
00:41:52   THERE'S ONE PROBLEM.
00:41:55   THE ADDRESSES ARE REALLY, REALLY BIG.
00:41:58   THAT WOULD MEAN THE STACK IS ALMOST 141,000
00:42:01   GIGABYTES INTO THE MEMORY DUMP BUT THAT'S ONLY 2
00:42:05   GIGABYTES, SO WHAT GIVES?
00:42:06   ARE THE KERNEL'S RECORDS WRONG?
00:42:08   IS IT IN ON THE WHOLE THING AND IMPEDING OUR
00:42:10   INVESTIGATION?
00:42:10   NO, ACTUALLY, NO, IT ISN'T.
00:42:14   WE'RE JUST INTERPRETING THE ADDRESSES WRONG.
00:42:17   ALL THE ADDRESSES OF THE KERNEL LAST GIVEN US ARE
00:42:20   VIRTUAL ADDRESSES.
00:42:22   NOT PHYSICAL ADDRESSES OR OFFSETS INTO RAM.
00:42:25   A PROCESSES OWN MEMORY IS ONE LARGE CONTIGUOUS
00:42:28   BLOCK CALLED THE PROCESS ADDRESS SPACE OR PROCESS
00:42:30   MEMORY AND ONLY EVER DEALS WITH VIRTUAL ADDRESSES
00:42:32   IN ITS OWN ADDRESS SPACE.
00:42:34   THAT'S THE ADDRESS YOU'LL GET IN GDB OR IF YOU
00:42:38   REFER AN OBJECT IN PYTHON AND USUALLY REPRESENTED
00:42:42   IN HEXADECIMAL FORM.
00:42:43   IT'S NOT CONTIGUOUS IN PHYSICAL MEMORY, THOUGH,
00:42:46   IT'S SLICED UP BY THE OPERATING SYSTEM INTO TINY
00:42:48   CHUNKS CALLED PAGES BY ARE ABOUT FOUR KILOBYTES
00:42:51   EACH, COULD BE LARGER.
00:42:52   EACH PAGE MAYBE MAPPED TO A DIFFERENT PORTION OF
00:42:55   THE PHYSICAL SPACE OR RAM.
00:42:56   OR MIGHT NOT BE MAPPED AT ALL.
00:42:58   MOST OF OUR PROCESSES SPACE IS NOT USED.
00:43:02   YOU SAW THE STACK'S VIRTUAL ADDRESSES, LARGE
00:43:05   NUMBERS, WHICH MEANS THE PROCESS IS BIGGER THAN
00:43:08   RAM.
00:43:08   SO WHY WASTE PHYSICAL MEMORY ON SPACE.
00:43:10   EVEN THE PAGES THAT ARE USED MIGHT NOT BE
00:43:12   CURRENTLY MAPPED TO PHYSICAL MEMORY.
00:43:13   THEY MIGHT BE SWAPPED OUT TO DISK OR COMPRESSED
00:43:16   IF THE PROCESS DOESN'T NEED THEM IMMEDIATELY.
00:43:17   EACH PROCESS USES ONLY THE MEMORY THAT IT NEEDS
00:43:19   WHEN IT NEEDS IT, THAT'S WHAT ALLOWS MANY
00:43:22   PROCESSES, EACH HAVING A HUGE ADDRESS SPACE IS TO
00:43:25   SHARE A LIMITED AMOUNT OF PHYSICAL MEMORY.
00:43:27   THE REASON A PROCESS CAN PRETENDS THAT ITS MEMORY
00:43:31   IS ONE GIANT CONTIGUOUS BLOCK IS THAT WHENEVER IT
00:43:35   ACTS AS DATA AT A VIRTUAL ADDRESS, THE MMYOU WANT
00:43:38   UOR MEMBER -- MEMBER BRING MANAGE.
00:43:41   UNIT TRANSLATES THE ADDRESS INTO A PHYSICAL
00:43:43   ADDRESS AND IF THE ADDRESS HAS BEEN TRANSLATED
00:43:45   BEFORE, IT MIGHT BE CAMPED IN THE TLB OR
00:43:48   TRANSLATION LOOK-ASIDE BUFFER INSTEAD OF BEING
00:43:51   RETRANSLATED.
00:43:52   IF THE DATA HAS BEEN SWAPPED OUT, IT'S SWAPPED
00:43:54   BACK IN SO THE PROCESS CAN ACCESS IT AND ALL THIS
00:43:56   HAPPENS TRANSPARENTLY TO THE PROCESS.
00:43:58   WHO HAS NO IDEA ANY OF THIS IS GOING ON.
00:44:00   VOLATILITY CAN ALSO TRANSLATE A VIRTUAL ADDRESS
00:44:04   INTO A PHYSICAL ADDRESS.
00:44:05   WE COULD JUST ASK IT TO DO THE TRANSLATION TORE
00:44:07   US, TO GET US A STACK AND HEAP AND WE WILL DO
00:44:10   THAT BUT ACME IS THE KIND OF ORGANIZATION THAT
00:44:13   PROVIDES ACCOUNTABILITIES AND OVERSIGHT FOR
00:44:15   CONTRACTORS, SOMETHING, SOMETHING --
00:44:18   SOMETHING-SOMETHING FRUIT OF THE POISON TREE, WE
00:44:22   CAN'T LET VOLATILITY BLINDLY GET US THE EVIDENCE,
00:44:26   WE HAVE TO UNDERSTAND HOW TRANSLATION WORKS.
00:44:27   IN SOME CASES, IT MIGHT BE VERY SIMPLE.
00:44:30   FOR EXAMPLE, ON LINUX AND OS 10, THE CODE AND
00:44:32   DATA SEGMENTS OF THE KERNEL ADDRESS SPACE ARE
00:44:35   IDENTITY-MAPPED, WHICH MEANS THAT WHILE THOSE
00:44:37   REGIONS ARE STILL DIVIDE UP INTO PAGES, THOSE
00:44:39   PAGES AREN'T SCATTERED EVERYWHERE THROUGH
00:44:41   PHYSICAL MEMORY.
00:44:42   THEY'RE LAID OUT IN THE SAME ORDER AS IN PROCESS
00:44:44   MEMBER RIFF.
00:44:44   BUT THAT'S ONLY THE IDENTITY MAPPED REGIONS.
00:44:48   THE OTHER REGIONS ARE STILL SORT OF SCATTERED.
00:44:51   FOR THE IDENTITIES MAPPED REGIONS, THE VIRTUAL
00:44:54   ADDRESS IS THE PHYSICAL ADDRESS PLUS CONSTANT
00:44:59   OFF-SET, WHICH IS FOR 64 BIT SYSTEMS.
00:45:02   THE 32-BIT IS RECEIVE.
00:45:05   IS THE SPACE RANDOMIZATION IS SUPPORTED, ASLR, AS
00:45:09   IT IS IN NEWER VERSIONS, OTHER RANDOM CONSTANT
00:45:12   ALSO GETS ADDED.
00:45:13   THE RANDOM OFF IF SET HELPS MITIGATES BUFFER
00:45:16   OVERFLOW ATTACKS BY MAKING IT HARD FOR CRITICAL
00:45:18   ADDRESSES TO BE GUESSED.
00:45:19   SO THE VIRTUAL TO PHYSICAL ADDRESS TRANSLATION
00:45:21   FOR IDENTITY MAPPED SEGMENTS JUST MEANS
00:45:23   SUBTRACTING SOME CONSTANT.
00:45:24   BUT WHAT ABOUT THE PARTS OF KERNEL MEMORY THAT
00:45:27   ARE NOT IDENTITY MAPPED OR NON-KERNEL PROCESSES
00:45:31   WHICH ARE ALSO NOT IDENTITIES MAPPED.
00:45:33   WELL, BY ITSELF, A VIRTUAL ADDRESS IS JUST AN
00:45:35   OFFSET INTO THE PROCESS ADDRESS SPACE, BUT IT CAN
00:45:39   BE SPLIT INTO A SERIES OF FIVE NUMBERS LIKE THIS
00:45:42   THAT ARE USED IN ADDRESS TRANSLATION AND THIS
00:45:43   DIVISION AGAIN ONLY APPLIES TO 64-BIT SYSTEMS,
00:45:46   THEY'RE DIVIDED UP DIFFERENTLY AND IN FEWER
00:45:49   PIECES ON 32-BIT SYSTEMS BUT THE PROCESS IS THE
00:45:52   SAME.
00:45:53   HERE, ONLY 48 BITS ARE USED FOR TRANSLATION.
00:45:55   THE TOP 16 BITS SHOWN HERE IN BLACK ARE EITHER
00:45:59   ALL ONES OR ZEROS AND THEY'RE THROWN AWAY.
00:46:01   THESE NUMBERS, TOGETHER WITH SOME EXTRA
00:46:03   INFORMATION, KIND OF WORK LIKE REAL-WORLD MAILING
00:46:05   ADDRESSES.
00:46:06   IN MOST COUNTRIES, MAILING ADDRESS LOOKS LIKE
00:46:09   THIS, MODULO SOME FORMATTING.
00:46:12   THERE ARE MULTIPLE DESCRIPTION ATTENTION OF A
00:46:14   LOCATION, IN OTHER WORDS OF DECREASING
00:46:16   SPECIFICITY.
00:46:16   EACH DESCRIPTION IN THIS ADDRESS LETS US NARROW
00:46:19   DOWN THE SEARCH.
00:46:20   SO LET'S START WITH THE MOST SPECIFIC INFORMATION
00:46:22   IN THE VIRTUAL ADDRESS, THE LAST 12 BITS.
00:46:25   THIS IS LIKE THE APARTMENT NUMBER OF A VIRTUAL
00:46:26   ADDRESS.
00:46:28   AN APARTMENT NUMBER IDENTIFIES AN APARTMENT IN A
00:46:30   BUILDING, THE LAST 12 BITS OF THE VIRTUAL ADDRESS
00:46:33   IDENTIFY A BYTE IN A PAGE.
00:46:35   I'VE MARKED THAT BYTE WITH AN X.
00:46:37   THE RESULT OF THE TRANSLATION IS JUST THE
00:46:39   PHYSICAL ADDRESS OF THAT X WHICH IS THE PHYSICAL
00:46:41   ADDRESS OF THE PAGE PLUS THE 12-BIT OFFSET.
00:46:44   BUT JUST LIKE THERE ARE MANY BUILDINGS IN THE
00:46:46   WORLD, A PROCESS CAN HAVE MANY PAGES.
00:46:48   SO WE NEED TO NARROW IT DOWN.
00:46:51   THE NINE BITS IN GREEN IS LIKE THE STREET ADDRESS
00:46:53   WHICH IDENTIFIES WHICH BUILDING HAS THE
00:46:55   APARTMENT.
00:46:55   THE PROCESS HAS A TABLE CALLED A PAGE TABLE THAT
00:46:58   HAS A LIST OF PAGE ADDRESSES, THE GREEN BITS
00:47:01   IDENTIFY THE RIGHT PAGE IN THAT LIST, THE PAGE
00:47:03   THAT HAS THE DATA THAT WE'RE LOOKING FOR.
00:47:05   ACTUALLY, NO, THE PROCESS HAS MANY PAGE TABLES,
00:47:08   KIND OF LIKE HOW THERE ARE MANY STREETS IN THE
00:47:11   WORLD NAMED MAIN.
00:47:12   THE PROCESS DOES HAVE A TABLE OF TABLES, THOUGH,
00:47:14   CALLED A PAGE DIRECTORY.
00:47:15   IT LISTS PAGE TABLE ADDRESSES AND THE NINE BITS
00:47:17   IN PURPLE IDENTIFY WHICH OF THOSE PAGE TABLES HAS
00:47:21   THE PAGE WE'RE LOOKING FOR.
00:47:22   ACTUALLY, NO, THERE ARE MANY PAGE DIRECTORIES
00:47:25   ASSOCIATED WITH THE PROCESS AND YOU PROBABLY SEE
00:47:27   WHERE I'M GOING WITH THIS SO LET ME SPOIL THE
00:47:29   ENDING.
00:47:29   EACH PROCESS HAS A TABLE OF TABLES OF TABLES OF
00:47:32   TABLES OF PAGES.
00:47:33   A FIVE-LEVEL SPARSE TREE OF TABLES.
00:47:36   THE POINT S THEY NEED TO BE TRAVERSED USING THE
00:47:38   NUMBERS IN THE ADDRESS TO GET TO A SINGLE PAGE
00:47:41   WHICH WE CAN INDEX TO USING THE LAST 12 BITS.
00:47:45   THE INTERVENING TABLE FLAMES DON'T MATTER BUT WE
00:47:47   DO CARE ABOUT THE PER-PROCESS TOP LEVEL, WHILE
00:47:51   THE VOLUME TAKE IT REFERRING TO IT AS THE
00:47:52   DIRECTORY TABLE AND THE ADDRESS AS THE DTB OR
00:47:55   DIRECTORY TABLE BASE.
00:47:57   BECAUSE NO ONE CAN AGREE ON A THREE-LETTER
00:47:59   ACRONYM, THE LINUX KERNEL REFERS TO IT AS THE
00:48:03   PGD, PAGE TABLE DIRECTORY.
00:48:05   WHOSE ADDRESS IS STORED IN EACH PROCESSES MM
00:48:09   STRUCT.
00:48:09   WITHOUT ACCESS TO THE TOP LEVEL TABLE, THERE IS
00:48:11   NO ADDRESS TRANSLATION, AND SO THE KERNEL HAS
00:48:14   ONE, TOO, FOR THE PARTS OF MEMORY THAT ARE NOT
00:48:16   IDENTITY MAPPED.
00:48:17   THE KERNEL'S DTB CAN BE FOUND IN THE SYMBOL THAT
00:48:21   WE GAVE TO VOLATILITY, WHICH IT CAREFULLY
00:48:23   DOCUMENTS HERE AT THE ENDS WHEN IT BRINGS US
00:48:25   TASKS FOR INTERROGATION, FOR CHAIN OF EVIDENCE
00:48:27   REASONS WHICH IS WHAT WE HERE AT ACME LIKE TO
00:48:32   SEE.
00:48:32   SO NOW THAT WE UNDERSTAND ADDRESS TRANSLATION AND
00:48:34   WE SATISFIED OUR REGULATORY OVERSIGHT
00:48:36   REQUIREMENTS, LET'S ASK VOLATILITY TO GET US THE
00:48:39   STACK.
00:48:39   WE JUST NEED TO NOTE THE START ADDRESS AND TELL
00:48:42   VOLATILITY TO DUMP THE VIRTUAL MEMORY AREA THAT
00:48:44   STARTS WITH THAT ADDRESS.
00:48:45   IT WILL FIND AND READ EVERY PAGE ASSOCIATED WITH
00:48:47   THAT VIRTUAL MEMORY AREA AND DUMP THEM INTO ONE
00:48:51   SINGLE CONTIGUOUS BUY ENGINEER FILE.
00:48:54   WHICH WE CAN LOOK AT USING STRINGS, WHICH IS A
00:48:58   POSIX COMMAND FOR A SERIES OF FOUR OR MORE
00:49:01   CHARACTERS ENDING WITH A NEW LINE OR NULL.
00:49:04   BASICALLY HUMAN READABLE STRINGS, BUT THERE ARE A
00:49:06   LOT OF FALSE POSITIVES WHICH ENDS UP GIVING US A
00:49:09   BUNCH OF GARBAGE BUT ALSO RELEVANT DATA.
00:49:12   REMEMBER WE -- THAT IT WAS PART OF THE STACK
00:49:16   VIRTUAL MEMORY.
00:49:18   THE ARGUMENTS ARE OVERWRITTEN TO BE WHOOPSIE BUT
00:49:22   THE ACTUAL COMMANDS IS SHOWN IN THE VARIABLE LIST
00:49:24   AS AN UNDERSCORE.
00:49:26   IT LOOKS LIKE PYTHON RUN WITH NO HUB WHICH LETS A
00:49:29   PROCESS RUN IN THE BACKGROUNDS WITHOUT DOING WHEN
00:49:31   THE CONTROLLING TERMINAL IS CLOSED.
00:49:34   SO NOW WORK DO THE SAME THING WITH HEAP BUT
00:49:36   WOULDN'T IT BE NICE IF WE COULD REALLY GET INTO
00:49:38   THE PROCESS'S MINDS, UNDERSTAND THE OBJECTS THAT
00:49:40   IT WAS THROWING IN THERE?
00:49:41   IF SO, WE NEEDS TO LEARN TO SPEAK ITS LANGUAGE.
00:49:44   THE LANGUAGE OF PYTHON OBJECTS, AND THAT LANGUAGE
00:49:47   IS C, BECAUSE THIS IS CPYTHON, WHICH MEANS THAT
00:49:50   PYTHON OBJECTS IN THE HEAP ARE C-DATA STRUCTURES.
00:49:53   WE MENTION C-STRUCTS BEFORE, THAT THERAPY COMPLEX
00:49:56   DATA STRUCTURES COMPOSTED OF OTHERS, AND THEIR
00:49:59   MEMBERS ARE TYPES, UNLIKE THE TOUPOs.
00:50:05   THAT'S ALL TRUE.
00:50:06   BUT SINCE WE WANT TO INTERPRET PARTS OF THE HEAP
00:50:09   AS C-DATA STRUCKORS, WHAT'S MORE IMPORTANT IS
00:50:14   THAT IT'S A PACKING FORMULA FOR BYTES.
00:50:15   WE NEED TO KNOW WHAT ORDER THE BYTES APPEAR IN
00:50:18   AND HOW MANY OF THEM THERE ARE.
00:50:19   FOR EXAMPLE, THIS IS A STRUCT DECLARINGATION
00:50:22   BECAUSE OF THE TYPE DECLARATION, WE KNOW EXACTLY
00:50:25   WHAT IT SHOULD LOOK LIKE IN MEMORY, EIGHT BYTES
00:50:27   OF DATA BECAUSE IT HAS TWO 4-BYTE INTEGERS.
00:50:30   ANY EIGHT CONTIGUOUS BYTES OF MEMORY WOULD FIT
00:50:33   INTO THE STRUCT.
00:50:34   SO LET'S TAKE THE SNIPPETS OF MEMORY WHERE THE
00:50:36   OFFSETS ARE SHOWN IN BLUE.
00:50:38   IF WE WERE TO INTERPRET THE BEGINNING OF THIS
00:50:40   CHUNK OF MEMORY AT OFFSETS ZERO AS A POINT
00:50:43   STRUCTURE, WE WOULD END UP WITH ACTION -- AXIS
00:50:46   THREE AND Y IS TWO.
00:50:49   WHICH IS COOL.
00:50:50   HOWEVER THE PART THAT STARTS AT ONE ALSO FIT INTO
00:50:53   THE POINT STRUCTURE.
00:50:54   XA BEYOND ARE REALLY WEIRD SO, IS THIS A VALID
00:50:57   POINT?
00:50:57   TECHNICALLY, YES, BECAUSE THEY'RE INTEGERS.
00:50:59   BUT LET'S SAY THAT THE POINTS REPRESENTED BY THE
00:51:02   STRUCT MUST FALL INSIDE A CIRCLE OF RADIUS 10.
00:51:04   IN THAT CASE, THIS ISN'T A VALID POINT, EVEN
00:51:06   THOUGHT IT'S A VALID POINT STRUCTURE.
00:51:07   WE NEED SOME KIND OF VALIDATION CHECK TO MAKE
00:51:09   SURE THAT X AND Y ARE CORRECT, INDEPENDENTLY OF
00:51:12   WHETHER THE BYTES ARE CORRECT.
00:51:13   SO THAT IN MIND, LET'S LOOK AT HOW MANY BYTES ARE
00:51:18   IN A PYTHON STRING OBJECT.
00:51:19   THIS IS GENERIC APPROXIMATION OF THE PYTHON 2.7
00:51:25   PY STRING OBJECT.
00:51:26   I'M SORRY, CPYTHON DEVELOPERS SKIPPING OVER SOME
00:51:29   STUFF BECAUSE WE'RE RACING THE CLOCK HERE.
00:51:31   I WANT TO POINT OUT A COME OF THINGS.
00:51:34   FIRST THE STATE IS A NUMBER RATION OF ONE OR TWO.
00:51:37   WE NEEDS TO VALIDATE THAT.
00:51:38   SECOND, THE CHARACTER ARRAY IS OF SIZE ONE SO
00:51:41   THAT'S THE FIRST CHARACTER OF THE STRING, WHICH
00:51:42   IS NULL TERMINATED AND THE REST OF THE STRING
00:51:45   FOLLOWS IMMEDIATELY AFTER THE STRUCT.
00:51:47   THIS IS DOCUMENTED IN A COMMENT TO THE CPYTHON
00:51:50   SOURCE.
00:51:51   BUT VOLATILITY CAN'T ACCEPT A C-STRUCT LIKE THIS.
00:51:54   WE NEED TO TRANSLATE THE DESCRIPTION INTO
00:51:55   SOMETHING THAT VOLATILITY UNDERSTANDS, WHICH IT
00:51:57   CALLS THE V-TYPE.
00:52:00   WHICH IS BASICALLY THE SAME STRUCT DEFINITION BUT
00:52:02   AS A BUNCH OF PYTHON ARRAYS ANNOTATED WITH
00:52:06   INFORMATION ABOUT THE SIZE OF THE STRUCT AND THE
00:52:08   OFFSETS OF THE MEMBERS.
00:52:09   THE TOTAL SIZE OF THE STRUCT AS IT WAS DECLARED
00:52:11   IN C IS 37 BYTES.
00:52:12   WE KNOW THAT FROM ADDING UP THE SIZES OF ALL THE
00:52:14   MEMBERS.
00:52:15   FOR EXAMPLE, OBJECT REV COUNT WAS THE FIRST
00:52:18   MEMBER OF THE STRUCT DISKS WAS SPECIFIC SET ZERO,
00:52:21   OF TYPE LONG, WHICH IS BASICALLY A REALLY BIG
00:52:23   NUMBER.
00:52:24   REMEMBER HOW WE SAID THAT -- WHICH IS WHY THE
00:52:29   NEXT MEMBER OB TYPE STARTS AT 8 AND SO FORTH.
00:52:33   BUT ANY SEQUENCE OF 37 BYTES WILL FIT INTO THIS
00:52:35   STRUCT, WHETHER OR NOT THE VALUES MAKE SENSE SO,
00:52:37   WE NEED TO TELL VOLATILITY HOW TO VALIDATE
00:52:39   WHETHER THERE IS 37 BYTE CHUNK OF MEMORY IS
00:52:42   REALLY A PYTHON STRING.
00:52:43   SO WE READ THE STRING, WHICH IS 36 BYTES FROM THE
00:52:47   BEGINNING OF THIS OBJECT BECAUSE, REMEMBER, THE
00:52:48   FIRST CHARACTER OF THE THING WAS THE LAST BYTE OF
00:52:51   THE PY STRING OBJECT.
00:52:53   AND WE SEE IF IT'S A VALID PYTHON STRING.
00:52:55   THE TYPE POINTER HAS TO BE A VALID POINTER.
00:52:58   VOLATILITY KNOWS ALL ABOUT POINTER OBJECTS AND
00:53:01   PROVIDES A VALIDITY CHECK THAT ENSURES THAT IT
00:53:04   POINTS TO SOMETHING THAT'S INSIDE THE HEAP.
00:53:05   THE SIZE OF THE STRING ALSO NEEDS TO BE
00:53:09   NON-NEGATIVE AND WE CAN SKIP EMPTY STRINGS
00:53:12   BECAUSE WE DON'T CARE ABOUT THEM AND TO SPEED
00:53:14   THINGS UP, LET'S IGNORE REALLY LARGE STRINGS,
00:53:16   TOO.
00:53:17   THE STATE HAS TO BE ZERO, ONE OR TWO AS WE
00:53:19   MENTIONED BEFORE.
00:53:20   AND THE STRING HAS TO BE NULL-TERMINATED AS WE
00:53:24   MENTIONED BEFORE.
00:53:24   AND HASH EITHER HAS TO BE NEGATIVE 1, WHICH MEANS
00:53:27   IT HASN'T BEEN COMPUTED YET OR IT HAS TO BE THE
00:53:29   ACTUAL HASH OF THE STRING.
00:53:30   AND WE COMPLETELY IGNORE REV COUNTS BECAUSE WE
00:53:34   HAVE TO FIND GARBAGE-COLLECTED STRINGS.
00:53:36   AND THEN HERE'S SOME PSEUDO COUNT THAT TELLS
00:53:39   VOLATILITY TO BROUGHT-FORCE SEARCH THE WHOLE
00:53:41   HEAP, BY TESTING EVERY SEQUENCE OF 37 BYTES IN
00:53:43   THE HEAP FOR PY STRING OBJECT VALIDITY.
00:53:46   SO NOW WHEN WE RUN IT, IT WILL DISPLAY THE ACTUAL
00:53:49   PYTHON STRINGS FROM THE HEAP WHICH INCLUDES A TON
00:53:52   OF PYTHON DOC STRINGS.
00:53:53   BUT SOMETIMES YOU CAN FIND USEFUL INFORMATION,
00:53:56   MAYBE IN THE FORM OF A GARBAGE COLLECTED STRING.
00:53:58   IT LOOKS LIKE OUR PROCESS HAD PREVIOUSLY MADE AN
00:54:01   HTTP REQUEST, NET STATS SHOWED NO CURRENT
00:54:04   CONNECTIONS BUT WILL BELY THIS REQUEST IS STILL
00:54:05   IN THE HEAP SO WE CAN LOOK AT IT.
00:54:07   WE WOULD STILL SEE IT LIKE THIS EVEN IF IT WAS
00:54:09   MADE OVER HTTPS BECAUSE THIS IS THE RAW REQUEST
00:54:12   BEFORE IT'S END COPYRIGHTED OWNED WIRE.
00:54:15   NOTE THE BASIC AUTHORIZATION HEADER.
00:54:17   BASIC AUTHORIZATION ENCODES USER NAME AND
00:54:20   PASSWORDS SEPARATED BY A COLON, WHICH MEANS WE
00:54:23   CAN 64 DECODE IT AND GET THE USER NAME AND
00:54:27   PASSWORD.
00:54:27   I THINK THIS IS PRETTY INCRIMINATING AND A
00:54:29   MESSAGE TO THE CHIEF.
00:54:30   I KNOW WHAT YOU'RE PROBABLY THINKING, COULDN'T WE
00:54:33   HAVE GOTTEN THIS INFORMATION USING THE STRING'S
00:54:37   COMMAND?
00:54:37   YES, WE WOULD HAVE, BOTH THE DOC STRINGS AND THE
00:54:39   REQUEST, SO WHY DID WE BOTHER GOING TO ALL THIS
00:54:42   TROUBLE?
00:54:43   FINDING PYTHON STRINGS TELLS US SOMETHING ABOUT
00:54:44   THE STRING BOUNDARIES, IF THAT REQUEST WAS NOT
00:54:47   ONE STRING BUT MULTIPLE STRINGS, THAT MIGHT HAVE
00:54:49   BEEN MINUTES SOMETHING COMPLETELY DIFFERENT.
00:54:51   STRINGS ALSO ONLY RETURNS ASCII BUT WITH PYTHON
00:54:55   STRINGS WE MIGHT BE ABLE TO SEE BYTES REDS INTO
00:54:57   THE PROCESS FROM A FILE, LIKE AN IMAGE.
00:55:01   ALSO WITH PYTHON THINGS, MORE FILTER AROUND THE
00:55:04   LIFE CYCLE.
00:55:06   MAYBE WE COULD TO EXCLUDE PYTHON STRINGS.
00:55:09   AND IT USES VOLATILITY CHECKS TO FIND ALMOST
00:55:11   ANYTHING, KERNEL STRUCTURES, MODULES, NETWORK
00:55:14   PACKETS AND ON EVERY PLATS FORM, NOT JUST LINUX,
00:55:19   USUALLY MORE CLEVERLY THAN BROUGHT FORCE, TOO.
00:55:21   AND NOW WICK DO THE SAME ANYONE FOR OTHER PYTHON
00:55:25   STRUCTURES, BUT UNFORTUNATELY THAT'S ALL THE TIME
00:55:28   WE HAVE FOR TODAY AND I THINK THE CHIEF NEEDS TO
00:55:29   DEAL WITH HER MOM.
00:55:30   THAT'S RIGHT, DETECTIVE, I LOGGED INTO MY MOM'S
00:55:33   SERVER WITH HER EVERY CONNECTIONS SEEMS LIKE IT
00:55:36   WAS RETURNING COMMANDS THAT THE PYTHON PROCESS
00:55:38   WAS SUPPOSED TO RUN ON THE ACME SERVER.
00:55:39   I'M GOING TO BLOCK ALL INBOUND AND OUTBOUNDS
00:55:42   TRAFFIC TO THAT I.P.
00:55:43   NOW I'M GOING TO CALL MY MOM AND GLOAT ABOUT HOW
00:55:47   WE FOILED HER PLANS.
00:55:50   GOOD JOB, GUMSHOES.
00:55:51   UNTIL NEXT TIME...
00:55:52   [ Applause ]
00:55:54   FOR MORE INFORMATION, I RECOMMEND THE BOOK THE
00:56:13   "ART OF FORENSICS," WHICH MADE ME WANT TO DO THIS
00:56:16   TALK.
00:56:17   I DON'T DO ANY FORENSICS BUT A FUN LEARNING TOOL
00:56:20   TO LEARN ABOUT MEMORY.
00:56:20   ALSO, THREE FANTASTIC TALKS EARLIER AT PYCON THAT
00:56:23   GO INTO GREATER DETAIL ABOUT SOME SUBJECTS THAT I
00:56:25   BARELY TOUCHED UPON AND THEY'RE LISTED HERE, SO
00:56:27   PLEASE CHECK THEM OUT.
00:56:29   A FULL WORKING VERSION OF THE PYTHON STRING
00:56:31   SEARCHING CODES IS ON MY GITHUB ACCOUNT.
00:56:34   IT'S NOT BRUTE FORCE, MUCH MORE OPTIMIZED AND I
00:56:37   WILL BE HAPPY TO ANSWER ANY QUESTIONS ON TWITTER
00:56:40   OR OUTSIDE.
00:56:40   THANK YOU FOR COMING AND THANK YOU FOR YOUR TIME.
00:56:43   [ Applause ]
00:56:50   >> THANK YOU VERY MUCH.
00:56:51   THAT WAS REALLY GREAT.












