00:52:00:10  >> WELCOME BACK.
01:02:31:01  OUR NEXT SPEAKER IS CHRISTINE
01:02:31:01  SPANG.
01:02:31:19  LET'S GIVE HER A WARM WELCOME.
01:02:33:19  [ Applause ]
01:02:42:04  >> HEY, EVERYBODY.
01:02:43:13  GOOD AFTERNOON.
01:02:44:01  HEY!
01:02:47:01  [SCATTERED APPLAUSE]
01:02:52:25  >> WE'RE GONNA BE TALKING ABOUT
01:02:55:07  WEBSOCKETS TODAY.
01:02:55:28  SO WEBSOCKETS IS COOL BECAUSE
01:02:58:19  THEY ENABLE US TO BUILD WEB
01:03:00:19  APPLICATIONS THAT ARE BOTH
01:03:01:28  REAL-TIME AND THAT SCALE REALLY
01:03:03:25  WELL.
01:03:04:07  SO IN THIS TALK, I'M GONNA GIVE
01:03:07:04  YOU SOME HISTORICAL CONTEXT FOR
01:03:09:10  WHY WE NEEDED WEBSOCKETS IN THE
01:03:10:28  FIRST PLACE.
01:03:13:01  THEN I'M GONNA EXPLAIN TO YOU
01:03:14:16  HOW THE PROTOCOL ACTUALLY WORKS
01:03:16:28  AND I'LL TAKE A LOOK AT A TCP
01:03:20:19  DUMP OF WEBSOCKETS IN ACTION.
01:03:23:10  THINGS YOU NEED TO KEEP IN MIND
01:03:25:04  WHEN ONE OF RUNNING WEBSOCKETS
01:03:27:19  APPLICATIONS IN PRODUCTION.
01:03:28:19  ALL RIGHT, A LITTLE BIT ABOUT
01:03:29:16  ME.
01:03:31:07  MY NAME IS CHRISTINE SPANG.
01:03:32:25  I'VE BEEN PROGRAMMING SINCE I
01:03:34:25  WAS IN HIGH SCHOOL.
01:03:36:04  AFTER THAT I WENT TO M.I.T.
01:03:39:01  AND THEN I SPENT THREE YEARS
01:03:40:22  WORKING AT A COMPANY CALLED
01:03:44:25  K-SPLICE.
01:03:50:10  TODAY I'M ONE OF THE COFOUNDERS
01:03:56:28  AT A COMPANY CALLED NYLAS, A
01:03:59:28  STARTUP IN SAN FRANCISCO.
01:04:02:10  WE'RE BUILDING A PLATFORM THAT
01:04:04:07  MAKES IT EASY FOR YOU TO BUILD
01:04:05:28  APPLICATIONS THAT USE DATA FROM
01:04:08:04  EMAIL, CONTACTS, AND CALENDARS.
01:04:11:16  ALL RIGHT, ENOUGH WITH THE
01:04:13:10  INTROS.
01:04:13:28  LET'S GET TO THE TALK.
01:04:15:10  FIRST WE'RE GONNA TALK ABOUT
01:04:16:25  WHAT WEBSOCKETS ARE.
01:04:18:04  THEN I'LL GIVE YOU A PYTHON
01:04:19:28  EXAMPLE, AND AN EXAMPLE THAT'S A
01:04:21:25  BIT MORE REAL WORLD.
01:04:25:22  THEN WE'LL TALK ABOUT
01:04:27:16  PERFORMANCE AND THEIR USE IN
01:04:30:01  PRODUCTION.
01:04:30:10  ALL RIGHT, LET'S DIVE IN.
01:04:32:25  SO WHAT ARE WEBSOCKETS?
01:04:34:04  SO ANSWER THIS QUESTION, I'M
01:04:37:10  FIRST GONNA GIVE YOU SOME OF THE
01:04:38:22  HISTORY OF PROTOCOLS POWERING
01:04:41:07  WEB APPLICATIONS, THE
01:04:43:04  SHORTCOMINGS THEY HAD, AND HOW
01:04:45:01  WEB DEVELOPERS ATTEMPTED TO
01:04:46:28  ADDRESS THOSE SHORTCOMINGS.
01:04:49:10  ALONG THE WAY, I'LL SHOW YOU HOW
01:04:52:07  WEBSOCKETS TOOK A CONCEPT AND
01:04:54:04  ADAPTED IT FOR THE WEB TO ENABLE
01:04:56:19  NEW KINDS OF WEB APPLICATIONS TO
01:04:58:01  BE BUILT.
01:05:04:04  SO HERE'S A DIAGRAM THAT SHOWS
01:05:07:13  HOW HTTP WORKS.
01:05:09:16  HOW MANY HERE HAVE USED HTTP,
01:05:12:10  UNDERSTAND HOW IT WORKS?
01:05:13:16  OKAY, GOOD.
01:05:14:07  THAT'S GOOD BACKGROUND FOR THIS
01:05:15:19  TALK.
01:05:15:28  SO TO QUICKLY OVERVIEW, OR
01:05:18:28  REVIEW RATHER, YOU HAVE WEB
01:05:21:07  SERVERS WHICH HOST THE STATIC
01:05:24:22  HTML PAGES AND AID KEYED THAT
01:05:26:13  MAKES UP THE WEB APPLICATION,
01:05:28:04  AND THEN YOU HAVE BROWSERS WHICH
01:05:29:16  ARE CLIENTS THAT TALK TO THE WEB
01:05:31:01  SERVER USING HTTP TO RETRIEVE
01:05:35:04  CONTENT TO SHOW USERS VIA THE
01:05:37:01  WEB BROWSER.
01:05:37:25  HERE'S AN EXAMPLE OF WHAT A
01:05:40:28  TYPICAL GET REQUEST IN HTTP
01:05:43:19  LOOKS LIKE.
01:05:44:10  YOU CAN SEE THAT THE -- THE
01:05:46:07  BASIC REQUEST IS THE VERB, GET,
01:05:48:19  AND THE ARGUMENT, IN THIS CASE
01:05:50:28  SLASH, AND THEN WE HAVE A WHOLE
01:05:53:19  BUNCH OF OTHER INFORMATION IN
01:05:55:01  THIS REQUEST THAT ARE HEADERS
01:05:57:04  THAT GO ALONG WITH THE REQUEST.
01:05:59:25  AND YOU CAN SEE FROM JUST THE
01:06:02:04  EXCERPT UP HERE THAT MOST OF AN
01:06:04:28  HTTP REQUEST IS ACTUALLY THE
01:06:06:22  HEADERS AND NOT THE ACTUAL
01:06:08:16  ACTION THAT WE'RE TRYING TO DO.
01:06:10:01  THIS IS IMPORTANT FOR LATER.
01:06:14:01  SO TO CONTINUE WITH THE
01:06:20:25  BACKGROUND, THE WEB WAS
01:06:23:28  ORIGINALLY CREATED BY TIM
01:06:25:22  BERNERS-LEE TO SHARE STATIC
01:06:28:10  ACADEMIC DOCUMENTS, AND SO THIS
01:06:30:04  BASIC MODEL WHERE A CLIENT
01:06:31:19  REQUESTS A PAGE, OPENS A
01:06:33:07  CONNECTION TO DO THAT, AND GETS
01:06:34:25  A PAGE BACK, WORKED REALLY WELL
01:06:36:25  TO SHARE ACADEMIC DOCUMENTS.
01:06:38:19  BUT AS TIME WENT ON, PEOPLE
01:06:42:04  WANTED TO CREATE ACTUAL SOFTWARE
01:06:43:28  PROGRAMS WHERE MOST OF THE WORK
01:06:45:04  WAS DONE ON THE SERVER AND THE
01:06:46:22  BROWSER JUST ACTS AS A THIN
01:06:50:01  CLIENT, RETRIEVING NEW DATA AND
01:06:52:01  RENDERING IT TO THE USER.
01:06:53:22  SO THERE ARE A NUMBER OF REASONS
01:06:55:10  TO WANT TO DO THIS, SUCH AS NOT
01:06:57:22  WANTING TO SEND NEW UPDATES TO
01:07:00:19  THE USERS'S COMPUTERS.
01:07:02:16  YOU CAN CREATE INTERACTIVE
01:07:04:04  APPLICATIONS.
01:07:04:19  THE MAIN WRENCH IS THAT EVERY
01:07:06:19  TIME SOME INTERACTION HAPPENS,
01:07:08:10  SAY, A USER CLICKS ON A LINK OR
01:07:10:25  A BUTTON OR THE APP WANTS TO
01:07:12:16  REFRESH THE PAGE TO UPDATE THE
01:07:14:10  INFORMATION BEING DISPLAYED, IT
01:07:16:04  HAS TO INITIATE AN ENTIRELY NEW
01:07:18:25  HTTP CONNECTION TO THE SERVER,
01:07:20:19  SEND IT THE REQUEST, AND RECEIVE
01:07:22:10  A RESPONSE.
01:07:24:04  AND AS I SHOWED ON THE PREVIOUS
01:07:26:22  SLIDE, IT TURNS OUT THAT A
01:07:29:07  LOT -- THERE'S A LOT OF DATA
01:07:30:19  BEING SENT IN EVERY HTTP
01:07:33:16  REQUEST.
01:07:33:25  THE AVERAGE HTTP HEADER REQUEST
01:07:38:16  IS ACTUALLY ABOUT 800 BYTES.
01:07:43:10  SO THIS SLIDE PREVIOUSLY SHOWS A
01:07:45:25  REALLY BASIC REQUEST, BUT MORE
01:07:47:19  COMPLEX REQUESTS CONTAIN EVEN
01:07:49:13  MORE HEADERS SUCH AS COOKIES
01:07:52:13  WHICH ARE ACTUALLY SENT ON EVERY
01:07:53:22  SINGLE HTTP REQUEST.
01:07:55:16  SO WHEN WE CREATE WEB APPS USING
01:08:06:07  PLAIN OLD HTTP, BUT ONCE YOU
01:08:09:01  START TO TRYING TO DO THINGS
01:08:11:28  THAT ARE MUCH MORE INTERACTIVE,
01:08:14:25  YOU START TO RUN INTO THE
01:08:16:01  PROBLEM THAT THIS MODEL IS VERY
01:08:17:28  SLOW.
01:08:18:10  WE COULD REFRESH THE PAGE EVERY
01:08:19:28  TIME WE WANTED TO USERS TO
01:08:21:19  INTERACT WITH THE SITE.
01:08:23:16  BUT IT TAKES A LONG TIME.
01:08:25:28  EVEN IN THE BEST CASE SCENARIO,
01:08:27:25  WE'RE LIMITED BY THE SPEED OF
01:08:29:04  LIGHT.
01:08:29:22  SO BETWEEN BOSTON AND
01:08:31:01  SAN FRANCISCO, IN THE BEST CASE,
01:08:33:07  LIGHT TAKES ABOUT 40
01:08:35:10  MILLISECONDS TO GO BACK AND
01:08:38:16  FORTH, AND IN A MORE AVERAGE
01:08:40:16  CASE, YOU'RE LOOKING AT MORE
01:08:42:04  LIKE 80 MILLISECONDS, PLUS MORE
01:08:44:07  TIME TO TRANSFER ANY DATA WHICH
01:08:46:04  INCLUDES THOSE HTTP HEADERS,
01:08:48:13  WHICH ARE REALLY BIG, AND ALSO
01:08:50:10  TIME TO BOOTSTRAP THE TCP
01:08:52:28  CONNECTION.
01:08:53:10  SO IF YOU'RE GONNA TRANSFER A
01:08:54:16  LOT OF DATA USING TCP, YOU HAVE
01:08:57:10  TO BOOTSTRAP THE CONNECTION OVER
01:08:58:28  A COUPLE OF BACK-AND-FORTHS TO
01:09:00:19  INCREASE THE WINDOW SIZE.
01:09:01:25  SO DEVELOPERS TRIED TO WORK
01:09:06:13  AROUND THESE PROBLEMS IN A
01:09:07:25  NUMBER OF DIFFERENT WAYS.
01:09:08:28  ONE OF THE FIRST WAYS WAS THIS
01:09:11:10  METHOD THAT ENDED UP BEING
01:09:13:04  CALLED AJAX, ASYNCHRONOUS
01:09:16:01  JAVASCRIPT.
01:09:21:10  YOU WIRE THAT PIECE OF
01:09:23:01  JAVASCRIPT UP TO A BUTTON THAT
01:09:24:28  YOU WANT TO TALK TO THE SERVER,
01:09:26:13  AND IT CAN GET THE RESPONSE AND
01:09:29:13  THEN POTENTIALLY UPDATE A SUBSET
01:09:31:16  OF THE CURRENT PAGE WITH NEW
01:09:32:28  DATA.
01:09:33:16  SO THIS ALLOWS US TO UPDATE
01:09:36:16  PAGES WITHOUT COMPLETELY
01:09:38:01  REFRESHING THEM, BUT IT STILL
01:09:39:19  HAS TO CREATE ANOTHER HTTP
01:09:41:19  CONNECTION, INCLUDING OPENING A
01:09:43:10  NEW TCP CONNECTION TO THE
01:09:45:25  SERVER, EVERY TIME IT WANTS TO
01:09:48:28  SEND DATA BACK AND FORTH.
01:09:51:01  CLIENTS CAN USE AJAX TO PULL A
01:09:53:28  WEB SERVER TO UPDATE PAGES AS
01:09:56:19  WELL.
01:09:59:13  SO THIS WAS AN IMPROVEMENT ON
01:10:07:13  THE SIMPLE MODEL WHERE YOU JUST
01:10:10:25  SEND AND GET REQUESTS AND GET
01:10:13:01  THE RESPONSE BACK, RELOADING THE
01:10:15:10  WHOLE PAGE, BUT IT DIDN'T
01:10:17:04  FUNDAMENTALLY CHANGE THE MODEL
01:10:19:16  OF HOW WEB APPLICATIONS
01:10:21:04  OPERATED.
01:10:21:19  ONE PROBLEM WAS THAT IF
01:10:23:10  COMPUTATION WAS HAPPENING ON THE
01:10:25:22  SERVER AND THE CLIENT WANTED TO
01:10:27:22  KEEP IT UPDATED, IT HAD TO PULL
01:10:30:10  OR KEEP CHECKING IN AND CREATE A
01:10:33:01  NEW CONNECTION EVERY TIME.
01:10:35:04  SO ANOTHER LIMITATION THAT WEB
01:10:36:13  APPS HAD COMPARED TO, SAY, A
01:10:38:16  DESKTOP APPLICATION WAS THAT UP
01:10:40:22  UNTIL THIS POINT IN TIME, THE
01:10:42:10  COMMUNICATION BETWEEN THE CLIENT
01:10:43:10  AND SERVER WAS FUNDAMENTALLY
01:10:45:10  ONE-WAY.
01:10:47:16  SO WEB DEVELOPERS ARE REALLY
01:10:52:01  SMART PEOPLE, AND THEY CAME UP
01:10:54:07  WITH A WAY TO WORK AROUND THIS
01:10:55:19  AS WELL.
01:10:56:04  THE THING THEY CAME UP WITH NEXT
01:11:00:25  WAS A MODEL CALLED COMET, OR
01:11:04:04  SOMETIMES LONG-PULLING.
01:11:05:19  THIS INVOLVED KEEPING A
01:11:06:28  LONG-LIVED HTTP CONNECTION OPEN
01:11:09:01  UNTIL A TIMEOUT EXPIRES OR THE
01:11:10:22  SERVER HAS SOME DATA TO RETURN
01:11:12:13  TO THE CLIENT.
01:11:12:28  THE CLIENT THEN OPENS ANOTHER
01:11:14:13  HTTP CONNECTION TO THE SERVER
01:11:16:10  AND CONTINUES TO WAIT FOR DATA.
01:11:18:22  SO THIS WORKED PRETTY WELL
01:11:21:19  ACTUALLY.
01:11:22:04  BUT THERE WAS ONE CASE THAT WAS
01:11:24:19  LEFT WHERE IT STILL DEGRADED,
01:11:26:10  AND THAT'S IF THE APPLICATION
01:11:27:25  NEEDED TO PASS DATA OR MESSAGES
01:11:30:01  BACK AND FORTH FROM THE CLIENT
01:11:31:28  TO THE SERVER AT A REALLY HIGH
01:11:34:04  INTERVAL.
01:11:34:19  SO THIS IS AN ACTUAL CODE
01:11:38:22  FROM -- QUOTE FROM ONE OF THE
01:11:41:19  WEBSOCKETS RFCS, AND IT SAYS,
01:11:44:04  "HISTORICALLY, CREATING WEB
01:11:46:10  APPLICATIONS THAT NEEDED
01:11:47:07  BIDIRECTIONAL COMMUNICATION
01:11:48:10  BETWEEN A CLIENT AND SERVER,
01:11:50:13  E.G., GAMING AND INSTANT
01:11:52:07  MESSAGING APPLICATIONS, HAS
01:11:54:04  REQUIRED AN ABUSE OF HTTP TO
01:11:56:13  POLL THE SERVER FOR UPDATES
01:11:56:13  WHILE SENDING UPSTREAM
01:11:56:13  NOTIFICATIONS AS DISTINCT HTTP
01:11:59:19  CALLS."
01:12:00:01  SO IT'S RIGHT THERE IN THE RFC,
01:12:04:10  WHY WE NEEDED TO COME UP WITH
01:12:06:01  SOMETHING THAT WAS DIFFERENT.
01:12:06:28  OH, OOPS.
01:12:10:01  THAT'S NOT RIGHT.
01:12:11:19  IN ORDER TO BE ABLE TO IMPLEMENT
01:12:23:25  PROPER REAL-TIME APPLICATIONS,
01:12:26:01  APPS THAT WERE SENDING SMALL
01:12:27:28  MESSAGES BACK AND FORTH BETWEEN
01:12:29:13  CLIENT AND SERVER OFTEN, WE
01:12:30:28  REALLY NEEDED A PROTOCOL THAT
01:12:33:28  ALLOWED-TWO WAY COMMUNICATION
01:12:36:19  WITH LOW LATENCY, AND THAT'S
01:12:39:04  WHERE WEBSOCKETS CAME IN.
01:12:40:13  SO NOW YOU HAVE SOME HISTORICAL
01:12:47:10  CONTEXT.
01:12:48:01  LET'S TALK ABOUT HOW THE
01:12:49:13  WEBSOCKETS PROTOCOL ACTUALLY
01:12:51:01  WORKS NOW SO WE CAN BETTER
01:12:52:19  UNDERSTAND HOW IT EVOLVED AND
01:12:54:13  HOW IT ALLOWS DIFFERENT KINDS OF
01:12:56:07  APPS TO EXIST ON THE WEB.
01:12:57:16  IN ORDER TO DO THIS, WE HAVE TO
01:13:01:10  TAKE A LOOK AT ANOTHER PIECE OF
01:13:02:25  COMPUTING HISTORY.
01:13:04:04  OR WHAT THE WORD "SOCKET"
01:13:07:01  ACTUALLY MEANS IN A COMPUTING
01:13:09:19  CONTEXT ANYWAY.
01:13:10:19  IN THE 1970s, WHEN UNIX WAS
01:13:14:19  DEVELOPED, PART OF THE OPERATING
01:13:16:01  SYSTEM API THAT BRIAN
01:13:17:10  KERNIGHAN -- CONTAINED AN API
01:13:23:04  CALLED A SOCKET.
01:13:24:07  I HAVE NO IDEA WHY THEY CALLED
01:13:26:01  IT THIS.
01:13:26:13  AND I ASKED THE INTERNET, AND NO
01:13:28:10  ONE KNEW EITHER.
01:13:30:01  SO WHO KNOWS.
01:13:31:04  SO UNIX DOMAIN SOCKETS WERE USED
01:13:34:10  FOR LOCAL INTERPROCESS
01:13:35:22  COMMUNICATION, OR IPC, ON A
01:13:38:10  SINGLE SERVER.
01:13:39:19  YOU WOULD MAKE A CALL TO THE
01:13:43:04  SOCKET CALL, AND THEN YOU GET A
01:13:44:22  FILE DESCRIPTOR, YOU COULD USE
01:13:46:19  TO COMMUNICATE BETWEEN
01:13:48:01  PROCESSES.
01:13:48:19  THE SOCKET WAS A BIDIRECTIONAL
01:13:50:13  LINK BETWEEN TWO DIFFERENT
01:13:51:25  PROGRAMS WHICH IT COULD USE TO
01:13:53:16  SEND MESSAGES BACK AND FORTH.
01:13:56:10  IF YOU USED THE SOCKET SYSCALL
01:13:58:01  IN LINUX, YOU CAN ALSO USE IT TO
01:14:00:25  CREATE A SOCKET THAT GOES ACROSS
01:14:02:04  THE NETWORK.
01:14:02:22  SO YOUR PROGRAM ON A LOCAL
01:14:04:04  COMPUTER CAN OPEN UP A SOCKET TO
01:14:06:19  A GAME SERVER, AND THE GAME
01:14:08:04  SERVER CAN SEND THE PROGRAM
01:14:09:16  UPDATES OR VICE VERSA.
01:14:11:22  SO THE LINUX SOCKET API IS
01:14:17:04  REALLY SUPER SIMPLE.
01:14:18:16  IT CONSISTS OF THREE SYSCALLS:
01:14:21:10  SOCKET, WHICH CREATES THE SOCKET
01:14:23:19  DESCRIPTOR; AND THEN THERE'S
01:14:25:01  SEND AND RECEIVE, WHICH WERE
01:14:26:22  USED TO PASS MESSAGES BACK AND
01:14:28:28  FORTH.
01:14:29:28  I BRING ALL THIS UP BECAUSE IT
01:14:33:10  TURNS OUT THAT YOU CAN THINK OF
01:14:35:04  WEBSOCKETS AS BASICALLY UNIX
01:14:37:10  SOCKETS FOR WEB APPLICATIONS.
01:14:39:19  THE WEBSOCKETS PROTOCOL AND API
01:14:43:10  WERE INTRODUCED AS A PART OF THE
01:14:45:22  HTML 5 SPECIFICATION, BUT THEY
01:14:47:07  WERE EVENTUALLY SPLIT OUT IN
01:14:50:16  ORDER TO KEEP HTML 5 SIMPLER.
01:14:52:16  BEFORE WEBSOCKETS, THERE WERE
01:14:58:19  SOME WAYS TO OPEN UP SOCKETS IN
01:15:01:07  WEB APPLICATIONS, BUT THERE WAS
01:15:02:25  NO STANDARD API FOR IT.
01:15:04:25  YOU HAD TO USE A NONSTANDARD
01:15:06:22  BROWSER EXTENSION LIKE FLASH IN
01:15:08:04  ORDER TO DO IT.
01:15:08:28  THE WEB SOCKET SPEC MADE THE
01:15:12:10  IDEA OF USING WEBSOCKETS
01:15:13:16  STANDARD AND ALSO DEALT WITH
01:15:15:13  PROBLEMS UNIQUE TO WEB
01:15:17:07  APPLICATIONS TRYING TO USE
01:15:18:10  SOCKETS LIKE DEALING WITH
01:15:19:16  FIREWALLS AND PROXIES.
01:15:21:13  SO THE THINGS LAID OUT IN THE
01:15:23:13  WEBSOCKETS ARE -- WITH HOW THE
01:15:26:25  WEBSOCKETS API WORKS AND THE
01:15:29:01  PROTOCOL WORKS WERE SPECIFICALLY
01:15:31:16  DESIGNED TO MAKE IT EASY TO USE
01:15:33:10  SOCKETS USING EXISTING WEB
01:15:35:28  INFRASTRUCTURE.
01:15:36:10  SO FOR EXAMPLE, IT'S A PROBLEM
01:15:37:19  TO USE SOCKETS ON DIFFERENT
01:15:39:01  PORTS THAN PORT 80 OR PORT 443
01:15:42:16  BECAUSE PROXIES AND FIREWALLS
01:15:44:13  WILL ACTUALLY DROP TRAFFIC OR
01:15:46:04  BLOCK TRAFFIC TO THESE PORTS.
01:15:47:22  SO WEBSOCKETS WERE SPECIFICALLY
01:15:50:28  DESIGNED TO BE
01:15:51:22  BACKWARDS-COMPATIBLE WITH THIS
01:15:54:04  INFRASTRUCTURE.
01:15:54:13  SO WEBSOCKETS MAKE REAL-TIME
01:16:02:10  APPS POSSIBLE ON THE WEB, BUT
01:16:04:22  WHAT'S A REAL-TIME APP?
01:16:08:13  BASICALLY THAT MEANS ANYTHING
01:16:11:13  LIVE UPDATING AT HIGH FREQUENCY.
01:16:13:16  FOR EXAMPLE, GAMES, STOCK
01:16:15:07  TICKERS, CHAT PROGRAMS.
01:16:16:28  THE CHAT PROGRAM SLACK, FOR
01:16:20:13  EXAMPLE, USES WEBSOCKETS TO
01:16:22:10  CONNECT FROM THE WEB BROWSER
01:16:23:16  CLIENT TO THE SERVER.
01:16:25:01  SO NOW I WANT TO TAKE A LOOK AT
01:16:32:28  A SUPER SIMPLE WEBSOCKETS
01:16:34:16  EXAMPLE USING PYTHON.
01:16:35:16  ALL RIGHT.
01:16:37:19  THERE WE GO.
01:16:41:01  UH... NOT THIS ONE.
01:16:46:28  WE WANT THIS ONE.
01:16:48:01  OKAY.
01:16:50:19  HOPEFULLY YOU GUYS CAN SEE THAT
01:16:52:13  OKAY.
01:16:52:22  SO... SO I'VE CREATED A LITTLE
01:17:08:07  EXAMPLE HERE USING THE
01:17:09:22  WEBSOCKETS LIBRARY, WHICH IS A
01:17:12:04  PYTHON 3 ONLY LIBRARY THAT IS
01:17:16:19  BUILT USING ASYNCIO.
01:17:24:04  SO LET'S TAKE A REALLY QUICK
01:17:26:16  LOOK AT THIS CODE.
01:17:27:28  YOU CAN SEE THAT IT CONSISTS OF
01:17:29:04  A SINGLE FUNCTION.
01:17:30:19  AND BASICALLY USES THIS
01:17:34:10  WEBSOCKETS LIBRARY TO SERVE THAT
01:17:35:13  SINGLE FUNCTION ON LOCAL HOSTS
01:17:38:16  ON THIS PORT 8765.
01:17:42:04  AND THEN IT JUST RUNS IN A LOOP
01:17:44:07  FOREVER AND SERVES THIS FUNCTION
01:17:45:13  TO EVERY CONNECTION THAT
01:17:47:16  CONNECTS TO THIS PORT.
01:17:52:07  >> [ Inaudible ]
01:17:53:04  >> SURE.
01:17:53:22  I THINK I'M GONNA, LIKE, DO IT
01:17:57:07  HERE, OR, LIKE, MAKE A NEW
01:17:59:16  TERMINAL.
01:18:00:16  UM... IT'S REALLY ANNOYING TO
01:18:11:28  BRING THINGS UP IN VIM, BECAUSE
01:18:15:16  THE COLOR SCHEME IS TERRIBLE ON
01:18:17:25  A PROJECTOR.
01:18:35:16  OKAY.
01:18:35:28  I DON'T WANT, LIKE, SPEND TOO
01:18:37:16  MUCH TIME FIDDLING AROUND WITH
01:18:41:28  THIS.
01:18:42:10  SORRY.
01:18:43:01  I CAN DO, LIKE, THIS.
01:18:45:01  HERE, OR, OOPS.
01:18:46:22  MAKE IT BIGGER.
01:18:48:25  [ Applause ]
01:18:50:13  SUCCESS!
01:18:53:01  YOU DON'T GET SYNTAX
01:18:56:04  HIGHLIGHTING NOW, THOUGH.
01:18:57:22  BUT THERE'S NOT A LOT OF CODE
01:19:00:01  HERE, SO YOU DON'T REALLY NEED
01:19:01:16  THE HIGHLIGHTING.
01:19:02:13  BASICALLY THIS USES THE "YIELD
01:19:04:25  FROM" EXPRESSION FROM PYTHON 3.
01:19:08:13  TO MAKE THIS ASYNCHRONOUS.
01:19:14:07  AND THIS IS THE CLIENT, RIGHT?
01:19:15:28  SO THE CLIENT -- I WAS LOOKING
01:19:17:28  AT THE SERVER BEFORE, BUT THE
01:19:19:16  CLIENT WILL CONNECT TO THE
01:19:20:16  SERVER RIGHT HERE, SO WEBSOCKETS
01:19:24:04  URLs LOOK LIKE WEBSOCKETS,
01:19:28:01  COLON, SLASH, SLASH.
01:19:29:25  THEN YOU'LL DO WEBSOCKET.SEND TO
01:19:32:28  SEND A MESSAGE.
01:19:34:10  AND THEN IN THE SERVER, YOU CAN
01:19:42:13  ACTUALLY SEE THAT IT DOES
01:19:46:16  WEBSOCKET.RECEIVE TO RECEIVE A
01:19:49:22  MESSAGE.
01:19:51:10  SO THIS IS EXACTLY THE SAME API
01:19:53:22  AS WE SAW ON THE LINUX SOCKET
01:19:55:25  API.
01:19:56:19  IT'S CREATE A WEB SOCKET.
01:19:59:10  SEND AND RECEIVE.
01:20:00:10  SUPER SIMPLE.
01:20:02:25  AND ACTUALLY WANT TO SHOW YOU
01:20:07:07  GUYS THIS RUNNING.
01:20:08:07  SO I CAN FIRE UP A SERVER.
01:20:13:04  OH, OOPS.
01:20:14:13  VIRTUAL M... OKAY.
01:20:17:04  SO NOW THE SERVER'S RUNNING.
01:20:18:25  AND THEN I WANT TO MAKE THIS
01:20:21:19  BIGGER.
01:20:22:04  SO THEN WE CAN FIRE UP THE
01:20:30:01  CLIENT AND SAY, HI, MY NAME IS
01:20:32:10  SPANG.
01:20:32:22  AND IT SAYS HELLO.
01:20:34:10  AND THEN WE CAN GO BACK TO THE
01:20:36:19  SERVER AND SEE IT ALSO SAYS
01:20:38:10  HELLO.
01:20:38:19  SO IF THIS WERE A BETTER DEMO, I
01:20:41:07  WOULD DO LOTS OF THESE IN
01:20:43:07  PARALLEL, AND YOU COULD SEE THAT
01:20:44:25  IT WOULD JUST SEND THIS AT THE
01:20:46:10  SAME TIME.
01:20:46:19  BUT THIS IS A SUPER SIMPLE
01:20:50:13  EXAMPLE.
01:20:50:22  AND I WANT TO KEEP IT SUPER
01:20:52:22  SIMPLE BECAUSE I ACTUALLY WANT
01:20:54:01  US TO TAKE A LOOK AT WHAT ACTUAL
01:20:56:16  TRAFFIC IS GOING OVER THE WIRE.
01:20:57:28  SO YOU CAN USE A PROGRAM CALLED
01:21:02:04  TCP DUMP TO CAPTURE INTERNET
01:21:05:10  TRAFFIC BETWEEN TWO DIFFERENT
01:21:07:04  SERVERS OR BETWEEN THE SAME
01:21:08:16  SERVER, BETWEEN YOUR LAPTOP AND
01:21:10:13  YOUR LAPTOP.
01:21:12:01  AND I WANT US TO DO THAT RIGHT
01:21:13:13  NOW.
01:21:13:22  SO I'M NOT GONNA RUN, LIKE, THE
01:21:17:10  SUPER LIVE TCP CAPTURE, BUT I'M
01:21:21:01  JUST GONNA SHOW YOU HOW TO DO
01:21:22:16  IT.
01:21:22:28  SO GENERALLY, TO CAPTURE
01:21:24:28  WEBSOCKETS TRAFFIC, YOU'D RUN
01:21:26:19  TCP DUMP, AND IT HAS A LOT OF
01:21:29:13  OBSCURE ARGUMENTS THAT YOU
01:21:32:25  SHOULD READ THE MAN PAGE TO
01:21:34:22  FIGURE OUT WHAT THEY MEAN.
01:21:36:28  YOU WANT TO CAPTURE TCP TRAFFIC
01:21:39:19  AND HTTP TRAFFIC ON THIS
01:21:41:16  SPECIFIC PORT.
01:21:42:07  AND THIS SAYS TO LIKE OUTPUT IT
01:21:44:19  TO THIS DUMP FILE.
01:21:46:25  SO ACTUALLY HAVE THIS DUMP FILE,
01:21:50:28  WEB SOCKET SIMPLE DUMP, WHICH IS
01:21:53:16  A TCP DUMP CAPTURE FILE.
01:21:57:16  AND THEN THERE'S THIS TOOL FOR
01:21:59:07  LOOKING AT WEB TRAFFIC THAT IS
01:22:01:13  CALLED WIRESHARK THAT WE CAN USE
01:22:03:10  TO TAKE A LOOK AT THIS.
01:22:04:28  SO IF I PULL UP THIS DUMP FILE
01:22:08:01  IN WIRESHARK, SO I WANT TO CLEAR
01:22:09:28  THE FILTER HERE FIRST.
01:22:11:04  SO THIS IS A DUMP OF DOING THE
01:22:14:04  SAME INTERACTION THAT WE SAW
01:22:16:07  BEFORE, AND THAT WAS, LIKE,
01:22:19:01  CONNECTING A SIMPLE CLIENT, AND
01:22:23:10  SEEING THE SERVER RESPOND TO IT.
01:22:25:01  SO YOU CAN SEE THAT IT
01:22:30:04  BOOTSTRAPS A TCP CONNECTION,
01:22:32:13  SENDS AN -- ALL RIGHT, WE GOT A
01:22:35:19  TCP CONNECTION.
01:22:36:28  AND THEN IT SENDS AN HTTP
01:22:39:10  REQUEST.
01:22:39:22  SO THIS IS A REALLY IMPORTANT
01:22:41:28  PART OF WEBSOCKETS.
01:22:43:01  IT HAS TO DO WITH THIS WHOLE
01:22:45:19  BACKWARDS-COMPATIBILITY THING
01:22:48:22  THAT I SAID EARLIER.
01:22:51:13  BOOTSTRAPPED OVER HTTP.
01:22:53:16  SO WHEN YOU HAVE A WEBSOCKETS
01:22:54:28  APPLICATION, YOU SEND AN HTTP
01:22:59:01  REQUEST TO START IT, BECAUSE
01:23:00:22  EVERYTHING UNDERSTANDS WHAT HTTP
01:23:02:19  IS AND NOT EVERYTHING
01:23:03:28  UNDERSTANDS WHAT WEBSOCKETS ARE.
01:23:05:25  SO... YEAH, HERE WE GO.
01:23:13:07  SO I WANT TO APPLY A FILTER ON
01:23:15:01  THIS SO WE GET RID OF ALL THE
01:23:18:01  TCP BOOTSTRAPPING PACKETS.
01:23:19:28  YEAH.
01:23:21:19  OOPS.
01:23:24:07  HTTP OR WEBSOCKETS.
01:23:27:07  THERE WE GO.
01:23:29:07  OKAY, COOL.
01:23:30:22  SO THIS IS THE INTERESTING STUFF
01:23:31:22  HERE.
01:23:32:01  SO YOU SEE IT STARTS WITH A GET,
01:23:35:01  SLASH, BOOTSTRAPPING OVER HTTP.
01:23:38:13  THEN YOU CAN SEE THE NEXT PART
01:23:39:25  IS A SPECIAL HTTP STATUS CODE
01:23:43:01  CALLED THE 101 SWITCHING
01:23:45:01  PROTOCOLS.
01:23:45:22  SO 101 SWITCHING PROTOCOLS IS
01:23:48:28  HOW THE SERVER TELLS THE CLIENT
01:23:50:16  THAT WE'RE GONNA SWITCH OVER TO
01:23:52:16  USING WEBSOCKETS INSTEAD OF
01:23:54:19  BASIC HTTP.
01:23:55:28  SO AFTER THAT, WE DIVE INTO THE
01:23:59:04  WEBSOCKETS FRAMES.
01:24:00:13  SO WEBSOCKETS WERE DESIGNED TO
01:24:03:07  BE SUPER MINIMAL, IN THAT THE
01:24:05:16  OVERHEAD PER FRAME IS REALLY
01:24:07:13  SMALL.
01:24:07:25  SO YOU CAN ACTUALLY USE
01:24:11:25  WIRESHARK TO TAKE A LOOK AT THE
01:24:14:22  ACTUAL DATA THAT'S BEING SENT,
01:24:16:13  AND IF YOU SEE HERE, IT'S WEB
01:24:19:28  SOCKETS, AND IT WILL SHOW YOU
01:24:22:28  THE ACTUAL DATA THAT'S IN THIS
01:24:24:16  PACKET.
01:24:24:28  SO THE FIRST THINGS UP AT THE
01:24:26:22  TOP ARE THE PADDING.
01:24:28:07  THIS IS ONE BIT CALLED FIN,
01:24:31:10  WHICH DESIGNATES WHETHER OR NOT
01:24:33:04  THIS IS LIKE THE LAST PACKET.
01:24:34:13  SO IF YOU'RE SENDING A BUNCH OF
01:24:36:16  DATA, YOU'RE GONNA HAVE TO HAVE
01:24:37:25  MULTIPLE FRAMES.
01:24:39:10  SO THIS HAPPENS TO BE A SMALL
01:24:40:28  PACKET, SO IT SAYS... YES, ONE,
01:24:44:01  THIS IS THE END.
01:24:45:10  THEN THERE'S A FEW RESERVED
01:24:48:04  BYTES.
01:24:50:16  THEN THERE'S THIS THING CALLED A
01:24:52:19  MASK.
01:24:53:22  AND THE MASK IS ALSO PART OF WHY
01:24:56:16  WEBSOCKETS ARE COMPATIBLE WITH
01:24:59:04  EXISTING INTERNET
01:25:00:16  INFRASTRUCTURE.
01:25:01:10  SO THE MASK AND THE MASKING KEY
01:25:04:13  ARE USED BY CLIENTS SENDING DATA
01:25:07:01  TO THE SERVER TO OBFUSCATE THE
01:25:10:07  PAYLOAD WHICH MAKES IT LESS
01:25:12:19  LIKELY THAT VARIOUS SERVERS IN
01:25:14:19  THE MIDDLE LIKE BETWEEN VARIOUS
01:25:16:25  DIFFERENT PACKET HOPS WILL MESS
01:25:18:13  WITH THE PAYLOAD AND JUST BREAK
01:25:20:19  EVERYTHING.
01:25:21:01  SO THEN WE ALSO HAVE A PAYLOAD
01:25:26:04  LENGTH SO WE KNOW HOW MANY
01:25:27:13  PACKETS TO EXPECT.
01:25:29:01  AND THEN WE ACTUALLY JUST HAVE
01:25:30:04  THE PACKET OR THE PAYLOAD.
01:25:31:16  AND YOU CAN SEE -- I DON'T KNOW
01:25:34:10  IF THIS IS DECODED.
01:25:35:19  OH, YEAH.
01:25:37:10  SO YOU HAVE THE PAYLOAD HERE,
01:25:38:13  AND THEN YOU HAVE THE PAYLOAD
01:25:40:01  WITH THE MASK APPLIED.
01:25:41:10  SO YOU CAN SEE IT WAS JUST
01:25:43:07  SENDING MY NAME, SPANG.
01:25:44:28  SO THAT'S THE BASICS OF HOW THE
01:25:49:22  PROTOCOL WORKS.
01:25:50:22  SO IT'S SUPER SIMPLE.
01:25:52:10  AND LET'S GO BACK TO THE SLIDES.
01:25:56:04  HERE'S A LITTLE DIAGRAM OF THIS
01:26:03:28  WEB SOCKET PROTOCOL
01:26:05:10  BOOTSTRAPPING PROCESS THAT WE
01:26:06:13  WERE TALKING ABOUT.
01:26:07:13  SO AGAIN, YOU START THE PROCESS
01:26:10:04  USING BASIC HTTP.
01:26:13:07  YOU ISSUE A GET REQUEST.
01:26:15:10  THEN THE SERVER -- WITH
01:26:18:10  CONNECTION UPGRADE.
01:26:20:04  THEN THE SERVER ALSO RESPONDS
01:26:23:10  WITH THIS SPECIAL CODE CALLED
01:26:25:04  HTTP 101 SWITCHING PROTOCOLS.
01:26:29:01  AND THEN THE CONVERSATION CAN
01:26:30:13  CONTINUE FROM THERE, SENDING
01:26:32:22  MESSAGES BACK AND FORTH.
01:26:34:10  EITHER THE CLIENT OR THE SERVER
01:26:36:01  CAN SEND A MESSAGE EITHER WAY AT
01:26:37:28  THAT POINT BECAUSE WE'RE USING
01:26:40:04  WEBSOCKETS AND NOT HTTP.
01:26:42:07  AND THAT CONNECTION WILL BE
01:26:43:07  CLOSED AS SOON AS EITHER THE
01:26:44:16  SERVER OR THE CLIENT CLOSES IT
01:26:46:07  BECAUSE IT'S BIDIRECTIONAL.
01:26:49:01  WE ALREADY TALKED ABOUT THIS,
01:26:54:25  SWITCHING PROTOCOLS.
01:26:55:28  THAT'S HOW IT STARTS UP.
01:26:58:01  OKAY, SO NOW I WANT TO SHOW YOU
01:26:59:22  GUYS AN EXAMPLE THAT'S A BIT
01:27:03:04  MORE REAL WORLD.
01:27:04:07  BACK IN THE DAY WHEN -- I THINK
01:27:05:19  IT WAS, LIKE, 2006 OR 2007 OR
01:27:08:01  SOMETHING LIKE THAT, WHEN
01:27:09:22  WEBSOCKETS WERE SUPER NEW,
01:27:12:01  MOZILLA CREATED THIS GAME CALLED
01:27:14:19  BROWSER QUEST IN ORDER TO
01:27:15:25  DEMONSTRATE HOW WEBSOCKETS WERE
01:27:17:28  INTERESTING AND USEFUL.
01:27:18:28  SO GAMES ARE A REALLY GREAT
01:27:21:13  APPLICATION FOR WEBSOCKETS
01:27:22:19  BECAUSE, YOU KNOW, IF YOUR
01:27:24:10  CHARACTER'S MOVING AROUND, YOU
01:27:25:28  MIGHT WANT TO SEND, LIKE, LITTLE
01:27:27:16  UPDATES ABOUT WHERE THE
01:27:29:10  CHARACTER'S MOVING TO OR IF
01:27:31:01  THERE'S, LIKE, A BATTLE GOING
01:27:32:10  ON, YOU WANT TO SEND THOSE
01:27:33:28  BATTLE COMMANDS AND UPDATE ALL
01:27:35:25  THE OTHER CHARACTERS THAT ARE
01:27:37:01  LOGGED INTO THE SAME SERVER.
01:27:38:22  AND IT'S IMPORTANT TO BE ABLE TO
01:27:40:10  SCALE THESE THINGS TO LARGE
01:27:41:19  SIZES.
01:27:42:10  SO THE AMOUNT OF DATA THAT
01:27:44:07  YOU'RE SENDING OVER THE WIRE CAN
01:27:46:04  BE REALLY IMPORTANT.
01:27:47:13  SO I -- THE BROWSER QUEST GAME
01:27:52:01  WAS A BIT ROTTED, SO I HAD TO
01:27:56:10  FORK IT TO MAKE THIS WORK, SO --
01:27:59:16  >> [ Inaudible ]
01:28:00:13  >> I DID, BUT THEY TOLD ME THAT
01:28:02:16  THEY'RE NOT MAINTAINING IT
01:28:04:13  ANYMORE AND THEY WOULDN'T TAKE
01:28:05:16  IT.
01:28:05:25  SO YOU'LL HAVE TO USE MY FORK IF
01:28:07:16  YOU WANT IT TO WORK.
01:28:08:22  >> [ Inaudible ]
01:28:11:22  [ Laughter ]
01:28:14:25  >> I'M SURE THAT WILL BE A MORE
01:28:17:19  COMPELLING CASE.
01:28:18:10  ALL RIGHT, COOL.
01:28:19:22  SO I HAVE A VM THAT I SET UP
01:28:22:07  THAT'S RUNNING THIS GAME.
01:28:23:13  UNFORTUNATELY, IT'S ALSO -- THE
01:28:25:16  GAME'S ALSO RAN IN NODE.JS.
01:28:28:19  BLAME MOZILLA.
01:28:30:10  SO HERE'S THE GAME SERVER
01:28:32:19  RUNNING IN MY VM.
01:28:34:22  AND THEN I'M GONNA CLOSE THESE
01:28:39:19  ONES THAT I'M NOT USING ANYMORE.
01:28:41:10  I DON'T NEED THAT ONE.
01:28:47:07  I DON'T NEED WIRESHARK ANYMORE
01:28:51:04  EITHER.
01:28:51:25  MAKE IT GO AWAY.
01:28:52:25  OKAY.
01:28:54:07  SO THIS IS THE GAME.
01:28:56:01  AND THEN ACTUALLY WE NEED A WEB
01:28:57:16  BROWSER, WHICH IS OUR CLIENT.
01:28:58:28  SO I THINK I HAVE IT RUNNING ON
01:29:02:19  THIS LOCAL IP ADDRESS HERE.
01:29:05:04  OH, NO.
01:29:06:22  DAMN IT!
01:29:07:19  OKAY.
01:29:09:01  I WANT IT TO START FROM THE
01:29:11:07  BEGINNING.
01:29:11:25  AND I ALSO WANT TO USE THE
01:29:13:22  CHROME DEV TOOLS.
01:29:16:13  ALL RIGHT, CHROME DEV TOOLS ARE
01:29:20:13  AWESOME, BY THE WAY.
01:29:21:22  OKAY.
01:29:23:01  SO WE CONNECT, AND THEN IT ASKS
01:29:25:22  FOR YOUR NAME.
01:29:26:22  SO I'M GONNA SAY SPANG.
01:29:28:25  AND THEN WE CAN JUST HIT PLAY.
01:29:30:25  SO THAT WAS IT.
01:29:32:07  IT WAS CONNECTING TO THE
01:29:33:13  WEBSOCKETS SERVER.
01:29:35:10  AND USUALLY WHEN YOU'RE RUNNING
01:29:37:16  A WEBSOCKETS APPLICATION, YOU
01:29:38:28  RUN IT BEHIND A PROXY LIKE
01:29:41:22  ENGINE X OR APACHE OR WHATEVER.
01:29:44:01  OKAY.
01:29:44:10  SO THEN WHAT I WANT TO LOOK IS
01:29:48:28  THE NETWORK TAB HERE.
01:29:50:07  AND THE INTERESTING PART OF THE
01:29:55:10  CHROME DEV TOOLS, SO THEY HAVE
01:29:57:28  NATIVE SUPPORT FOR DEBUGGING
01:30:00:22  WEBSOCKETS, AND ALL YOU HAVE TO
01:30:02:07  DO IS SCROLL THROUGH THIS REALLY
01:30:03:25  LONG LIST OF RESOURCES LOADING
01:30:05:07  AND FIND THE ONE THAT'S
01:30:06:16  WEBSOCKETS.
01:30:06:25  SO GIVE ME ONE SECOND.
01:30:09:01  WHERE IS THE FILTER, BY THE WAY?
01:30:12:10  ON THE LEFT?
01:30:14:07  WHICH BUTTON?
01:30:16:10  OH, THE SEARCH?
01:30:18:04  THE FUNNEL.
01:30:20:01  OKAY.
01:30:20:28  THANK YOU.
01:30:21:07  101.
01:30:23:10  NO.
01:30:25:16  OH, HERE WE GO.
01:30:29:22  NICE.
01:30:30:07  AWESOME.
01:30:31:25  THANKS FOR THAT TIP, GUYS.
01:30:33:19  OKAY.
01:30:34:25  SO THEN OVER HERE ON THE RIGHT,
01:30:40:01  YOU HAVE THE GENERAL INFORMATION
01:30:40:28  ABOUT THE WEBSOCKETS CONNECTION.
01:30:42:25  AND THEN YOU CAN LOOK AT THE
01:30:44:16  INDIVIDUAL -- BLAH -- THE
01:30:46:19  INDIVIDUAL FRAMES.
01:30:48:01  SO -- OH, THIS IS -- HERE WE GO.
01:30:52:16  THERE YOU GO.
01:30:53:10  SO YOU CAN SEE THAT WHENEVER I
01:30:54:25  CLICK SOMEWHERE, IT IS SENDING
01:30:57:22  SOME DATA BACK TO THE SERVER,
01:30:59:22  AND THEN IF WE GO BACK TO OUR
01:31:02:04  TERMINAL, I CAN ALSO SEE THAT
01:31:04:10  IT'S LIKE SPANG IS MOVING TO
01:31:06:19  39-209.
01:31:10:01  SO IT'S SENDING THESE LISTS OF
01:31:11:28  NUMBERS BACK AND FORTH.
01:31:13:07  SO WE'RE RUNNING OUT OF TIME, SO
01:31:16:22  I'M GONNA TRY TO WRAP THIS UP.
01:31:18:19  BUT THE REALLY INTERESTING THING
01:31:20:16  HERE IS THAT THIS COULD SCALE TO
01:31:23:22  A TON OF CONNECTIONS BECAUSE
01:31:25:13  WE'RE ONLY SENDING TINY LITTLE
01:31:27:07  BITS OF DATA.
01:31:28:13  OKAY.
01:31:29:22  ALL RIGHT.
01:31:30:25  I GOT TO WRAP THIS UP.
01:31:32:07  SO I'M GONNA GO THROUGH, LIKE,
01:31:37:16  TWO SLIDES MORE.
01:31:38:16  SO -- PERFORMANCE.
01:31:42:10  JUST TO REMIND YOU, WEBSOCKETS
01:31:44:07  HAVE OVERHEAD OF LIKE 2 TO 14
01:31:47:07  BYTES COMPARED TO HTTP WHICH IS
01:31:51:04  800 BYTES PER CONNECTION.
01:31:53:13  YOU PROBABLY ONLY NEED TO USE
01:31:55:01  WEBSOCKETS IF YOU NEED TO SCALE
01:31:56:04  YOUR APPLICATION TO A LOT OF
01:31:57:04  CONNECTIONS BECAUSE OTHERWISE IT
01:31:58:25  DOESN'T REALLY MATTER.
01:31:59:19  SO ABOUT 80% OF BROWSERS TODAY
01:32:07:28  HAVE SUPPORT FOR WEBSOCKETS.
01:32:09:28  AND 20% DON'T.
01:32:12:13  SO YOU SHOULD USE A POLYFILL
01:32:15:22  LIBRARY, USUALLY SOCKET.IO, IN
01:32:18:22  ORDER TO NOT MAKE YOUR
01:32:20:16  APPLICATION NOT WORK FOR THOSE
01:32:23:16  APPS.
01:32:24:01  OKAY.
01:32:24:10  ALL RIGHT.
01:32:25:22  SO THAT'S ALL I HAVE FOR YOU
01:32:27:22  FOLKS TODAY.
01:32:28:13  THIS WENT A LITTLE BIT QUICKLY.
01:32:30:28  SO I ALSO HAVE SOME LINKS HERE
01:32:33:28  IF YOU WANT TO LEARN MORE.
01:32:35:04  AND I DIDN'T REALLY GET A CHANCE
01:32:38:13  TO GO INTO SPECIFICS ABOUT WHAT
01:32:40:01  YOU SHOULD USE WITH PYTHON.
01:32:41:25  THERE IS A LIBRARY CALLED FLASK
01:32:45:07  SOCKET.IO WHICH I THINK IS A
01:32:47:13  GOOD CHOICE FOR BUILDING APPS
01:32:49:28  THAT NEED A POLYFILL.
01:32:52:13  THANK YOU.
01:32:52:28  [ Applause ]
01:33:03:01  >> IF YOU HAVE QUESTIONS, I'LL
01:33:04:13  BE OUTSIDE, BECAUSE WE DON'T
01:33:06:10  HAVE ANY MORE TIME RIGHT NOW.
  10

  11

  12

  13

  14

  15

  16

  17

  18

  19

  20

  21

  22

  23

  24

  25
