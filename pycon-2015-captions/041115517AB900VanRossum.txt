  [Applause]
  Hello, everybody.  Glad to see you all.  I have been incredibly inspired by the conference, any idea I had for the keynote was sort of kicked over and changed.  And I want to make mostly interactive but I want to start with a few of the topics that I know are going to come up anyway.  Now I don't want to get too much in this grandpa, tell us again the story you found the potato in the shape of the head of Elvis' head.  I have lots of stories like that they get better every time but better you tell over dinner or beer or something.  Let's first get Python 3 out of the way.  Yes, you should all be using Python 3.  I know that you all want to.
  [Applause]
  But I know it's difficult.  You all have large amounts of Python 2 code in production that you've you have 2.79 you're very proud of that accomplishment you should be.  But the step to Python 3 from there is still phenomenal.  And you have to -- you can't just fix a few little style things and remove a few Ls from long integers.  You have to actually understand your code.  And so, we've given you five more years.
  [Laughter]
  During which you all with your existing motivation will be able to sort of put the work in.  I know how hard the work is because you don't get the satisfaction of, I launched a new feature, no.  I rewrote the aim app in Python 3 I ported it to a new version of Python does it do the same thing?
  Yes.  Does it do exactly the same thing.  Hopefully.  Is it --
  [ laughter ]
  Is it exciting launch?
  No.  But you have to do the work because then your next feature that you launch will go better.  But, if something holds you up -- there are lots of things that still suck in the ecosystem where it comes to Python 3 support.  I'm quoting glyph, I didn't do any research myself and glyph admitted that there were some problems with the methodology.  He looked on Pypi he sort of said, well, there are 55,000 packages there.  And 5,000 of them claim to work with Python 3.  So that's less than 10%.  Those 5,000 include 1,000 most popular download packages.  That's good.  And so glyph showed a typical sort of mid tier application and the reason that it itself could not be ported to Python 3 yet was that it had like seven or eight dependencies all of which are in long tail of those 50,000 packages that haven't been ported yet.  What do you do with those?
  You can sort of go track down the offer and ask for a port to Python 3.  But what happens is often these long sails of packages -- long tails of packages they're like spikes.  Somebody came up with, oh, the ultimate Django picker, I'm piking that, if you wrote the Django picker I'm not trying to pick on you.  You write ultimate Django picker because you're working on a website that needs a date picker, you do the right thing you sort of clean your code up a little bit you make it available as open source.  And, now you're a BDFL of the open source project only 5,000 lines of Python or 5,000 lines of CSS and hundred lines of Python, still.
  You've got -- you get a project, your bug tracker and other -- e-mail addressing people send you features requests.  But you not all that interested.  And then year later maybe you change jobs, you no longer working with Django, you're working with flask or rails or java or you're building hardware or you're happily retired.  Growing grapes.  But your name is still on that Django date package.  How do you think that Django  date package gets ported to high on this 3?
  It doesn't.  Everybody still looking to you as the owner of that package.  To ported to Python 3.  You don't care.  You want to grow grapes.  Well, what should we as a community do?
  Should we getting angry at you because you're no longer maintaining your code?
  I think we should be grateful that you wrote your code and gave it to us otherwise we would have to write the less ultimate date picker.  But it would be nice if when you decide to go grape picking or grape growing, much more lucrative, that you can sort of -- put all these software packages that you own, you can put them in a home where they're being taken good care of by other people.  Or, just sort of put them up for sale.  Or for adoption.  Gently used, not maintenance, needs port to Python 3.  But I've never seen such an announcement.  Occasionally seen hostile forks I've occasionally seen people complain about certain ports not happening.  I've never seen an owner sort of actively search for a new maintainer for a package that they wrote, but they no longer care.  And they care a little bit, because if they wrote ten packages, they sort of put it on their resume.  They say, I wrote ten different pieces of open source, here they are.  They are widely used.
  You can look them up that sort of gives the employer a good bit of confidence.
  That's great.  So, maybe they don't really want to give those packages away completely.  But it would be nice if they could sort of invite a co-owner who then do more work and ported to Python 3.  It's not a big deal, usually.  It's not that hard, you plunk in import 6 you change a few lines here and there, maybe you wrote future, it automates that.  It needs to be done.  Sort of there's a lot of resistance in the community to do this for someone else's package.  And even if you did that, then you still have the problem of, well, how do you advertise?
  You can't put a forwarding line on the original package homepage saying "Please use this new and better package" there's tons of sort of pages with instructions of how to get things done, how to get started with various things.  Still point, even though pillo has long replaced pill.  You sort of -- you have to be in the know so you know that pillo, when it says pill you really should download pillo and install pill first so the dependency is satisfied when you pip install the rest of your application and your dependencies.  But if you go -- if you just sort of follow the old instructions for pill, no where does it say pill is no longer maintained, please go use pillo which is maintained imported to 3.  We need to find a graceful way to encourage owners who are no longer active in their own project because it was essentially a one-time spike and they got benefit from it.  They got that line on their resume and they love your software e-mails.  After their first release.  Maybe they even do regular releases with small features added from contributed patches.  But usually not.  There are plenty of things that were written in 2011 last released in 2012, still work perfectly.  But they're not being ported.  Help those people and encourage them, maybe we should just data mine the entire Pypi database and track down every project that hasn't received at least one new file in the last six months or so.  E-mail all those owners, are you still interested in owning this project?
  Do you need help porting it.  Would it be okay if someone else became a co-owner and sort of put new energy and Python 3 port in your package.  But we have to sort of -- we have to get to the point where there is a model for that.  I mean, there's a model for how you start a project, you have sort of -- you have couple of model, is that are like the lone programmer who has brilliant idea and sort of type, type, type until they have huge piece of software.  Then they release it as open source and it's so tremendously useful that whole community grows around it.  Everybody sort of has that model in mind, but most software actually, most of those Pypi packages don't fall in that category.  They were someone's spike.  Anyway, food for thought.  If there was anything useful in here is probably glyphs, very good conversation with glyph about this topic a couple days ago.  What did I do now?
  Hit the wrong button.  Okay.  Next thing.  Hello?
  How hard can it be?
  The user interface change dollars.  Change.  Okay.  I don't want to say much about this, Sunday afternoon I'm giving big technical talk about pipes, how we work, who was using them, so on.  Just in case if you can't make it or if you are already super worried, Python is not getting types, we're agreeing on a notation for types that people can put in their code if they need types.  And if they need type checking to happen.  There are separate type checkers, there are IDE like Py charm with type annotations.  Such IDEs can do better job of giving you the right suggestions and finding you the right definitions.  Google is converting a large code base from Python 2 to Python 3 for which they need to understand the Python 2 code base and type an know nations play a -- annotations play a role.  There's mypy which started this from my perspective because mypy is off-line type checker that reads the annotations you put in your source code.  And checks that your code is actually consistent with those annotations.  Let's off line tool, you can choose to run that if you don't use mypy or any of those other.  There's no need for you to put type annotations in your code.  If you want to know more read the pep and come to my keynote.  I also want to talk about diversity.  I see a lot of women in the room.
  [Applause]
  Say hi.
  [Applause]
  I recently gave a talk at a Python event in Iraq.  Now, this was over Skype.  So I felt pretty safe.
  [ laughter ]
  But the whole faculty of the computer science college had shown up for this event that one woman had organized.  Where there was -- she was giving a brief introduction to Python and then she had a brief video interview with me over Skype.  After that, they would go off line and discuss Python more.  The point was to introduce Python in that particular college because they were all using java and C++.  The thing that struck me most she send me pictures of the event afterwards.  Half the people in the audience were women.  And they were all wearing head dresses and stuff.  But women go to school in technical fields in large numbers in those countries.  And I think that's -- that was inspiring to me.  Something that was less inspiring to me was that at the language summit Wednesday earlier this week, where all the core developers get together there wasn't a single woman in the room.  And I don't believe we have a single female committer to core Python.  So I want to change that.  I want at least two female core Python Devs in the next year.  And --
  [Applause]
  Thank you.  And I will try to train them myself if that's what it takes.  So come talk to me.
  [Applause]
  But let me tell you what it takes.  Lucas who is a core developer told me the story how he became a core developer, he had eight weeks and he started with submitting a patch for something that he had figured out a complicated fix for a nasty problem.  And he said, well, now the Python committer machine will jump into action and review my patch.  But after five days he hadn't heard anything back.  And I worry that if he had been very patient that after five weeks he probably still wouldn't have heard anything back.  As it was, he sent an e-mail or jumped on the IRC, anyway, soon he was directed to the right IRC channel where he ran in to Raymond, Raymond being the sort of educational tutorial guy that he is, and a very prolific core developer, spent enormous amount of time with Lucas.  At the end of I think three intense weeks of Lucas learning and Raymond mentoring, Raymond took up the sponsor role for Lucas and told the other committers, we need to give Lucas the commit bit.  Enough other committers had by then been confronted  by Lucas that he was aggressively trying to get approved and reviewed.  So he got the committer bit, but that's a pretty intense process.  And I can't promise you that it's going to be any less intense.  So beware of the amount of sort of self motivation and commitment and preexisting knowledge of pretty cranky tools is all useful.  But I'm sure it's possible.  And we're going to do it.  And I have nothing else except Q and A session.
  I don't know how much time we have for Q&A?
  But -- we have ten minutes for Q and A.  I would love the first question to be from a woman or girl.
  >> Hi.  Thanks for your keynote.  So, I'm an experienced community manager in open source and I'm curious about what tools we could help make that would make the new maintainer process easier for core.  Basically, what you just explained about the situation with Lucas and Raymond and so on, sounded like, yes, there's a problem of attention and people who want to become core Devs having motivation to push through some of these user experience, developer experience difficulties.  In your experience, maybe just off the top of your head we can talk about this more later, what tools could we make to make that whole process easier both for the core Devs coming in and for the existing core Devs to help you see new patches direct them to the right people, give good sort of progress bars of expectation to the new Core Devs who are submitting stuff.  Does that question make sense?
  >> That makes total sense.  I think that a bunch of documentation that sort of gives a starter set of problems that a new core Dev might want to try out would be a good way to start.  I think writing these things is not just a matter of writing it then running away.  But writing a document like that then sort of iterating over it every next core developer that actually uses that document, make clarifies things, maybe cuts stuff out that's not interesting or that everyone already knows.  Or splits the document in versions for people in more or less initial experience in certain tools.  I think -- proposals could come out of this of modernizing the tool chain, the workflow that we're using.
  >> Audience: That's what I was thinking about like, is your code review dashboard good enough and so on.
  >> I don't know if it's maintained.
  [Laughter]
  >> Audience: Thank you very much for your keynote.  My name is Chris I have a comment.  Friend of mine and I were discussing this last night and when we talk about the goal of diversity.  I would like us to view the goal as not we need to have more women or we need to have greater diversity because it looks better.  But there is a very wonderful new perspective and refreshing perspective that anybody from a diverse background can bring that we don't have the privilege when we don't have that communication.  And that could change the way that we look at code.  It could change the way that we build tools.  And that sort of a deal.  I'd like for that to be the growing goal.  Is there are perspectives that we are not being privy to.  That we need to open ourselves up to.  So thank you very much for your keynote.  I just wanted to make a comment on that because it's a conversation near and dear to me.
  >> You're absolutely right.
  [ Applause ]
  >> Audience: I had two things.  One was actually along those lines.  I wanted to bring up the fact that we often look at diversity as just women.  But if we look at our development teams, I know there are -- there's a huge exclusion of non-whites.  On teams especially African Americans.  And so I would like all of us to like try to do reach-out in our communities and invite them in and make them feel -- make everyone feel inclusive because I know on the teams that I work on having a diversity of voices really does change the quality of work and the ideas at the table.  But that's not the only thing I wanted to ask about.  Last year I asked you a question on how do we help people get to Python 3 when everyone is learning in Python 2?
  And since then I started writing code in all of Python 3, and so I just had a quick question for the room.  Who here is using Python 3 exclusively?
  Who here is using Python 2 and 3 in some sort of mixed Bash?
  And who here is using Python 2 only?
  Now that's been said.  I just want to say, there's lots of complex code out there.
  It's while it needs special consideration, it's not that hard in some ways to upgrade.  And you should be careful but I don't want anyone to be afraid of it or scared of it.  So you should go home and really try it.  Because in lots of cases, in the cases that I had to deal with at least it wasn't that hard.  That was really a question rather than a comment.
  [ Applause ]
  >> Audience: Hi, I'm Carol.  I've been lurking or participating, I guess, on the core mentorship CPython mailing list for probably about a year and a half.  And it's really not that scary.  People are actually quite positive and quite helpful and it is something that I think people can participate in and I think we can be more diverse.  Selena was actually the one representative at the language summit and it was really great to actually have dinner with her after that and her baby, June.  What I'm hoping is, I have a talk later today but I have spent a lot of time researching how to on-board people and grow developers with both OpenHatch and in my previous jobs and what we've done is I've taken all the research that I've done through the different mailing list, blog posts, information that some of the core developers have shared with me for which I'm grateful for.  PyLadies has put together a jazzy groove guide to contributing to CPython which is like a hitchhikers' guide to Python.  To sprint on it during the sprints.  And perhaps maybe you'd like to join us on the first day.
  [Applause]
  >> Audience: Changes to the process for submitting patches to the core Python language.  I have couple months ago I submitted a small patch to the XML parsing library there was character that wasn't getting encoded, I submitted a patch and watched the thread it was a small problem, but nobody cared.  Patch never got accepted so along the process I was like, wow, I notice a couple of things that could have been done to make it easier on people who don't have the motivation and time of a core developer but do want to help to submit patches so I was just wondering if anyone in the room can you tell us if I wanted to propose a change to the contribution process, what would be the correct forum to propose that change and how would it get discussed by the community then accepted as a change in the process.
  >> I think it's often a good idea to send an e-mail to Python Dev telling people that there's some easy patch up for review that hasn't been reviewed yet.  And explain a little bit in the Python Dev message what the problem is, and how it's being fixed.  But add something like, for more discussion, see the -- see the bug tracker issue.  But sort of all core developers more or less read the Python Dev list.  So they will be pointed to your patch that way.  Very few people scour the bug tracker for new bugs that they should be working on.  So that's one of the main reasons why submitting a bug with a patch is often not enough.  There are some people who try to sort of drawl the bug tracker for -- trawl the bug tracker for some work, some attention and try to find someone who could pay attention to that issue.  In reality there are so many bugs that just don't make progress for other reasons because they are very obscure or don't have a patch or don't have a patch that works for all other use cases.  I say, don't give up.  Be a squeaky wheel on Python Dev.
  >> Audience: Okay, if I wanted to promos a change to the actual contribution process you're saying Python Dev would be the correct place to propose that?
  >> That, too.  If you want to propose a change to the process Python Dev definitely the place.
  >> Thank you.
  >> You're welcome.
  >> We actually discussed this at the language summit the whole development process how long we're taking to reply to stuff I'm in charge of trying to improve our process,  there are two pips, I can't remember the numbers of proposals to actually change the process to make them much easier for core Devs to approve patches or turn around time.
  You can feel free to talk to me I'm in charge of making that decision.  You can also read the Peps at Python.org/pep.  There is --
  >> My name is Bret.
  >> I just like to expand on the invitation to become a core developer, I recently became a core developer, largely on the back of my Windows experience as far as diversity goes we have platform diversity problem in the core development team if you have Windows experience we'd love to hear from you.  If you're able to help at all.  Developing Python in Windows would be very interested to have you come join the team.
  [Applause]
  If you have cloning machine, trick Steve to walk into it.
  [ laughter ]
  Lynn?
  We're done!
  Okay, we're done!
  >> Thank you so much.
